[
  {
    "id": "019b4b0525c12534411ec19514cb8365",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d3018062fe6ba92b7d8299.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "keyword is like const, but instead of declaring a variable you can declare a type: js type myString = string; This might not seem terribly useful on its own, but when coupled with union types it becomes powerful A union type allows you to combine two or more types into one Here's an example: js type stringOrNumber = string | number; Our stringOrNumber type matches values that are a string and values that are a numberYou can then combine your type with other types, like an array:\njs\nconst stuff: stringOrNumber[] = [\"a\", 2, \"c\", 1000];\nYou can also define more strict types that include only specific values:\njs\ntype bot = \"camperchan\" | \"camperbot\" | \"naomi\";\ntype digit = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\nYou could then combine those types to create more specific restrictions on an object:\njs\nconst artificialIntelligence: Record<bot, digit> = { camperchan: 5 }\nThough if you need more control over the structure of an object, chances are you'll reach for our final type: interface Interfaces are effectively classes, but for types They can implement or extend other interfaces, are specifically object types, and are generally preferred unless you need a specific feature offered by a type declaration js\ninterface wowie {\nzowie: boolean;\nmethod: () => void;\n}\nFinally, functions can also be given type signatures In the previous lecture, you saw how to define the type of a particular parameter:\njs\nconst getRandomValue = (array: string[]) => {\nreturn array[Math floor(Math random() * array length)];\n}\nBut you can also define the return type of the function js\nconst getRandomValue = (array: string[]): string => {\nreturn array[Math floor(Math random() * array length)];\n}\nIn this example, we've told TypeScript that the function should return a string If we try to return anything else, TypeScript will provide a compiler error to let us know And that covers the basics of TypeScript's type system It's pretty complex, and has a lot of moving parts, but it can often help to think of it as mirroring JavaScript's types --questions--\n--text--\nWhich of the following is NOT a primitive data type in TypeScript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7237,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d3018062fe6ba92b7d8299.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "3b2800d70fc1b02a15385f586f0fd1c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d3018062fe6ba92b7d8299.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "In this example, we've told TypeScript that the function should return a string If we try to return anything else, TypeScript will provide a compiler error to let us know And that covers the basics of TypeScript's type system It's pretty complex, and has a lot of moving parts, but it can often help to think of it as mirroring JavaScript's types --questions-- --text-- Which of the following is NOT a primitive data type in TypeScript--answers--\nstring\n--feedback--\nPrimitive data types are the most basic data types available in TypeScript number\n--feedback--\nPrimitive data types are the most basic data types available in TypeScript boolean\n--feedback--\nPrimitive data types are the most basic data types available in TypeScript array\n--video-solution--\n4\n--text--\nWhat is the purpose of the unknown type in TypeScript --answers--\nIt allows any type of value to be assigned without type checking --feedback--\nUnlike any, unknown requires type narrowing before specific operations can be performed It indicates that you don't know the type and need to narrow it before use It represents the absence of any type at all --feedback--\nUnlike any, unknown requires type narrowing before specific operations can be performed It represents a type that will never exist --feedback--\nUnlike any, unknown requires type narrowing before specific operations can be performed --video-solution--\n2\n--text--\nWhich keyword is used to declare a custom type in TypeScript --answers--\ninterface\n--feedback--\nThis keyword is used to define a contract for object shapes, not to declare custom types type\ncustom\n--feedback--\nThis is not a valid keyword in TypeScript define\n--feedback--\nThis is not a valid keyword in TypeScript --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7237,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d3018062fe6ba92b7d8299.md",
      "source_type": "git_repo"
    },
    "token_count": 341,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "2cc4e4cfa09cb8797f12bffb405de946",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d301cc87b84eaa42bdcdbe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d301cc87b84eaa42bdcdbe\ntitle: What Is a tsconfig File, and Why Is It Important to Include in Your TypeScript Projects challengeType: 19\ndashedName: what-is-a-tsconfig-file-and-why-is-it-important-to-include-in-your-typescript-projects\n--description--\nTypeScript's compiler settings can be configured to meet your project's needs That configuration lives in a tsconfig json file in the root directory of your project In fact, without it, the compiler will not run unless you pass it command flags directly But what exactly does this file do Well, let's take a look at an example file:\njson\n{\n\"compilerOptions\": {\n\"rootDir\": \" /src\",\n\"outDir\": \" /prod\",\n\"lib\": [\"ES2023\"],\n\"target\": \"ES2023\",\n\"module\": \"ES2022\",\n\"moduleResolution\": \"Node\",\n\"esModuleInterop\": true,\n\"skipLibCheck\": true,\n\"strict\": true\n},\n\"exclude\": [\"test/\"]\n}\nThis seems like a lot So let's break it down The compilerOptions property is going to contain the \"meat\" of your configuration - this is where you control how the TypeScript compiler behaves Looking at that nested object…\nThe rootDir and outDir tell TypeScript which directory holds your source files, and which directory should contain the transpiled JavaScript code The lib property determines which type definitions the compiler uses, and allows you to include support for specific ES releases, the DOM, and more module and moduleResolution effectively work in tandem to manage how your package uses modules - either CommonJS or ECMAScript esModuleInterop allows for smoother interoperability between CommonJS and ES modules by automatically creating namespace objects for imports, making it easier to use modules from different systems together in your TypeScript projects, and the skipLibCheck option skips validating d ts files that aren't referenced by imports in your code And finally we reach the strict mode One might argue that TypeScript isn't truly helpful without this flag enabled, as it toggles quite a few other checks, such as requiring you to properly handle nullable types, or warn when TypeScript can't infer a type and falls back to any Before we finish, a quick note about the top-level exclude property - when you've defined a source directory, you may have TypeScript code outside of that directory which you don't want compiled as part of your production code For example, your test code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4393,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d301cc87b84eaa42bdcdbe.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "246cb41b3d9198b60fd05e86afb96f4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d301cc87b84eaa42bdcdbe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "this flag enabled, as it toggles quite a few other checks, such as requiring you to properly handle nullable types, or warn when TypeScript can't infer a type and falls back to any Before we finish, a quick note about the top-level exclude property - when you've defined a source directory, you may have TypeScript code outside of that directory which you don't want compiled as part of your production code For example, your test codeThe exclude array tells the compiler to ignore these TypeScript files during compilation, but still allows tooling like Intellisense to expose potential issues There are a ton of other compiler options you can explore - over 50 I encourage you to explore the documentation and experiment to find the configuration that works for your project's needs --questions--\n--text--\nWhich property in the tsconfig json file affects how the compiler behaves --answers--\nrootDir\n--feedback--\nThis property is an object containing options for the compiler compilerOptions\nexclude\n--feedback--\nThis property is an object containing options for the compiler lib\n--feedback--\nThis property is an object containing options for the compiler --video-solution--\n2\n--text--\nWhat does the strict option in the tsconfig json file do --answers--\nIt only checks for nullable types --feedback--\nThis option enables various checks, including handling of nullable types It enforces the use of CommonJS modules --feedback--\nThis option enables various checks, including handling of nullable types It toggles several type-checking options It excludes test files from compilation --feedback--\nThis option enables various checks, including handling of nullable types --video-solution--\n3\n--text--\nWhat is the purpose of the exclude array in the tsconfig json file --answers--\nTo specify which files to compile --feedback--\nYou can use this to exclude test code from compilation To list additional libraries to include --feedback--\nYou can use this to exclude test code from compilation To ignore certain files during compilation To define output directories for compiled files --feedback--\nYou can use this to exclude test code from compilation --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4393,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d301cc87b84eaa42bdcdbe.md",
      "source_type": "git_repo"
    },
    "token_count": 414,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f4f23c18591686bdc3ae042db6a0548e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d1ad82cff954a854bcbcaa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d1ad82cff954a854bcbcaa\ntitle: What Is Prop Drilling challengeType: 19\ndashedName: what-is-prop-drilling\n--description--\nProp drilling is the most basic approach to state management in React applications It looks simple, but can get messy quickly, and is very hard to scale Let's look at what prop drilling is, why it's a problem, and a good replacement for it as an application grows Prop drilling is the process of passing props from a parent component to deeply nested child components, even when some of the child components don't need the props For example, say you have three components named Parent, Child, and Grandchild If you want to use some data in the Grandchild component, but it's in the Parent component, you'd need to pass it from the Parent to the Child component, then from the Child to the Grandchild component Or if the data is even further up the chain, the data might have to be passed to the Parent component, too Here, the data I want to display is the string Hello, Prop Drilling It's assigned to the greeting variable in the root App component:\n```jsx\nimport \" /App css\";\nimport Parent from \" /Parent\";\nfunction App() {\nconst greeting = \"Hello, Prop Drilling \";\nreturn ;\n}\nexport default App;\n```\nYou can see the Parent component is also receiving the greeting variable as the value of a greeting prop Here's the Parent component passing it into the Child component as the value of another greeting prop in the Child:\n```jsx\nimport Child from \" /Child\";\nconst Parent = ({ greeting }) => {\nreturn ;\n};\nexport default Parent;\n```\nAnd here's the Child component that passes it to the Grandchild component:\n```jsx\nimport Grandchild from \" /Grandchild\";\nconst Child = ({ greeting }) => {\nreturn ;\n};\nexport default Child;\n```\nAnd finally the Grandchild component receives the greeting and uses it as the content of an h1 element:\n```jsx\nconst Grandchild = ({ greeting }) => {\nreturn {greeting};\n};\nexport default Grandchild;\n```\nIn the browser, you'll see a page with a single h1 element that has the text Hello, Prop Drilling At first, prop drilling might not seem like such a big deal But as your app grows, it gets harder to understand, debug, and maintain",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5680,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d1ad82cff954a854bcbcaa.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "e20af9defd85a5fc26b20bcb01183650",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d1ad82cff954a854bcbcaa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the Grandchild component receives the greeting and uses it as the content of an h1 element: ```jsx const Grandchild = ({ greeting }) => { return {greeting}; }; export default Grandchild; ``` In the browser, you'll see a page with a single h1 element that has the text Hello, Prop Drilling At first, prop drilling might not seem like such a big deal But as your app grows, it gets harder to understand, debug, and maintainIf you need to pass props around, try to keep them all in a single parent component This approach of centralizing all necessary data is called the \"single source of truth\" For instance, say you want to add a new response to go with your greeting, and that you want to use both of them in the Grandchild component Since greeting is already in the App component, it makes sense to put response there, too, and pass both of them down the chain:\n```jsx\nfunction App() {\nconst greeting = \"Hello, Prop Drilling \";\nconst response = \"I'm not here to play \";\nreturn ;\n}\nconst Parent = ({ greeting, response }) => {\nreturn ;\n};\nconst Child = ({ greeting, response }) => {\nreturn ;\n};\nconst Grandchild = ({ greeting, response }) => {\nreturn (\n<>\n{greeting}\n{response}\n</>\n);\n};\nexport default App;\n```\nIn the browser, you'll see a page with an h1 element that has the text Hello, Prop Drilling and an h2 element that has the text I'm not here to play To avoid prop drilling, especially in large, complex applications, consider using the Context API or state management libraries like Redux and Redux Toolkit, Zustand, Recoil, and others You'll learn more about these in the coming lectures --questions--\n--text--\nHow would a prop flow from a parent to a grandchild component --answers--\nBy defining the prop inside the grandchild component --feedback--\nThe prop must go through the child before reaching the grandchild By passing it from parent to child, then from child to grandchild By using the useEffect hook to fetch the prop dynamically --feedback--\nThe prop must go through the child before reaching grandchild By using the useState hook in the grandchild --feedback--\nThe prop must go through the child before reaching grandchild --video-solution--\n2\n--text--\nWhat is prop drilling in React --answers--\nPassing props directly to only the components that need them",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5680,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d1ad82cff954a854bcbcaa.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b4c9ec18f441596c1d8e29a802706490",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d1ad82cff954a854bcbcaa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "before reaching the grandchild By passing it from parent to child, then from child to grandchild By using the useEffect hook to fetch the prop dynamically --feedback-- The prop must go through the child before reaching grandchild By using the useState hook in the grandchild --feedback-- The prop must go through the child before reaching grandchild --video-solution-- 2 --text-- What is prop drilling in React --answers-- Passing props directly to only the components that need them--feedback--\nIt happens when props are passed through multiple levels unnecessarily Using context to share state between components --feedback--\nIt happens when props are passed through multiple levels unnecessarily Passing props from a parent to deeply nested child components Drilling down into component state using hooks --feedback--\nIt happens when props are passed through multiple levels unnecessarily --video-solution--\n3\n--text--\nWhy is prop drilling considered a problem in larger applications --answers--\nIt makes it easier to manage state --feedback--\nToo many props passing through multiple components can make the code messy It improves performance by reducing re-renders --feedback--\nToo many props passing through multiple components can make the code messy It makes the code harder to read, debug, and maintain It eliminates the need for state management libraries --feedback--\nToo many props passing through multiple components can make the code messy --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5680,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d1ad82cff954a854bcbcaa.md",
      "source_type": "git_repo"
    },
    "token_count": 269,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "179e135f16bc5913ed9884461ac169b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5b78609f97400923f7f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f5b78609f97400923f7f\ntitle: What Are State Management Libraries, and When Should You Use Them challengeType: 19\ndashedName: what-are-state-management-libraries-and-when-should-you-use-them\n--description--\nAs your app grows, managing how data flows between components can become complex When starting out, React's useState hook might be sufficient, but as you add features, you might encounter issues with:\nPassing props through components that don't need them, also known as prop drilling\nKeeping data in sync across different parts of your app\nHandling complex updates that affect multiple components simultaneously\nThese and other challenges may arise, which can lead to a codebase that's harder to maintain, debug, and test That's where state management libraries come in – they provide a centralized place where components can get or update the data they need Let's take a look at a few different state management options you have, and when to use them The Context API is a state manager built into React that lets you share state across components without using a third-party library It's a well-established upgrade over the useState hook, so it is perfect for cases like theme toggling or user authentication status However, the Context API does not handle frequent updates well, and can cause unnecessary re-renders, making it less suitable for complex state needs in applications like eCommerce and social media platforms Here's a counter component that demonstrates the basic usage of the Context API:\n```jsx\nimport { useState, createContext } from 'react';\nconst CounterContext = createContext();\nconst CounterProvider = ({ children }) => {\nconst [count, setCount] = useState(0);\nreturn (\n{children}\n);\n};\nexport { CounterContext, CounterProvider };\n```\nThis code creates a context and a provider to share a count state across the application CounterProvider uses the useState hook to initialize and manage the count state and its setter Both are then passed into child components through the Provider So, when you wrap your whole app with the CounterProvider, the count state is available everywhere in your application Here's how you can wrap CounterProvider around your application:\n```jsx\nimport { CounterProvider } from '",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5b78609f97400923f7f.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "5b7962f1709f5e9e3e07059be27e8adc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5b78609f97400923f7f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "This code creates a context and a provider to share a count state across the application CounterProvider uses the useState hook to initialize and manage the count state and its setter Both are then passed into child components through the Provider So, when you wrap your whole app with the CounterProvider, the count state is available everywhere in your application Here's how you can wrap CounterProvider around your application: ```jsx import { CounterProvider } from '/context/CounterContext';\nfunction App() {\nreturn (\n{/ App components /}\n);\n}\nexport default App;\n```\nAnd here's how you can use the count state:\n```jsx\nimport React, { useContext } from 'react';\nimport { CounterContext } from ' /context/CounterContext';\nconst Counter = () => {\nconst { count, setCount } = useContext(CounterContext);\nreturn (\n<>\nContext API Counter\nsetCount(count - 1)}>\nDecrease\n{count}\nsetCount(count + 1)}>\nIncrease\n</>\n);\n};\nexport default Counter;\n```\nAs you can see, the count and its setter function, setCount, are initialized through the useContext function The current count state is then displayed, and setCount is used to increase and decrease the count state when the user clicks the decrement and increment buttons respectively Another popular state management library is Redux, which is one of the most popular state management libraries to use with React It's been around for a long time, and is ideal for larger applications like eCommerce and social media platforms, forums, and so on Redux handles state management by providing a central store and strict control over state updates It uses a predictable pattern with actions, reducers, and middleware Actions are payloads of information that send data from your application to the Redux store, often triggered by user interactions Reducers are functions that specify how the state should change in response to those actions, ensuring the state is updated in an immutable way Middleware, on the other hand, acts as a bridge between the action dispatching and the reducer, allowing you to extend Redux's functionality (for example, logging, handling async operations) without modifying the core flow The most common complaint about Redux is with all the boilerplate code you need to get started In response, the Redux team introduced \"Redux Toolkit\" and \"RTK Query\", which simplify the setup process quite a bit You typically define both actions and reducers in a single file using the createSlice() function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5b78609f97400923f7f.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "0bfecfad2f03c410526a7120c6b53ebf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5b78609f97400923f7f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "bridge between the action dispatching and the reducer, allowing you to extend Redux's functionality (for example, logging, handling async operations) without modifying the core flow The most common complaint about Redux is with all the boilerplate code you need to get started In response, the Redux team introduced \"Redux Toolkit\" and \"RTK Query\", which simplify the setup process quite a bit You typically define both actions and reducers in a single file using the createSlice() functionIt's common to name the file so it ends with the word Slice, for example, productSlice, userSlice, counterSlice, and so on Here's a counterSlice file to show you the basics:\n```jsx\nimport { createSlice } from '@reduxjs/toolkit';\nconst counterSlice = createSlice({\nname: 'counter',\ninitialState: { count: 0 },\nreducers: {\nincrement: (state) => {\nstate count += 1;\n},\ndecrement: (state) => {\nstate count -= 1;\n},\n},\n});\nexport const { increment, decrement } = counterSlice actions;\nexport default counterSlice reducer;\n```\nFrom here, you then need to wrap the entire app with the Provider, select a piece of state from the slice with useSelector(), then use useDispatch() to make the state active Another option to consider is Zustand Zustand is a lightweight state management library with a simple API It is based on hooks, so there's less boilerplate compared to Redux, making it easier and quicker to set up Zustand is ideal for small to medium-scale applications It works by using a useStore hook to access access state directly in components and pages This lets you modify and access data without needing actions, reducers, or a provider Here's a useCounterStore that implements another counter functionality:\n```jsx\nimport { create } from 'zustand';\nconst useCounterStore = create((set) => ({\ncount: 0,\nincrement: () => set((state) => ({ count: state count + 1 })),\ndecrement: () => set((state) => ({ count: state count - 1 })),\n}));\nexport default useCounterStore;\n```\nAnd here's how to initialize and use the states in your app:\n```jsx\n// Import the useCounterStore (it's just a hook)\nimport useCounterStore from '",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5b78609f97400923f7f.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "bf9bfe42791e472043310a7ac976ea0c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5b78609f97400923f7f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a useCounterStore that implements another counter functionality: ```jsx import { create } from 'zustand'; const useCounterStore = create((set) => ({ count: 0, increment: () => set((state) => ({ count: state count + 1 })), decrement: () => set((state) => ({ count: state count - 1 })), })); export default useCounterStore; ``` And here's how to initialize and use the states in your app: ```jsx // Import the useCounterStore (it's just a hook) import useCounterStore from '/useCounterStore';\nconst Counter = () => {\n// Initialize the states with the useCounterStore hook\nconst { count, increment, decrement } = useCounterStore();\nreturn (\n<>\nZustand Counter\ndecrement()}>\nDecrease\n{count}\nincrement()}>\nIncrease\n</>\n);\n};\nexport default Counter;\n```\nEven though the frontend ecosystem is constantly evolving and new state management libraries regularly emerge, the ones we've discussed are widely used in the industry --questions--\n--text--\nWhich of these is a reason to use a state management library --answers--\nTo avoid writing any state logic in your application --feedback--\nThink about the benefits of managing complex state across multiple components and pages To automatically update the UI without re-rendering --feedback--\nThink about the benefits of managing complex state across multiple components and pages To create a consistent and predictable data flow To eliminate the need for props entirely --feedback--\nThink about the benefits of managing complex state across multiple components and pages --video-solution--\n3\n--text--\nWhich of these is NOT a state management library --answers--\nContext API\n--feedback--\nThink about which one is used specifically for API requests Redux\n--feedback--\nThink about which one is used specifically for API requests Zustand\n--feedback--\nThink about which one is used specifically for API requests Axios\n--video-solution--\n4\n--text--\nWhat was a common complaint about Redux, and how was it addressed --answers--\nIt had limited browser support, which was addressed by creating polyfills --feedback--\nThink about the improvements that were made to reduce setup complexity It had performance issues, which were addressed by optimizing its middleware --feedback--\nThink about the improvements that were made to reduce setup complexity It required a lot of complex boilerplate code, which was addressed by Redux Toolkit and RTK Query There was a lack of documentation, which was addressed by adding more examples",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5b78609f97400923f7f.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "46e9be66cac89a2a882abe94c76377cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5b78609f97400923f7f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "It had limited browser support, which was addressed by creating polyfills --feedback-- Think about the improvements that were made to reduce setup complexity It had performance issues, which were addressed by optimizing its middleware --feedback-- Think about the improvements that were made to reduce setup complexity It required a lot of complex boilerplate code, which was addressed by Redux Toolkit and RTK Query There was a lack of documentation, which was addressed by adding more examples--feedback--\nThink about the improvements that were made to reduce setup complexity --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9073,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5b78609f97400923f7f.md",
      "source_type": "git_repo"
    },
    "token_count": 107,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "9b6bc92e460813b6e5a38b0ef8f7884a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d301a5f536d1a9e5df1a8c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d301a5f536d1a9e5df1a8c\ntitle: What Is Type Narrowing, and How Does It Work challengeType: 19\ndashedName: what-is-type-narrowing-and-how-does-it-work\n--description--\nThere are going to be times where you have a value with a broad type and you need to narrow it down to a more specific type For example, maybe you need to ensure an object matches an interface you defined Or a string is within a specific list of values There are quite a few ways to achieve this The first is narrowing by truthiness Consider our example from the last lecture:\njs\nconst email = document querySelector<HTMLInputElement>(\"#email\");\nconsole log(email value);\nWe get a compiler error trying to access the value property of email, because email might be null However, we can use a conditional statement to confirm email is truthy before accessing the property:\njs\nconst email = document querySelector<HTMLInputElement>(\"#email\");\nif (email) {\nconsole log(email value);\n}\nIn this updated example, because null is not a truthy value, TypeScript is able to infer that email MUST be an input element within the conditional block So it no longer throws a compiler error Truthiness checks can also work in the reverse direction:\njs\nconst email = document querySelector<HTMLInputElement>(\"#email\");\nif ( email) {\nthrow new ReferenceError(\"Could not find email element \")\n}\nconsole log(email value);\nWith this approach, we throw an error if email is falsy null is a falsy value Throwing an error ends the logical execution of this code, which means when we reach the console log() call TypeScript knows email cannot be null Optional chaining is also a form of type narrowing, under the same premise that the property access can't happen if the email value is null js\nconst email = document querySelector<HTMLInputElement>(\"#email\");\nconsole log(email value);\nBut what about other types Well, you can also narrow types using the typeof operator Let's look at an example of a variable we have indicated might be a string OR a number:\njs\nconst myVal = Math random() > 0 5 222 : \"222\";\nconsole log(myVal / 10)\nIn this example, we see a compiler error because we cannot perform arithmetic on a string value But we can use a conditional to check the typeof the myVal variable:\njs\nconst myVal = Math random() > 0 5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7600,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d301a5f536d1a9e5df1a8c.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "6ce8899135c6eed211e0e2acd507bd1d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d301a5f536d1a9e5df1a8c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the typeof operator Let's look at an example of a variable we have indicated might be a string OR a number: js const myVal = Math random() > 0 5 222 : \"222\"; console log(myVal / 10) In this example, we see a compiler error because we cannot perform arithmetic on a string value But we can use a conditional to check the typeof the myVal variable: js const myVal = Math random() > 0 5222 : \"222\";\nif (typeof myVal === \"number\") {\nconsole log(myVal / 10);\n}\nBecause we have used the typeof keyword, TypeScript now knows that myVal has to be a number, and we can safely perform arithmetic with it But what about more complex object types If the object in question happens to come from a class, you can actually use the instanceof keyword to narrow the type Going back to our querySelector() example:\njs\nconst email = document querySelector(\"#email\");\nRather than passing a generic type and telling TypeScript what the element is, we can use instanceof to narrow the type and write safer code:\n```js\nconst email = document querySelector(\"#email\");\nif (email instanceof HTMLInputElement) {\nconsole log(email value);\n}\n```\nThis approach may seem the same as our previous one, but instanceof is a runtime validation - which means, if we somehow got the TypeScript type wrong, our JavaScript code will still confirm that email is an input element Next, let's look at an example where we fetch a User object from an API and try to print the information:\n```js\ninterface User {\nname: string;\nage: number;\n}\nconst printAge = (user: User) =>\nconsole log(${user name} is ${user age} years old )\nconst request = await fetch(\"url\")\nconst myUser = await request json();\nprintAge(myUser);\n```\nWe'll get a compiler error trying to pass myUser into the function because, even though we know the API returns the correct object, TypeScript does not And the json() method does not take a generic type The \"easy\" way to resolve this issue would be to cast the type:\n```js\ninterface User {\nname: string;\nage: number;\n}\nconst printAge = (user: User) =>\nconsole log(${user name} is ${user age} years old )\nconst request = await fetch(\"url\")\nconst myUser = await request",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7600,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d301a5f536d1a9e5df1a8c.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "0f3246a78b64220724f9406d3759521e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d301a5f536d1a9e5df1a8c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "pass myUser into the function because, even though we know the API returns the correct object, TypeScript does not And the json() method does not take a generic type The \"easy\" way to resolve this issue would be to cast the type: ```js interface User { name: string; age: number; } const printAge = (user: User) => console log(${user name} is ${user age} years old ) const request = await fetch(\"url\") const myUser = await requestjson() as User;\nprintAge(myUser);\n```\nBut whenever you cast the type, you're essentially weakening TypeScript's ability to catch potential errors So instead of casting the type, you can write a type guard:\n```js\ninterface User {\nname: string;\nage: number;\n}\nconst isValidUser = (user: unknown): user is User => {\nreturn user &&\ntypeof user === \"object\" &&\n\"name\" in user &&\n\"age\" in user;\n}\n```\nThe return type here is the key component of this function definition The user is User syntax indicates that our function returns a boolean value, which when true means the user value satisfies the User interface We then do some basic checks to ensure that the structure of the user object matches - note the use of a truthiness ( user) narrowing and a typeof narrowing We must do this because typeof null returns \"object\":\n```js\ninterface User {\nname: string;\nage: number;\n}\nconst isValidUser = (user: unknown): user is User => {\nreturn user &&\ntypeof user === \"object\" &&\n\"name\" in user &&\n\"age\" in user;\n}\nconst printAge = (user: User) =>\nconsole log(${user name} is ${user age} years old )\nconst request = await fetch(\"url\")\nconst myUser = await request json() as User;\nif (isValidUser(myUser)) {\nprintAge(myUser);\n}\n```\nNow, if we combine all of our logic together, we no longer get compiler errors and can successfully build our code Type narrowing is a powerful feature that helps you write safer, less error-prone code - but remember that TypeScript types are not completely rigid, so avoid practices like casting the type of a value without narrowing it --questions--\n--text--\nWhich of the following is NOT a method of type narrowing discussed in the lecture --answers--\nTruthiness checks --feedback--\nWhile all of these can be used to narrow a type, one of them wasn't mentioned",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7600,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d301a5f536d1a9e5df1a8c.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ea0408d077c750b0506fc050eac18e37",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d301a5f536d1a9e5df1a8c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "our code Type narrowing is a powerful feature that helps you write safer, less error-prone code - but remember that TypeScript types are not completely rigid, so avoid practices like casting the type of a value without narrowing it --questions-- --text-- Which of the following is NOT a method of type narrowing discussed in the lecture --answers-- Truthiness checks --feedback-- While all of these can be used to narrow a type, one of them wasn't mentionedOptional chaining --feedback--\nWhile all of these can be used to narrow a type, one of them wasn't mentioned typeof operator --feedback--\nWhile all of these can be used to narrow a type, one of them wasn't mentioned Switch statements --video-solution--\n4\n--text--\nWhat is the purpose of the user is User syntax in the type guard function --answers--\nIt casts the user parameter to the User type --feedback--\nThink about the word is, and how the phrase user is User works It indicates that the function returns a boolean value --feedback--\nThink about the word is, and how the phrase user is User works It indicated that user satisfies the User interface It creates a new instance of the User interface --feedback--\nThink about the word is, and how the phrase user is User works --video-solution--\n3\n--text--\nWhich of the following is true about type casting in TypeScript --answers--\nIt's the recommended way to resolve type issues --feedback--\nType casting should be done as a last resort It strengthens TypeScript's ability to catch errors --feedback--\nType casting should be done as a last resort It's done using the as keyword It should always be used instead of type guards --feedback--\nType casting should be done as a last resort --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7600,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-introduction-to-typescript\\67d301a5f536d1a9e5df1a8c.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "1fecd78fa14f869268d2d88ea90129d4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5dacd5e0c749e5d534c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f5dacd5e0c749e5d534c\ntitle: How Can You Debug Your React Components Using the React DevTools challengeType: 19\ndashedName: how-can-you-debug-your-react-components-using-react-devtools\n--description--\nThe browser has built-in developer tools you can use to debug HTML, CSS, and JavaScript However, they're not great for finding and fixing bugs in React apps So the React team developed a tool called \"React Developer Tools\" (AKA React DevTools) so you can inspect, debug, and profile React apps React DevTools is available as a browser extension for Chrome, Edge, and Firefox If you're on Chrome or Edge, head over to the Chrome web store, search for \"React Developer Tools”, and add it to your browser And if you use Firefox, head over to the Firefox Add-ons page, search for the tool, and add it to your browser If you use Safari, you can install React DevTools from npm by running npm install -g react-devtools or yarn global add react-devtools After installing and enabling React DevTools, if you open a React app in your browser, then open your browser's developer tools, you should see two extra tabs: Components and Profiler The Components tab displays each component for you in a tree view format With it, you can:\nView the app's component hierarchy Check and modify props, states, and context values in real time Check the source code for each selected component Log the component data to the console Inspect the DOM elements for the component On the other hand, the Profiler tab helps you record and analyze component performance so you can identify unnecessary re-renders, view commit durations, and things you can optimize Here's a simple app to show you how you can inspect components and any props and state they have This is similar to the code we used in a previous lecture on prop drilling:\n```jsx\nimport { useState } from \"react\";\nexport default function App() {\nconst greeting = \"Hello, Prop Drilling \";\nconst response = \"I'm not here to play",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6419,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5dacd5e0c749e5d534c.md",
      "source_type": "git_repo"
    },
    "token_count": 429,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "6e1df67f389fd080993e7a61b3b71af3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5dacd5e0c749e5d534c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "performance so you can identify unnecessary re-renders, view commit durations, and things you can optimize Here's a simple app to show you how you can inspect components and any props and state they have This is similar to the code we used in a previous lecture on prop drilling: ```jsx import { useState } from \"react\"; export default function App() { const greeting = \"Hello, Prop Drilling \"; const response = \"I'm not here to play\";\nreturn ;\n}\nconst Parent = ({ greeting, response }) => {\nreturn ;\n};\nconst Child = ({ greeting, response }) => {\nreturn ;\n};\nconst Grandchild = ({ greeting, response }) => {\nconst [count, setCount] = useState(0);\nreturn (\n<>\n{greeting}\n{response}\n<button onClick={() => setCount(count + 1)}>Increase Count</button>\n<h2>Count: {count}</h2>\n<button onClick={() => setCount(count - 1)}>Decrease Count</button>\n</>\n);\n};\n```\nIf you look in the Components tab in React DevTools, you can see the tree view of the components The App component is at the top, followed by the Parent, Child, and Grandchild components If you select any of these components, you can see the props and state in them If you select the Parent component, you can see the greeting and response props, which are Hello, Prop Drilling and I'm not here to play , respectively You can see the props and update state in real-time, and change them if necessary For instance, you can select the Grandchild component and change the greeting prop from Hello, Prop Drilling to Hello, Welcome to Prop Drilling , and see it reflected on the page immediately To log data in a component to the console, inspect the matching DOM elements and view the source code of the component The icons in the top right corner let you do that If you select the Grandchild component and click the Log the component data to the console button, it will log the props, state, hooks, nodes, and other data in the console A common bug you might encounter in React is called props mismatch For example, say that for the Child component, you mistakenly pass in reply as the prop instead of response:\njsx\nconst Child = ({ greeting, response }) => {\nreturn <Grandchild greeting={greeting} reply={response} />;\n};\nRemember that Grandchild expects a response prop",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6419,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5dacd5e0c749e5d534c.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "68518e039ce069021859dd04d7852b2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5dacd5e0c749e5d534c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Log the component data to the console button, it will log the props, state, hooks, nodes, and other data in the console A common bug you might encounter in React is called props mismatch For example, say that for the Child component, you mistakenly pass in reply as the prop instead of response: jsx const Child = ({ greeting, response }) => { return <Grandchild greeting={greeting} reply={response} />; }; Remember that Grandchild expects a response propBecause the component receives a different prop, it can't display that text on the page, and just adds and empty h2 to the DOM Instead, you'll just see the h1 element with the text Hello, Prop Drilling , along with the other buttons and text already on the page The empty h2 element is still there, but because it's empty, you can't see it without inspecting the DOM To fix this, you can inspect the prop progression from the Parent component down to the Child and edit the prop name directly If you go to the Components tab, select the Child component, and change the reply prop to response, you'll see the h2 element on the page with the text I'm not here to play --questions--\n--text--\nHow can you install React DevTools on Chrome or Edge --answers--\nDownload it from the official React website --feedback--\nYou can find it in the same place as other browser extensions Install it via npm in your project --feedback--\nYou can find it in the same place as other browser extensions Add it as a browser extension It comes pre-installed with React --feedback--\nYou can find it in the same place as other browser extensions --video-solution--\n3\n--text--\nAfter installing React DevTools, which two extra tabs appear in the browser developer tools for debugging React --answers--\nComponents and Profiler Network and Performance --feedback--\nOne tab helps inspect the component tree, while the other analyzes performance Elements and Console --feedback--\nOne tab helps inspect the component tree, while the other analyzes performance Sources and Memory --feedback--\nOne tab helps inspect the component tree, while the other analyzes performance --video-solution--\n1\n--text--\nWhat does the Profiler tab in React DevTools help you analyze --answers--\nNetwork requests in a React app --feedback--\nIt helps track render times and optimize slow components JavaScript memory leaks --feedback--\nIt helps track render times and optimize slow components CSS styling issues",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6419,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5dacd5e0c749e5d534c.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "0cd2c3712f9dc37ebb36d697a4e34d1f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5dacd5e0c749e5d534c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--feedback-- One tab helps inspect the component tree, while the other analyzes performance Sources and Memory --feedback-- One tab helps inspect the component tree, while the other analyzes performance --video-solution-- 1 --text-- What does the Profiler tab in React DevTools help you analyze --answers-- Network requests in a React app --feedback-- It helps track render times and optimize slow components JavaScript memory leaks --feedback-- It helps track render times and optimize slow components CSS styling issues--feedback--\nIt helps track render times and optimize slow components Component performance and re-renders --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6419,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5dacd5e0c749e5d534c.md",
      "source_type": "git_repo"
    },
    "token_count": 122,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "a22c36f4a2599867ff9a486b50665dbb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5f19a0f0b75343f1905.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f5f19a0f0b75343f1905\ntitle: What Are React Server Components, and How Do They Work challengeType: 19\ndashedName: what-are-react-server-components-and-how-do-they-work\n--description--\nReact Server Components (RSCs) is a new trend that has changed the way React developers approach things With RSCs, more work shifts to the server, which has a lot of benefits Let's take a look at what server components are, how they work, and what led to the introduction of server components React Server Components are React components that render exclusively on the server, which sends only the final HTML to the client This means those components can directly access server-side resources and dramatically reduce the amount of JavaScript sent to the browser React apps have traditionally used a \"client component\" system that handles everything in a typical React app, such as rendering, interactivity, and side effects The term \"client component\" was rarely used until the introduction of React server components recently But the client component system comes with some drawbacks like large JavaScript bundles and slower initial load times React frameworks like Next js and Gatsby found workarounds to offload some processes to the server in order to fix those problems, but none of them were standardized If you've used either framework, you've probably heard about getServerSideProps and getServerData Then came React Server Components, which let you run some components entirely on the server so you can do things like data fetching and computation before any code runs in the user's browser Server components were first popularized and are readily available in Next js Other frameworks like Remix and Gatsby are catching up, and there's an experimental plugin for Vite called vite-plugin-react-server which lets you build server components So how do server components work One of the best ways to demonstrate React Server Components is with data fetching In traditional React client components, you let the browser handle API requests Since data fetching is a side effect, you make that API call in a useEffect hook It's also good practice to set state variables like loading, data, and error so you can indicate that the data is loading, display the data when it's ready, or display an error in your app With React Server Components, you can move the entire component to the server and fetch data there without having to use useState or useEffect:\n```jsx\nconst Users = async () => {\nconst res = await fetch(\"https://jsonplaceholder",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7662,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5f19a0f0b75343f1905.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1f76122ec89e831d202607d3dd926b13",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5f19a0f0b75343f1905.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in a useEffect hook It's also good practice to set state variables like loading, data, and error so you can indicate that the data is loading, display the data when it's ready, or display an error in your app With React Server Components, you can move the entire component to the server and fetch data there without having to use useState or useEffect: ```jsx const Users = async () => { const res = await fetch(\"https://jsonplaceholdertypicode com/users\");\nconst users = await res json();\nreturn (\n<>\nUsers\n{users map((user) => (\n{user name}\n))}\n</>\n);\n};\nexport default Users;\n```\nBecause React Server Components only run on the server, you can just fetch data from an API and render just once Also, since data fetching happens on the server, closer to the source, your app may perform better, especially for people with slow network connections Once major gotcha is that all the code for server components remain on the server, and doesn't get shipped to the browser That means you can't use React hooks with them, and they don't have access to Web APIs or browser event listeners So how can you add interactivity In the Next js app router, all components are server components by default If you want to add interactivity, you need to mark the component as a client component with the \"use client\" directive Let's say you want to make the previous example a client component Here's how you can do that:\n```jsx\n\"use client\";\nimport { useState, useEffect } from \"react\";\nconst Users2 = () => {\nconst [status, setStatus] = useState({\nusers: [],\nloading: true,\nerror: null,\n});\nasync function fetchUsers() {\ntry {\nconst res = await fetch(\"https://jsonplaceholder typicode com/users\");\nconst data = await res json();\nsetStatus((prevStatus) => ({ prevStatus,\nusers: data,\nloading: false,\n}));\n} catch (err) {\nsetStatus((prevStatus) => ({ prevStatus,\nerror: err message,\nloading: false,\n}));\n}\n}\nuseEffect(() => {\nfetchUsers();\n}, []);\nif (status loading) {\nreturn Loading Users ;\n}\nif (status error) {\nreturn Error getting users: {status error};\n}\nreturn (\n<>\nUsers\n{status users map((user) => (\n{user",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7662,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5f19a0f0b75343f1905.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d72737705d18f90bc311e57a5e1daffb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5f19a0f0b75343f1905.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "try { const res = await fetch(\"https://jsonplaceholder typicode com/users\"); const data = await res json(); setStatus((prevStatus) => ({ prevStatus, users: data, loading: false, })); } catch (err) { setStatus((prevStatus) => ({ prevStatus, error: err message, loading: false, })); } } useEffect(() => { fetchUsers(); }, []); if (status loading) { return Loading Users ; } if (status error) { return Error getting users: {status error}; } return ( <> Users {status users map((user) => ( {username}\n))}\n</>\n);\n};\nexport default Users2;\n```\nIf you want to add interactivity like click events, the component also has to be marked as a client component:\n```jsx\n\"use client\";\nimport { useState } from \"react\";\nconst Counter = () => {\nconst [count, setCount] = useState(0);\nreturn (\n<>\nCounter\nsetCount(count + 1)}>Increment\n{count}\nsetCount(count - 1)}>Decrement\n</>\n);\n};\nexport default Counter;\n```\nIf you don't add the use client directive to the component, you get an error with a message that says \"You're importing a server component that needs useState This React hook only works in a client component To fix, mark the file (or its parent) with the \"use client\" directive \"\nThe main benefits that come with React Server Components are that data fetching becomes simpler, the code is easier to read, and client complexity is reduced --questions--\n--text--\nWhere do React Server Components run --answers--\nOnly in the browser --feedback--\nThink about how RSCs do not execute in the browser and are used for pre-rendering data On both the client and server --feedback--\nThink about how RSCs do not execute in the browser and are used for pre-rendering data Entirely on the server In a Web Worker --feedback--\nThink about how RSCs do not execute in the browser and are used for pre-rendering data --video-solution--\n3\n--text--\nWhy don't React Server Components have access to React hooks and Web APIs --answers--\nThey are rendered before the browser loads --feedback--\nThese components never execute in the browser, so they can't use client-side features They run only on the server and are not shipped to the browser They are restricted by React's rendering cycle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7662,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5f19a0f0b75343f1905.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "d336940f686e9a7fb3647dbfa9fe22d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5f19a0f0b75343f1905.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Worker --feedback-- Think about how RSCs do not execute in the browser and are used for pre-rendering data --video-solution-- 3 --text-- Why don't React Server Components have access to React hooks and Web APIs --answers-- They are rendered before the browser loads --feedback-- These components never execute in the browser, so they can't use client-side features They run only on the server and are not shipped to the browser They are restricted by React's rendering cycle--feedback--\nThese components never execute in the browser, so they can't use client-side features They are only used for styling purposes --feedback--\nThese components never execute in the browser, so they can't use client-side features --video-solution--\n2\n--text--\nHow would you add interactivity to a component in Next js when using the app router --answers--\nWrap the component in a <ClientProvider> tag --feedback--\nNext js assumes all components are server components unless explicitly stated otherwise Use the withClient() function from Next js --feedback--\nNext js assumes all components are server components unless explicitly stated otherwise Enable client-side rendering in next config js --feedback--\nNext js assumes all components are server components unless explicitly stated otherwise Mark the component as a client component with the \"use client\" directive --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7662,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-react-strategies-and-debugging\\67d2f5f19a0f0b75343f1905.md",
      "source_type": "git_repo"
    },
    "token_count": 265,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "8970abc2fc8f22c8fc699f50178b7338",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d311d256c58ef01e0d62ec.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d311d256c58ef01e0d62ec\ntitle: What Are React Frameworks, and Why Are They Commonly Used in the Industry challengeType: 19\ndashedName: what-are-react-frameworks-and-why-are-they-commonly-used-in-the-industry\n--description--\nUp until this point, you have been using React to build out user interfaces If you needed additional features like routing, then you had to import a third party library like React Router to be able to switch between the different views But what happens when you need to build out a full stack web application Well you could use React for the frontend and use Node and Express for the backend logic if you just want to stick with JavaScript Or you could use other languages like Go, Python, or Java for your backend While all of these are viable options, there are times where you might want to use a React framework instead React frameworks provide features like routing, image optimizations, data fetching, authentication and more This means that you might not need to set up separate frontend and backend applications for certain use cases Let's take a closer look at Next js which is a popular React framework One of the main features for Next js is the file-system based router This routing system includes support for dynamic routes, parallel routes, route handlers, redirects, internalization and more Here is an example of creating a custom request handler:\n```js\nexport async function GET() {\nconst res = await fetch(\"https://example-api com\");\nconst data = await res json();\nreturn Response json({ data });\n}\n```\nYou can define route handlers like GET or POST requests in a file called route js inside the app/api directory Another feature of Next js are the automatic image and font optimizations Here is an example of working with the Image component inside a page js file:\n```jsx\nimport Image from \"next/image\";\nexport default function Page() {\nreturn (\n);\n}\n```\nThe Image component extends the native HTML img element and allows for faster page loads and size optimizations This means that images will only load when they enter the viewport and the Image component will automatically serve correctly sized images for each device While those are just a few features of Next js, there are many more features that you can use to build robust full stack web applications There are also other React frameworks like Remix that will provide the same ability to build out modern full stack web applications",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4271,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d311d256c58ef01e0d62ec.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8e53ef275cb4f9679490eb541166a2b7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d311d256c58ef01e0d62ec.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and size optimizations This means that images will only load when they enter the viewport and the Image component will automatically serve correctly sized images for each device While those are just a few features of Next js, there are many more features that you can use to build robust full stack web applications There are also other React frameworks like Remix that will provide the same ability to build out modern full stack web applicationsEven though the JavaScript library and framework landscape is constantly changing, it is important to be aware of the available options to you and learn about each framework's pros and cons --questions--\n--text--\nWhich of the following is an example of a React framework --answers--\nSpring\n--feedback--\nRefer to the beginning of the lecture where this was discussed Laravel\n--feedback--\nRefer to the beginning of the lecture where this was discussed Next js\nDjango\n--feedback--\nRefer to the beginning of the lecture where this was discussed --video-solution--\n3\n--text--\nWhich of the following is NOT a feature of a React framework --answers--\nAutomatic CSS cleanup Routing --feedback--\nRefer to the beginning of the lecture where this was discussed Image optimization --feedback--\nRefer to the beginning of the lecture where this was discussed Data fetching --feedback--\nRefer to the beginning of the lecture where this was discussed --video-solution--\n1\n--text--\nWhat are some benefits to working with the Next js Image component --answers--\nIt automatically increases the size of all images to improve quality --feedback--\nRefer to the end of the lecture where this was discussed It results in faster page loads and size optimizations It guarantees zero performance impact when loading images --feedback--\nRefer to the end of the lecture where this was discussed It has zero support for lazy loading for images --feedback--\nRefer to the end of the lecture where this was discussed --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4271,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d311d256c58ef01e0d62ec.md",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3909f503220365e446f35423fef600aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d1ab248317a5a29058a763.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d1ab248317a5a29058a763\ntitle: What Is Dependency Management, and How Does It Work with Libraries Like React challengeType: 19\ndashedName: what-is-dependency-management-and-how-does-it-work-with-libraries-like-react\n--description--\nIn software, a dependency is where one component or module in an application relies on another to function properly Dependencies are common in software applications because it allows developers to use pre-built functions or tools created by others If you want to build out a React application, you will need to install the React dependencies Without these dependencies, none of your code will work correctly and the application will display a list of errors When you are working with more complex projects, you will often need to rely on many dependencies If a set of dependencies is not well managed or defined in a project, then that will lead to what is known as dependency hell To manage software dependencies in a project, you will need to use a package manager A package manager is a tool used for installation, updates, and removal of dependencies Many popular programming languages like JavaScript, Python, Ruby and Java, all use package managers In an earlier lecture, you were briefly introduced to one popular package manager called npm To create a new React project using Vite and npm you can run the following command:\nsh\nnpm create vite@latest my-react-app -- --template react\nAs you recall from the prior lectures, this will create all of the necessary boilerplate code needed to launch a new React application Before you can launch the application, you will need to install the dependencies by running npm install or npm i for short You can view all of the dependencies in the package json file which is located in the root directory of your project The package json file is a key configuration file in projects that contains metadata about your project, including its name, version, and dependencies It also defines scripts, licensing information, and other settings that help manage the project and its dependencies When you install dependencies, a node_modules folder will be added to your project The node_modules folder is where all the packages and libraries required by your project are stored This folder contains the actual code for the dependencies listed in the package json file, including both your project's direct dependencies and any dependencies of those dependencies The two core dependencies needed for a React project will be the react and react-dom packages:\njson\n\"dependencies\": {\n\"react\": \"^18 3 1\",\n\"react-dom\": \"^18 3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6194,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d1ab248317a5a29058a763.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6babc3fc032d3293d8070948be393611",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d1ab248317a5a29058a763.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "folder will be added to your project The node_modules folder is where all the packages and libraries required by your project are stored This folder contains the actual code for the dependencies listed in the package json file, including both your project's direct dependencies and any dependencies of those dependencies The two core dependencies needed for a React project will be the react and react-dom packages: json \"dependencies\": { \"react\": \"^18 3 1\", \"react-dom\": \"^18 31\"\n}\nThe package json will list the current versions you are using for those packages If you need to update any packages locally, you can run the npm update command Or you can update all packages globally by running the npm update -g command In addition to the package json file, you will also have a package-lock json file This file will lock down the exact versions of all packages that your project is using When you update a package, then the new versions will be updated in the lock file as well Another important aspect of the package json file are the dev dependencies:\njson\n\"devDependencies\": {\n\"@eslint/js\": \"^9 17 0\",\n\"@types/react\": \"^18 3 18\",\n\"@types/react-dom\": \"^18 3 5\",\n\"@vitejs/plugin-react\": \"^4 3 4\",\n\"eslint\": \"^9 17 0\",\n\"eslint-plugin-react\": \"^7 37 2\",\n\"eslint-plugin-react-hooks\": \"^5 0 0\",\n\"eslint-plugin-react-refresh\": \"^0 4 16\",\n\"globals\": \"^15 14 0\",\n\"vite\": \"^6 0 5\"\n}\nDev dependencies are packages that are only used for development and not in production An example of this would be a testing library like Jest You would install Jest as a dev dependency because you only use it to test your project locally, and isn't needed for the application to run in production For the majority of this lecture, we have been focusing on npm But there are other package mangers like yarn and pnpm So which package manager should you use for your project Well, the short answer is it depends If you are joining an existing project with a team, then all of those decisions will be made for you and you will use the existing package manager If you are building out a project from scratch, then you will need to research the pros and cons of each manager and decide which one will better suit your needs --questions--\n--text--\nWhat is a dependency --answers--\nA special type of testing software used in JavaScript and Python applications",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6194,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d1ab248317a5a29058a763.md",
      "source_type": "git_repo"
    },
    "token_count": 515,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "81b389b0f3e4bf5541f72f854327a346",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d1ab248317a5a29058a763.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "are joining an existing project with a team, then all of those decisions will be made for you and you will use the existing package manager If you are building out a project from scratch, then you will need to research the pros and cons of each manager and decide which one will better suit your needs --questions-- --text-- What is a dependency --answers-- A special type of testing software used in JavaScript and Python applications--feedback--\nRefer to the very beginning of the lecture where this was discussed This is where multiple tasks are running simultaneously in the background --feedback--\nRefer to the very beginning of the lecture where this was discussed This is where one component in an application relies on another to function properly A special type of compiler used to run JavaScript code in the browser --feedback--\nRefer to the very beginning of the lecture where this was discussed --video-solution--\n3\n--text--\nWhat are dev dependencies --answers--\nPackages that are only used in production and not in development --feedback--\nThink about the packages that aren't needed in production Packages that are only specific to testing libraries --feedback--\nThink about the packages that aren't needed in production Packages that are only specific to animation libraries --feedback--\nThink about the packages that aren't needed in production Packages that are only used for development and not in production --video-solution--\n4\n--text--\nWhich of the following is NOT mentioned in the lecture as an example of a popular package manager for JavaScript --answers--\npip\nnpm\n--feedback--\nRefer to the last minute of the lecture where this was discussed yarn\n--feedback--\nRefer to the last minute of the lecture where this was discussed pnpm\n--feedback--\nRefer to the last minute of the lecture where this was discussed --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6194,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d1ab248317a5a29058a763.md",
      "source_type": "git_repo"
    },
    "token_count": 354,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "0e625f6cf528b864b6de504671e8cbd8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d311627010a0efa127b651.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d311627010a0efa127b651\ntitle: How Does Routing Work in React challengeType: 19\ndashedName: how-does-routing-work-in-react\n--description--\nIn earlier lectures, you learned that React is a single page application Single page applications are applications that contain one HTML file and use JavaScript to dynamically update any content on the page So what happens when you need to add multiple \"pages\" to your React application How would you go about navigating to those different views Well, that is where React Router comes in React Router is a third party library that allows you to add routing to your React applications To begin, you will need to install React Router in an existing React project like this:\nsh\nnpm i react-router\nIf you check the package json file, you will see that react-router was added to the list of dependencies:\njson\n\"dependencies\": {\n\"react\": \"^18 3 1\",\n\"react-dom\": \"^18 3 1\",\n\"react-router\": \"^7 2 0\"\n}\nThen inside of your main jsx or index jsx file, you will need to import BrowserRouter and render BrowserRouter around your App component:\n```jsx\nimport { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { BrowserRouter } from \"react-router\";\nimport App from \" /App jsx\";\nimport \" /index css\";\ncreateRoot(document getElementById(\"root\")) render(\n);\n```\nTo enable routes in your application, you will need to update your import statement to include the Routes and Route components like this:\njs\nimport { BrowserRouter, Routes, Route } from \"react-router\";\nThen inside of the BrowserRouter, add the Routes and Route components:\njsx\ncreateRoot(document getElementById(\"root\")) render(\n<StrictMode>\n<BrowserRouter>\n<Routes>\n<Route path=\"/\" element={<App />} />\n</Routes>\n</BrowserRouter>\n</StrictMode>\n);\nThe path and element are used to couple the URL and UI components together In this case, we are setting up a route for the homepage that points to the App component It is common in larger applications to have multiple views and routes setup like this:\n```jsx\n} />\n} />\n} />\n} />\n} />\n} />\n```\nThe index prop in these examples is meant to represent the default route for a given path segment So the Home component will be shown at the root path (/) while the ProductsHome component will be shown at the products path",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6005,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d311627010a0efa127b651.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6679a495c6d0f23eece9f987440ea8c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d311627010a0efa127b651.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "that points to the App component It is common in larger applications to have multiple views and routes setup like this: ```jsx } /> } /> } /> } /> } /> } /> ``` The index prop in these examples is meant to represent the default route for a given path segment So the Home component will be shown at the root path (/) while the ProductsHome component will be shown at the products pathYou may have also noticed that we are nesting a few routes inside another route like this:\njsx\n<Route path=\"products\">\n<Route path=\"trending\" element={<Trending />} />\n</Route>\nThis means that the path of the child route will be appended to the parent route's path So in this example, the path for the trending products will be products/trending If the path begins with a colon (:) then that represents a dynamic segment in the route:\njsx\n<Route path=\":category\" element={<Category />} />\nIn this example we have a dynamic segment called category When a user navigates to a URL like products/brass-instruments, then the view will change to the Category component and you can dynamically fetch the appropriate data based on the segment You can access the value of the dynamic segment by using the useParams hook inside the child component like this:\n```jsx\nimport { useParams } from \"react-router\";\nexport default function Category() {\nlet params = useParams();\n{/ Accessing the category param: params category /}\n{/ rest of code goes here /}\n}\n```\nDynamic routes are helpful because they allow you to create flexible and reusable components that can render different content based on the parameters in the URL Instead of defining a fixed list of paths for every possible route, you can use dynamic segments to render various content based on what the user has requested --questions--\n--text--\nWhat is React Router used for --answers--\nIt is used to remove dynamic routes from your React applications --feedback--\nReview the beginning of the lecture where React Router was discussed It is used to setup static routes only for your React applications --feedback--\nReview the beginning of the lecture where React Router was discussed It is used to remove routes from your React applications --feedback--\nReview the beginning of the lecture where React Router was discussed It is used to add routing to your React applications --video-solution--\n4\n--text--\nWhich hook is used to retrieve a dynamic parameter for a URL --answers--\nusePar\n--feedback--\nReview the last minute of the lecture where this was discussed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6005,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d311627010a0efa127b651.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "af04d21fd536b952da4d86297b809833",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d311627010a0efa127b651.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "your React applications --feedback-- Review the beginning of the lecture where React Router was discussed It is used to remove routes from your React applications --feedback-- Review the beginning of the lecture where React Router was discussed It is used to add routing to your React applications --video-solution-- 4 --text-- Which hook is used to retrieve a dynamic parameter for a URL --answers-- usePar --feedback-- Review the last minute of the lecture where this was discusseduseParams\nuseParameters\n--feedback--\nReview the last minute of the lecture where this was discussed usePara\n--feedback--\nReview the last minute of the lecture where this was discussed --video-solution--\n2\n--text--\nWhich of the following is the correct way to represent a dynamic segment in a path --answers--\njsx\n<Route path=\":category\" element={<Category />} />\njsx\n<Route path=\"/category\" element={<Category />} />\n--feedback--\nReview the last minute of the lecture where this was discussed jsx\n<Route path=\"\\category\" element={<Category />} />\n--feedback--\nReview the last minute of the lecture where this was discussed jsx\n<Route path=\" category\" element={<Category />} />\n--feedback--\nReview the last minute of the lecture where this was discussed --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6005,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-routing-react-frameworks-and-dependency-management-tools\\67d311627010a0efa127b651.md",
      "source_type": "git_repo"
    },
    "token_count": 255,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ff9dcf129a583535503e357ea913c65f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-searching-and-sorting-algorithms\\68420c70e4bfe26d52b780dc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 68420c70e4bfe26d52b780dc\ntitle: What Is Binary Search and How Does It Differ From Linear Search challengeType: 19\ndashedName: what-is-binary-search-and-how-does-it-differ-from-linear-search\n--description--\nSearching through a list of items is a common occurrence in computer science There are two key algorithms you should know about when it comes to searching: linear search and binary search Linear search starts at the beginning of a list and iterates through each item until it finds the target value it is looking for If the target value is found, the index where it's located in the list is returned If the target value isn't found, -1 is returned We return -1 because it's not a valid index in most programming languages Here is what the code looks like for linear search:\npython\ndef linear_search(arr, target):\nfor i in range(len(arr)):\nif arr[i] == target:\nreturn i\nreturn -1\nIf the list we'll search through is [13, 4, 7, 9, 10] and the target value is 9, the function would return 3 because 9 is at index 3 If we changed the target value to 5, the function would return -1 because 5 is not in the list While this is a relatively straightforward algorithm, it is not the most efficient If you have a large list of items, linear search can take a long time to find the target value The time complexity of linear search is O(n) because the time it takes to search through the list grows linearly with the size of the list The space complexity of linear search is O(1) because it doesn't require any additional space to search through the list Binary search is a more efficient algorithm for searching through a large list of items The condition here is that the list must be sorted in ascending order Binary search works by dividing the list in half and checking if the target value is in the middle of the list If the target value is in the middle of the list, the index of the target value is returned Otherwise, the algorithm checks if the target value is in the left or right half of the list It continues to divide the remaining parts of the list into halves until the target value is found",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5767,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-searching-and-sorting-algorithms\\68420c70e4bfe26d52b780dc.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f0f3474ea77d57d4a3e5bc169e39bc7e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-searching-and-sorting-algorithms\\68420c70e4bfe26d52b780dc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "search works by dividing the list in half and checking if the target value is in the middle of the list If the target value is in the middle of the list, the index of the target value is returned Otherwise, the algorithm checks if the target value is in the left or right half of the list It continues to divide the remaining parts of the list into halves until the target value is foundIf the target value is not in the list, it returns -1\nHere is what the code looks like for binary search:\n```python\ndef binary_search(arr, target):\nlow = 0\nhigh = len(arr) - 1\nwhile low <= high:\nmid = (low + high) // 2\nif arr[mid] == target:\nreturn mid\nelif arr[mid] < target:\nlow = mid + 1\nelse:\nhigh = mid - 1\nreturn -1\n```\nWe start by identifying a low and high index This represents the range of the list we are searching through We then check the condition of low being less than or equal to high If low is greater than high, we have searched through the entire list and the target value is not found In that case we stop the search and return -1 If the low index is less than or equal to the high index, we calculate the middle index of the list, mid We then check if the target value is at the middle index If it is, we return the middle index Otherwise, we check if the value at the midpoint is less than the target If it is, we update the low index to be the middle index plus one This means we will search the right half of the list Lastly, if none of the other conditions are True, we update the high index to be the middle index minus one This means we will search the left half of the list We continue to repeat this process until we find the target or determine that the target is not in the list The time complexity of binary search is O(log n) because the time it takes to search through the list grows logarithmically with the size of the list The space complexity of binary search is O(1) because it doesn't require any additional space to search through the list Binary search and linear search can be used for a variety of problems you will encounter in computer science It is important to understand the differences between the two algorithms and when to use each one --questions--\n--text--\nWhat is the main difference between linear search and binary search",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5767,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-searching-and-sorting-algorithms\\68420c70e4bfe26d52b780dc.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0e9f632e4076f944b4a8c32a5b8528e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-searching-and-sorting-algorithms\\68420c70e4bfe26d52b780dc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "logarithmically with the size of the list The space complexity of binary search is O(1) because it doesn't require any additional space to search through the list Binary search and linear search can be used for a variety of problems you will encounter in computer science It is important to understand the differences between the two algorithms and when to use each one --questions-- --text-- What is the main difference between linear search and binary search--answers--\nLinear search is faster than binary search --feedback--\nConsider the requirements and efficiency of each algorithm Binary search requires a sorted list, while linear search does not Linear search can only be used with numbers --feedback--\nConsider the requirements and efficiency of each algorithm Binary search always returns the first occurrence of a target --feedback--\nConsider the requirements and efficiency of each algorithm --video-solution--\n2\n--text--\nWhat is the time complexity of linear search --answers--\nO(1)\n--feedback--\nThink about how the time to complete the search changes with the size of the list O(log n)\n--feedback--\nThink about how the time to complete the search changes with the size of the list O(n)\nO(n²)\n--feedback--\nThink about how the time to complete the search changes with the size of the list --video-solution--\n3\n--text--\nIn binary search, what happens if the target value is not found in the list --answers--\nIt returns the middle index --feedback--\nReflect on what the function is designed to do when the target is absent It returns -1 It returns the last index checked --feedback--\nReflect on what the function is designed to do when the target is absent It enters an infinite loop --feedback--\nReflect on what the function is designed to do when the target is absent --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5767,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-searching-and-sorting-algorithms\\68420c70e4bfe26d52b780dc.md",
      "source_type": "git_repo"
    },
    "token_count": 359,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d620bc8ef2f986796869ddea81d12cb6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-searching-and-sorting-algorithms\\68910fc037a90c285107af04.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 68910fc037a90c285107af04\ntitle: What Is Divide and Conquer, and How Does Merge Sort Work challengeType: 19\ndashedName: what-is-divide-and-conquer-and-how-does-merge-sort-work\n--description--\nThe divide and conquer paradigm in computer science is a technique for recursively breaking down problems into smaller sub problems One of the key aspects of this technique is recursion, which happens when a function calls itself repeatedly until a base case is reached In this lecture, we will take a look at the merge sort algorithm to better understand how the divide and conquer technique works Let's say we had this list of numbers:\nmd\n42 37 53 17\nThe goal is to sort that list from smallest to largest using the merge sort algorithm The first step is to divide that list in half:\nmd\n42 37 | 53 17\nThen we need to look at the left side of the list:\nmd\n42 37\nWe take that sub list and divide in half again until each sub list has only one item in it:\nmd\n42 | 37\nA list with only one item in it is sorted by default Next we need to merge each of those one element sub lists into a sorted list:\nmd\n37 42\nThen we follow the same process for the right side of the original list:\n```py\nright side of original list\n53 17\ndivide the list in half\n53 | 17\nmerge the lists in sorted order\n17 53\n```\nNow that both halves of the original list are sorted, we merge those two halves together and sort the elements:\nmarkdown\n17 37 42 53\nHere is what the algorithm looks like in code:\n```py\ndef merge_sort(arr):\nif len(arr) <= 1:\nreturn arr\nmid = len(arr) // 2\nleft = merge_sort(arr[:mid])\nright = merge_sort(arr[mid:])\nsorted_list = []\ni = 0\nj = 0\nwhile i < len(left) and j < len(right):\nif left[i] <= right[j]:\nsorted_list append(left[i])\ni += 1\nelse:\nsorted_list append(right[j])\nj += 1\nsorted_list extend(left[i:])\nsorted_list",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3652,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-searching-and-sorting-algorithms\\68910fc037a90c285107af04.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8065a1bbe8ec4febc0ceb3a47b312a2f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-searching-and-sorting-algorithms\\68910fc037a90c285107af04.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "two halves together and sort the elements: markdown 17 37 42 53 Here is what the algorithm looks like in code: ```py def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) sorted_list = [] i = 0 j = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: sorted_list append(left[i]) i += 1 else: sorted_list append(right[j]) j += 1 sorted_list extend(left[i:]) sorted_listextend(right[j:])\nreturn sorted_list\n```\nThe time complexity for merge sort would be O(n log n) because the list is continuously divided in half (log n) and then merged together (O(n)) Unlike other sorting algorithms like bubble sort, merge sort is not sorted in place and has a space complexity of O(n) --questions--\n--text--\nWhat is the divide and conquer paradigm in computer science --answers--\nA technique for detecting a cycle in function value iterations using just two iterators --feedback--\nReview the beginning of the lecture An algorithm for comparing two elements and swapping them from smallest to largest if needed --feedback--\nReview the beginning of the lecture A technique for recursively breaking down problems into smaller sub problems An algorithm to compute the shortest connecting network for points in a plane --feedback--\nReview the beginning of the lecture --video-solution--\n3\n--text--\nWhat is the time complexity for the merge sort algorithm --answers--\nO(n log n)\nO(log n²)\n--feedback--\nReview the end of the lecture O(n³ log n)\n--feedback--\nReview the end of the lecture O(log n³)\n--feedback--\nReview the end of the lecture --video-solution--\n1\n--text--\nWhat is the space complexity for the merge sort algorithm --answers--\nO(n²)\n--feedback--\nReview the end of the lecture O(1)\n--feedback--\nReview the end of the lecture O(n log n)\n--feedback--\nReview the end of the lecture O(n)\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3652,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-searching-and-sorting-algorithms\\68910fc037a90c285107af04.md",
      "source_type": "git_repo"
    },
    "token_count": 438,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2e61873cf5543a260420682801292421",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672aa6441bcd3758e9f52ae0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa6441bcd3758e9f52ae0\ntitle: How Do You Space List Items Using margin or line-height challengeType: 19\ndashedName: how-do-you-space-list-items-using-margin-or-line-height\n--description--\nMargins and line-height are essential for spacing list items to enhance readability and visual appeal First, let's start spacing list items using margins Margins can be used to create space between list items by applying margin properties to the li elements This method allows you to control the spacing outside each list item, effectively increasing or decreasing the gap between them Let's take a look at an example of an unordered list with three list items ```html\nItem 1\nItem 2\nItem 3\n```\nBy default, HTML will not apply that much spacing between the list items To apply some spacing to the bottom of each list item, you can use the margin-bottom property like this:\ncss\nli {\nmargin-bottom: 40px;\n}\nIn this example, 40px of margin will be applied to the bottom of each list item inside the unordered list Another way to space out list items would be to use the line-height property The line-height property adjusts the vertical spacing between lines of text within a single list item While it primarily affects the spacing between lines of text within each item, it can also indirectly influence the overall spacing between list items if the items contain only a single line of text If list items have multiple lines of text, the line-height will affect the spacing between those lines, but it does not directly adjust the spacing between separate list items themselves To control the spacing between individual list items, you would use margin or padding properties instead Using the same unordered list from earlier, here is an example of applying line-height to the list items:\ncss\nli {\nline-height: 2;\n}\nIn this example, line-height: 2; sets the line height to be twice the font size, creating more vertical space within each list item --questions--\n--text--\nWhich CSS property would you use to create space between list items by adjusting the space outside each li element --answers--\npadding\n--feedback--\nThis property affects the space inside the element's border line-height\n--feedback--\nThis property affects the spacing between lines of text, not the space outside the element margin\nborder\n--feedback--\nThis property affects the element's border, not the space outside it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3776,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672aa6441bcd3758e9f52ae0.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "789805c761e154240c5ab7458d73ec47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672aa6441bcd3758e9f52ae0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the font size, creating more vertical space within each list item --questions-- --text-- Which CSS property would you use to create space between list items by adjusting the space outside each li element --answers-- padding --feedback-- This property affects the space inside the element's border line-height --feedback-- This property affects the spacing between lines of text, not the space outside the element margin border --feedback-- This property affects the element's border, not the space outside it--video-solution--\n3\n--text--\nGiven the CSS rule li { margin-bottom: 15px; }, what effect does this have on list items --answers--\nAdds 15px of space inside each list item --feedback--\nThis rule affects the space outside the list item, not inside Adds 15px of space between the content and border of each list item --feedback--\nThis rule affects the space outside the border of each list item Adds 15px of space below each list item Adds 15px of space above each list item --feedback--\nThis rule adds space below each list item, not above --video-solution--\n3\n--text--\nWhat does the line-height property control in CSS --answers--\nThe width of the content --feedback--\nThis is controlled by the width property, not line-height The space inside the border of an element --feedback--\nThis is controlled by properties like padding, not line-height The vertical spacing between lines of text within an element The space outside the border of an element --feedback--\nThis is controlled by properties like margin, not line-height --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3776,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672aa6441bcd3758e9f52ae0.md",
      "source_type": "git_repo"
    },
    "token_count": 319,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "dd615f8c91fa668a2e4a4c8f9c25c358",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b951b1bf78038b1a2a0e7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672b951b1bf78038b1a2a0e7\ntitle: How Do the Different list-style Properties Work challengeType: 19\ndashedName: how-do-the-different-list-style-properties-work\n--description--\nIn CSS, the list-style property is used to control the appearance of lists on a webpage Whether you're working with ordered lists (ol) or unordered lists (ul), the list-style property allows you to customize how list items are displayed The list-style property is actually a shorthand for three other properties:\nlist-style-type\nlist-style-position\nlist-style-image\nEach one plays a different role in defining the appearance of lists The list-style-type property allows you to define the type of bullet point or number used in a list For unordered lists, you can choose from several bullet styles, such as discs, circles, or squares For ordered lists, you can use different numbering systems, like decimal, Roman numerals, or even alphabetical characters Here’s an example of using list-style-type:\n```html\nItem 1\nItem 2\nItem 3\n```\nIn this example, the bullet points of the unordered list are changed to squares The list-style-type property is the most commonly used of the three, as it directly affects the appearance of the bullet or numbering style in your lists The list-style-position property controls the position of the bullet or number in relation to the list item’s content There are two values you can use: inside and outside When you use the value outside, the bullet or number appears outside the content, which is the default behavior And, when you use the value inside, the bullet or number appears inside the content, which may cause the text to wrap and align with the bullet or number Here’s an example of using list-style-position:\n```html\nItem 1\nItem 2\nItem 3\nItem 4\nItem 5\nItem 6\n```\nIn this example, both inside and outside values are provided for two different unordered list tags The list-style-position property can be useful when you want to control the alignment of the list content, especially in situations where you have multiple lines of text in a single list item The list-style-image property allows you to use an image as the bullet point for your list items This can be useful for adding a unique visual style to your lists",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5434,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b951b1bf78038b1a2a0e7.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2806adfb18c3b86d29abbd121ecf56e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b951b1bf78038b1a2a0e7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "example, both inside and outside values are provided for two different unordered list tags The list-style-position property can be useful when you want to control the alignment of the list content, especially in situations where you have multiple lines of text in a single list item The list-style-image property allows you to use an image as the bullet point for your list items This can be useful for adding a unique visual style to your listsHere’s an example of using list-style-image:\n```html\nItem 1\nItem 2\nItem 3\n```\nIn this example, the bullet points are replaced by a custom freeCodeCamp logo, adding a personalized touch to the list When using list-style-image, make sure the image you choose is small and appropriate for the design of your webpage If the image is too large or complex, it can make the list harder to read You can combine the three properties – list-style-type, list-style-position, and list-style-image – into a single list-style shorthand property The order of the values in the shorthand doesn’t matter, but all three can be specified together Here’s an example using the shorthand property:\n```html\nItem 1\nItem 2\nItem 3\n```\nIn this example, the list items use square bullets, positioned inside the content, with a custom image as the bullet However, if the image is unavailable or not rendered, the square bullets will be used as a fallback --questions--\n--text--\nWhich list-style property would you use to change the bullet points to circles in an unordered list --answers--\nlist-style-image\n--feedback--\nThink about which property directly changes the bullet or numbering style list-style-position\n--feedback--\nThink about which property directly changes the bullet or numbering style list-style-type\nlist-style\n--feedback--\nThink about which property directly changes the bullet or numbering style --video-solution--\n3\n--text--\nIf you want the bullets of a list to align with the text content, which list-style-position value should you use --answers--\noutside\n--feedback--\nConsider how the bullet position affects text wrapping within list items inside\ncenter\n--feedback--\nConsider how the bullet position affects text wrapping within list items left\n--feedback--\nConsider how the bullet position affects text wrapping within list items --video-solution--\n2\n--text--\nWhich property allows you to replace the default bullet with a custom image",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5434,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b951b1bf78038b1a2a0e7.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4b0f63521bd9b7d673a5277e47d2e2dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b951b1bf78038b1a2a0e7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "you want the bullets of a list to align with the text content, which list-style-position value should you use --answers-- outside --feedback-- Consider how the bullet position affects text wrapping within list items inside center --feedback-- Consider how the bullet position affects text wrapping within list items left --feedback-- Consider how the bullet position affects text wrapping within list items --video-solution-- 2 --text-- Which property allows you to replace the default bullet with a custom image--answers--\nlist-style-type\n--feedback--\nThink about how to add a visual element to your bullet points list-style-position\n--feedback--\nThink about how to add a visual element to your bullet points list-style\n--feedback--\nThink about how to add a visual element to your bullet points list-style-image\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5434,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b951b1bf78038b1a2a0e7.md",
      "source_type": "git_repo"
    },
    "token_count": 163,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "aed0173bbd102e8ef9aa0f4d37657571",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b952d3a5c603908841971.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672b952d3a5c603908841971\ntitle: Why Are Default Link Styles Important for Usability on the Web challengeType: 19\ndashedName: why-are-default-link-styles-important-for-usability-on-the-web\n--description--\nDefault link styles play a crucial role in enhancing usability and accessibility on the web These styles, typically blue for unvisited links and purple for visited links, have become a standard that users have come to expect and rely on when navigating websites The primary purpose of default link styles is to provide clear visual cues that help users distinguish between interactive and non-interactive elements on a webpage This distinction is fundamental to creating an intuitive and user-friendly browsing experience Let's consider the basic default styles for links:\n```css\na:link {\ncolor: blue;\ntext-decoration: underline;\n}\na:visited {\ncolor: purple;\n}\n```\nThese styles serve several important functions Firstly, the blue color for unvisited links stands out against most background colors and text, making links easily identifiable This contrast is crucial for users to quickly scan a page and find navigational elements or important information The underline further emphasizes that the text is clickable, providing an additional visual cue This is particularly helpful for users who may be colorblind or have difficulty distinguishing colors The change in color for visited links (typically to purple) helps users keep track of where they've been This feature is invaluable for navigating large websites or conducting research, as it prevents users from inadvertently revisiting the same pages Consider this HTML example:\n```html\nLearn more about cats and dogs ```\nWithout any custom CSS, most browsers will render these links in blue with an underline After clicking on one of the links, its color will change to purple, providing immediate feedback to the user about their browsing history While it's common for designers to modify these default styles to match a website's aesthetic, it's crucial to maintain the core principles behind them If you choose to change the default styles, ensure that links are still clearly distinguishable from regular text, there's a visible difference between visited and unvisited links, and the chosen colors provide sufficient contrast with the background",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5291,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b952d3a5c603908841971.md",
      "source_type": "git_repo"
    },
    "token_count": 431,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d1342646a92aee4980c5b4c3e001e8b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b952d3a5c603908841971.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "color will change to purple, providing immediate feedback to the user about their browsing history While it's common for designers to modify these default styles to match a website's aesthetic, it's crucial to maintain the core principles behind them If you choose to change the default styles, ensure that links are still clearly distinguishable from regular text, there's a visible difference between visited and unvisited links, and the chosen colors provide sufficient contrast with the backgroundFor example, you might use a custom style like this:\n```css\na:link {\ncolor: blue;\ntext-decoration: none;\nborder-bottom: 1px solid blue;\n}\na:visited {\ncolor: purple;\nborder-bottom: 1px solid purple;\n}\n```\nThis maintains the blue and purple color scheme while replacing the underline with a bottom border for a more modern look It's also important to consider the different states of links In addition to the default and visited states, links typically have hover and active states:\n```css\na:hover {\ncolor: red;\n}\na:active {\ncolor: darkorange;\n}\n```\nThese states provide immediate feedback to users as they interact with links, enhancing the overall usability of the site In conclusion, while it's possible to customize link styles, the principles behind the default styles should be maintained They play a crucial role in creating a usable and accessible web experience, helping users navigate and interact with content effectively Always prioritize clarity and user experience when designing link styles for your websites --questions--\n--text--\nWhy is it important to have a distinct color for visited links --answers--\nIt makes the website more colorful --feedback--\nThink about how this feature affects a user's navigation through a website It helps users keep track of pages they've already visited Visited links are more important than unvisited links --feedback--\nThink about how this feature affects a user's navigation through a website It's a legal requirement for websites --feedback--\nThink about how this feature affects a user's navigation through a website --video-solution--\n2\n--text--\nWhich of the following is NOT typically a default style for links in most browsers --answers--\nBlue color for unvisited links --feedback--\nConsider the most common visual characteristics of links you see on websites Underline for all links --feedback--\nConsider the most common visual characteristics of links you see on websites Purple color for visited links --feedback--\nConsider the most common visual characteristics of links you see on websites Bold font weight for all links",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5291,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b952d3a5c603908841971.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f7347b208e0ff53a7a7aedc2282a2aa5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b952d3a5c603908841971.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--text-- Which of the following is NOT typically a default style for links in most browsers --answers-- Blue color for unvisited links --feedback-- Consider the most common visual characteristics of links you see on websites Underline for all links --feedback-- Consider the most common visual characteristics of links you see on websites Purple color for visited links --feedback-- Consider the most common visual characteristics of links you see on websites Bold font weight for all links--video-solution--\n4\n--text--\nWhen customizing link styles, what is an important principle to maintain --answers--\nAll links must be blue --feedback--\nThink about the main purpose of link styles in terms of usability Links should always be underlined --feedback--\nThink about the main purpose of link styles in terms of usability Links should be clearly distinguishable from regular text Visited and unvisited links must have the same style --feedback--\nThink about the main purpose of link styles in terms of usability --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5291,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b952d3a5c603908841971.md",
      "source_type": "git_repo"
    },
    "token_count": 196,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "74857eeeb1bcdbfb410a2ba926b468c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-the-var-keyword-and-hoisting\\67329fbcfaf5ff5cdaa38a42.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67329fbcfaf5ff5cdaa38a42\ntitle: What Is the var Keyword, and Why Is It No Longer Suggested to Use It challengeType: 19\ndashedName: what-is-the-var-keyword-and-why-is-it-no-longer-suggested-to-use-it\n--description--\nThe var keyword in JavaScript is one of the original ways to declare variables It has been part of the language since its inception and for many years it remained the primary method for creating variables However as JavaScript evolved and developers gained more experience with the language, certain drawbacks of using var became apparent leading to the introduction of let and const in 2015 When you declare a variable with var, it becomes function-scoped or globally-scoped This means that if you declare a variable inside a function using var it's only accessible within that function However if you declare it outside any function, it becomes a global variable accessible throughout your entire script This behavior can sometimes lead to unexpected results and make your code harder to reason about A problem with var is that it allows you to redeclare the same variable multiple times without throwing an error This can lead to accidental overwrites and make debugging more difficult ```js\nvar num = 5;\n// This is allowed and doesn't throw an error\nvar num = 10;\n```\nThe most significant issue with var is its lack of block scoping Variables declared with var inside a block like an if statement or a for loop are still accessible outside that block js\nif (true) {\nvar num = 5;\n}\nconsole log(num); // 5\nThis behavior can lead to unintended variable leaks and make your code more prone to bugs Due to this issues, modern JavaScript development has largely moved away from var in favor of let and const These keywords provide block scoping which aligns more closely with how scoping works in many other programming languages They also don't allow redeclaration within the same scope helping to prevent accidental overrides While var is still part of JavaScript and works in all browsers, it's generally recommended to use let and const in modern JavaScript development They provide clear scoping rules help prevent common pitfalls and make your code's behavior more predictable --questions--\n--text--\nWhat is the scope of a variable declared with var outside of any function --answers--\nBlock scope --feedback--\nThink about where a var variable declared outside a function can be accessed Function scope",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4074,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-the-var-keyword-and-hoisting\\67329fbcfaf5ff5cdaa38a42.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4562bf540fec62ce67ce068321173ede",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-the-var-keyword-and-hoisting\\67329fbcfaf5ff5cdaa38a42.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "overrides While var is still part of JavaScript and works in all browsers, it's generally recommended to use let and const in modern JavaScript development They provide clear scoping rules help prevent common pitfalls and make your code's behavior more predictable --questions-- --text-- What is the scope of a variable declared with var outside of any function --answers-- Block scope --feedback-- Think about where a var variable declared outside a function can be accessed Function scope--feedback--\nThink about where a var variable declared outside a function can be accessed Global scope Module scope --feedback--\nThink about where a var variable declared outside a function can be accessed --video-solution--\n3\n--text--\nWhat will be the output of the following code ```js\nvar x = 10;\nif (true) {\nvar x = 20;\nconsole log(x);\n}\nconsole log(x);\n```\n--answers--\njs\n10\n10\n--feedback--\nRemember that var is function-scoped or globally-scoped, and it allows redeclaration within the same scope js\n20\n20\njs\n10\n20\n--feedback--\nRemember that var is function-scoped or globally-scoped, and it allows redeclaration within the same scope js\n20\n10\n--feedback--\nRemember that var is function-scoped or globally-scoped, and it allows redeclaration within the same scope --video-solution--\n2\n--text--\nWhich of the following is NOT a reason to avoid using var in modern JavaScript --answers--\nvar allows redeclaration of variables in the same scope --feedback--\nConsider which statement is false about var's behavior or support var is not supported in modern browsers var variables are function-scoped, not block-scoped --feedback--\nConsider which statement is false about var's behavior or support var variables are hoisted --feedback--\nConsider which statement is false about var's behavior or support --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4074,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-the-var-keyword-and-hoisting\\67329fbcfaf5ff5cdaa38a42.md",
      "source_type": "git_repo"
    },
    "token_count": 382,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6eb21490eeabfc9416da353c76bdf6cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b9538c25634394ceb7b8f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672b9538c25634394ceb7b8f\ntitle: How Do You Style the Different Link States challengeType: 19\ndashedName: how-do-you-style-the-different-link-states\n--description--\nThere are different states of a link, including link, visited, hover, focus, and active These states are important for helping users recognize links and providing clear feedback after interactions, which improves both usability and accessibility Styling these different link states is crucial for usability and accessibility, as it provides visual cues about the current state of the link This helps users understand which links they have visited, which link they are interacting with, and what will happen when they click For users with visual impairments or cognitive disabilities, these distinct styles can make navigation much easier and more intuitive Additionally, clear link states enhance the overall user experience by providing immediate feedback on user interactions, reducing confusion and improving the site's navigability These states can be styled using something called pseudo-classes in CSS A pseudo-class is a keyword added to a selector that specifies a special state of the selected element For example, :hover can change a button's color when the user's pointer hovers over it, while :visited can change the color of a link that has already been visited Pseudo-classes allow you to style elements based on their state or the user's interaction with them, without the need for additional markup in your HTML The syntax of a pseudo-class looks something like this where A is the selector and :B is the pseudo-class:\ncss\nA:B {\nproperty: value;\n}\nTo better understand how to style the different link states, let's take a look at some examples The :link pseudo-class styles unvisited links, indicating that they are clickable Here is an example of targeting an anchor element and using the :link pseudo-class:\ncss\n/* Normal state (unvisited link) */\na:link {\ncolor: red;\n}\nThe above example will change the link's default blue color to red when it is unvisited :visited styles links that have already been visited or clicked, helping users track which links they have clicked before Here’s an example usage of :visited pseudo-class:\ncss\n/* Visited link */\na:visited {\ncolor: green;\n}\nThis code will color the link to green when it is clicked :hover changes the link's style when the user hovers over it, providing a visual cue that the link is interactive",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4834,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b9538c25634394ceb7b8f.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "59969d49ccda11178d0b9e38eb3dd6f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b9538c25634394ceb7b8f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "blue color to red when it is unvisited :visited styles links that have already been visited or clicked, helping users track which links they have clicked before Here’s an example usage of :visited pseudo-class: css /* Visited link */ a:visited { color: green; } This code will color the link to green when it is clicked :hover changes the link's style when the user hovers over it, providing a visual cue that the link is interactiveHere’s an example usage of :hover pseudo-class:\ncss\n/* Hover state */\na:hover {\ncolor: yellow;\n}\nThis code will color the links to yellow when mouse is hovered over it :focus adds styles around the link when it is focused, such as when navigating with a keyboard, or enhancing accessibility Here is an example using the outline property to apply a solid orange outline when the link is focused css\n/* Focus state */\na:focus {\noutline: 2px solid orange;\n}\n:active changes the link's styles while the link is being clicked, providing immediate feedback to the user that their action is being registered Here’s an example usage of :active pseudo-class:\ncss\n/* Active state */\na:active {\ncolor: pink;\n}\nThis code example will make the link to pink color immediately when the link is clicked --questions--\n--text--\nWhich CSS pseudo-class is used to style links that have not been visited --answers--\n:visited\n--feedback--\nThink about the default appearance of a link before it has been clicked :link\n:hover\n--feedback--\nThink about the default appearance of a link before it has been clicked :active\n--feedback--\nThink about the default appearance of a link before it has been clicked --video-solution--\n2\n--text--\nWhat visual change does the hover state typically involve in CSS --answers--\nThe link becomes larger --feedback--\nConsider what happens when you move your cursor over a link The link text color changes The link text becomes bold --feedback--\nConsider what happens when you move your cursor over a link The link text is underlined --feedback--\nConsider what happens when you move your cursor over a link --video-solution--\n2\n--text--\nWhich CSS pseudo-class would you use to add a visible outline around a link when it is navigated to using the keyboard --answers--\n:link\n--feedback--\nThink about the state that indicates keyboard navigation :hover\n--feedback--\nThink about the state that indicates keyboard navigation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4834,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b9538c25634394ceb7b8f.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8a5606be9ade3bef31c686c692155241",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b9538c25634394ceb7b8f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "bold --feedback-- Consider what happens when you move your cursor over a link The link text is underlined --feedback-- Consider what happens when you move your cursor over a link --video-solution-- 2 --text-- Which CSS pseudo-class would you use to add a visible outline around a link when it is navigated to using the keyboard --answers-- :link --feedback-- Think about the state that indicates keyboard navigation :hover --feedback-- Think about the state that indicates keyboard navigation:focus\n:active\n--feedback--\nThink about the state that indicates keyboard navigation --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4834,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-styling-lists-and-links\\672b9538c25634394ceb7b8f.md",
      "source_type": "git_repo"
    },
    "token_count": 120,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b505315b3f66cdc2b81a4b980171a1f4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-abstraction\\68420c1dfb941767044c5a31.md",
    "source_type": "git_repo",
    "title": "title needs to be updated to correct title when lectures are finalized",
    "content": "id: 68420c1dfb941767044c5a31\ntitle needs to be updated to correct title when lectures are finalized\ntitle: Understanding Abstraction\nchallengeType: 19\ndashedName needs to be updated to correct title when lectures are finalized\ndashedName: lecture-understanding-abstraction\n--description--\nWatch the video or read the transcript and answer the questions below.\n--questions--\n--text--\nQuestion 1\n--answers--\nAnswer 1.1\n--feedback--\nFeedback 1\nAnswer 1.2\n--feedback--\nFeedback 1\nAnswer 1.3\n--feedback--\nFeedback 1\nAnswer 1.4\n--feedback--\nFeedback 1\n--video-solution--\n5\n--text--\nQuestion 2\n--answers--\nAnswer 2.1\n--feedback--\nFeedback 2\nAnswer 2.2\n--feedback--\nFeedback 2\nAnswer 2.3\n--feedback--\nFeedback 2\nAnswer 2.4\n--feedback--\nFeedback 2\n--video-solution--\n5\n--text--\nQuestion 3\n--answers--\nAnswer 3.1\n--feedback--\nFeedback 3\nAnswer 3.2\n--feedback--\nFeedback 3\nAnswer 3.3\n--feedback--\nFeedback 3\nAnswer 3.4\n--feedback--\nFeedback 3\n--video-solution--\n5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1144,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-abstraction\\68420c1dfb941767044c5a31.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "f2c14766002440a8e22f924bf2c1fa4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54ce90c19e9038f481d7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672a54ce90c19e9038f481d7\ntitle: What Is the aria-expanded Attribute, and How Does It Work challengeType: 19\ndashedName: what-is-the-aria-expanded-attribute\n--description--\nThe aria-expanded attribute is used for accessibility purposes to indicate if a control is expanded or collapsed It's used in conjunction with collapsible widgets like menus, accordions and other disclosure widgets that control the visibility of content The aria-expanded attribute is set to true if the control is expanded, or false if it is collapsed The information provided by aria-expanded allows people using screen readers to understand the current state of the control (whether it is expanded or collapsed) The aria-expanded attribute is applied to the interactive element that toggles the visibility of a collapsible widget For example, if a button toggles an expandable menu, the aria-expanded attribute is placed on the button When the menu is expanded, the aria-expanded attribute should be set to true like in this example:\nhtml\n<button aria-expanded=\"true\">Menu</button>\nWhen the menu is collapsed, it should be set to false instead html\n<button aria-expanded=\"false\">Menu</button>\nYou must always have the aria-expanded attribute set to either true or false on the controlling element For example, if a button toggles the visibility of a menu, the default value for aria-expanded should be  based on the default visibility of the menu If the menu is expanded by default, aria-expanded should initially be set to true If the menu is collapsed by default, aria-expanded should initially be set of false The value of aria-expanded should be updated dynamically using JavaScript as the user interacts with the element Additionally, the properties, aria-controls and aria-owns can be used in combination with aria-expanded to establish a programmatic connection between the controlling element and the element it controls Let's start with aria-controls When used with aria-expanded, the aria-controls attribute is used to specify the element being controlled For example, a button might expand or collapse a list acting as a menu The value of aria-controls will be the id of the controlled element (the menu list in this example) ```html\nMenu ```\nNotice that the list immediately follows the controlling button For expandable controls like this, it is best to have the expanded content immediately follow the element that controls it in the DOM",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6417,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54ce90c19e9038f481d7.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "1bd025f853a0bb73c964a1ed0b2ee691",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54ce90c19e9038f481d7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "attribute is used to specify the element being controlled For example, a button might expand or collapse a list acting as a menu The value of aria-controls will be the id of the controlled element (the menu list in this example) ```html Menu ``` Notice that the list immediately follows the controlling button For expandable controls like this, it is best to have the expanded content immediately follow the element that controls it in the DOMThis prevents screen reader users from having to search for the expanded content, and makes it easier for keyboard users to navigate through any interactive controls in the expanded content If it is not possible to place the expanded content immediately after the controlling element, the aria-owns attribute allows you to virtually move it after the control in the accessibility tree This allows assistive technology like screen readers to pretend the expanded content is placed directly after the control in the DOM ```html\nMenu ```\nThere are drawbacks to using the aria-owns attribute It creates unnecessary verbosity for screen reader users since most screen readers will automatically read out the entire contents of the expanded element when first expanded It also does not change the tab order, potentially forcing keyboard users to tab through all of the other interactive controls on the page before reaching the expanded content, unless you manage the tabbing order with JavaScript Ideally, the expandable content should be placed after the control element, and the aria-owns attribute should only be used in a worst case scenario when that is not possible If it must be used, you will need to thoroughly test with a wide range of screen readers and browsers to ensure that your implementation is accessible for everyone And just a reminder, when you use either aria-controls or aria-owns, the value of aria-expanded must continue to be updated as the control is expanded and collapsed The aria-expanded attribute indicates whether a control  is expanded or collapsed This information is essential for screen reader users, helping them understand the current state of collapsible elements like menus, accordions, and other similar disclosure widgets By using aria-expanded correctly, you can create an intuitive user experience for everyone --questions--\n--text--\nWhat is the primary purpose of the aria-expanded attribute --answers--\nTo define the visual appearance of an element --feedback--\nThink about how aria-expanded provides information to assistive technologies To improve website performance --feedback--\nThink about how aria-expanded provides information to assistive technologies To indicate whether an element is expanded or collapsed To enhance browser compatibility --feedback--\nThink about how aria-expanded provides information to assistive technologies",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6417,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54ce90c19e9038f481d7.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a7f64a31e88b385872c77bc763062afb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54ce90c19e9038f481d7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "you can create an intuitive user experience for everyone --questions-- --text-- What is the primary purpose of the aria-expanded attribute --answers-- To define the visual appearance of an element --feedback-- Think about how aria-expanded provides information to assistive technologies To improve website performance --feedback-- Think about how aria-expanded provides information to assistive technologies To indicate whether an element is expanded or collapsed To enhance browser compatibility --feedback-- Think about how aria-expanded provides information to assistive technologies--video-solution--\n3\n--text--\nWhen should the aria-expanded attribute be used --answers--\nFor all elements on a web page --feedback--\nConsider the context in which aria-expanded is most useful For elements that are visually hidden --feedback--\nConsider the context in which aria-expanded is most useful For collapsible elements like menus and accordions For elements with dynamic content --feedback--\nConsider the context in which aria-expanded is most useful --video-solution--\n3\n--text--\nWhat are the possible values for the aria-expanded attribute --answers--\ntrue, false, yes, no --feedback--\nThink about the states an element can be in regarding expansion or collapse open, closed, expanded, collapsed --feedback--\nThink about the states an element can be in regarding expansion or collapse show, hide, visible, invisible --feedback--\nThink about the states an element can be in regarding expansion or collapse true, false --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6417,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54ce90c19e9038f481d7.md",
      "source_type": "git_repo"
    },
    "token_count": 283,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "819dfdd1b362a3acf18c63f8bbc80830",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54dff9dc439089f1a219.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672a54dff9dc439089f1a219\ntitle: What Is the aria-live Attribute, and How Does It Work challengeType: 19\ndashedName: what-is-the-aria-live-attribute\n--description--\nThe aria-live attribute creates a live region on your page which can be used to notify screen reader users of dynamic content changes in the live region as they occur Common uses of live regions include messages that are displayed after an action has been taken (such as an error message or confirmation), content that updates periodically (such as a ticker, marquee, or countdown timer), or general status messages (such as updates about a process) Because the reading focus for screen readers can only be at one place at a time, screen reader users will not notice a content change if their focus is on another part of the page Live regions allow screen reader users to be automatically notified of changes that happen on the page in real time Without a live region, screen reader users might miss important content updates available to sighted users, since a sighted user has the ability to scan the entire page There are three possible values for this attribute, based on the priority of the information If you set aria-live to the value assertive that means that the update is very important It has the highest priority, so the user should be notified immediately This means that the screen reader will interrupt any announcement it is currently making to announce the content change in the live region Such interruptions can be extremely disruptive, so the assertive value should only be used for time-sensitive or critical notifications ```html\nYour session will expire in 30 seconds ```\nThe next value in order of priority is polite This value means that the update is not urgent, so the screen reader can wait until any current announcement is finished or until the user stops typing before announcing the update Most live regions will use the polite value ```html\nFile successfully uploaded\n```\nThe lowest priority value for aria-live is off which means that the update will not be announced unless the content is in an element that currently has keyboard focus Realistically, this value is almost never used as the use case is very narrow and it is not implemented consistently (if at all) across screen readers If you need live regions, plan on using polite for everything except critical messages that need assertive",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5627,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54dff9dc439089f1a219.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6e65740985103c859516b594e0623bd3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54dff9dc439089f1a219.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "File successfully uploaded ``` The lowest priority value for aria-live is off which means that the update will not be announced unless the content is in an element that currently has keyboard focus Realistically, this value is almost never used as the use case is very narrow and it is not implemented consistently (if at all) across screen readers If you need live regions, plan on using polite for everything except critical messages that need assertiveIt's also important to note that the aria-live attribute is not required if the updated information is contained in an element with an ARIA role of alert, log, marquee, status, or timer, as these roles already have default aria-live values But the default value can be changed by explicitly setting aria-live on the element Choosing the right aria-live value depends on the priority of the updated information If the updates are urgent, you should notify the user immediately with assertive But you should use this only if the updates are really urgent because sudden interruptions can potentially disorient users and affect the user experience If the update can wait until the current task is finished, you should use polite instead The aria-live attribute lets assistive technologies know when the content is changing dynamically on a web page This helps users with disabilities stay updated on important announcements and updates By using aria-live appropriately, you can ensure that users are aware of these updates based on their priority --questions--\n--text--\nWhat is the primary purpose of the aria-live attribute --answers--\nTo define the visual appearance of an element --feedback--\nThink about how aria-live helps assistive technologies understand the content To improve website performance --feedback--\nThink about how aria-live helps assistive technologies understand the content To indicate that an element's content is changing dynamically To enhance browser compatibility --feedback--\nThink about how aria-live helps assistive technologies understand the content --video-solution--\n3\n--text--\nWhich of the following values can be used for the aria-live attribute --answers--\ntrue, false, off --feedback--\nThink about the different levels of urgency for announcing changes to dynamic content visible, hidden, off --feedback--\nThink about the different levels of urgency for announcing changes to dynamic content assertive, polite, off open, closed, off --feedback--\nThink about the different levels of urgency for announcing changes to dynamic content --video-solution--\n3\n--text--\nWhat is the difference between the polite and assertive values for the aria-live attribute",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5627,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54dff9dc439089f1a219.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6aed0452eab10eaf8a5ea5ee747ff9dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54dff9dc439089f1a219.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "for the aria-live attribute --answers-- true, false, off --feedback-- Think about the different levels of urgency for announcing changes to dynamic content visible, hidden, off --feedback-- Think about the different levels of urgency for announcing changes to dynamic content assertive, polite, off open, closed, off --feedback-- Think about the different levels of urgency for announcing changes to dynamic content --video-solution-- 3 --text-- What is the difference between the polite and assertive values for the aria-live attribute--answers--\npolite announces updates immediately, while assertive announces updates when the focus is on another element --feedback--\nThink about the level of urgency for announcing dynamic content polite announces updates after the current task is finished, while assertive announces updates immediately There is no difference between polite and assertive --feedback--\nThink about the level of urgency for announcing dynamic content polite is used for important updates, while assertive is used for less urgent updates --feedback--\nThink about the level of urgency for announcing dynamic content --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5627,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54dff9dc439089f1a219.md",
      "source_type": "git_repo"
    },
    "token_count": 210,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2015a1054dea4ffe99d4a42b70390690",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-the-var-keyword-and-hoisting\\67335f45489c5a11b71d0ed5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67335f45489c5a11b71d0ed5\ntitle: What Is Hoisting challengeType: 19\ndashedName: what-is-hoisting\n--description--\nHoisting is a behavior in JavaScript that often confuses beginners, but understanding it can help you avoid subtle bugs in your code In simple terms hoisting is JavaScript's default behavior of moving declarations to the top of their respective scopes during the compilation phase before the code is executed To understand hoisting, it's important to know that JavaScript runs in two phases: the compilation phase and the execution phase During the compilation phase, the JavaScript engine goes through your code and sets up memory space for variables and functions This is where hoisting comes into play Let's start with variables hoisting, when you declare a variable using the var keyword, JavaScript hoists the declaration to the top of its scope However it's crucial to note that only the declaration is hoisted, not the initialization This means you can use a variable in your code before you have declared it, but its value will be undefined until you actually assign a value to it js\nconsole log(x); // undefined\nvar x = 5;\nconsole log(5); // 5\nIn this code even though we use x before declaring it we don't get an error, instead we get undefined This is because JavaScript hoists the declaration var x to the top of its scope but not the initialization x = 5 It's as if the code were rewritten like this:\njs\nvar x;\nconsole log(x); // undefined\nx = 5;\nconsole log(x); // 5\nFunction hoisting works a bit differently When you declare a function using the function declaration syntax both the function name and the function body are hoisted This means you can call a function before you've declared it in your code Here's an example of function hoisting:\n```js\nsayHello(); // \"Hello, World \"\nfunction sayHello(){\nconsole log(\"Hello, World \");\n}\n```\nIn this case, we can call sayHello() before its declaration because the entire function is hoisted to the top of its scope It's important to note that hoisting works differently with let and const declarations introduced in ES6 js\nconsole log(y); // Throws a ReferenceError\nlet y = 10;\nThese declarations are hoisted but they are not initialized and you can't access them before the actual declaration in your code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4637,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-the-var-keyword-and-hoisting\\67335f45489c5a11b71d0ed5.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fe7f29619b1bb60dd0f1986fd30e5ebf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-the-var-keyword-and-hoisting\\67335f45489c5a11b71d0ed5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "console log(\"Hello, World \"); } ``` In this case, we can call sayHello() before its declaration because the entire function is hoisted to the top of its scope It's important to note that hoisting works differently with let and const declarations introduced in ES6 js console log(y); // Throws a ReferenceError let y = 10; These declarations are hoisted but they are not initialized and you can't access them before the actual declaration in your codeThis is often referred to as the temporal dead zone Understanding hoisting can help you write cleaner, more predictable code However, relying on hoisting can make your code harder to read and maintain As a best practice, it's recommended to declare your variables at the top of their scope and your functions before you use them regardless of hoisting This make your code's behavior more explicit and easier for other including your future self to understand --questions--\n--text--\nWhat happens when a variable declared with var is hoisted --answers--\nBoth the declaration and initialization are moved to the top --feedback--\nThink about what value a hoisted variable has before it's explicitly assigned a value Only the declaration is moved to the top The variable is not hoisted at all --feedback--\nThink about what value a hoisted variable has before it's explicitly assigned a value The variable is deleted from the code --feedback--\nThink about what value a hoisted variable has before it's explicitly assigned a value --video-solution--\n2\n--text--\nHow does function hoisting differ from variable hoisting --answers--\nFunctions are not hoisted --feedback--\nConsider whether you can call a function before its declaration in the code Only the function name is hoisted --feedback--\nConsider whether you can call a function before its declaration in the code Both the function name and body are hoisted Function hoisting only works with arrow functions --feedback--\nConsider whether you can call a function before its declaration in the code --video-solution--\n3\n--text--\nWhat is the result of trying to access a variable declared with let before its declaration in the code --answers--\nIt returns undefined --feedback--\nThink about the concept of the \"temporal dead zone\" mentioned in the lecture It throws a ReferenceError It returns null --feedback--\nThink about the concept of the \"temporal dead zone\" mentioned in the lecture It works without any issues\n--feedback--\nThink about the concept of the \"temporal dead zone\" mentioned in the lecture --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4637,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-the-var-keyword-and-hoisting\\67335f45489c5a11b71d0ed5.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ba0c60cbd7087bbcc74c6feb0ef3cbb1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54f29d783890d1f94740.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672a54f29d783890d1f94740\ntitle: What Are Some Common ARIA States Used on Custom Control Elements challengeType: 19\ndashedName: what-are-some-common-aria-states-used-on-custom-control-elements\n--description--\nSemantic form control elements like input, select, textarea, button, and fieldset have built-in states that are conveyed to assistive technologies For example, you could use the disabled attribute to disable a button or the checked attribute to indicate that a checkbox is checked But if you are creating a custom control element, you need to use ARIA attributes to convey the state of the control to assistive technologies In this lecture, we will discuss a few common ARIA states that you can use on custom control elements The first ARIA state we will discuss is aria-selected This state is used to indicate that an element is selected You can use this state on custom controls like a tabbed interface, a listbox, or a grid Here is an example of how you can use aria-selected on a custom tab control:\n```html\nTab 1\nTab 2\nTab 3\n```\nTabs are used to display multiple panels of content in a limited space The aria-selected state is used to indicate which tab is currently selected When the user selects a tab, the aria-selected state of the selected tab is set to true, and the aria-selected state of the other tabs is set to false Another common ARIA state is aria-disabled This state is used to indicate that an element is disabled only to people using assistive technologies, such as screen readers It is important to note that aria-disabled does not actually disable the element It is up to you, the developer, to make it look and act like a disabled element This attribute is also commonly used on native HTML elements in place of the disabled attribute Which one you choose will depend on the context the button is being used Here is an example of how you can use aria-disabled on a custom edit button:\n```html\nEdit\n```\nThe aria-disabled attribute is used to tell screen reader users that the edit button is disabled and cannot be interacted with Again, it does not actually disable the button When using aria-disabled,you will need to apply styling and JavaScript to make the control look and behave like a disabled button In most cases, you will probably use the native button element, but there are cases where you might need to use a custom control",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8730,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54f29d783890d1f94740.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "add73e5915189888a2bcb112a9f8c492",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54f29d783890d1f94740.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Edit ``` The aria-disabled attribute is used to tell screen reader users that the edit button is disabled and cannot be interacted with Again, it does not actually disable the button When using aria-disabled,you will need to apply styling and JavaScript to make the control look and behave like a disabled button In most cases, you will probably use the native button element, but there are cases where you might need to use a custom controlSo, it is essential to know how to convey the state of the control to assistive technologies The next ARIA state we will discuss is aria-haspopup This state is used to indicate that an interactive element will trigger a popup element when activated You can only use the aria-haspopup attribute when the popup has one of the following roles: menu, listbox, tree, grid, or dialog The value of aria-haspopup must be either one of these roles or true, which defaults to the menu role Here is an example of a file editor menu  that uses aria-haspopup:\n```html\nFile\nOpen\nNew\nSave\nDelete\n```\nThe aria-haspopup state is used to indicate that the File menu button will open a popup menu when activated Screen reader users may hear this additional information when they navigate to the button You will need to use JavaScript to show and hide the popup menu, and to implement proper keyboard support for interacting with the menu Also, please note that the ARIA menu role refers to a very specific type of menu It generally refers to a list of actions that the user can invoke, similar to a menu on a desktop application It does not include more common uses of what we typically refer to as \"menus\", such as navigation menus Realistically, most \"menus\" you create on the web will not be ARIA menus and you will not use aria-haspopup with them The next ARIA state we will discuss is aria-required The aria-required attribute is used to indicate that a field needs to be filled out before the form is submitted Here is an example of working with the aria-required attribute for a custom form control ```html\nFull Name*\n```\nWe need to use the contenteditable attribute so users can type in their input We are also using the aria-required attribute set to true to indicate that this custom form control is required To make the form control look like a normal form control, you would need to add CSS You would also need to add JavaScript to prevent the form from being submitted without content If the label already has the word required, then you should omit the aria-required attribute",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8730,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54f29d783890d1f94740.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "218c1096423f016b5bb2985a73f9e927",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54f29d783890d1f94740.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "contenteditable attribute so users can type in their input We are also using the aria-required attribute set to true to indicate that this custom form control is required To make the form control look like a normal form control, you would need to add CSS You would also need to add JavaScript to prevent the form from being submitted without content If the label already has the word required, then you should omit the aria-required attributeThis ensures that screen readers only announce the word required once In most cases, you will probably use the native label and form elements with the required attribute But if you need to create a custom form control, then it is important to add the aria-required attribute when necessary Additionally, the aria-required attribute can also be used on native form inputs, such as the input, textarea, and select elements This is often preferred to the native required attribute, since the required attribute may have potential usability and accessibility concerns, particularly with the default error handling provided by the browser Ultimately, you will need to test in order to determine which attribute is best for your situation The last ARIA state we will discuss is aria-checked This attribute is used to indicate whether an element is in the checked state It is most commonly used when creating custom checkboxes, radio buttons, switches, and listboxes Here is an example of how you can use aria-checked on a custom checkbox control:\n```html\nCheckbox\n```\nNative checkbox elements have a built-in checked state that is conveyed to assistive technologies But if you are creating a custom checkbox control, you will need to use the aria-checked attribute to indicate its state When the user interacts with the custom checkbox control, you will need to use the aria-checked state to reflect the new state of the checkbox When the checkbox is checked, the aria-checked attribute is set to true When it is unchecked, it is set to false Native elements typically have better support and built-in accessibility features However, if you must create custom controls, using ARIA attributes is essential to convey the state of these controls to assistive technologies effectively As always, test your work to ensure that ARIA attributes are applied correctly and that the custom control functions in a way that is both accessible and user-friendly --questions--\n--text--\nWhat ARIA state would you use to indicate that a tab is currently selected --answers--\naria-disabled\n--feedback--\nThis state shows which tab is active aria-selected\naria-haspopup\n--feedback--\nThis state shows which tab is active aria-checked\n--feedback--\nThis state shows which tab is active",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8730,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54f29d783890d1f94740.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "3a0b596ea268048bbdbd19dad63c0b81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54f29d783890d1f94740.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assistive technologies effectively As always, test your work to ensure that ARIA attributes are applied correctly and that the custom control functions in a way that is both accessible and user-friendly --questions-- --text-- What ARIA state would you use to indicate that a tab is currently selected --answers-- aria-disabled --feedback-- This state shows which tab is active aria-selected aria-haspopup --feedback-- This state shows which tab is active aria-checked --feedback-- This state shows which tab is active--video-solution--\n2\n--text--\nIn the context of custom controls, which ARIA state is used to indicate that an element is currently disabled --answers--\naria-checked\n--feedback--\nThis state shows that an element cannot be interacted with aria-disabled\naria-selected\n--feedback--\nThis state shows that an element cannot be interacted with aria-haspopup\n--feedback--\nThis state shows that an element cannot be interacted with --video-solution--\n2\n--text--\nWhen you want to indicate that a menu item has a submenu, which ARIA state should be used --answers--\naria-checked\n--feedback--\nOne of the state heavily suggests that a popup is present aria-disabled\n--feedback--\nOne of the state heavily suggests that a popup is present aria-haspopup\naria-selected\n--feedback--\nOne of the state heavily suggests that a popup is present --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8730,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a54f29d783890d1f94740.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "a9e82abe59ef18a0df7016acdab87fe6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a5507d857a891139abc7f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672a5507d857a891139abc7f\ntitle: What Is the aria-controls Attribute, and How Does It Work challengeType: 19\ndashedName: what-is-the-aria-controls-attribute\n--description--\nThe aria-controls attribute is used to create a programmatic relationship between an element that controls the presence of another element on the page, and the element it controls This relationship can help screen reader users better understand how the control works Common uses include a set of tabs that control the visibility of different sections of content, or a button that toggles the visibility of a menu Let's take a look at an example to see how this works In this example of a tabbed interface, we have a div element with a set of three buttons:\n```html\nTab 1\nTab 2\nTab 3\n```\nThe div uses role=\"tablist\" to indicate that it serves as a container element for a group of tabs Each button represents a tab and has a role attribute set to tab In most tabbed interfaces, the first tab panel is visible by default, so the first tab button has an aria-selected attribute set to true to indicate that its associated section of content is currently visible The aria-controls attribute is used to associate each button with the section of content that it controls Here are the three sections of content that correspond to the tabs:\n```html\nSection 1 content\nSection 2 content\nSection 3 content\n```\nEach section of content has a role attribute set to tabpanel and an aria-labelledby attribute that points to the corresponding tab to give the panel an accessible name The hidden attribute is used to hide the sections of content that are not currently selected Each section ID matches the value of the aria-controls attribute on the corresponding button The section1 ID matches the aria-controls attribute on the first button, section2 matches the aria-controls attribute on the second button, and section3 matches the aria-controls attribute on the third button This is how the association between the tabs and their sections of content is established To switch between the different sections you will need to use JavaScript to update the hidden attribute on the section and the aria-selected attribute on the button based on which section is currently visible Only one section can be visible at a time and it should not have the hidden attribute and aria-selected should be set to true on its button The remaining hidden sections should all have the hidden attribute and aria-selected should be set to false on their buttons",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5451,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a5507d857a891139abc7f.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "be62232fede32c0064a8aac540bd05d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a5507d857a891139abc7f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "sections you will need to use JavaScript to update the hidden attribute on the section and the aria-selected attribute on the button based on which section is currently visible Only one section can be visible at a time and it should not have the hidden attribute and aria-selected should be set to true on its button The remaining hidden sections should all have the hidden attribute and aria-selected should be set to false on their buttonsTabs are a common use case for the aria-controls attribute, but it can be used in other scenarios where one element controls the visibility or behavior of another element Other examples include accordions, dropdown menus, and modals The next time you design a user interface that involves controlling the visibility  of elements, consider using the aria-controls attribute to establish the relationship between the controlling element and the controlled element --questions--\n--text--\nWhat is the purpose of the aria-controls attribute in the context of tabs --answers--\nTo specify which tab is currently active --feedback--\nThink about the association between tabs and content sections To hide or show sections of content --feedback--\nThink about the association between tabs and content sections To associate a tab with the section it controls To set the role of the element --feedback--\nThink about the association between tabs and content sections --video-solution--\n3\n--text--\nHow does the aria-controls attribute affect the content sections in the example --answers--\nIt automatically updates the content based on user input --feedback--\nThink about how the attribute is used to control the visibility of content sections It hides or shows sections based on which tab is selected It changes the tab's style to indicate it is selected --feedback--\nThink about how the attribute is used to control the visibility of content sections It defines the visual appearance of the tab --feedback--\nThink about how the attribute is used to control the visibility of content sections --video-solution--\n2\n--text--\nIn the provided example, how is the aria-labelledby attribute used --answers--\nTo specify which tab controls which content section --feedback--\nIt links the tab to the content section it controls To identify the content section that a tab controls To define the role of the tab and content sections --feedback--\nIt links the tab to the content section it controls To automatically switch between content sections when a tab is clicked --feedback--\nIt links the tab to the content section it controls --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5451,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\672a5507d857a891139abc7f.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "56abc690bce058ad1979b8bbc991d9a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\689b189ab38ff6d72cee593f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 689b189ab38ff6d72cee593f\ntitle: How Do You Make Dynamic and Interactive Content Accessible challengeType: 19\ndashedName: how-do-you-make-dynamic-and-interactive-content-accessible\n--description--\nYou previously learned how semantic markup and ARIA attributes make content accessible In real-world apps, content is rarely static, and pages often update dynamically through JavaScript When this happens, it's important to make sure these changes also are reflected in the HTML This allows screen readers to accurately convey the updated state to users Without this, people relying on assistive tools might never know that something changed, or could be given outdated or misleading information Let's look at a common scenario where JavaScript changes the state of an element, and how you can keep your HTML accessible by updating ARIA attributes Suppose you have a button that opens and closes a dropdown menu:\n```html\nMenu\nAction 1\nAction 2\n```\n```js\nconst button = document getElementById(\"menuButton\");\nconst menu = document getElementById(\"menuList\");\nbutton addEventListener(\"click\", () => {\nconst expanded = button getAttribute(\"aria-expanded\") === \"true\";\nbutton setAttribute(\"aria-expanded\", String( expanded));\nmenu hidden = expanded;\n});\n```\nThe HTML sets up a button that controls a dropdown menu The button uses aria-expanded to indicate whether the menu is open, and aria-controls to link it to the menu by referencing the menu's id The JavaScript listens for clicks on the menu button When clicked, it toggles the value of aria-expanded and updates the hidden property on the menu This keeps the menu's visibility and the accessibility information in sync, so both sighted users and screen reader users know whether the menu is open or closed You will learn more about those ARIA attributes in the upcoming lectures For now, just remember that when your JavaScript changes the state of an element, you should also update the relevant ARIA attributes so assistive technologies accurately reflect what's actually on the screen --questions--\n--text--\nWhy is it important to update the HTML when JavaScript changes the state of a page element --answers--\nSo assistive technologies can accurately communicate the current state to users So users with assistive technologies can interact with the element --feedback--\nThink about what users with assistive technologies might miss if ARIA attributes don't match what's shown on the page So the page doesn't crash upon state change",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4367,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\689b189ab38ff6d72cee593f.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "64ef17116dc526a037cb2bbb0b88767a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\689b189ab38ff6d72cee593f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "accurately reflect what's actually on the screen --questions-- --text-- Why is it important to update the HTML when JavaScript changes the state of a page element --answers-- So assistive technologies can accurately communicate the current state to users So users with assistive technologies can interact with the element --feedback-- Think about what users with assistive technologies might miss if ARIA attributes don't match what's shown on the page So the page doesn't crash upon state change--feedback--\nThink about what users with assistive technologies might miss if ARIA attributes don't match what's shown on the page So the element's state can be saved automatically between page loads --feedback--\nThink about what users with assistive technologies might miss if ARIA attributes don't match what's shown on the page --video-solution--\n1\n--text--\nWhat does the aria-controls attribute on the menu button specify --answers--\nThe default state of the menu when the page loads --feedback--\nRefer back to the part of the lecture where aria-controls is explained The keyboard shortcut used to activate the menu --feedback--\nRefer back to the part of the lecture where aria-controls is explained The class name of the element that the button controls --feedback--\nRefer back to the part of the lecture where aria-controls is explained The ID of the element that the button controls --video-solution--\n4\n--text--\nWhat does the aria-expanded attribute on the menu button indicate --answers--\nWhether the menu button has been clicked --feedback--\nRefer back to the part of the lecture where aria-expanded is explained Whether the menu button is enabled or disabled --feedback--\nRefer back to the part of the lecture where aria-expanded is explained Whether the menu is open or closed Whether the menu contains a submenu --feedback--\nRefer back to the part of the lecture where aria-expanded is explained --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4367,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-aria-expanded-aria-live-and-common-aria-states\\689b189ab38ff6d72cee593f.md",
      "source_type": "git_repo"
    },
    "token_count": 372,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b0332f5ffe2542e36d0ddb3251e62b9b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\6733b072bd8f5b06ccdbd9e2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733b072bd8f5b06ccdbd9e2\ntitle: What Is Asynchronous JavaScript, and How Does It Differ from Synchronous JavaScript challengeType: 19\ndashedName: what-is-asynchronous-javascript-and-how-does-it-differ-from-synchronous-javascript\n--description--\nLet’s learn about asynchronous JavaScript Asynchronous events occur at different times, independently from each other In the context of software development, \"asynchronous\" refers to tasks that run in the background, independently from the main flow of the program The main advantage of asynchronous processes is that they don’t block the execution of the main program That’s particularly helpful for tasks that may take a long time to run, such as fetching data from a remote server, processing large files, handling user input, and performing complex calculations This is what we know as asynchronous programming This approach contrasts with the traditional synchronous programming technique that you have been working with so far When you write multiple lines of code, you can usually predict what will happen and when it will happen The first line will be executed, then the second line, and so on in the order that you write them In this example, the first line where you define the variable will be executed first, then the second line, and finally the third line where the string is logged to the console:\njs\nconst topic = \"JavaScript\";\nconst learning = `I'm learning ${topic} `;\nconsole log(learning);\nEverything is sequential and predictable Each line is completed before the next one starts This type of JavaScript program is known as single-threaded The concept of threads is very important A thread is a unit of execution within a process It’s like a separate flow of control within the program In synchronous programming, threads execute sequentially, one after the other If a thread is blocked, like waiting for user input, the entire process is blocked until the thread is completed In asynchronous programming, threads can be executed concurrently, running multiple threads at the same time This way, the program can continue running multiple tasks simultaneously without making the main program unresponsive, even if one of the threads is blocked Asynchronous programming often involves callbacks, promises, or async/await to handle non-blocking operations As you learned in earlier lectures, a callback is a function that you pass to another function to be called later Event handlers are a particular type of callback that you’ve worked with before They used to be the most common way to implement asynchronous functions in JavaScript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5687,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\6733b072bd8f5b06ccdbd9e2.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2d10bc50d0e4e548c68940eb0293e455",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\6733b072bd8f5b06ccdbd9e2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "tasks simultaneously without making the main program unresponsive, even if one of the threads is blocked Asynchronous programming often involves callbacks, promises, or async/await to handle non-blocking operations As you learned in earlier lectures, a callback is a function that you pass to another function to be called later Event handlers are a particular type of callback that you’ve worked with before They used to be the most common way to implement asynchronous functions in JavaScriptHowever, if the callback function also takes other callback functions, the code and logic can get quite complicated very quickly Currently, the most commonly used technique for implementing asynchronous programming in JavaScript is the promise A Promise is an object that represents the eventual completion (or failure) of an asynchronous process and its value The value of a promise is not known when the promise is created It’s only known when the asynchronous process is completed For example, the process of fetching data from a remote API for your web application may take some time Meanwhile, you want your users to have a nice user experience, right To implement this, you could create a promise to keep the user interface active and interactive while the asynchronous process is running When the process is completed, the promise will contain the data that was sent back by the API, so the application can handle it or render it appropriately when it’s available Asynchronous programming is a powerful tool for building efficient JavaScript applications By understanding the differences between synchronous and asynchronous programming, you can choose the right approach for your application and write more efficient code --questions--\n--text--\nWhat is the primary difference between synchronous and asynchronous programming --answers--\nSynchronous code executes sequentially, while asynchronous code executes concurrently Synchronous code is more efficient than asynchronous code --feedback--\nThink about how the execution flow differs between the two Synchronous code is only used for simple tasks, while asynchronous code is used for complex tasks --feedback--\nThink about how the execution flow differs between the two Synchronous code is always faster than asynchronous code --feedback--\nThink about how the execution flow differs between the two --video-solution--\n1\n--text--\nWhich of the following is a technique for handling asynchronous operations in JavaScript --answers--\nPromises --feedback--\nThink about the different ways to handle asynchronous tasks Callbacks --feedback--\nThink about the different ways to handle asynchronous tasks Event listeners --feedback--\nThink about the different ways to handle asynchronous tasks All of the above --video-solution--\n4\n--text--\nWhat is the primary advantage of using asynchronous programming --answers--\nImproved performance for CPU-bound tasks",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5687,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\6733b072bd8f5b06ccdbd9e2.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "41fe68cd27727f96a3c236da1569caa0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\6733b072bd8f5b06ccdbd9e2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "between the two --video-solution-- 1 --text-- Which of the following is a technique for handling asynchronous operations in JavaScript --answers-- Promises --feedback-- Think about the different ways to handle asynchronous tasks Callbacks --feedback-- Think about the different ways to handle asynchronous tasks Event listeners --feedback-- Think about the different ways to handle asynchronous tasks All of the above --video-solution-- 4 --text-- What is the primary advantage of using asynchronous programming --answers-- Improved performance for CPU-bound tasks--feedback--\nThink about how asynchronous programming can prevent the main thread from being blocked Simpler code structure --feedback--\nThink about how asynchronous programming can prevent the main thread from being blocked Increased responsiveness of applications Reduced memory usage --feedback--\nThink about how asynchronous programming can prevent the main thread from being blocked --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5687,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\6733b072bd8f5b06ccdbd9e2.md",
      "source_type": "git_repo"
    },
    "token_count": 168,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "69d6a414d2a471e8b4b27350c84e3893",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\67340798c2c1776709d8a5fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67340798c2c1776709d8a5fe\ntitle: How Does the Async Attribute Work Inside Script Elements, and How Does It Differ from the Defer Attribute challengeType: 19\ndashedName: how-does-the-async-attribute-work-inside-script-elements-and-how-does-it-differ-from-the-defer-attribute\n--description--\nThe async and defer attributes in HTML script elements play a crucial role in how JavaScript files are loaded and executed in web pages Understanding them can improve your website's performance and user experience When you include a script in your HTML file, it looks like this:\n```js\n```\nWhen the browser finds this script tag, it stops parsing the HTML, downloads the script, executes it, and then continues parsing the HTML This can slow down the loading of your web page, especially if you have large scripts This is where the async and defer attributes come in They provide ways to load scripts more efficiently Let's start with the async attribute:\n```js\n```\nBy adding the async attribute to a script tag, the browser will continue parsing the HTML while the script is being downloaded Once the script is fully downloaded, the browser will pause HTML parsing, execute the script, and then resume parsing the HTML This can significantly speed up page loading It's important to note that async scripts are executed as soon as they're downloaded, which means they might not run in the correct order which we desire This is where the defer attribute comes in for the rescue Let's look at how the defer attribute looks like:\n```js\n```\nThe defer attribute is similar to async attribute However, defer scripts are not executed immediately after they're downloaded Instead, they wait until the HTML parsing is complete Furthermore, defer scripts execute in the order they appear in the HTML code In short, use async for scripts where the order of execution doesn't matter, and use defer when you need to ensure that scripts run in the correct order Both attributes can significantly improve page load times by allowing the browser to continue parsing HTML while scripts are being downloaded in the background --questions--\n--text--\nWhat is the advantage of using the defer attribute in a <script> tag --answers--\nIt helps differentiate the script from async scripts --feedback--\nRemember the purpose and differences of the defer and async attributes It reduces memory usage during page load --feedback--\nThe defer attribute has nothing to do with memory management It can improve the overall page loading performance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4245,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\67340798c2c1776709d8a5fe.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "2fae5f8471841312b4636722f4ea8b3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\67340798c2c1776709d8a5fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the browser to continue parsing HTML while scripts are being downloaded in the background --questions-- --text-- What is the advantage of using the defer attribute in a <script> tag --answers-- It helps differentiate the script from async scripts --feedback-- Remember the purpose and differences of the defer and async attributes It reduces memory usage during page load --feedback-- The defer attribute has nothing to do with memory management It can improve the overall page loading performanceIt lets developers set a custom delay time before scripts run --feedback--\nThe defer attribute doesn't execute scripts on a custom timer --video-solution--\n3\n--text--\nIn what order will the following scripts be executed ```html\n```\n--answers--\n1 js, 2 js, 3 js --feedback--\nRemember how async and defer affect the execution order of scripts 2 js, 1 js, 3 js --feedback--\nRemember how async and defer affect the execution order of scripts The order is unpredictable 1 js, 3 js, 2 js --feedback--\nRemember how async and defer affect the execution order of scripts --video-solution--\n3\n--text--\nWhich statement about async and defer is true --answers--\nasync scripts are executed in the order they appear in the HTML --feedback--\nThink about when async and defer scripts are executed in relation to HTML parsing defer scripts are executed as soon as they are downloaded --feedback--\nThink about when async and defer scripts are executed in relation to HTML parsing async scripts can be executed before the HTML is fully parsed defer scripts are executed before any async scripts --feedback--\nThink about when async and defer scripts are executed in relation to HTML parsing --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4245,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\67340798c2c1776709d8a5fe.md",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8736d951f4902dc7537d5f0973dfe489",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407a223891b6734563c89.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673407a223891b6734563c89\ntitle: What Is the Fetch API, and What Are Common Types of Resources That Are Fetched from the Network challengeType: 19\ndashedName: what-is-the-fetch-api-and-what-are-common-types-of-resources-that-are-fetched-from-the-network\n--description--\nThe Fetch API allows web apps to make network requests, typically to retrieve or send data to the server This API provides a fetch() method that you can use to make these requests Let's look at a basic example of how to use fetch:\njs\nfetch('https://api example com/data')\nIn this example, we're making a GET request to https://api example com/data This will then return us some data that we need to convert to JSON format and can use anywhere we want to By default, the Fetch API uses the GET method to retrieve data This will be covered in the next lecture, along with other common HTTP request methods Now, let's discuss some common types of resources that are fetched from the network In our web apps, we need some common data like weather data, professions list data, country names list, country code or country flag icons/images Using these data we can make our app more informative and interactive Thanks to Fetch API, we can get these resources from the network Images are some frequently fetched resources You might use fetch to load images statically or dynamically based on user actions, and display them on your web app Text files are another type of resource often fetched This could include configuration files, log files, or even entire documents that you want to display on your webpage In some cases, you might fetch audio or video files The Fetch API can handle these types of resources as well, allowing you to work with a wide variety of data types --questions--\n--text--\nWhat is the primary purpose of the Fetch API in JavaScript --answers--\nTo create new HTML elements --feedback--\nThink about what fetch allows you to do in relation to servers To make network requests and retrieve resources To manipulate the DOM --feedback--\nThink about what fetch allows you to do in relation to servers To store data in the browser --feedback--\nThink about what fetch allows you to do in relation to servers --video-solution--\n2\n--text--\nWhat type of data is commonly received from a fetch request to an API --answers--\nPDF\n--feedback--\nConsider what format is easy for JavaScript to work with",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407a223891b6734563c89.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a6ad7bb14c36934ed89cdfdd5905dac0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407a223891b6734563c89.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "relation to servers To make network requests and retrieve resources To manipulate the DOM --feedback-- Think about what fetch allows you to do in relation to servers To store data in the browser --feedback-- Think about what fetch allows you to do in relation to servers --video-solution-- 2 --text-- What type of data is commonly received from a fetch request to an API --answers-- PDF --feedback-- Consider what format is easy for JavaScript to work withJSON\nMP3\n--feedback--\nConsider what format is easy for JavaScript to work with EXE\n--feedback--\nConsider what format is easy for JavaScript to work with --video-solution--\n2\n--text--\nWhich of the following is NOT a common type of resource fetched from the network --answers--\nJSON data --feedback--\nThink about what types of data are typically stored on servers and retrieved by web applications HTML content --feedback--\nThink about what types of data are typically stored on servers and retrieved by web applications JavaScript functions Image files --feedback--\nThink about what types of data are typically stored on servers and retrieved by web applications --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407a223891b6734563c89.md",
      "source_type": "git_repo"
    },
    "token_count": 224,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "afd8977fb435cac3340a9d1a535291e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407be6af21d6766ed4b96.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673407be6af21d6766ed4b96\ntitle: How Does the Fetch API Work with Common HTTP Methods and res json() challengeType: 19\ndashedName: how-does-the-fetch-api-work-with-common-http-methods-and-res-json\n--description--\nIn the previous lecture, we saw what the Fetch API is and how to use it In this lecture, we will discuss about the GET, POST, PUT and DELETE HTTP methods of Fetch API Let's start with the most common HTTP method which is the GET method This is used to retrieve data from a server When you use fetch() without specifying a method, it defaults to GET js\nfetch('https://api example com/data')\nIn this code, we're making a GET request to https://api example com/data Now, please note that you cannot use this data directly, you have to convert the response to a JSON format Only then you can use it anywhere you want in your project Here’s an example of how to do it:\njs\nfetch('https://api example com/data') then(response => response json()) then(data => console log(data))\nIn this code, the response coming from the Fetch API is a promise, and we are using a then handler to convert the response to a JSON format In a prior lecture, you learned that a Promise is an object that represents the eventual completion (or failure) of an asynchronous process and its value The value of a promise is not known when the promise is created It’s only known when the asynchronous process is completed When we chain the two then handlers to the fetch call, this is something called promise chaining which will be taught in the next lecture So far we have been retrieving resources from a server But, did you know that we can also send data to the server The POST method is used to send data to a server to create a resource Here’s an example of a POST method which is used to create data into the server:\njs\nfetch('https://api example com/users', {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/json',\n},\nbody: JSON stringify({\nname: 'John Doe',\nemail: 'john@example com'\n})\n})\nIn this example, we're sending a POST request to create a new user We specify the method as POST, set the appropriate headers, and include a body with the data we want to send The body needs to be a string, so we use JSON",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4902,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407be6af21d6766ed4b96.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c427095d3edd670ad3e2b2bb7cc6a9fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407be6af21d6766ed4b96.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is used to create data into the server: js fetch('https://api example com/users', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON stringify({ name: 'John Doe', email: 'john@example com' }) }) In this example, we're sending a POST request to create a new user We specify the method as POST, set the appropriate headers, and include a body with the data we want to send The body needs to be a string, so we use JSONstringify() to convert our object to a JSON string The PUT method is used to update existing resources of a server Here’s an example:\njs\nfetch('https://api example com/users/45', {\nmethod: 'PUT',\nheaders: {\n'Content-Type': 'application/json',\n},\nbody: JSON stringify({\nname: 'John Smith',\nemail: 'john@example com'\n})\n})\nIn this example, look carefully at the URL, you can see a 45 at the end This is typically used as a unique ID to identify the data we are trying to update We used the PUT method on the code and also specified the data as the body which will be used to update the identified data The DELETE method is used to delete a resource from the server Here’s an example:\njs\nfetch('https://api example com/users/45', {\nmethod: 'DELETE',\n})\nIn this code, we are including the DELETE method and an ID at the end of the url to identify the data which needs to be deleted --questions--\n--text--\nWhat is the default HTTP method used by fetch() if not specified --answers--\nPOST\n--feedback--\nThink about the most common operation when retrieving data from a server GET\nPUT\n--feedback--\nThink about the most common operation when retrieving data from a server DELETE\n--feedback--\nThink about the most common operation when retrieving data from a server --video-solution--\n2\n--text--\nWhen sending data with a POST request using fetch(), what do you need to do with the data before including it in the body --answers--\nEncrypt it --feedback--\nConsider how data needs to be formatted when sending it in a request body Compress it --feedback--\nConsider how data needs to be formatted when sending it in a request body Convert it to a JSON string Base64 encode it --feedback--\nConsider how data needs to be formatted when sending it in a request body",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4902,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407be6af21d6766ed4b96.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e5a4480ad00261df70f98a35c737b8a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407be6af21d6766ed4b96.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "using fetch(), what do you need to do with the data before including it in the body --answers-- Encrypt it --feedback-- Consider how data needs to be formatted when sending it in a request body Compress it --feedback-- Consider how data needs to be formatted when sending it in a request body Convert it to a JSON string Base64 encode it --feedback-- Consider how data needs to be formatted when sending it in a request body--video-solution--\n3\n--text--\nWhat does the response json() method do --answers--\nSends JSON data to the server --feedback--\nThink about how the data from the server needs to be processed to be usable in JavaScript Creates a new JSON object --feedback--\nThink about how the data from the server needs to be processed to be usable in JavaScript Parses the response body as JSON Validates if the response is in JSON format --feedback--\nThink about how the data from the server needs to be processed to be usable in JavaScript --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4902,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407be6af21d6766ed4b96.md",
      "source_type": "git_repo"
    },
    "token_count": 200,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7f388a7ea924155c648caed65717455a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407d56c3dce67fa97969b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673407d56c3dce67fa97969b\ntitle: What Is Async/Await, and How Does It Work challengeType: 19\ndashedName: what-is-async-await-and-how-does-it-work\n--description--\nIn the previous lectures, you learned about asynchronous programming which allows other code to run while we wait for some time-consuming tasks to complete, like fetching data from a server, reading data from a file, and so on async/await, built on top of promises, makes writing and reading asynchronous code easier When you put the async keyword before a function, it means that function will always return a Promise Only inside an async function, you can use the await keyword, which allows you to wait for a Promise to resolve before moving on to the next line of code Here's an example to illustrate how async/await works:\n``js\nasync function delayedGreeting(name) {\nconsole log(\"A Messenger entered the chat \");\nawait new Promise(resolve => setTimeout(resolve, 2000));\nconsole log(Hello, ${name} `);\n}\ndelayedGreeting(\"Alice\");\nconsole log(\"First Printed Message \");\n```\nIn this code, we define an async function called delayedGreeting Inside this function, we use await to pause the execution for 2 seconds After the delay, it prints a greeting When we call this function, you'll see First Printed Message appear before the greeting This is because the function is asynchronous - it doesn't block the rest of the code from running One of the biggest advantages of async/await is error handling With promises, we often had to use catch() method to handle errors With async/await, we can use try/catch blocks Here's an example:\n``js\nasync function fetchUserData() {\ntry {\nlet response = await fetch(https://api example com/users`);\nlet userData = await response json();\nconsole log(userData);\n} catch (error) {\nconsole log(\"Error fetching user data:\", error);\n}\n}\nfetchUserData();\n```\nIn this example, we're using async/await to fetch user data from an API The await keyword is used twice: once to wait for the fetch operation to complete, and again to wait for the JSON parsing to finish If any error occurs during this process, it will be caught in the catch block --questions--\n--text--\nWhat is the primary purpose of the async keyword in JavaScript --answers--\nTo make a function run faster",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3856,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407d56c3dce67fa97969b.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c2f970b1fc801071e14c4bc1354df8ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407d56c3dce67fa97969b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "} fetchUserData(); ``` In this example, we're using async/await to fetch user data from an API The await keyword is used twice: once to wait for the fetch operation to complete, and again to wait for the JSON parsing to finish If any error occurs during this process, it will be caught in the catch block --questions-- --text-- What is the primary purpose of the async keyword in JavaScript --answers-- To make a function run faster--feedback--\nThink about what async does to the function's return value To indicate that a function will always return a Promise To create a new thread for the function to run on --feedback--\nThink about what async does to the function's return value To prevent a function from being called asynchronously --feedback--\nThink about what async does to the function's return value --video-solution--\n2\n--text--\nWhere can the await keyword be used in JavaScript --answers--\nAnywhere in the code --feedback--\nConsider the restrictions on where await can be placed At very beginning of your code --feedback--\nConsider the restrictions on where await can be placed Inside async functions Only in try catch blocks --feedback--\nConsider the restrictions on where await can be placed --video-solution--\n3\n--text--\nWhat happens when an error occurs in an awaited Promise --answers--\nThe program crashes --feedback--\nThink about how error handling works with async/await The error is automatically logged to the console --feedback--\nThink about how error handling works with async/await Nothing, errors in Promises are ignored --feedback--\nThink about how error handling works with async/await The error can be caught using a try catch block --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3856,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407d56c3dce67fa97969b.md",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c994e7f879ef80f49fcf123c7dda5c66",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407e02bcf0d682b9a49a9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673407e02bcf0d682b9a49a9\ntitle: How Does the JavaScript Engine Work, and What Is a JavaScript Runtime challengeType: 19\ndashedName: how-does-the-javascript-engine-work-and-what-is-a-javascript-runtime\n--description--\nThe JavaScript engine has the ability to read, understand, and execute your code It works like a converter that takes your code, turns it into instructions that the computer can understand and work accordingly One of the most well-known JavaScript engines is V8, developed by Google, used in Chrome and Node js The JavaScript engine works in a few steps First, it parses your code, reading it line by line to make sure there’s no mistake in the JavaScript code Then, it converts this code into bytecode, which is a simpler, intermediate version of your code that’s easier for the computer to understand and execute Finally, it runs this bytecode to execute your program's instructions Here's an example of JavaScript code:\njs\nconst greeting = \"Hello, World \";\nconsole log(greeting);\nWhen you run this code, the JavaScript engine first parses it to check for any syntax errors Parsing means the engine reads the code and breaks it down into a structure it can understand, checking for mistakes along the way Then, it compiles the code into an intermediate format (often bytecode or machine code, depending on the engine) Compiling is the process of converting the human-readable code into a more efficient format that the computer can execute faster Finally, the engine executes the code, printing Hello, World to the console Now, let's talk about the JavaScript runtime The JavaScript runtime is the environment in which your JavaScript code is executed It includes the JavaScript engine (like V8 in Chrome or SpiderMonkey in Firefox), which processes and executes the code, as well as additional features provided by the environment (such as a web browser or Node js, which you will learn more about in future lectures) While the core JavaScript language handles things like variables, loops, and functions, the runtime provides extra tools that allow JavaScript to interact with things outside of the language itself, like the DOM (for web pages) or the Fetch API (for making network requests) In short, the runtime is what allows JavaScript to do more than just basic programming tasks – like interacting with web pages or handling time-based actions – by providing these extra features beyond the language itself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4650,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407e02bcf0d682b9a49a9.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "2a01c3c412594807b5620d5a59f3a20a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407e02bcf0d682b9a49a9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "JavaScript language handles things like variables, loops, and functions, the runtime provides extra tools that allow JavaScript to interact with things outside of the language itself, like the DOM (for web pages) or the Fetch API (for making network requests) In short, the runtime is what allows JavaScript to do more than just basic programming tasks – like interacting with web pages or handling time-based actions – by providing these extra features beyond the language itselfWhile you don't need to know every detail of engines and runtimes to write JavaScript, having a basic understanding can help you write more efficient code and debug problems more effectively --questions--\n--text--\nWhat is the primary function of a JavaScript engine --answers--\nTo provide a user interface for writing code --feedback--\nThink about what needs to happen to your code for it to actually run To connect to the internet --feedback--\nThink about what needs to happen to your code for it to actually run To read, interpret, and execute JavaScript code To store data in a database --feedback--\nThink about what needs to happen to your code for it to actually run --video-solution--\n3\n--text--\nWhich of the following is NOT typically considered part of the JavaScript runtime --answers--\nThe JavaScript engine --feedback--\nConsider what you provide versus what the environment provides Web APIs (in a browser environment) --feedback--\nConsider what you provide versus what the environment provides The event loop --feedback--\nConsider what you provide versus what the environment provides The JavaScript code you write --video-solution--\n4\n--text--\nWhich of the following best describes the difference between a JavaScript engine and its runtime --answers--\nThe engine provides features like the Fetch API and the DOM; the runtime only parses and executes code --feedback--\nThink about the distinct roles of the JavaScript engine and the runtime environment The engine parses and executes code; the runtime provides the engine plus additional features like the Fetch API and the DOM The runtime compiles code into bytecode and machine code; the engine just interprets the code --feedback--\nThink about the distinct roles of the JavaScript engine and the runtime environment They are the same thing—engine and runtime are interchangeable terms --feedback--\nThink about the distinct roles of the JavaScript engine and the runtime environment --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4650,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407e02bcf0d682b9a49a9.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a95fbd32f0e6f57300ab33a9ddb9cbc3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407ca21117a67cf9521ca.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673407ca21117a67cf9521ca\ntitle: What Are Promises, and How Does Promise Chaining Work challengeType: 19\ndashedName: what-are-promises-and-how-does-promise-chaining-work\n--description--\nA Promise is an object that represents the eventual completion or failure of an asynchronous operation It's initially in a pending state It can then transition to either a fulfilled state when the operation is successful, or a rejected state when the operation fails Here's an example of creating a Promise:\njs\nconst aPromise = new Promise((resolve, reject) => {\nsetTimeout(() => {\nresolve(\"Operation successful \");\n}, 1000);\n});\nIn this example, we create a promise that simulates an asynchronous operation using setTimeout After one second, the promise is resolved with the message Operation successful Another way to work with promises is to use the then and catch methods The then() method is used in a promise to specify what should happen when the promise is fulfilled, while catch() is used to handle any errors that occur Let's see how we can use then and catch with our promise:\njs\naPromise then((result) => {\nconsole log(result);  // Outputs: \"Operation successful \"\n}) catch((error) => {\nconsole error(error);\n});\nIn this code, or instructions of what to do when the promise is fulfilled, the function passed to then() will be called with the resolved value of the promise If an error occurs, the function passed to catch() will be called instead Now, let's talk about promise chaining One of the powerful features of promises is that we can chain multiple asynchronous operations together Each then() can return a new promise, allowing you to perform a sequence of asynchronous operations one after the other Here’s an example:\njs\nfetch('https://api example com/data') then(response => response json()) then(data => {\nconsole log(data);\nreturn fetch('https://api example com/data2');\n}) then(response => response json()) then(data2 => console log(data2)) catch(error => console error('Error:', error));\nIn this example, we're making two API calls in sequence The first then() parses the response as JSON The second then() logs the data and makes another API call The third then() parses the response of the second API call, and the fourth then() logs that data If an error occurs at any point in this chain, it will be caught by the catch() at the end",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4357,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407ca21117a67cf9521ca.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d8bdcb579667237499f3fb688028f812",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407ca21117a67cf9521ca.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "then(data2 => console log(data2)) catch(error => console error('Error:', error)); In this example, we're making two API calls in sequence The first then() parses the response as JSON The second then() logs the data and makes another API call The third then() parses the response of the second API call, and the fourth then() logs that data If an error occurs at any point in this chain, it will be caught by the catch() at the endIt's important to note that catch() will catch errors from any of the previous steps in the chain This means you don't need to add error handling to each individual step, which can greatly simplify your code --questions--\n--text--\nWhat are the possible states of a Promise --answers--\nActive, Inactive, or Terminated --feedback--\nThink about the stages a Promise goes through from creation to completion Running, Paused, or Stopped --feedback--\nThink about the stages a Promise goes through from creation to completion Pending, Fulfilled, or Rejected Started, Processing, or Ended --feedback--\nThink about the stages a Promise goes through from creation to completion --video-solution--\n3\n--text--\nWhat is the purpose of the then() method in Promise chaining --answers--\nTo create a new Promise --feedback--\nConsider what then() allows you to do with the result of a Promise To specify what happens when a Promise is fulfilled To handle errors in the Promise chain --feedback--\nConsider what then() allows you to do with the result of a Promise To cancel a Promise --feedback--\nConsider what then() allows you to do with the result of a Promise --video-solution--\n2\n--text--\nIn a Promise chain, where should you typically place the catch() method --answers--\nAfter each then() --feedback--\nThink about how catch() can handle errors from multiple steps in the chain Before the first then() --feedback--\nThink about how catch() can handle errors from multiple steps in the chain In the middle of the chain --feedback--\nThink about how catch() can handle errors from multiple steps in the chain At the end of the chain --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4357,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407ca21117a67cf9521ca.md",
      "source_type": "git_repo"
    },
    "token_count": 434,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4403ae6013308f11b1d4f16f7c63b35f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407eb10ca9d68634e81d9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673407eb10ca9d68634e81d9\ntitle: What Is the Geolocation API, and How Does the getCurrentPosition Work challengeType: 19\ndashedName: what-is-the-geolocation-api-and-how-does-the-getcurrentposition-work\n--description--\nThe Geolocation API provides a way for websites to request the user's location It's important to note that for privacy reasons, the user has to give permission before their location can be accessed via the website The main method we'll be focusing on today is getCurrentPosition This method is used to collect the geographic location of the device Here's an example of how you might use getCurrentPosition:\njs\nnavigator geolocation getCurrentPosition(\n(position) => {\nconsole log(\"Latitude: \" + position coords latitude);\nconsole log(\"Longitude: \" + position coords longitude);\n},\n(error) => {\nconsole log(\"Error: \" + error message);\n}\n);\nIn this code, we're calling getCurrentPosition and passing it a function which will be called when the position is successfully obtained This position object contains various pieces of information, but we're focusing on latitude and longitude only If there is an issue with getting the position, then the error will be logged to the console The getCurrentPosition method uses GPS, Wi-Fi networks, or IP address geolocation, depending on the device and its settings Once the location is found, the success callback function is called with a position object The position object contains a various properties, where the most commonly used are latitude and longitude, but it can also include altitude, accuracy, speed, and heading, and so on One important consideration when using geolocation is user privacy Explain to your users why you need their location data and how you'll use it --questions--\n--text--\nWhat is the primary purpose of the Geolocation API's getCurrentPosition method --answers--\nTo set the user's current location --feedback--\nThink about what information this method provides to the web application To retrieve the user's current geographic location To calculate the distance between two points --feedback--\nThink about what information this method provides to the web application To display a map on the webpage --feedback--\nThink about what information this method provides to the web application --video-solution--\n2\n--text--\nWhat object is used to access the Geolocation API in JavaScript --answers--\nwindow location\n--feedback--\nThink about which global object provides access to browser-specific information document",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3520,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407eb10ca9d68634e81d9.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "114cac61a10bb7622c7b1a526cac696a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407eb10ca9d68634e81d9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "web application To retrieve the user's current geographic location To calculate the distance between two points --feedback-- Think about what information this method provides to the web application To display a map on the webpage --feedback-- Think about what information this method provides to the web application --video-solution-- 2 --text-- What object is used to access the Geolocation API in JavaScript --answers-- window location --feedback-- Think about which global object provides access to browser-specific information documentgeolocation\n--feedback--\nThink about which global object provides access to browser-specific information navigator geolocation\nbrowser location\n--feedback--\nThink about which global object provides access to browser-specific information --video-solution--\n3\n--text--\nWhat is a key privacy consideration when using the Geolocation API --answers--\nEncrypting the location data --feedback--\nThink about what steps should be taken to respect user privacy Storing location data indefinitely --feedback--\nThink about what steps should be taken to respect user privacy Automatically accessing user location --feedback--\nThink about what steps should be taken to respect user privacy Obtaining user permission before accessing location --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3520,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-asynchronous-programming\\673407eb10ca9d68634e81d9.md",
      "source_type": "git_repo"
    },
    "token_count": 226,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3a148763713b46e66089b5e8532f4872",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-comparisons-and-conditionals\\672d26917a8ab3220c038a42.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672d26917a8ab3220c038a42\ntitle: How Do Comparisons Work with Null and Undefined Data Types challengeType: 19\ndashedName: how-do-comparisons-work-with-null-and-undefined-data-types\n--description--\nIn JavaScript, null and undefined are two distinct data types that represent the absence of a value, but they behave differently in comparisons Understanding how these types interact in various comparison scenarios is crucial for writing robust and bug-free code Let's start with the undefined type A variable is undefined when it has been declared but hasn't been assigned a value It's the default value of uninitialized variables and function parameters that weren't provided an argument The null type, on the other hand, is an assignment value that represents a deliberate non-value It's often used to indicate that a variable intentionally has no value When comparing null and undefined using the equality operator (==), JavaScript performs type coercion This means it tries to convert the operands to the same type before making the comparison In this case, null and undefined are considered equal:\njs\nconsole log(null == undefined); // true\nHowever, when using the strict equality operator (===), which checks both value and type without performing type coercion, null and undefined are not equal:\njs\nconsole log(null === undefined); // false\nThis difference is important to keep in mind when writing conditional statements or performing equality checks in your code When comparing null or undefined with other values using the equality operator (==), the behavior can be unexpected For example:\njs\nconsole log(null == 0);  // false\nconsole log(null == ''); // false\nconsole log(undefined == 0); // false\nconsole log(undefined == ''); // false\nThese comparisons return false because null and undefined are only equal to each other (and themselves) when using the equality operator The behavior of null in other comparisons is particularly tricky:\njs\nconsole log(null > 0);  // false\nconsole log(null == 0); // false\nconsole log(null >= 0); // true\nundefined, on the other hand, always converts to NaN in numeric contexts, which makes all numeric comparisons with undefined return false:\njs\nconsole log(undefined > 0);  // false\nconsole log(undefined < 0);  // false\nconsole log(undefined == 0); // false\nGiven these nuances, it's generally recommended to use the strict equality operator when comparing values, especially when dealing with null and undefined",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-comparisons-and-conditionals\\672d26917a8ab3220c038a42.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "94558211e3975ef7fd6b04a12c8487e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-comparisons-and-conditionals\\672d26917a8ab3220c038a42.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "// false console log(null == 0); // false console log(null >= 0); // true undefined, on the other hand, always converts to NaN in numeric contexts, which makes all numeric comparisons with undefined return false: js console log(undefined > 0); // false console log(undefined < 0); // false console log(undefined == 0); // false Given these nuances, it's generally recommended to use the strict equality operator when comparing values, especially when dealing with null and undefinedThis approach helps avoid unexpected type coercion and makes your code's behavior more predictable In summary, while null and undefined are both used to represent the absence of a value, they behave differently in comparisons Understanding these differences is key to writing clear and error-free JavaScript code --questions--\n--text--\nWhat is the result of the expression: null === undefined --answers--\ntrue\n--feedback--\nThink about what the strict equality operator (===) checks for false\nundefined\n--feedback--\nThink about what the strict equality operator (===) checks for null\n--feedback--\nThink about what the strict equality operator (===) checks for --video-solution--\n2\n--text--\nIn JavaScript, what is the result of the comparison: null >= 0 --answers--\ntrue\nfalse\n--feedback--\nConsider how null behaves in numeric comparisons undefined\n--feedback--\nConsider how null behaves in numeric comparisons Error\n--feedback--\nConsider how null behaves in numeric comparisons --video-solution--\n1\n--text--\nWhich of the following statements about undefined is correct --answers--\nundefined == null evaluates to false --feedback--\nThink about how undefined behaves in different types of comparisons undefined === null evaluates to true --feedback--\nThink about how undefined behaves in different types of comparisons undefined < 0 evaluates to true --feedback--\nThink about how undefined behaves in different types of comparisons undefined == 0 evaluates to false --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4311,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-comparisons-and-conditionals\\672d26917a8ab3220c038a42.md",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5751a2f21efaf447464b8e73db3813e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-bash-scripting\\688166750663c22e2b1c8e80.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 688166750663c22e2b1c8e80\ntitle: What Is Bash Scripting, and What Are Some Advantages to Using It challengeType: 19\ndashedName: what-is-bash-scripting-and-what-are-some-advantages-to-using-it\n--description--\nIn previous lectures, you learned about Bash and some of the common commands you might use But Bash supports a full scripting language, which you can use to perform more complex automated tasks Bash scripting involves writing a sequence of Bash commands in a file, which you can then execute with Bash to run the contents of the file Let's look at what a bash script may look like:\n```bash /bin/bash\nservers=(\"prod\" \"dev\")\nfor server in \"${servers[@]}\"\ndo\necho \"Pulling $server\"\nrsync --archive --verbose $server:/etc/nginx/conf d/server conf configs/$server conf\ndone\n```\nThis script pulls NGINX configuration files from a list of remote servers, which can be useful for backing up those configs into a local repository NGINX is a popular web server and you will learn more about working with servers in a future module The first line is called a \"shebang\" (# ) and tells the system which interpreter should be used to run the script Common values here are /usr/bin/bash, /bin/bash, or /bin/sh The first line, servers=(\"prod\" \"dev\"), instantiates a list of strings representing the server names \"prod\" is often used to refer to the production site, while \"dev\" refers to the development site, which is typically used for testing new features and changes before they are deployed to the live production environment Then, the list is iterated through with a for loop - the servers[@] syntax expands the list into individual elements Each element is assigned to server with each iteration The do statement indicates the beginning of the loop's logical block, or the code that should run with each iteration echo \"Pulling $server\" interpolates the current value of the server variable, which would be prod or dev in this case, and logs it to the terminal Then rsync is used to pull the actual file from the server and save it locally, using more interpolation to manage that command done indicates the end of the loop's logical block There are a number of significant advantages to understanding and leveraging Bash scripting",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4877,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-bash-scripting\\688166750663c22e2b1c8e80.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "397160eaa83ad0937c426fadb72449b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-bash-scripting\\688166750663c22e2b1c8e80.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should run with each iteration echo \"Pulling $server\" interpolates the current value of the server variable, which would be prod or dev in this case, and logs it to the terminal Then rsync is used to pull the actual file from the server and save it locally, using more interpolation to manage that command done indicates the end of the loop's logical block There are a number of significant advantages to understanding and leveraging Bash scriptingThe first is that nearly every Unix environment comes with Bash readily available, which means you can run your script as-is without having to configure any language runtimes like Node js or Python The second is that you have access to all of the binary applications available on the system with minimal effort If your system has doctl installed, your script can execute that binary A binary is a compiled program that the computer runs When you have a bash script, you can execute the binary which will launch the program And finally, the syntax you use for your script is also executable directly in the terminal This means that testing a small portion of your script becomes much less convoluted - you can copy and paste that portion directly into your terminal and see the result Understanding Bash will not only level up your scripting game, but will make you a wizard in the command line --questions--\n--text--\nWhat is the purpose of the \"shebang\" line in a Bash script --answers--\nIt's a comment that describes what the script does --feedback--\nThe shebang appears at the very beginning of a script file It indicates what interpreter should be used for the script It defines the variables used in the script --feedback--\nThe shebang appears at the very beginning of a script file It marks the beginning of a for loop --feedback--\nThe shebang appears at the very beginning of a script file --video-solution--\n2\n--text--\nIn the example script, what does the line for server in \"${servers[@]}\" accomplish --answers--\nIt creates a new array of servers --feedback--\nThink about what a for loop typically does It iterates through each element in the servers array It counts how many servers are in the array --feedback--\nThink about what a for loop typically does It deletes the server array --feedback--\nThink about what a for loop typically does --video-solution--\n2\n--text--\nWhich of the following is NOT mentioned as an advantage of Bash scripting --answers--\nBash is available in nearly every Unix environment --feedback--\nReview the advantages listed in the lecture",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4877,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-bash-scripting\\688166750663c22e2b1c8e80.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "856878c826d73d5cad977cdc8f75e8d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-bash-scripting\\688166750663c22e2b1c8e80.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "typically does It iterates through each element in the servers array It counts how many servers are in the array --feedback-- Think about what a for loop typically does It deletes the server array --feedback-- Think about what a for loop typically does --video-solution-- 2 --text-- Which of the following is NOT mentioned as an advantage of Bash scripting --answers-- Bash is available in nearly every Unix environment --feedback-- Review the advantages listed in the lectureYou can access all binary applications on the system --feedback--\nReview the advantages listed in the lecture Bash scripts run faster than Python or JavaScript You can test portions of your script directly in the terminal --feedback--\nReview the advantages listed in the lecture --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4877,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-bash-scripting\\688166750663c22e2b1c8e80.md",
      "source_type": "git_repo"
    },
    "token_count": 146,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "765f6a8c76191164376c70e0401f2b47",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab82c1a9bbd0e3aabc39d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672ab82c1a9bbd0e3aabc39d\ntitle: How Can You Effectively Work With Your Keyboard, Mouse, and Other Pointing Devices\nchallengeType: 19\ndashedName: how-to-effectively-work-with-your-keyboard-mouse-and-other-pointing-devices\n--description--\nMany of you have been used to working with your keyboard and mouse for years on end for a variety of activities like gaming, performing tasks for work, or surfing the web But prolonged misuse of these devices can lead to serious health problems down the road In this lecture, we will cover ways to work with your computer’s keyboard and mouse in healthy ways The first tip is to be mindful of the mouse grip When working on serious tasks for work or during intense gaming moments, you may tend to grip the mouse too hard However, this can lead to serious hand and wrist issues To prevent this, you want to make sure to hold the mouse gently and keep your fingers nice and relaxed The second tip is to consider using an ergonomic keyboard and mouse These tools are designed to reduce wrist strain by keeping your hands in a more natural position While prices for these devices can vary and may be a costly purchase for your current budget, they can be a good investment in your overall long-term health So, you might consider starting to research an ergonomic keyboard and mouse to use Another tip is to keep your mouse the same height as your keyboard You don't want to have to reach up or down to use the mouse, as this can strain your wrist and arm muscles over time You also want to be mindful of your overall posture when sitting at the computer for hours on end Being slouched over your computer and putting your wrist in an unnatural position at the keyboard will lead to long-term health issues So, you want to make sure to sit up straight when working at your computer and maintain a healthy and natural wrist position The last tip would be to use keyboard shortcuts whenever possible to help minimize typing There are dozens of shortcuts available for tasks such as navigating the web, navigating around your operating system, working within a code editor, and more So, it’s best to research some of these keyboard shortcuts and and start incorporating them into your daily computer usage As you continue using your mouse and keyboard for upcoming coding projects and other activities, remember to keep these health tips in mind --questions--\n--text--\nWhat is one of the risks of gripping the mouse too tightly",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4307,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab82c1a9bbd0e3aabc39d.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "cea31289078367d4cf4cb7a54a7e0a1e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab82c1a9bbd0e3aabc39d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "for tasks such as navigating the web, navigating around your operating system, working within a code editor, and more So, it’s best to research some of these keyboard shortcuts and and start incorporating them into your daily computer usage As you continue using your mouse and keyboard for upcoming coding projects and other activities, remember to keep these health tips in mind --questions-- --text-- What is one of the risks of gripping the mouse too tightly--answers--\nIt can improve your accuracy in gaming --feedback--\nPay attention to the advice about mouse grip at the beginning of the lecture It helps you complete tasks faster --feedback--\nPay attention to the advice about mouse grip at the beginning of the lecture It can cause hand and wrist issues It improves your overall performance --feedback--\nPay attention to the advice about mouse grip at the beginning of the lecture --video-solution--\n3\n--text--\nWhat is the benefit of using an ergonomic keyboard and mouse --answers--\nThey help you type faster --feedback--\nThe second tip in the lecture mentions ergonomic devices as a way to protect your hands and wrists They are designed for gaming performance --feedback--\nThe second tip in the lecture mentions ergonomic devices as a way to protect your hands and wrists They reduce wrist strain by keeping your hands in a more natural position They increase screen resolution --feedback--\nThe second tip in the lecture mentions ergonomic devices as a way to protect your hands and wrists --video-solution--\n3\n--text--\nWhat is the recommendation for the height of your mouse in relation to your keyboard --answers--\nThe mouse should be far above the keyboard --feedback--\nThink about how to position your mouse to avoid wrist and arm strain The mouse should be at the same height as the keyboard The mouse should be lower than the keyboard --feedback--\nThink about how to position your mouse to avoid wrist and arm strain The mouse should be higher than the keyboard --feedback--\nThink about how to position your mouse to avoid wrist and arm strain --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4307,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab82c1a9bbd0e3aabc39d.md",
      "source_type": "git_repo"
    },
    "token_count": 397,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0336a2d5450cacb987b72fd185829cb5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab83c4297910eade53c2e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672ab83c4297910eade53c2e\ntitle: What Are the Different Types of Internet Service Providers challengeType: 19\ndashedName: what-are-the-different-types-of-internet-service-providers\n--description--\nFirst, what is an internet service provider, or ISP It’s a company that sells access to the global internet network, essentially And they come in three different tiers The first tier are the giant conglomerate companies, which have the infrastructure to handle most (if not all) of their network traffic independently The second tier are the country-wide providers, which sometimes rent access to tier 1 networks but can stand fairly well on their own The third tier are the small companies that primarily focus on providing internet to local markets, and rely on larger ISPs to provide their infrastructure These providers will offer different types of connections as well Fibre optic connections rely on glass or plastic fibres to transmit data via light, resulting in very high connection speeds and data exchange Cable connections use the same infrastructure as a cable television provider, which often makes them readily available in many regions DSL connections use the infrastructure that landline phone services use Because of the prevalence of this infrastructure, DSL is available in areas where cable might not be But it is also frequently a slower option Dial-up also uses the phone lines, but requires exclusive connection (disabling the use of the line for phone purposes when connected to the internet) This is a much older technology that has fallen into disuse Satellite connections use an array of satellites orbiting the earth to connect various devices across the world And finally, similar to that, a 5G home internet provider uses the cell tower infrastructure to keep you online And that should give you a basic rundown of what types of internet service providers and internet connections are out there --questions--\n--text--\nWhich of the following is NOT a tier of Internet Service Provider (ISP) --answers--\nGiant conglomerate companies with independent infrastructure --feedback--\nOversight organizations may regulate ISPs, but are rarely ISPs themselves Country-wide providers that may rent access to larger networks --feedback--\nOversight organizations may regulate ISPs, but are rarely ISPs themselves Small companies focusing on local markets --feedback--\nOversight organizations may regulate ISPs, but are rarely ISPs themselves International organizations overseeing global internet access --video-solution--\n4\n--text--\nWhich type of internet connection uses glass or plastic fibres to transmit data via light --answers--\nCable connection",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4102,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab83c4297910eade53c2e.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5b6fe32ed1e32629e4a9d6f1bdeba0d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab83c4297910eade53c2e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "infrastructure --feedback-- Oversight organizations may regulate ISPs, but are rarely ISPs themselves Country-wide providers that may rent access to larger networks --feedback-- Oversight organizations may regulate ISPs, but are rarely ISPs themselves Small companies focusing on local markets --feedback-- Oversight organizations may regulate ISPs, but are rarely ISPs themselves International organizations overseeing global internet access --video-solution-- 4 --text-- Which type of internet connection uses glass or plastic fibres to transmit data via light --answers-- Cable connection--feedback--\nThis connection type is known for its very high speeds due to its unique transmission method DSL connection --feedback--\nThis connection type is known for its very high speeds due to its unique transmission method Fibre optic connection Satellite connection --feedback--\nThis connection type is known for its very high speeds due to its unique transmission method --video-solution--\n3\n--text--\nWhat is a characteristic of dial-up internet connections --answers--\nThey use the same infrastructure as cable television --feedback--\nThe last part of the lecture mentions that this older technology disables the use of the phone line for other purposes when connected to the internet They require exclusive use of the phone line when connected They use an array of satellites orbiting the earth --feedback--\nThe last part of the lecture mentions that this older technology disables the use of the phone line for other purposes when connected to the internet They are the fastest type of internet connection available --feedback--\nThe last part of the lecture mentions that this older technology disables the use of the phone line for other purposes when connected to the internet --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4102,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab83c4297910eade53c2e.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "df80c02c7c75a6b5be9b1876a91eb17d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672aa578a2129554d4675049.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa578a2129554d4675049\ntitle: What Are the Basic Parts of a Computer challengeType: 19\ndashedName: what-are-the-basic-parts-of-a-computer\n--description--\nComputers are very powerful machines that perform a variety of tasks like writing documents, playing games, and browsing the internet As a developer, it is important to understand the basic inner workings of a computer The first major component of a computer would be the motherboard The motherboard holds all the memory and connectors that are needed to run the computer It serves as the main circuit board for the computer Inside the computer case of the motherboard, you will find the CPU which stands for Central Processing Unit The CPU is a processor that is responsible for executing instructions and performing calculations It is often referred to as the brain of the computer The CPU is a small square with a chip that goes into the motherboard's CPU socket The CPU processor speed is measured in gigahertz (GHz) and mega-hertz (MHz) Gigahertz is a billion cycles per second and mega-hertz is a million cycles per second The next critical component of a computer would be the system's short term memory This is known as RAM or Random Access Memory RAM is a temporary storage location for the computer's CPU Anytime the computer needs to access data quickly, it will use RAM The more RAM you have on your computer, the faster it will run and the more programs you can run at the same time If you are running low on RAM, your computer will run slower and you will notice the difference in performance It is important to note that RAM is volatile memory This means that it is lost when the computer is turned off This is why it is important to save your work on your computer When you do save your files, they are stored on the hard drive The hard disk drive, or HDD, is a permanent storage location that is used to store data even when the computer is turned off This is where all your files and software are stored The hard drive is made up of a spinning platter and an arm The platter is where the data is stored and the arm is used to read and write data to the platter When you have a faster hard drive, your computer will boot up faster and your programs will run faster Another type of data storage would be the Solid State Drive, or SSD for short SSD is non volatile flash memory and can be used in place of a hard drive",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4719,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672aa578a2129554d4675049.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "89d9d8e04dc0cb3441c678147b750e42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672aa578a2129554d4675049.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "spinning platter and an arm The platter is where the data is stored and the arm is used to read and write data to the platter When you have a faster hard drive, your computer will boot up faster and your programs will run faster Another type of data storage would be the Solid State Drive, or SSD for short SSD is non volatile flash memory and can be used in place of a hard driveSSDs are faster and smaller than hard drives but hard drives are cheaper and have more storage capacity Another key component of a computer is the power supply unit, or PSU The PSU is responsible for converting the electricity from the wall outlet into a form that the computer can use It sends the power from the outlet to the motherboard, CPU, and other components of the computer Another key component would be the expansion cards These cards are inserted into the motherboard to add additional functionality to the computer Examples of expansion cards would be the video card, sound card, and network card The video card, also known as the Graphics Processing Unit or GPU, is responsible for rendering visuals on the computer screen The sound card is responsible for playing sound on the computer speakers The network card is responsible for connecting the computer to the internet Even though there are many more parts to the computer, these are some basic parts that you should familiarize yourself with now --questions--\n--text--\nWhat is RAM --answers--\nLong term memory --feedback--\nThink about short term data storage Short term memory The main circuit board --feedback--\nThink about short term data storage A video card --feedback--\nThink about short term data storage --video-solution--\n2\n--text--\nWhat does CPU stand for --answers--\nCentered Protocol Unit --feedback--\nReview the beginning of the lecture where this was discussed City Processing Unit --feedback--\nReview the beginning of the lecture where this was discussed Central Processing Unit Central Pixel Unit --feedback--\nReview the beginning of the lecture where this was discussed --video-solution--\n3\n--text--\nWhat is the network card responsible for --answers--\nRendering visuals on the computer screen --feedback--\nReview the end of the lecture for the answer Playing sound on the computer speakers --feedback--\nReview the end of the lecture for the answer Connecting the computer to the internet Storing short term memory --feedback--\nReview the end of the lecture for the answer\n--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4719,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672aa578a2129554d4675049.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a4173c3ab55a79349b5cfbc5c5fd8bed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-comparisons-and-conditionals\\673282bea35dbf129efb63d6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673282bea35dbf129efb63d6\ntitle: What Are Switch Statements and How Do They Differ from If/Else Chains challengeType: 19\ndashedName: what-are-switch-statements-and-how-do-they-differ-from-if-else-chains\n--description--\nswitch statements and if/else if/else chains are both control flow structures in programming that allow us to execute different code blocks based on certain conditions However, they have distinct characteristics and use cases A switch statement evaluates an expression and matches its value against a series of case clauses When a match is found, the code block associated with that case is executed Here's a basic structure of a switch statement:\njs\nswitch (expression) {\ncase value1:\n// code to be executed if expression === value1\nbreak;\ncase value2:\n// code to be executed if expression === value2\nbreak;\ndefault:\n// code to be executed if expression doesn't match any case\n}\nThe break statement at the end of each case is crucial It tells the program to exit the switch block once a matching case has been executed Without it, the program would continue executing subsequent cases, a behavior known as \"fall-through\" switch statements are typically used when you're comparing a single variable against multiple possible values They're especially useful when you have many potential conditions to check against a single variable Here is an example using a switch statement for the days of the week:\n```js\nlet dayOfWeek = 3;\nswitch (dayOfWeek) {\ncase 1:\nconsole log(\"It's Monday Time to start the week strong \");\nbreak;\ncase 2:\nconsole log(\"It's Tuesday Keep the momentum going \");\nbreak;\ncase 3:\nconsole log(\"It's Wednesday We're halfway there \");\nbreak;\ncase 4:\nconsole log(\"It's Thursday Almost the weekend \");\nbreak;\ncase 5:\nconsole log(\"It's Friday The weekend is near \");\nbreak;\ncase 6:\nconsole log(\"It's Saturday Enjoy your weekend \");\nbreak;\ncase 7:\nconsole log(\"It's Sunday Rest and recharge \");\nbreak;\ndefault:\nconsole log(\"Invalid day Please enter a number between 1 and 7 \");\n}\n```\nswitch statements can be more readable and concise when dealing with many possible values for a single variable if/else if statements on the other hand are more flexible They can evaluate complex conditions and different variables in each clause",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6327,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-comparisons-and-conditionals\\673282bea35dbf129efb63d6.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2e41841c5432ccf2665ae3dcf55e3610",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-comparisons-and-conditionals\\673282bea35dbf129efb63d6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"); break; case 6: console log(\"It's Saturday Enjoy your weekend \"); break; case 7: console log(\"It's Sunday Rest and recharge \"); break; default: console log(\"Invalid day Please enter a number between 1 and 7 \"); } ``` switch statements can be more readable and concise when dealing with many possible values for a single variable if/else if statements on the other hand are more flexible They can evaluate complex conditions and different variables in each clauseThis makes them suitable for a wider range of scenarios Here is an example of when you might use an if/else statement over a switch statement:\n```js\nlet creditScore = 720;\nlet annualIncome = 60000;\nlet loanAmount = 200000;\nlet eligibilityStatus;\nif (creditScore >= 750 && annualIncome >= 80000) {\neligibilityStatus = \"Eligible for premium loan rates \";\n} else if (creditScore >= 700 && annualIncome >= 50000) {\neligibilityStatus = \"Eligible for standard loan rates \";\n} else if (creditScore >= 650 && annualIncome >= 40000) {\neligibilityStatus = \"Eligible for subprime loan rates \";\n} else if (creditScore < 650) {\neligibilityStatus = \"Not eligible due to low credit score \";\n} else {\neligibilityStatus = \"Not eligible due to insufficient income \";\n}\nconsole log(eligibilityStatus);\n```\nIn this example, we have a person’s annual income and credit score and checking what types of loan they would qualify for Since we are dealing with more complex logical evaluations and multiple variables, it is better to use an if/else statement here versus a switch statement It's worth noting that switch statements in JavaScript use strict comparison (===), which means they don't perform type coercion This can be an advantage in terms of predictability and avoiding subtle bugs In summary, while both switch statements and if/else if chains allow for multiple-branch logic in your code, they have different strengths switch statements excel at handling multiple possible values for a single variable, while if/else if chains offer more flexibility for complex conditions The choice between them often comes down to the specific requirements of your code and personal or team coding style preferences --questions--\n--text--\nWhat happens if you omit the break statement in a switch case --answers--\nThe switch statement will throw an error",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6327,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-comparisons-and-conditionals\\673282bea35dbf129efb63d6.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "1ec1a05534620f599be9ee5848ed5c70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-comparisons-and-conditionals\\673282bea35dbf129efb63d6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "allow for multiple-branch logic in your code, they have different strengths switch statements excel at handling multiple possible values for a single variable, while if/else if chains offer more flexibility for complex conditions The choice between them often comes down to the specific requirements of your code and personal or team coding style preferences --questions-- --text-- What happens if you omit the break statement in a switch case --answers-- The switch statement will throw an error--feedback--\nThink about the concept of \"fall-through\" in switch statements The program will exit the switch block immediately --feedback--\nThink about the concept of \"fall-through\" in switch statements The code will continue to the next case, regardless of whether it matches Nothing, break is optional in switch statements --feedback--\nThink about the concept of \"fall-through\" in switch statements --video-solution--\n3\n--text--\nWhich of the following is a key advantage of using a switch statement over an if/else chain --answers--\nswitch statements can handle more complex conditions --feedback--\nConsider the typical use case for switch statements and what they're designed to handle efficiently switch statements can compare multiple variables --feedback--\nConsider the typical use case for switch statements and what they're designed to handle efficiently switch statements are typically more concise for comparing a single variable against many values switch statements always perform faster than if/else chains --feedback--\nConsider the typical use case for switch statements and what they're designed to handle efficiently --video-solution--\n3\n--text--\nIn JavaScript, what type of comparison does a switch statement use --answers--\nLoose equality (==) --feedback--\nThink about whether switch statements in JavaScript perform type coercion during comparisons Strict equality (===) Greater than or equal to (>=) --feedback--\nThink about whether switch statements in JavaScript perform type coercion during comparisons Less than or equal to (<=) --feedback--\nThink about whether switch statements in JavaScript perform type coercion during comparisons --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6327,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-comparisons-and-conditionals\\673282bea35dbf129efb63d6.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "4bd34a9df363822f32a224d5412b0ef7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-dynamic-programming\\68420c7fb5b9e36eefb9e98f.md",
    "source_type": "git_repo",
    "title": "title needs to be updated to correct title when lectures are finalized",
    "content": "id: 68420c7fb5b9e36eefb9e98f\ntitle needs to be updated to correct title when lectures are finalized\ntitle: Understanding Dynamic Programming\nchallengeType: 19\ndashedName needs to be updated to correct title when lectures are finalized\ndashedName: lecture-understanding-dynamic-programming\n--description--\nWatch the video or read the transcript and answer the questions below.\n--questions--\n--text--\nQuestion 1\n--answers--\nAnswer 1.1\n--feedback--\nFeedback 1\nAnswer 1.2\n--feedback--\nFeedback 1\nAnswer 1.3\n--feedback--\nFeedback 1\nAnswer 1.4\n--feedback--\nFeedback 1\n--video-solution--\n5\n--text--\nQuestion 2\n--answers--\nAnswer 2.1\n--feedback--\nFeedback 2\nAnswer 2.2\n--feedback--\nFeedback 2\nAnswer 2.3\n--feedback--\nFeedback 2\nAnswer 2.4\n--feedback--\nFeedback 2\n--video-solution--\n5\n--text--\nQuestion 3\n--answers--\nAnswer 3.1\n--feedback--\nFeedback 3\nAnswer 3.2\n--feedback--\nFeedback 3\nAnswer 3.3\n--feedback--\nFeedback 3\nAnswer 3.4\n--feedback--\nFeedback 3\n--video-solution--\n5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1160,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-dynamic-programming\\68420c7fb5b9e36eefb9e98f.md",
      "source_type": "git_repo"
    },
    "token_count": 298,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "68865d43fe430f01d43aa001f741255e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab849aa1ef70eefd29364.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672ab849aa1ef70eefd29364\ntitle: What Are Safe Ways to Sign Into Your Computer challengeType: 19\ndashedName: what-are-safe-ways-to-sign-into-your-computer\n--description--\nMany of you have being using computers for a while But you might not have thought about the safest or most secure ways to sign into your computer Whether you are using a Mac or PC, there are many ways to safely sign into your computer The first thing you should do is to make sure that your computer is password protected For Windows users, start by opening the Start menu and selecting Settings From there, go to Accounts and then Sign-in options You can then set up a password for your computer Note: If you encounter any difficulties or are using a different version of Windows, refer to the official Microsoft documentation or support resources for detailed instructions tailored to your specific version When creating your password, make sure it is a long and complex password You can use a combination of letters, numbers and special characters to make it more secure Choosing an easy password like 12345 or password is not a good idea These are easy to guess and can be easily hacked Also, do not use passwords based on personal information like your name, birthday, or address Those are also easy for hackers to guess When you create your password, it is also a good idea to setup two-factor authentication (2FA) 2FA serves as an extra layer of security and requires a second form of verification to ensure that the person trying to access the account is indeed the authorized user If you are a Mac user, you can click on the Apple menu and then go to system settings From there you can go to Users & Groups and set up a password for your computer Some Mac computers come with a touch ID feature, which is often considered more secure than regular passwords This feature allows you to sign into your computer using your fingerprint For Windows users, the Windows Hello feature offers a more secure way to sign in It uses biometric methods such as facial recognition or fingerprints for authentication, providing an alternative to traditional passwords After you finish this lecture, I urge you to look into these additional security features and set them up on your computer so that you can keep your computer safe and secure --questions--\n--text--\nWhich of the following is considered an unsafe password --answers--\n@dlkj(2***1\n--feedback--\nThe more complex the password, the more secure it is",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3899,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab849aa1ef70eefd29364.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bc5d9f80bb5a2c570cc6ed7350ba5f83",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab849aa1ef70eefd29364.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "sign in It uses biometric methods such as facial recognition or fingerprints for authentication, providing an alternative to traditional passwords After you finish this lecture, I urge you to look into these additional security features and set them up on your computer so that you can keep your computer safe and secure --questions-- --text-- Which of the following is considered an unsafe password --answers-- @dlkj(2***1 --feedback-- The more complex the password, the more secure it is12345\n#sj1--\n--feedback--\nThe more complex the password, the more secure it is 7 9@2\n--feedback--\nThe more complex the password, the more secure it is --video-solution--\n2\n--text--\nWhy is two-factor authentication (2FA) important --answers--\nIt stores your passwords securely --feedback--\nThink about the extra layer of security It automatically fixes broken passwords --feedback--\nThink about the extra layer of security It guarantees that your accounts can't be hacked --feedback--\nThink about the extra layer of security It ensures the person trying to access the account is the authorized user --video-solution--\n4\n--text--\nWhat are features like Touch ID and Windows Hello used for --answers--\nTo automatically generate passwords for you --feedback--\nThink about the different types of authentication and recognition used here To store your passwords securely --feedback--\nThink about the different types of authentication and recognition used here To sign into your computer using your fingerprint or facial recognition To guarantee that your accounts can't be hacked --feedback--\nThink about the different types of authentication and recognition used here --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3899,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab849aa1ef70eefd29364.md",
      "source_type": "git_repo"
    },
    "token_count": 324,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "91bad4809d92500fb8c356b4f2feb4af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab8573f32480f192aaae1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672ab8573f32480f192aaae1\ntitle: What Are the Different Types of Tools Professional Developers Use challengeType: 19\ndashedName: what-are-the-different-types-of-tools-professional-developers-use\n--description--\nProfessional developers rely on a variety of tools to increase productivity and code quality Let's learn about those tools, including the ones that seem very obvious The first among the tools is computers A computer is the primary development environment It could be a heavy desktop or a portable laptop with either Windows, macOS, or Linux as the operating system Professional developers often go for computers with fast processing power and plenty of RAM to handle resource-intensive tasks After the computer is a program for writing and editing code right on that computer That's a code editor or integrated development environment (IDE) IDEs like Visual Studio, IntelliJ IDEA, JetBrains, and PyCharm provide powerful features like code completion, debugging, and integrated terminal support Visual Studio Code (VS Code) is essentially a code editor, but it also provides these functionalities with its rich extension library Other code editors are Sublime Text, Atom, Notepad++, and Brackets When you write code with code editors and IDEs, you need to track the changes you make to them The tool that lets you track those changes is a version control system Git is the most widely used version control system in the development community Platforms like GitHub, GitLab, and Bitbucket provide cloud-based hosting services for your Git repositories These platforms enable collaboration with other developers, allow you to work on multiple branches, and facilitate the merging of code changes Package managers are another critical tool They help developers simplify the process of adding, updating, and removing libraries and project dependencies Examples of popular package managers are:\nNPM, Yarn, and PNPM for JavaScript\nPIP for Python\nComposer for PHP\nMaven for Java\nAfter writing code with different tools, developers test that code to make sure it's working as expected For this, developers use testing frameworks like Cypress, Playwright, Selenium, and others There are also language-specific testing frameworks Examples are:\nJest for JavaScript\npytest for Python\nJUnit for Java\nPHPUnit for PHP\nYou don't only need to test the code to make sure it's working as expected You also need to test what the code looks like visually to the end users Developers use web browsers for this",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab8573f32480f192aaae1.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "50729285c807c1cd7d76a5a573dde001",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab8573f32480f192aaae1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "code to make sure it's working as expected For this, developers use testing frameworks like Cypress, Playwright, Selenium, and others There are also language-specific testing frameworks Examples are: Jest for JavaScript pytest for Python JUnit for Java PHPUnit for PHP You don't only need to test the code to make sure it's working as expected You also need to test what the code looks like visually to the end users Developers use web browsers for thisModern browsers like Chrome, Firefox, Edge, and Safari offer developer tools for inspecting HTML, CSS, and JavaScript code There are also tools for debugging and performance profiling These tools help developers test and optimize their web applications across different browsers for the end users --questions--\n--text--\nWhy do developers go for computers with fast processing power --answers--\nTo watch the computer do all the work for them --feedback--\nThink about what enhances performance for demanding development tasks To handle resource-intensive tasks To play high-end games --feedback--\nThink about what enhances performance for demanding development tasks To watch movies without a glitch --feedback--\nThink about what enhances performance for demanding development tasks --video-solution--\n2\n--text--\nWhat provides code completion, debugging, and integrated terminal for developers --answers--\nCode editors and IDEs Testing frameworks --feedback--\nLook out for the tools that offer a comprehensive development environment Package managers --feedback--\nLook out for the tools that offer a comprehensive development environment Git --feedback--\nLook out for the tools that offer a comprehensive development environment --video-solution--\n1\n--text--\nWhich tools help developers test their code to ensure it works as intended --answers--\nCode editors and IDEs --feedback--\nThink about tools that run automated checks on the code Operating systems --feedback--\nThink about tools that run automated checks on the code Version control systems\n--feedback--\nThink about tools that run automated checks on the code Testing frameworks --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4409,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-computer-internet-and-tooling-basics\\672ab8573f32480f192aaae1.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7426ce7825f91c4c0c60b73b81623733",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-error-handling\\68420bacf395f15cd73f8118.md",
    "source_type": "git_repo",
    "title": "title needs to be updated to correct title when lectures are finalized",
    "content": "id: 68420bacf395f15cd73f8118\ntitle needs to be updated to correct title when lectures are finalized\ntitle: Understanding Error Handling\nchallengeType: 19\ndashedName needs to be updated to correct title when lectures are finalized\ndashedName: lecture-understanding-error-handling\n--description--\nWatch the video or read the transcript and answer the questions below.\n--questions--\n--text--\nQuestion 1\n--answers--\nAnswer 1.1\n--feedback--\nFeedback 1\nAnswer 1.2\n--feedback--\nFeedback 1\nAnswer 1.3\n--feedback--\nFeedback 1\nAnswer 1.4\n--feedback--\nFeedback 1\n--video-solution--\n5\n--text--\nQuestion 2\n--answers--\nAnswer 2.1\n--feedback--\nFeedback 2\nAnswer 2.2\n--feedback--\nFeedback 2\nAnswer 2.3\n--feedback--\nFeedback 2\nAnswer 2.4\n--feedback--\nFeedback 2\n--video-solution--\n5\n--text--\nQuestion 3\n--answers--\nAnswer 3.1\n--feedback--\nFeedback 3\nAnswer 3.2\n--feedback--\nFeedback 3\nAnswer 3.3\n--feedback--\nFeedback 3\nAnswer 3.4\n--feedback--\nFeedback 3\n--video-solution--\n5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1150,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-error-handling\\68420bacf395f15cd73f8118.md",
      "source_type": "git_repo"
    },
    "token_count": 292,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "4d954bd6a824bf6833f63e19f1f0bc0f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec6711b62f1cc5cc52e1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d1ec6711b62f1cc5cc52e1\ntitle: What Are Effects in React, and How Does the useEffect Hook Work challengeType: 19\ndashedName: what-are-effects-in-react-and-how-does-the-useeffect-hook-work\n--description--\nIn React, an effect is anything that happens outside the component rendering process That is, anything React does not handle directly as part of rendering the UI Common examples include fetching data, updating the browser tab's title, reading from or writing to the browser's local storage, getting the user's location, and much more These operations interact with the outside world and are known as side effects React provides the useEffect hook to let you handle those side effects useEffect lets you run a function after the component renders or updates Let's see how the useEffect hook works and why it's essential for modern React development To use the useEffect hook, you first need to import it:\njs\nimport { useEffect } from \"react\";\nThen you use it as a function, like this:\njs\nuseEffect(() => {\n// Your side effect logic (usually a function) here\n}, [dependencies]);\nThe effect function runs after the component renders, while the optional dependencies argument controls when the effect runs Note that dependencies can be an array of \"reactive values\" (state, props, functions, variables, and so on), an empty array, or omitted entirely Here's how all of those options control how useEffect works:\nIf dependencies is an array that includes one or more reactive values, the effect will run whenever they change If dependencies is an empty array, useEffect runs only once when the component first renders If you omit dependencies, the effect runs every time the component renders or updates For example, in this Counter application, we don't pass in a dependencies argument, so the effect runs when the component renders and every time it updates:\n```jsx\nimport { useState, useEffect } from \"react\";\nconst Counter = () => {\nconst [count, setCount] = useState(0);\nuseEffect(() => {\nconsole log(\"Component renders\");\n});\nreturn (\n{count}\nsetCount(count + 1)}>Increase\nsetCount(count - 1)}>Decrease\n);\n};\nexport default Counter;\n```\nBut if we pass in an empty array as a dependency, the effect only runs on the first render:\njs\nuseEffect(() => {\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec6711b62f1cc5cc52e1.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d2b9d0fc37ca72b25ca26c0cde6cc154",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec6711b62f1cc5cc52e1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "effect runs when the component renders and every time it updates: ```jsx import { useState, useEffect } from \"react\"; const Counter = () => { const [count, setCount] = useState(0); useEffect(() => { console log(\"Component renders\"); }); return ( {count} setCount(count + 1)}>Increase setCount(count - 1)}>Decrease ); }; export default Counter; ``` But if we pass in an empty array as a dependency, the effect only runs on the first render: js useEffect(() => { consolelog('Component renders');\n}, []);\nIf you pass in the count state as a dependency, the effect runs when the component first render, and when count changes:\njs\nuseEffect(() => {\ndocument title = `The current count is ${count}`;\nconsole log('component renders');\n}, [count]);\nNote that, if the effect you set up persists beyond the component's rendering lifecycle, you might need another function to \"clean up\" that function after the component renders or updates For example, if your effect function uses setInterval(), sets an event listener like window addEventListener(), or connects to a server, you'll need a cleanup function to run clearInterval(), window removeEventListener(), and disconnect from the server, respectively Here's the syntax for returning a cleanup function from the useEffect hook:\njs\nuseEffect(() => {\n// Your side effect logic here\nreturn () => {\n// Cleanup logic here (optional)\n};\n}, [dependencies]);\nFor instance, if you add a scroll event listener, you can clean it up by removing it in your cleanup function:\n```js\nuseEffect(() => {\nconst handleScroll = () => {\n// Handle scroll logic\n};\nwindow addEventListener(\"scroll\", handleScroll);\nreturn () => {\nwindow removeEventListener(\"scroll\", handleScroll);\n};\n}, []);\n```\n--questions--\n--text--\nWhat is considered an effect in React --answers--\nAny update to the component's state --feedback--\nEffects involve actions React doesn't control during rendering Operations outside the rendering process that React doesn't manage Rendering the UI after each state update --feedback--\nEffects involve actions React doesn't control during rendering Updating the component's props --feedback--\nEffects involve actions React doesn't control during rendering --video-solution--\n2\n--text--\nWhat determines how side effects run in a React app --answers--\nEffects always run once, regardless of dependencies --feedback--\nThe behavior of the effect depends on the contents of the dependency array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec6711b62f1cc5cc52e1.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5ba5498a9ab88fdef9508bdf31dd4b41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec6711b62f1cc5cc52e1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "control during rendering Operations outside the rendering process that React doesn't manage Rendering the UI after each state update --feedback-- Effects involve actions React doesn't control during rendering Updating the component's props --feedback-- Effects involve actions React doesn't control during rendering --video-solution-- 2 --text-- What determines how side effects run in a React app --answers-- Effects always run once, regardless of dependencies --feedback-- The behavior of the effect depends on the contents of the dependency arrayEffects run only when props change, ignoring state --feedback--\nThe behavior of the effect depends on the contents of the dependency array The dependency array determines when effects run Effects always run on every render unless explicitly disabled --feedback--\nThe behavior of the effect depends on the contents of the dependency array --video-solution--\n3\n--text--\nWhat are common examples of side effects in React --answers--\nRendering components and updating state --feedback--\nSide effects involve interacting with the world outside the React rendering process Passing props to child components --feedback--\nSide effects involve interacting with the world outside the React rendering process Defining component styles and layout --feedback--\nSide effects involve interacting with the world outside the React rendering process Fetching data, updating tab titles, and reading from storage --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5765,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec6711b62f1cc5cc52e1.md",
      "source_type": "git_repo"
    },
    "token_count": 254,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "11bd890349e75ba7873c8844ef7f4026",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1a82dad69dc95546e5f0d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d1a82dad69dc95546e5f0d\ntitle: How Do You Reference Values Using Refs challengeType: 19\ndashedName: how-do-you-reference-values-using-refs\n--description--\nIn React, there may be situations where you need direct access to a DOM element That's where \"refs\" come in handy Refs can also store mutable values, but state is a better choice for that In vanilla JavaScript, you used the getElementById() and querySelector() methods to access DOM elements But in React, you use refs to access elements in the DOM One of the main differences is that, with refs, you don't need identifiers like IDs and classes to reference elements So, how can you create and use refs React provides a useRef() hook that lets you do just that The first step is to import the hook from React:\njs\nimport { useRef } from \"react\";\nNext, you need to create a variable that holds the ref with the initial value of the ref inside the useRef hook, say a sectionRef initialized to null:\njs\nconst sectionRef = useRef(null);\nThe final thing to do is to attach the ref variable to the element in your JSX by using the ref attribute:\n```jsx\n{/* Section content */}\n```\nIf you log the ref to the console, you'll see it's an object with the current value, in this case, null:\njs\nconsole log(sectionRef); // { current: null }\nYou can also log the current value to the console with the current property so you can see the value directly:\njs\nconsole log(sectionRef current); // null\nThe subsequent values of the ref depend on the component lifecycle For example, the initial value of sectionRef will always be null because that's what it was initialized to After the component is mounted, the value of the ref will be the section element the ref is attached to If the component is unmounted, the ref's value goes back to the initial value of null A typical example to showcase a ref is to focus an input element on render, or by clicking a button Here's how to do that when you click a button:\n```jsx\nimport { useRef } from \"react\";\nconst Focus = () => {\nconst inputRef = useRef(null);\nconst handleFocus = () => {\nif (inputRef current) {\ninputRef current",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1a82dad69dc95546e5f0d.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a09a0426166da1ad248c3d004becd54d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1a82dad69dc95546e5f0d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to If the component is unmounted, the ref's value goes back to the initial value of null A typical example to showcase a ref is to focus an input element on render, or by clicking a button Here's how to do that when you click a button: ```jsx import { useRef } from \"react\"; const Focus = () => { const inputRef = useRef(null); const handleFocus = () => { if (inputRef current) { inputRef currentfocus();\n}\n};\nreturn (\nFocus Input\n);\n};\nexport default Focus;\n```\nIn the code above, the inputRef is created and attached to the input element There's also a button with an onClick event that calls a handleFocus function All the handleFocus function does is call the focus() method on the input element Note that, because input is a built-in component that comes with React, the actual input DOM element is set to the current property of the ref So you call the focus() method with input current focus() Here are some best practices you should be aware of while working with refs:\nUse refs mainly to interact with the DOM You can also use them for mutable data, but state is a better choice for that Don't use refs for basic state management – that is what useState is for Make sure you check that ref current exists before accessing its properties Here's how to do that again:\njs\nconst handleFocus = () => {\nif (inputRef current) {\ninputRef current focus();\n}\n};\nThis prevents errors in case the ref is accessed before it is attached to the DOM or after it is removed --questions--\n--text--\nHow can you create and use refs in React --answers--\nBy importing and using the useState hook --feedback--\nLook out for the hook that provides a way to manage mutable references in React components By importing and using the useEffect hook --feedback--\nLook out for the hook that provides a way to manage mutable references in React components By importing and using the useRef hook By importing and using the useMemo hook --feedback--\nLook out for the hook that provides a way to manage mutable references in React components --video-solution--\n3\n--text--\nWhat does a ref look like if you log it to the console --answers--\nAn object with a current property A primitive value like a string or number --feedback--\nThink about how refs store a mutable object with a key for accessing the current value A function that tracks component state",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1a82dad69dc95546e5f0d.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2cb79c07efe6c1c67e59ea5de17fdf23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1a82dad69dc95546e5f0d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and using the useMemo hook --feedback-- Look out for the hook that provides a way to manage mutable references in React components --video-solution-- 3 --text-- What does a ref look like if you log it to the console --answers-- An object with a current property A primitive value like a string or number --feedback-- Think about how refs store a mutable object with a key for accessing the current value A function that tracks component state--feedback--\nThink about how refs store a mutable object with a key for accessing the current value A list of all DOM nodes in the component --feedback--\nThink about how refs store a mutable object with a key for accessing the current value --video-solution--\n1\n--text--\nWhat is the value of the ref after the component is mounted --answers--\nAlways null --feedback--\nConsider what a ref points to once it's attached to a DOM element The props of the component --feedback--\nConsider what a ref points to once it's attached to a DOM element A random value generated by React --feedback--\nConsider what a ref points to once it's attached to a DOM element The DOM element the ref is attached to --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5333,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1a82dad69dc95546e5f0d.md",
      "source_type": "git_repo"
    },
    "token_count": 239,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d188bf4614a8a3b057bc70663408f157",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec87b34cee1d9219f7e9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d1ec87b34cee1d9219f7e9\ntitle: How Can You Create Custom Hooks in React challengeType: 19\ndashedName: how-can-you-create-custom-hooks-in-react\n--description--\nReact provides many built-in hooks that let you implement different features in your projects These include useState, useEffect, useContext, and others But sometimes, you'll need to add a feature that none of the built-in hooks can help with Fortunately, you can create your own custom hooks in React Custom hooks are not as complicated as they might seem They're just reusable functions that let you share logic across multiple components That means reusability is another reason why you would want to build your own hook With a custom hook, you can extract logic away from any components that use them, like data fetching, state management, toggling, side effects like checking for the online or offline status of users, and so on You can then import the hook to use in any component, so you can focus on rendering and presentation within those components That means fewer repetitions and less duplication, which means fewer places to make changes when you want to make any updates Now, let's take a look at how you can make your own custom hook In React, all built-in hooks start with the word use, so your custom hook should follow the same convention Your custom hook's name should also clearly communicate what it does So, if your custom hook…\nfetches data, you can call it useFetch\ntoggles something on and off, you can call it useToggle\nor if it implements debouncing, useDebounce is a good name\nLet's say you want to build a custom hook to add debouncing to your app Debouncing is a programming technique that limits how often a function runs It works by waiting until a user stops performing an action for a specified period of time before executing the function For example, in a search box, instead of making an API call for every keystroke, debouncing waits until the user pauses typing for, say, 500 milliseconds To create a debouncing custom hook, you first need to create a useDebounce jsx or useDebounce js file Conventionally, files for any custom hooks you create are saved to a hooks folder You can use some built-in hooks within your own custom hook",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7826,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec87b34cee1d9219f7e9.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "05b759734bf2c91a19fcddf95d88e354",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec87b34cee1d9219f7e9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "period of time before executing the function For example, in a search box, instead of making an API call for every keystroke, debouncing waits until the user pauses typing for, say, 500 milliseconds To create a debouncing custom hook, you first need to create a useDebounce jsx or useDebounce js file Conventionally, files for any custom hooks you create are saved to a hooks folder You can use some built-in hooks within your own custom hookFor debouncing, you need the useState and useEffect hooks, so import them at the top of your file:\njs\nimport { useState, useEffect } from \"react\";\nNext, create a useDebounce function that takes value and delay as parameters value is the resource you want to wait for, and delay is the period of time you want to wait for Since you want to wait for some period of time, the setTimeout and clearTimeout functions would be useful:\n```js\nfunction useDebounce(value, delay) {\nconst [debouncedValue, setDebouncedValue] = useState(value);\nuseEffect(() => {\nconst handler = setTimeout(() => {\nsetDebouncedValue(value);\n}, delay);\nreturn () => {\nclearTimeout(handler);\n};\n}, [value, delay]);\nreturn debouncedValue;\n}\nexport { useDebounce };\n```\nThe debouncedValue state holds and returns the delayed value, which only updates after the specified timeout period useEffect is where the magic really happens If you recall from the previous lecture, anything that exists outside the React rendering cycle, like setting and clearing a timer, is a side effect, and you should use the useEffect hook to handle them Within the useEffect hook here, you use setTimeout to set the debouncedValue You then return a cleanup function that uses clearTimeout to clear the previous timeout whenever value or delay changes, or the component unmounts",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7826,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec87b34cee1d9219f7e9.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "b5f1a47aa56c28fc893a70f6306c10c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec87b34cee1d9219f7e9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is where the magic really happens If you recall from the previous lecture, anything that exists outside the React rendering cycle, like setting and clearing a timer, is a side effect, and you should use the useEffect hook to handle them Within the useEffect hook here, you use setTimeout to set the debouncedValue You then return a cleanup function that uses clearTimeout to clear the previous timeout whenever value or delay changes, or the component unmountsTo use this hook, we've prepared a footballers array to filter through with a simple search bar:\n```js\nconst footballers = [\n'Lionel Messi', 'Cristiano Ronaldo', 'Neymar Jr',\n'Kylian Mbappe', 'Mohamed Salah', 'Sadio Mane',\n'Kevin De Bruyne', 'Robert Lewandowski', 'Harry Kane',\n'Sergio Ramos', 'Virgil van Dijk', 'Alisson Becker',\n'Joshua Kimmich', 'Manuel Neuer', 'Karim Benzema',\n'Thibaut Courtois', 'Eden Hazard', 'Raheem Sterling',\n'Bruno Fernandes', 'Trent Alexander-Arnold', 'Son Heung-min',\n'Pierre-Emerick Aubameyang','Sergio Aguero', 'Luis Suarez',\n'Luka Modric', 'Casemiro', 'Frenkie de Jong', 'Gerard Pique',\n'Marc-Andre ter Stegen', 'Keylor Navas', 'Angel Di Maria',\n\"N'Golo Kante\", 'Kai Havertz', 'Timo Werner', 'Hakim Ziyech',\n'Christian Pulisic', 'Mason Mount', 'Olivier Giroud', 'Tammy Abraham',\n'Kepa Arrizabalaga', 'Ben Chilwell', 'Thiago Silva', 'Kurt Zouma',\n'John Terry', 'Didier Drogba', 'Frank Lampard', 'Ashley Cole', 'Petr Cech',\n];\nexport default footballers;\n```\nAnd here's a FootballerSearch component that uses the useDebounce hook to delay searching for 1 second after the user stops typing:\n```jsx\nimport { useState, useEffect } from \"react\";\nimport { useDebounce } from \" /hooks/useDebounce\";\nimport footballers from \"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7826,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec87b34cee1d9219f7e9.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "48a1cd1171d733ae394e9435e1de13c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec87b34cee1d9219f7e9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Havertz', 'Timo Werner', 'Hakim Ziyech', 'Christian Pulisic', 'Mason Mount', 'Olivier Giroud', 'Tammy Abraham', 'Kepa Arrizabalaga', 'Ben Chilwell', 'Thiago Silva', 'Kurt Zouma', 'John Terry', 'Didier Drogba', 'Frank Lampard', 'Ashley Cole', 'Petr Cech', ]; export default footballers; ``` And here's a FootballerSearch component that uses the useDebounce hook to delay searching for 1 second after the user stops typing: ```jsx import { useState, useEffect } from \"react\"; import { useDebounce } from \" /hooks/useDebounce\"; import footballers from \"/footballers\";\nconst FootballerSearch = () => {\nconst [query, setQuery] = useState(\"\");\nconst debouncedQuery = useDebounce(query, 1000); // Start searching 1 second after the user stops typing\nuseEffect(() => {\nif (debouncedQuery) {\nconst results = footballers filter((footballer) =>\nfootballer toLowerCase() includes(debouncedQuery toLowerCase()),\n);\nconsole log(\"Search results:\", results);\n} else {\nconsole log(\"Search results: []\");\n}\n}, [debouncedQuery]);\nreturn (\n<>\nFootballer Search App\nsetQuery(e target value)}\nplaceholder=\"Search for a footballer \"\n/>\n</>\n);\n};\nexport default FootballerSearch;\n```\nAs you can see, the debouncedQuery variable is what initializes the useDebounce hook with the query state (what the user types), and the delay for 1,000 milliseconds, or 1 second The search itself is handled inside the useEffect hook, and search results are logged to the console --questions--\n--text--\nWhat is a notable benefit of creating a custom hook in React --answers--\nIt makes components render faster --feedback--\nCustom hooks help avoid repeating the same logic in different components It allows you to reuse logic across multiple components It replaces the need for built-in hooks --feedback--\nCustom hooks help avoid repeating the same logic in different components It forces components to share the same state --feedback--\nCustom hooks help avoid repeating the same logic in different components --video-solution--\n2\n--text--\nWhat is the correct naming convention for a custom hook in React --answers--\nIt should start with \"use\" It can have any name",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7826,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec87b34cee1d9219f7e9.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "2aa1d1cf2f8cc96a4ec6c46d4b985ee9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec87b34cee1d9219f7e9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "different components It allows you to reuse logic across multiple components It replaces the need for built-in hooks --feedback-- Custom hooks help avoid repeating the same logic in different components It forces components to share the same state --feedback-- Custom hooks help avoid repeating the same logic in different components --video-solution-- 2 --text-- What is the correct naming convention for a custom hook in React --answers-- It should start with \"use\" It can have any name--feedback--\nThink about a specific prefix for hooks It should end with \"Hook\" --feedback--\nThink about a specific prefix for hooks It must match a built-in hook name --feedback--\nThink about a specific prefix for hooks --video-solution--\n1\n--text--\nWhat would you call a custom hook that toggles a value on and off --answers--\nuseSwitch\n--feedback--\nCustom hooks should follow React's naming convention and describe their purpose clearly useToggle\ntoggleHook\n--feedback--\nCustom hooks should follow React's naming convention and describe their purpose clearly useBoolean\n--feedback--\nCustom hooks should follow React's naming convention and describe their purpose clearly --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7826,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-effects-and-referencing-values-in-react\\67d1ec87b34cee1d9219f7e9.md",
      "source_type": "git_repo"
    },
    "token_count": 231,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "a6f126adb395ab0adfeef5fe9404e1c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733aae9d25004f60d1e86f2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733aae9d25004f60d1e86f2\ntitle: What Are Some Ways to Validate Forms Using JavaScript challengeType: 19\ndashedName: what-are-some-ways-to-validate-forms-using-javascript\n--description--\nLet's learn about how to use JavaScript to validate your forms In a previous lecture, you've learned how to use HTML to restrict the values your users can submit in your form But sometimes that's not enough If you want to get more complex, such as displaying your own error messages to the user, you will need to use JavaScript Certain HTML elements, such as the textarea and input elements, expose a Constraint Validation API This API allows you to assert that the user's provided value for that element passes any HTML-level validation you have written, such as minimum length or pattern matching But how can you actually use it Let's say you wanted employees at a company to send feedback messages through a form like this:\n```html\nEnter your email:\nEnter your feedback:\nSubmit Feedback\n```\nWe are using the email input which comes with built in validation to check for basic validation like if the input includes the at (@) sign But what if the user provides an email address like example@email com This would pass the basic validation, but we want to be more specific about accepting emails from those with a company email address This is where we can use the pattern attribute to specify that the email address must end in a company email address Here is what the updated example will look like:\n```html\nEnter your email:\nEnter your feedback:\nSubmit Feedback\n```\nNow, if you try to submit the feedback, you will see a message saying \"Please match the requested format \"\nEven though the input does have placeholder text showing them the desired format, it would be better to also include a customized error message using JavaScript Let's first take a look at the checkValidity() method:\n```js\nconst input = document querySelector(\"input\");\ninput addEventListener(\"input\", (e) => {\nconsole log(e target checkValidity())\n})\n```\nIn the above example, we've queried our input from the DOM, and added an input event listener We know that e target refers to the element that triggered the event In this case, our input But what is the checkValidity() method This is part of the Constraint Validation API",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7253,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733aae9d25004f60d1e86f2.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "aa9f70951c7360ed095bc0381ae678a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733aae9d25004f60d1e86f2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "JavaScript Let's first take a look at the checkValidity() method: ```js const input = document querySelector(\"input\"); input addEventListener(\"input\", (e) => { console log(e target checkValidity()) }) ``` In the above example, we've queried our input from the DOM, and added an input event listener We know that e target refers to the element that triggered the event In this case, our input But what is the checkValidity() method This is part of the Constraint Validation APIThe checkValidity() method returns true if the element matches all HTML validation (based on its attributes), and false if it fails When we try with an invalid input, we see false gets logged in the console Now that we know the input is invalid, let's report the invalidity:\n```js\nconst input = document querySelector(\"input\");\ninput addEventListener(\"input\", (e) => {\nif ( e target checkValidity()) {\ne target reportValidity();\n}\n})\n```\nAnd as a result, you will see the browser's error message \"Please match the requested format \"\nIt reports the invalid state immediately, instead of waiting for us to submit the form But it's still using the default message This is because the reportValidity method only tells the browser that the input is invalid The browser still chooses how to display why it's invalid That's where the setCustomValidity method comes in ```js\nconst input = document querySelector(\"input\");\ninput addEventListener(\"input\", (e) => {\nif ( e target checkValidity()) {\ne target setCustomValidity(\n\"You must use a company email address that ends in @sampleCompany com\"\n);\n}\n});\n```\nThis method accepts a custom error message, which is displayed to the user As a result, you will see the custom error message You must use a company email address that ends in @sampleCompany com If you are interested in exploring more about the different types of validity states and why a particular validation has failed, you can log out the validity property like this:\n```js\nconst input = document querySelector(\"input\");\ninput addEventListener(\"input\", (e) => {\nconsole log(e target validity);\n})\n```\nThe validity property is an instance of the ValidityState object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7253,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733aae9d25004f60d1e86f2.md",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "19cdbd5ecececbd524cdcb2971ea2cf8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733aae9d25004f60d1e86f2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "you will see the custom error message You must use a company email address that ends in @sampleCompany com If you are interested in exploring more about the different types of validity states and why a particular validation has failed, you can log out the validity property like this: ```js const input = document querySelector(\"input\"); input addEventListener(\"input\", (e) => { console log(e target validity); }) ``` The validity property is an instance of the ValidityState objectHere is an example of what the object might look like in the browser:\njavascript\nValidityState {\nbadInput: false,\ncustomError: false,\npatternMismatch: true,\nrangeOverflow: false,\nrangeUnderflow: false,\nstepMismatch: false,\ntooLong: false,\ntooShort: false,\ntypeMismatch: true,\nvalueMissing: false,\nvalid: true\n}\nThere are several helpful properties which all hold the value of a boolean of true or false Some of these helpful properties that you can explore more on your own would be the valueMissing property which is true when a required input field is left empty Or the patternMismatch which is true if the value doesn't match the specified regular expression pattern After this lecture, I encourage you to play around with the examples given in this lecture and explore more about the different validity properties --questions--\n--text--\nWhich method of the Constraint Validation API is used to check if an input element meets all its validation constraints --answers--\nvalidateInput()\n--feedback--\nThe lecture demonstrates this method when adding an event listener to the input element checkValidity()\nisValid()\n--feedback--\nThe lecture demonstrates this method when adding an event listener to the input element testConstraints()\n--feedback--\nThe lecture demonstrates this method when adding an event listener to the input element --video-solution--\n2\n--text--\nWhat is the purpose of the setCustomValidity() method in form validation --answers--\nTo set custom CSS styles for invalid inputs --feedback--\nThe lecture explains how this method is used to provide more informative feedback to users To create custom validation rules --feedback--\nThe lecture explains how this method is used to provide more informative feedback to users To display a custom error message for invalid inputs To override the default HTML validation --feedback--\nThe lecture explains how this method is used to provide more informative feedback to users --video-solution--\n3\n--text--\nWhich property of the validity object becomes true when a required input field is left empty",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7253,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733aae9d25004f60d1e86f2.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "e1d859ffe18f663b1b5ed44bbd165807",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733aae9d25004f60d1e86f2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "more informative feedback to users To create custom validation rules --feedback-- The lecture explains how this method is used to provide more informative feedback to users To display a custom error message for invalid inputs To override the default HTML validation --feedback-- The lecture explains how this method is used to provide more informative feedback to users --video-solution-- 3 --text-- Which property of the validity object becomes true when a required input field is left empty--answers--\nisEmpty\n--feedback--\nThe lecture shows this property when logging the validity object for an empty required field required\n--feedback--\nThe lecture shows this property when logging the validity object for an empty required field valueMissing\ninvalidValue\n--feedback--\nThe lecture shows this property when logging the validity object for an empty required field --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7253,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733aae9d25004f60d1e86f2.md",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "16ace091455e93d2ab1cd6bd37f489c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733d3a33abdd27cd562bdf2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733d3a33abdd27cd562bdf2\ntitle: What Is the Purpose of e preventDefault challengeType: 19\ndashedName: what-is-the-purpose-of-e-preventdefault\n--description--\nLet's learn about the purpose of the preventDefault() method on events Every event that triggers in the DOM has some sort of default behavior The click event on a checkbox toggles the state of that checkbox, by default Pressing the space bar on a focused button activates the button The preventDefault() method on these event objects stops that behavior from happening Let's take a look at an example Let's define an input element for a user to type in:\nhtml\n<label>Enter some characters:\n<input type=\"text\">\n</label>\nAnd if we look at the result, we can type in the input field as expected But maybe we don't want that Maybe, instead, we'd like to show the character the user types in a separate element First, let's define our element for that:\n```html\nEnter some characters:\n```\nAnd then, we need to hook into the keydown event to listen for a character being typed on the keyboard Note that we do not want the change or input events here, because we need the keyboard information ```javascript\nconst input = document querySelector(\"input\");\ninput addEventListener(\"keydown\", (e) => {\n})\n```\nThe keydown event fires when you press down on a keyboard key When this happens, let's display the character in our p element ```javascript\nconst input = document querySelector(\"input\");\nconst output = document getElementById(\"output\");\ninput addEventListener(\"keydown\", (e) => {\noutput innerText = You pressed the ${e key} key;\n});\n```\ne key gives you the value of the key pressed, such as a for the a key or Enter for the Enter key With the above code, when you type in the input, the character you type will be displayed in the p element This is great, but we don't want to show the characters in the input as well This is where our preventDefault() method comes in The default behavior of a keydown is to render the character in the input Let's avoid that by calling e preventDefault():\n```javascript\nconst input = document querySelector(\"input\");\nconst output = document getElementById(\"output\");\ninput addEventListener(\"keydown\", (e) => {\ne preventDefault();\noutput innerText = You pressed the ${e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5114,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733d3a33abdd27cd562bdf2.md",
      "source_type": "git_repo"
    },
    "token_count": 504,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f503283e7464ecaaae5bd2d72c6594f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733d3a33abdd27cd562bdf2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "be displayed in the p element This is great, but we don't want to show the characters in the input as well This is where our preventDefault() method comes in The default behavior of a keydown is to render the character in the input Let's avoid that by calling e preventDefault(): ```javascript const input = document querySelector(\"input\"); const output = document getElementById(\"output\"); input addEventListener(\"keydown\", (e) => { e preventDefault(); output innerText = You pressed the ${ekey} key;\n});\n```\nAnd just like that, you have prevented the default behavior to allow yourself to implement your own custom event handling Another common example of when to use the e preventDefault method has to deal with form submissions By default, submitting a form sends data to the server and reloads the page Using e preventDefault() prevents this from happening ```js\nconst form = document querySelector(\"form\");\nform addEventListener(\"submit\", (e) => {\ne preventDefault();\n// rest of code goes here\n});\n```\nPreventing the default behavior is great when you need more control over how a user interacts with the page, but it's important to keep things like accessibility in mind – your custom behavior should provide the same features as the default --questions--\n--text--\nWhat is the primary purpose of the preventDefault() method in event handling --answers--\nTo stop event propagation --feedback--\nThe lecture explains what this method does to the default behavior of events To remove event listeners --feedback--\nThe lecture explains what this method does to the default behavior of events To stop the default behavior of an event To trigger custom events --feedback--\nThe lecture explains what this method does to the default behavior of events --video-solution--\n3\n--text--\nIn the example given, what default behavior is being prevented when preventDefault() is called on a keydown event for an input element --answers--\nThe input losing focus --feedback--\nThink about what normally happens when you type in an input field The key being displayed in the input field The form being submitted --feedback--\nThink about what normally happens when you type in an input field The page scrolling --feedback--\nThink about what normally happens when you type in an input field --video-solution--\n2\n--text--\nWhen using preventDefault(), what important consideration should developers keep in mind --answers--\nIt should only be used on form submissions --feedback--\nThe lecture mentions a specific concern related to user interaction when using custom behaviors",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5114,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733d3a33abdd27cd562bdf2.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2f968a01d3df419c174ab89acc0b8015",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733d3a33abdd27cd562bdf2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "displayed in the input field The form being submitted --feedback-- Think about what normally happens when you type in an input field The page scrolling --feedback-- Think about what normally happens when you type in an input field --video-solution-- 2 --text-- When using preventDefault(), what important consideration should developers keep in mind --answers-- It should only be used on form submissions --feedback-- The lecture mentions a specific concern related to user interaction when using custom behaviorsIt will automatically improve performance --feedback--\nThe lecture mentions a specific concern related to user interaction when using custom behaviors It should maintain the same features as the default behavior for accessibility It will prevent all future events on the element --feedback--\nThe lecture mentions a specific concern related to user interaction when using custom behaviors --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5114,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733d3a33abdd27cd562bdf2.md",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "794a30283fb4f0a48824dbbd36ec638e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-graphs-and-trees\\68420c5ac17cf26ab2a4ca3c.md",
    "source_type": "git_repo",
    "title": "title needs to be updated to correct title when lectures are finalized",
    "content": "id: 68420c5ac17cf26ab2a4ca3c\ntitle needs to be updated to correct title when lectures are finalized\ntitle: Understanding Graphs and Trees\nchallengeType: 19\ndashedName needs to be updated to correct title when lectures are finalized\ndashedName: lecture-understanding-graphs-and-trees\n--description--\nWatch the video or read the transcript and answer the questions below.\n--questions--\n--text--\nQuestion 1\n--answers--\nAnswer 1.1\n--feedback--\nFeedback 1\nAnswer 1.2\n--feedback--\nFeedback 1\nAnswer 1.3\n--feedback--\nFeedback 1\nAnswer 1.4\n--feedback--\nFeedback 1\n--video-solution--\n5\n--text--\nQuestion 2\n--answers--\nAnswer 2.1\n--feedback--\nFeedback 2\nAnswer 2.2\n--feedback--\nFeedback 2\nAnswer 2.3\n--feedback--\nFeedback 2\nAnswer 2.4\n--feedback--\nFeedback 2\n--video-solution--\n5\n--text--\nQuestion 3\n--answers--\nAnswer 3.1\n--feedback--\nFeedback 3\nAnswer 3.2\n--feedback--\nFeedback 3\nAnswer 3.3\n--feedback--\nFeedback 3\nAnswer 3.4\n--feedback--\nFeedback 3\n--video-solution--\n5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-graphs-and-trees\\68420c5ac17cf26ab2a4ca3c.md",
      "source_type": "git_repo"
    },
    "token_count": 299,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "5036e90efb9bbee2d2a7d0488e1f52c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-functional-programming\\6734061fe116df617a564a37.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6734061fe116df617a564a37\ntitle: What Is Currying, and How Does It Work challengeType: 19\ndashedName: what-is-currying-and-how-does-it-work\n--description--\nCurrying is a technique where we transform a function that takes multiple arguments into a sequence of functions, each taking a single argument Let's start with a basic example Imagine we have a function that adds two numbers:\n```js\nfunction add(a, b) {\nreturn a + b;\n}\nconsole log(add(3, 4)); // Output: 7\n```\nThis is a function that takes two arguments and returns their sum Now, let's see how we can curry this function:\n```js\nfunction curriedAdd(a) {\nreturn function(b) {\nreturn a + b;\n}\n}\nconsole log(curriedAdd(3)(4)); // Output: 7\n```\nIn this curry converted code, instead of taking two arguments at once, we have a function that takes the first argument and returns another function This returned function then takes the second argument and performs the addition We call it like curriedAdd(3)(4), where each pair of parentheses represents a function call But why would we want to do this Currying allows us to create some special functions easily For example, we could create a function that always adds five to any number:\njs\nconst addFive = curriedAdd(5);\nconsole log(addFive(10)); // Output: 15\nconsole log(addFive(20)); // Output: 25\nHere, addFive is a function that's always ready to add five to whatever number we give it This is a simple example of partial application, where we fix a certain number of arguments to a function, producing another function that takes fewer arguments While our examples have focused on functions with two arguments, currying can be applied to functions with any number of arguments As you continue your journey in JavaScript, you'll likely find many situations where currying can make your code cleaner and more expressive --questions--\n--text--\nWhat is the primary purpose of currying in functional programming --answers--\nTo make functions run faster --feedback--\nThink about how currying changes the way we pass arguments to a function To transform a function with multiple arguments into a sequence of functions with single arguments To eliminate the need for function parameters --feedback--\nThink about how currying changes the way we pass arguments to a function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3946,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-functional-programming\\6734061fe116df617a564a37.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "cbdb26c98f63184e087bd2e2575e0813",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-functional-programming\\6734061fe116df617a564a37.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "can make your code cleaner and more expressive --questions-- --text-- What is the primary purpose of currying in functional programming --answers-- To make functions run faster --feedback-- Think about how currying changes the way we pass arguments to a function To transform a function with multiple arguments into a sequence of functions with single arguments To eliminate the need for function parameters --feedback-- Think about how currying changes the way we pass arguments to a functionTo combine multiple functions into one --feedback--\nThink about how currying changes the way we pass arguments to a function --video-solution--\n2\n--text--\nIn the context of currying, what is partial application --answers--\nApplying a function to only some of its arguments Applying a function to all of its arguments at once --feedback--\nRecall what we said about \"fixing\" some arguments to a function Creating a new function from scratch --feedback--\nRecall what we said about \"fixing\" some arguments to a function Splitting a function into multiple smaller functions --feedback--\nRecall what we said about \"fixing\" some arguments to a function --video-solution--\n1\n--text--\nWhich of the following is an example of a curried function in JavaScript --answers--\njs\nfunction add(a, b, c) {\nreturn a + b + c;\n}\n--feedback--\nThis is a regular function that takes all parameters at once js\nfunction add(a) {\nreturn function (b) {\nreturn function (c) {\nreturn a + b + c;\n};\n};\n}\njs\nfunction add(a, b, c) {\nreturn a() + b() + c();\n}\n--feedback--\nThis function accepts all parameters at once and calls them like functions, which does not follow the definition of a curried function js\nfunction add(a) {\nfunction inner(b) {\nreturn a + b;\n}\n}\n--feedback--\nThe inner function is never returned, so add(2) will return undefined and add(2)(3) will throw an error --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3946,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-functional-programming\\6734061fe116df617a564a37.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2b65a67d72c8f90cbe41363ffaa0897a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-functional-programming\\6733b0451d6be0065430b418.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733b0451d6be0065430b418\ntitle: What Is Functional Programming challengeType: 19\ndashedName: what-is-functional-programming\n--description--\nFunctional programming is about writing code that is clean, predictable, and easier to test and debug Two key concepts we'll explore today are pure functions and avoiding side effects Let's start with pure functions A pure function is a function that, given the same input, will always return the same output, and it doesn't modify anything outside of itself Here's an example of a pure function:\njs\nfunction add(a, b) {\nreturn a + b;\n}\nThis function is pure because it always returns the same result for the same inputs, and it doesn't change anything outside of itself No matter how many times you call add(2, 3), it will always return 5, and it won't affect any other part of your program Now, let's contrast this with an impure function:\njs\nlet total = 0;\nfunction addToTotal(value) {\ntotal += value;\nreturn total;\n}\nThis function is impure because it modifies a variable outside of itself (total) The result of addToTotal(5) will be different depending on what total was before the function was called This unpredictability can make our code harder to understand and debug This brings us to our next important concept and that is side effects A side effect is any change that occurs in the state of the program when a function is called This could include modifying a global variable, writing to a file, or making an API call Pure functions have no side effects but impure functions have these Avoiding side effects is a key principle of functional programming When we minimize side effects, our code becomes more predictable and easier to test While writing code, our main goal should be to make functions do one thing and they should do it very well without changing other parts of our program Here's an example of a function with a side effect:\njs\nfunction greet(name) {\nconsole log(`Hello, ${name} `);\n}\nThis function has a side effect because it interacts with the outside world by logging to the console In functional programming, we might rewrite this as:\njs\nfunction greet(name) {\nreturn `Hello, ${name} `;\n}\nconsole log(greet(\"Alice\"));\nNow greet is a pure function that simply returns a string, and we handle the side effect (logging to the console) separately",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4388,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-functional-programming\\6733b0451d6be0065430b418.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "47fba9ebe67197b1e7e61078c55cbb5a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-functional-programming\\6733b0451d6be0065430b418.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "example of a function with a side effect: js function greet(name) { console log(`Hello, ${name} `); } This function has a side effect because it interacts with the outside world by logging to the console In functional programming, we might rewrite this as: js function greet(name) { return `Hello, ${name} `; } console log(greet(\"Alice\")); Now greet is a pure function that simply returns a string, and we handle the side effect (logging to the console) separatelyFunctional programming encourages us to compose our programs using pure functions by breaking our code into small, predictable pieces And thus, we can build programs that are easier to understand, test, and maintain --questions--\n--text--\nWhat is a key characteristic of a pure function --answers--\nIt always modifies global state --feedback--\nThink about what we said regarding the predictability of pure functions It produces different outputs for the same input --feedback--\nThink about what we said regarding the predictability of pure functions It always produces the same output for the same input It always performs I/O operations --feedback--\nThink about what we said regarding the predictability of pure functions --video-solution--\n3\n--text--\nWhich of the following is considered a side effect in functional programming --answers--\nReturning a value from a function Creating a new object within a function --feedback--\nRecall what we discussed about functions interacting with their external environment Modifying a global variable Using local variables within a function --feedback--\nRecall what we discussed about functions interacting with their external environment --video-solution--\n3\n--text--\nWhat is a benefit of avoiding side effects in functional programming --answers--\nIt makes the code run faster --feedback--\nConsider what we said about the predictability and testability of code without side effects It reduces the amount of code needed --feedback--\nConsider what we said about the predictability and testability of code without side effects It makes the code easier to understand and test It eliminates the need for functions altogether --feedback--\nConsider what we said about the predictability and testability of code without side effects --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4388,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-functional-programming\\6733b0451d6be0065430b418.md",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1c4e65b25b5f636e2c0bda6d3d89e9ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733d3ab69e94b7df7ee91b0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733d3ab69e94b7df7ee91b0\ntitle: How Does the Submit Event Work with Forms challengeType: 19\ndashedName: how-does-the-submit-event-work-with-forms\n--description--\nLet's learn about how the submit event works with HTML forms First, we need to understand how to submit a form There are three ways a form can be submitted The first is when the user clicks a button in the form which has the type attribute set to submit The second is when the user presses the Enter key on any editable input field in the form The third is through a JavaScript call to the requestSubmit() or submit() methods of the form element But what happens when a form is submitted There's a few things that happen, and the behavior of the form depends on its attributes The first attribute that we need to look at is the action attribute The action attribute should contain either a URL or a relative path for the current domain This value determines where the form attempts to send data If you do not set an action attribute, the form will send data to the current page's URL Here is an example of a form with an action attribute set to a specific URL:\n```html\nSubmit\n```\nWhen this form is submitted, it will send data to freeCodeCamp's homepage, which probably won't do anything Here's another form, which submits to a relative path:\n```html\nSubmit\n```\nThis one submits to the /data path on the current domain In our case, it would submit to http://127 0 0 1:5500/data The second attribute to control how a submission behaves is the method attribute This attribute accepts a standard HTTP method, such as GET or POST, and uses that method when making the request to the action URL HTTP stands for Hypertext Transfer Protocol and it is used to transfer data over the web HTTP methods are used to define the actions that can be performed on resources, such as GET, POST, PUT, DELETE, and so on You will more about these methods in future lectures When a method is not set, the form will default to a GET request A GET request is used to retrieve data from a specified resource without making any changes to it, and the parameters are typically appended to the URL in the form of a query string The data in the form will be URL encoded as name=value pairs and appended to the action URL as query parameters",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6284,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733d3ab69e94b7df7ee91b0.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "874cbbd1f82ec7bf50630135d49b2fd4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733d3ab69e94b7df7ee91b0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "more about these methods in future lectures When a method is not set, the form will default to a GET request A GET request is used to retrieve data from a specified resource without making any changes to it, and the parameters are typically appended to the URL in the form of a query string The data in the form will be URL encoded as name=value pairs and appended to the action URL as query parametersFor instance, by submitting the form from our previous example with the value of 3342 for the input field, the form would try to GET the URL http://127 0 0 1:5500/data number=3342 This is great for something like a search form, where your user is querying data But if you want your user to submit new data, such as in a registration form, the idiomatic method to use would be the POST method The POST method is used to send data to the server to create or update a resource Let's set the method attribute to the value of POST:\n```xml\nSubmit\n```\nWhen you send a POST request, a body can be included which contains the data for your request So unlike a GET, the data are not appended to the URL, and our form sends the POST request to http://127 0 0 1:5500/data The data, instead, can be found in the body of the request, still as URL-encoded form data URL-encoded form data is when form data is converted into a string of key-value pairs, like name=John+Doe&email=john%40example com, where special characters are replaced with encoded versions to safely send the data over the web You will learn more about this in future lectures But maybe you don't want to send the data as a URL-encoded form payload The form element accepts an enctype attribute, which represents the encoding type to use for the data This attribute only accepts three values: application/x-www-form-urlencoded (which is the default, sending the data as a URL-encoded form body), text/plain (which sends the data in plaintext form, in name=value pairs separated by new lines), or multipart/form-data, which is specifically for handling forms with a file upload In this lecture, you've learned the basics of form submissions In future lectures, we'll dive deeper into working with forms and how they interact with the server --questions--\n--text--\nWhich of the following is NOT a way to submit an HTML form --answers--\nClicking a button with type=\"submit\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6284,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733d3ab69e94b7df7ee91b0.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ef61788ac165471b0c57eab72b539f49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733d3ab69e94b7df7ee91b0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "body), text/plain (which sends the data in plaintext form, in name=value pairs separated by new lines), or multipart/form-data, which is specifically for handling forms with a file upload In this lecture, you've learned the basics of form submissions In future lectures, we'll dive deeper into working with forms and how they interact with the server --questions-- --text-- Which of the following is NOT a way to submit an HTML form --answers-- Clicking a button with type=\"submit\"Pressing Enter on an editable input field --feedback--\nThe lecture mentions three specific ways to submit a form Calling the form's requestSubmit() method Double-clicking anywhere within the form --feedback--\nThe lecture mentions three specific ways to submit a form --video-solution--\n4\n--text--\nWhat happens when a form's action attribute is not set --answers--\nThe form submission is prevented --feedback--\nThe lecture explains the default behavior when the action attribute is missing The form data is sent to the current page's URL An error is thrown --feedback--\nThe lecture explains the default behavior when the action attribute is missing The form data is sent to a default server --feedback--\nThe lecture explains the default behavior when the action attribute is missing --video-solution--\n2\n--text--\nWhich enctype value should be used when a form includes file uploads --answers--\napplication/x-www-form-urlencoded\n--feedback--\nThe lecture mentions a specific enctype for handling forms with file uploads text/plain\n--feedback--\nThe lecture mentions a specific enctype for handling forms with file uploads multipart/form-data\napplication/json\n--feedback--\nThe lecture mentions a specific enctype for handling forms with file uploads --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6284,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-form-validation\\6733d3ab69e94b7df7ee91b0.md",
      "source_type": "git_repo"
    },
    "token_count": 338,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "9db1b47f2ed2960b011be1e9cebbc50a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403ca2bb16658309e3632.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673403ca2bb16658309e3632\ntitle: How Does the This Keyword Work challengeType: 19\ndashedName: how-does-the-this-keyword-work\n--description--\nLet's learn about the this keyword You learned that classes are like blueprints that you can use to create objects These blueprints need a general way to refer to the specific object that is being created, accessed, or modified within the code That's exactly what the this keyword is used for It refers to the context where the code is supposed to run If you use it within a method, the value of this will be a reference to the object associated to that method This way, you can access the properties and methods of the object within the class and reuse the method on different objects For example, here we have a Dessert class This time, we're defining a hasPeanuts property js\nclass Dessert {\nconstructor(hasPeanuts) {\nthis hasPeanuts = hasPeanuts;\n}\n}\nNotice that we're using the this keyword within the constructor Remember that the constructor is called automatically when a new object of the class is created The this keyword is telling the program that hasPeanuts should be a property of the object that is currently being created The right-hand side of the assignment statement is assigning the value of the hasPeanuts parameter to the hasPeanuts property of the new object js\nthis hasPeanuts = hasPeanuts;\nThat's in the context of the constructor but you can also use the this keyword within other methods This is our Dessert class with a few changes Now we have two properties: name and price ```js\nclass Dessert {\nconstructor(name, price) {\nthis name = name;\nthis price = price;\n}\nshowPrice() {\nconsole log(The price of ${this name} is $${this price} );\n}\n}\n```\nWe also have a new showPrice method In this method, we print a descriptive message to the console with the name and the price of the dessert object Notice how we're using the this keyword to access the properties of the object within the showPrice method What value will the this keyword have in the context of this method It will refer to the object on which the method is being called In this case, we're creating a new Dessert instance with the name “Brownie” and the price $5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5624,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403ca2bb16658309e3632.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6a8a36570a07797077426e2b50304c84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403ca2bb16658309e3632.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "descriptive message to the console with the name and the price of the dessert object Notice how we're using the this keyword to access the properties of the object within the showPrice method What value will the this keyword have in the context of this method It will refer to the object on which the method is being called In this case, we're creating a new Dessert instance with the name “Brownie” and the price $599:\njs\nconst brownie = new Dessert(\"Brownie\", 5 99);\nIf we call the showPrice() method on this object:\njs\nbrownie showPrice();\nHere is the output:\njs\nThe price of Brownie is $5 99 The name and price of the current object (brownie) are replaced in the string This is all thanks to the this keyword, which gives you a general way to refer to the current object within the class This allows you to reuse the method on different objects This is in the context of object methods but the this keyword will also have a value in standalone functions and arrow functions Its value within a standalone function typically refers to the global object (in non-strict mode) or undefined (in strict mode) The value of the this keyword is a bit different in arrow functions Arrow functions inherit the value of this from the enclosing scope where they are defined They don't create their own this binding That means that the value of this depends on the context where the arrow function is defined, not where or how the arrow function is called This makes arrow functions helpful for callbacks or for preserving context However, because of this, the value of this will not refer to the current object in object methods, so this is something that you should keep in mind when working with arrow functions The same applies to arrow functions defined within other functions They will inherit the value of this from their parent scope The this keyword is a powerful tool for accessing and manipulating objects Understanding how it works is essential for mastering object-oriented programming in JavaScript --questions--\n--text--\nWhat is the primary purpose of the this keyword in JavaScript --answers--\nTo define a new object --feedback--\nThink about how this is used within methods To access properties and methods of the current object To create functions --feedback--\nThink about how this is used within methods To call methods on other objects --feedback--\nThink about how this is used within methods --video-solution--\n2\n--text--\nWhich of the following statements is true about this in JavaScript methods",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5624,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403ca2bb16658309e3632.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0adc841da33573e98330958f8f9ef9b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403ca2bb16658309e3632.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is the primary purpose of the this keyword in JavaScript --answers-- To define a new object --feedback-- Think about how this is used within methods To access properties and methods of the current object To create functions --feedback-- Think about how this is used within methods To call methods on other objects --feedback-- Think about how this is used within methods --video-solution-- 2 --text-- Which of the following statements is true about this in JavaScript methods--answers--\nthis always refers to the global object --feedback--\nThink about how the value of this can change based on the context this is always bound to the object that the function is defined within --feedback--\nThink about how the value of this can change based on the context this can refer to different objects depending on the context in which it is used this is only used in functional programming --feedback--\nThink about how the value of this can change based on the context --video-solution--\n3\n--text--\nIn which of the following scenarios would you typically use the this keyword --answers--\nWhen defining functions --feedback--\nThink about the common use cases for this When accessing properties and methods of an object When calling functions --feedback--\nThink about the common use cases for this When creating new objects --feedback--\nThink about the common use cases for this --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5624,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403ca2bb16658309e3632.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "912d808966951f351cb7e72b4f2fda72",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\6733affc29df1304e2c97e88.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733affc29df1304e2c97e88\ntitle: What Are Classes, and How Do They Work in JavaScript challengeType: 19\ndashedName: what-are-classes-and-how-do-they-work-in-javascript\n--description--\nLet's learn about classes in JavaScript In modern JavaScript, classes are like blueprints that you can define in code for creating multiple objects of the same kind For example, if you're modeling an inventory system, you'll need to create multiple objects per type of product Each individual product will have its own properties and actions but products of the same kind can be created from the same \"blueprint\" That's what classes are used for Classes can be defined as either a class expression or class declaration Here is the basic syntax for a class declaration:\njs\nclass MyClassName {\n// Class Methods\nconstructor() { }\nmethod1() { }\nmethod2() { } }\nYou start by writing the class keyword followed by the name of the class When naming classes, you should use the PascalCase naming convention instead of camelCase The content inside the curly braces is known as the class body This is where the constructor and methods will go The constructor is a special method that gets called automatically when a new object is created from the class It is typically used to initialize the properties of the object In this example, you can see a Dog class with a constructor js\nclass Dog {\nconstructor(name) {\nthis name = name;\n}\n}\nThe this keyword is used here to refer to the current instance of the Dog class, allowing you to assign the name property to the object being created You will learn more about the this keyword in a future lecture Below the constructor, you can have what are called methods Methods are functions defined inside a class that perform actions or operations They are used to define behaviors that instances of the class can perform Here is an example of adding a method called bark to the Dog class ```js\nclass Dog {\nconstructor(name) {\nthis name = name;\n}\nbark() {\nconsole log(${this name} says woof );\n}\n}\n```\nWhen the bark method gets called the message will be logged to the console with the actual name that was passed into it If you create a Dog instance with the name \"Buddy\", calling the bark() method on that instance will print \"Buddy says woof \" to the console",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5769,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\6733affc29df1304e2c97e88.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6888d097258c12b02b8e97cb76bb5013",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\6733affc29df1304e2c97e88.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "bark to the Dog class ```js class Dog { constructor(name) { this name = name; } bark() { console log(${this name} says woof ); } } ``` When the bark method gets called the message will be logged to the console with the actual name that was passed into it If you create a Dog instance with the name \"Buddy\", calling the bark() method on that instance will print \"Buddy says woof \" to the consoleOnce you have your class defined, you can create an instance of the class with the new keyword, the name of the class, and its arguments In this example, we create a new Dog instance with the name Gino and then we assign it to the variable dog js\nconst dog = new Dog(\"Gino\");\nWhen you write new Dog(\"Gino\") in your code, the new object is created and the constructor is called automatically with the given arguments You can then access this property using the dot notation, like you can see in the following line of code:\njs\nconsole log(dog name);\nThis will log the value of the name property of this particular instance:\njs\nGino\nYou can also call methods In this example, we are calling the bark() method on the dog instance js\ndog bark();\nThis will log the following message to the console:\njs\nGino says woof As mentioned earlier, you can also define classes as a class expression This is where the class is anonymous and assigned to a variable Here is what the earlier example looks like as a class expression:\n```js\nconst Dog = class {\nconstructor(name) {\nthis name = name;\n}\nbark() {\nconsole log(${this name} says woof );\n}\n};\n```\nMost of the time, you'll use class declarations, but understanding class expressions is also valuable, as they can offer more flexibility, especially in dynamic programming situations By using classes and understanding their basic syntax, you can create reusable code, organize it into logical units, and promote code modularity --questions--\n--text--\nWhat is the primary purpose of a constructor in a JavaScript class --answers--\nTo define the methods of the class --feedback--\nThink about the initialization process of an object To initialize the properties of an object when it is created To clone instance of the class --feedback--\nThink about the initialization process of an object To inherit properties and methods from another class --feedback--\nThink about the initialization process of an object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5769,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\6733affc29df1304e2c97e88.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6253d2efe609ef166e185b3a4e53b575",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\6733affc29df1304e2c97e88.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "code modularity --questions-- --text-- What is the primary purpose of a constructor in a JavaScript class --answers-- To define the methods of the class --feedback-- Think about the initialization process of an object To initialize the properties of an object when it is created To clone instance of the class --feedback-- Think about the initialization process of an object To inherit properties and methods from another class --feedback-- Think about the initialization process of an object--video-solution--\n2\n--text--\nWhat is the correct way to create an instance of a JavaScript class --answers--\nUsing the new keyword followed by the class name and arguments By directly calling the class name --feedback--\nThink about how to create a new object based on a class definition By using the create method of the class --feedback--\nThink about how to create a new object based on a class definition By using the instantiate keyword --feedback--\nThink about how to create a new object based on a class definition --video-solution--\n1\n--text--\nWhat is the difference between a class and an object in JavaScript --answers--\nA class is an instance of an object --feedback--\nThink about the relationship between a class and the objects it creates An object is a clone of a class --feedback--\nThink about the relationship between a class and the objects it creates There is no difference between a class and an object --feedback--\nThink about the relationship between a class and the objects it creates A class is a blueprint for an object, while an object is a specific instance of that class --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5769,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\6733affc29df1304e2c97e88.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "434415d143cb4362b131be5f8a346449",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403d2aa52d8586a14a269.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673403d2aa52d8586a14a269\ntitle: What Is Class Inheritance, and How Does It Work challengeType: 19\ndashedName: what-is-class-inheritance-and-how-does-it-work\n--description--\nLet's learn about inheritance and how it works in JavaScript In programming, inheritance allows you to define classes that inherit properties and methods from other classes For example, a Car is a type of Vehicle, so you could define a Vehicle class with the most general properties and methods that are common to all types of vehicles and then define a Car class that inherits the properties and methods of the Vehicle class This \"is a\" relationship is characteristic of inheritance In this example, Car is a more specialized form of Vehicle There are two main concepts that you should know about to start working with inheritance: parent class and child class A parent class is a class that acts like a blueprint for other classes It defines properties and methods that are inherited by other classes A child class is a class that inherits the properties and methods of another class Child classes can also extend the functionality of their parent classes by adding new properties and methods In our previous example, Vehicle would be the parent class of the Car class while the Car class would be the child class of Vehicle A parent class can have multiple child classes In JavaScript, we use the extends keyword to implement inheritance This keyword indicates that a class is the child class of another class In this example, in which we only have the first lines of the class definitions, you can see that the Car class extends the Vehicle class, so Car inherits from Vehicle ```js\nclass Vehicle {\n// Implementation of Vehicle }\nclass Car extends Vehicle {\n// Implementation of Car }\n```\nLet's say that the Vehicle class has two properties: brand and year You can see this in the updated code Car has a method called honk However, notice that the Car class doesn't have its own constructor Let's see if it does inherit the properties ```js\nclass Vehicle {\nconstructor(brand, year) {\nthis brand = brand;\nthis year = year;\n}\n}\nclass Car extends Vehicle {\nhonk() {\nconsole log(\"Honk Honk \");\n}\n}\n```\nTo define an instance of Car, you'll need to pass two arguments: brand and year In this case, the brand is freeCodeCamp Motors and the year is 2019",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7227,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403d2aa52d8586a14a269.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "f058697169ebfc7d7d268d368fda652d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403d2aa52d8586a14a269.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "that the Car class doesn't have its own constructor Let's see if it does inherit the properties ```js class Vehicle { constructor(brand, year) { this brand = brand; this year = year; } } class Car extends Vehicle { honk() { console log(\"Honk Honk \"); } } ``` To define an instance of Car, you'll need to pass two arguments: brand and year In this case, the brand is freeCodeCamp Motors and the year is 2019js\nlet myCar = new Car(\"freeCodeCamp Motors\", 2019);\nIf you try to access these properties and call the method using dot notation:\njs\nconsole log(myCar brand);\nconsole log(myCar year);\nmyCar honk();\nHere is the output:\njs\nfreeCodeCamp Motors\n2019\nHonk Honk Indeed, the output is correct, so these properties and method are defined in the Car instance and you just saved yourself a lot of code repetition by inheriting these properties from the Vehicle class In this example, the child class didn't have any additional properties That's why the class didn't have a constructor, only a method If you do need to add additional properties, you'll need to define a constructor Let's see an example ```js\nclass Vehicle {\nconstructor(brand, year) {\nthis brand = brand;\nthis year = year;\n}\n}\nclass Car extends Vehicle {\nconstructor(brand, year, numDoors) {\nsuper(brand, year);\nthis numDoors = numDoors;\n}\n}\n```\nThis time, we'll add a numDoors property to the Car subclass You can see that now this class has a constructor in the updated code Within the constructor, there's a call to super(), passing the arguments brand and year super() invokes the constructor of the superclass, so by using super(brand, year) you will essentially be defining the properties of the superclass in the subclass This is another terminology you can use- superclass is the parent class and the subclass is the child class Then, this numDoors = numDoors line defines a new property that belongs exclusively to the Car class, the number of doors (numDoors) This is a way to extend the Vehicle class, adding a property that is exclusive to Car instances That's is an example of extensibility, one of the fundamental advantages of inheritance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7227,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403d2aa52d8586a14a269.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "39691263f1219591493a69e886e56013",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403d2aa52d8586a14a269.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "superclass in the subclass This is another terminology you can use- superclass is the parent class and the subclass is the child class Then, this numDoors = numDoors line defines a new property that belongs exclusively to the Car class, the number of doors (numDoors) This is a way to extend the Vehicle class, adding a property that is exclusive to Car instances That's is an example of extensibility, one of the fundamental advantages of inheritanceNow, if you create an instance of the Car class, you'll see that it has the three properties: brand, year, and numDoors You'll also need to pass the necessary arguments when you create the instance js\nlet myCar = new Car(\"freeCodeCamp Motors\", 2019, 4);\nIf you print the values of these properties with console log():\njs\nconsole log(myCar brand);\nconsole log(myCar year);\nconsole log(myCar numDoors);\nThis is the output:\njs\nfreeCodeCamp Motors\n2019\n4\nThe main advantages of inheritance are code reusability, modularity, extensibility, and improved code structure By implementing a hierarchy, you can reuse code that you already wrote for a parent class in the child class, avoiding repetition Inheritance also promotes modularity by breaking down complex systems into simpler components in the hierarchy Also, being able to extend the functionality of the parent class makes it easier to adapt to changing requirements and add new features later on in the development process Finally, the hierarchical structure can make your code easier to understand and maintain Those are the fundamentals of inheritance By understanding how inheritance works, you can design well-structured, maintainable, and extensible object-oriented programs --questions--\n--text--\nWhat is the primary purpose of inheritance in object-oriented programming --answers--\nTo create new objects --feedback--\nThink about how inheritance helps with code reusability and organization To define methods for a class --feedback--\nThink about how inheritance helps with code reusability and organization To reuse code and create hierarchical relationships between classes To encapsulate data within objects --feedback--\nThink about how inheritance helps with code reusability and organization --video-solution--\n3\n--text--\nWhat is the keyword used to inherit from a parent class in JavaScript --answers--\ninherit\n--feedback--\nThink about the keyword that establishes the inheritance relationship extends\nsuper\n--feedback--\nThink about the keyword that establishes the inheritance relationship",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7227,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403d2aa52d8586a14a269.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "54490b3e5339d2c71efb8c7f16e28771",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403d2aa52d8586a14a269.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--feedback-- Think about how inheritance helps with code reusability and organization To reuse code and create hierarchical relationships between classes To encapsulate data within objects --feedback-- Think about how inheritance helps with code reusability and organization --video-solution-- 3 --text-- What is the keyword used to inherit from a parent class in JavaScript --answers-- inherit --feedback-- Think about the keyword that establishes the inheritance relationship extends super --feedback-- Think about the keyword that establishes the inheritance relationshipprototype\n--feedback--\nThink about the keyword that establishes the inheritance relationship --video-solution--\n2\n--text--\nWhat is the difference between a parent class and a child class --answers--\nA parent class is a specialized version of a child class --feedback--\nThink about the hierarchical relationship between classes A child class is a specialized version of a parent class There is no difference between parent and child classes --feedback--\nThink about the hierarchical relationship between classes Parent classes are always larger than child classes --feedback--\nThink about the hierarchical relationship between classes --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7227,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403d2aa52d8586a14a269.md",
      "source_type": "git_repo"
    },
    "token_count": 212,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "88c43e02260e14f2194195b6962202ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672aa86da9937560d3dfe3d6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa86da9937560d3dfe3d6\ntitle: What Are Common Use Cases for Using Floats, and How Do They Work challengeType: 19\ndashedName: what-are-common-use-cases-for-using-floats\n--description--\nFloats in CSS are a technique originally designed to allow text to wrap around an element, such as an image Over time, however, developers found new ways to use floats, applying them to layout design in creative ways While modern layout methods like Flexbox and Grid are now more commonly used, understanding floats is still important, especially when working with older code or needing to achieve specific layout effects When an element is floated, it's taken out of the normal document flow and pushed to the left or right of its container The content that follows will wrap around the floated element, filling the remaining space One classic use is wrapping text around images, where an image is floated to one side, and text wraps around it This technique is still widely used, especially in articles and blogs where images need to be placed alongside text Here is the code example:\n```html\nThis is an example of text flowing around a floated image ```\n```css container {\nborder: 1px solid black;\n}\nimg {\nfloat: left;\nmargin-right: 20px;\n}\n```\nIn the above example, the container doesn't wrap around the floated image The image is out of the normal document flow, and the container collapsed to zero height because it doesn't \"see\" the floated children elements Floats were also popular for creating multi-column layouts before Flexbox and Grid became widespread By floating elements next to each other, developers could create columns that aligned horizontally However, when using floats, it's important to handle the problem of collapsing parent elements when their child elements are floated The clearfix technique solution is applied to the class container element to fix this issue css\n/* Clearfix CSS */ container::after {\ncontent: \"\";\ndisplay: block;\nclear: both;\n}\n::after is a pseudo-element that adds an invisible block after the content of the container content: \"\" ensures the pseudo-element is present but doesn’t display any content display: block makes the pseudo-element a block-level element clear: both ensures the pseudo-element clears both sides of any floated elements above it The clearfix technique ensures the parent element wraps around its floated children properly",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4710,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672aa86da9937560d3dfe3d6.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8ef87d95c06cd5f4185c9bb24a33d585",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672aa86da9937560d3dfe3d6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "css /* Clearfix CSS */ container::after { content: \"\"; display: block; clear: both; } ::after is a pseudo-element that adds an invisible block after the content of the container content: \"\" ensures the pseudo-element is present but doesn’t display any content display: block makes the pseudo-element a block-level element clear: both ensures the pseudo-element clears both sides of any floated elements above it The clearfix technique ensures the parent element wraps around its floated children properlyClearfix forces the parent container to \"see\" the floated child elements by adding a clear property after the floated content While floats are no longer the go-to method for complex layouts due to more modern techniques like Flexbox and Grid, they still play an essential role in certain scenarios Whether you're wrapping text around images or working on legacy projects, understanding how floats work and how to clear them properly is key to maintaining well-structured and responsive layouts --questions--\n--text--\nWhat is a common use case for using floats in CSS --answers--\nCentering an element vertically --feedback--\nThink about how floats were originally used Wrapping text around images Creating a fixed header --feedback--\nThink about how floats were originally used Applying a background color --feedback--\nThink about how floats were originally used --video-solution--\n2\n--text--\nWhich CSS property is often used to clear floats and maintain the layout flow --answers--\nfloat\n--feedback--\nConsider the property that stops text from wrapping around floated elements margin\n--feedback--\nConsider the property that stops text from wrapping around floated elements clear\npadding\n--feedback--\nConsider the property that stops text from wrapping around floated elements --video-solution--\n3\n--text--\nHow does applying float: left; to an element affect its position in the layout --answers--\nThe element is centered on the page --feedback--\nConsider what happens when an element is floated to the left The element is pushed to the right side of its container --feedback--\nConsider what happens when an element is floated to the left The element is removed from the normal document flow and moves to the left side of its container The element stays in the normal document flow and aligns with the top of its container --feedback--\nConsider what happens when an element is floated to the left --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4710,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672aa86da9937560d3dfe3d6.md",
      "source_type": "git_repo"
    },
    "token_count": 457,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b88d40ab950e8810ae724c9b47d3bfb8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3a84fb8d4613776cc99e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672c3a84fb8d4613776cc99e\ntitle: What Is Relative Positioning, and How Does This Differ from the Default Static Positioning challengeType: 19\ndashedName: what-is-relative-positioning\n--description--\nIn CSS, positioning allows us to control how elements are laid out on a page Two common types of positioning are static positioning and relative positioning By default, elements are statically positioned This means they follow the normal flow of the document, one after another, from top to bottom, left to right Static positioning is the default for all elements and doesn't need any special declaration in CSS You won’t notice anything different when using static positioning because it just keeps elements where they naturally occur in the document Here is an example of a paragraph using default static positioning:\n```html\nThis paragraph is statically positioned ```\nWhen rendered in the browser, this paragraph will appear in its natural position, following the normal document flow No special styling is applied to move it, and it remains where it would naturally appear in the layout Relative positioning, on the other hand, allows an element to be shifted from its normal position without disrupting the flow of the document Think of it as moving the element from its default static position by giving it new coordinates Here is how you might apply relative positioning:\n```css\nThis paragraph is positioned relatively ```\nIn this example, the paragraph will appear 30px down and 30px to the right from its original position However, the space it would have occupied in the normal flow remains preserved Relative positioning is very useful when you want to move an element slightly without affecting the rest of the layout --questions--\n--text--\nWhich of the following is the default positioning for all elements --answers--\nabsolute\n--feedback--\nThink about what kind of positioning doesn't need any special CSS declaration relative\n--feedback--\nThink about what kind of positioning doesn't need any special CSS declaration fixed\n--feedback--\nThink about what kind of positioning doesn't need any special CSS declaration static\n--video-solution--\n4\n--text--\nWhat does relative positioning do to an element --answers--\nIt moves it from the normal document flow --feedback--\nRelative positioning shifts the element, but only within its original spot in the layout It moves it relative to its normal position Fixes it to the viewport --feedback--\nRelative positioning shifts the element, but only within its original spot in the layout It stacks it above other elements",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3868,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3a84fb8d4613776cc99e.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "029d94b2096662d6769bb8abdcf0962a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3a84fb8d4613776cc99e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "doesn't need any special CSS declaration static --video-solution-- 4 --text-- What does relative positioning do to an element --answers-- It moves it from the normal document flow --feedback-- Relative positioning shifts the element, but only within its original spot in the layout It moves it relative to its normal position Fixes it to the viewport --feedback-- Relative positioning shifts the element, but only within its original spot in the layout It stacks it above other elements--feedback--\nRelative positioning shifts the element, but only within its original spot in the layout --video-solution--\n2\n--text--\nHow does relative positioning differ from static positioning --answers--\nRelative positioning removes the element from the document flow --feedback--\nStatic positioning is passive, while relative positioning allows you to move an element around Static positioning allows elements to be shifted from their default position --feedback--\nStatic positioning is passive, while relative positioning allows you to move an element around Relative positioning allows you to shift an element without disrupting the document flow Static positioning fixes the element in place like a background image --feedback--\nStatic positioning is passive, while relative positioning allows you to move an element around --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3868,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3a84fb8d4613776cc99e.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0522da91bdb8c8f663cecf6ca74b8382",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3a8fac7c5613b4bb75de.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672c3a8fac7c5613b4bb75de\ntitle: What Is Absolute Positioning, and How Does It Work challengeType: 19\ndashedName: what-is-absolute-positioning\n--description--\nAbsolute positioning allows you to take an element out of the normal document flow, making it behave independently from other elements When an element is positioned absolutely, it is placed in its own layer, completely separate from everything else in the layout This makes it useful for creating floating UI features such as modals, tooltips, or dropdown menus, which can overlap other elements on the page By default, absolutely positioned elements are placed relative to the closest positioned ancestor If no positioned ancestor is found, the element will be positioned relative to the initial containing block, which is usually the browser's viewport You can move the absolutely positioned element around using the top, bottom, left, and right properties to specify how far away it should be from the edges of its containing element For example, setting top: 30px and left: 30px will move the element 30px away from the top and left edges of the containing block Here's an example of how to apply absolute positioning to an element in CSS:\n```css\nAbsolutely Positioned\n```\ncss positioned {\nposition: absolute;\ntop: 30px;\nleft: 30px;\nbackground-color: coral;\n}\nWhen this code is applied, the element will be removed from the normal document flow and placed 30px away from the top and left of its containing block Absolute positioning can be especially helpful for creating elements that are meant to float over the rest of the content, like overlays or modal windows However, since the element is removed from the document flow, it can also create gaps or cause other elements to collapse together if not handled properly --questions--\n--text--\nWhat happens when an element is positioned absolutely in CSS --answers--\nThe element is placed in its normal document flow --feedback--\nAbsolute positioning removes the element from the normal document flow The element overlaps other elements and is placed in its own layer The element is hidden --feedback--\nAbsolute positioning removes the element from the normal document flow The element is moved to the top of the page --feedback--\nAbsolute positioning removes the element from the normal document flow --video-solution--\n2\n--text--\nHow do you move an absolutely positioned element 30px away from the top and left edges of its containing block",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3656,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3a8fac7c5613b4bb75de.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7d908419d80e61f22f3cb1ba1aa7747b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3a8fac7c5613b4bb75de.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "from the normal document flow The element overlaps other elements and is placed in its own layer The element is hidden --feedback-- Absolute positioning removes the element from the normal document flow The element is moved to the top of the page --feedback-- Absolute positioning removes the element from the normal document flow --video-solution-- 2 --text-- How do you move an absolutely positioned element 30px away from the top and left edges of its containing block--answers--\nSet top: 30px and left: 30px Set margin-top: 30px and margin-left: 30px --feedback--\nUse the top and left properties Set position: relative --feedback--\nUse the top and left properties Set padding: 30px --feedback--\nUse the top and left properties --video-solution--\n1\n--text--\nIf no positioned ancestor is found, where is an absolutely positioned element placed --answers--\nRelative to the body --feedback--\nConsider what the element falls back to when no positioned ancestor is available Relative to the closest fixed element --feedback--\nConsider what the element falls back to when no positioned ancestor is available Relative to the initial containing block (usually the browser's viewport) It stays in the same place --feedback--\nConsider what the element falls back to when no positioned ancestor is available --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3656,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3a8fac7c5613b4bb75de.md",
      "source_type": "git_repo"
    },
    "token_count": 265,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a8c5dbc08a1c47e57ce9b575bebfbe16",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3a9d32c56113fcaedf24.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672c3a9d32c56113fcaedf24\ntitle: What Is Fixed and Sticky Positioning, and How Does It Differ from Absolute Positioning challengeType: 19\ndashedName: what-is-fixed-and-sticky-positioning\n--description--\nFixed and sticky positioning are two important CSS positioning strategies, each offering distinct behaviors compared to absolute positioning When an element is positioned with position: fixed, it is removed from the normal document flow and placed relative to the viewport, meaning it stays in the same position even when the user scrolls This is often used for elements like headers or navigation bars that need to remain visible at all times For example, if you want a heading to stay fixed at the top of the page, you can use the following code:\ncss\nh1 {\nposition: fixed;\ntop: 0;\nwidth: 500px;\nbackground: white;\npadding: 10px;\n}\nIn this example, the h1 element will stick to the top of the viewport, and even when the user scrolls, it will remain in place This is especially useful for creating persistent UI elements, like sticky headers or always-visible navigation position: sticky behaves as a hybrid between relative and fixed positioning Initially, the element behaves as though it's positioned relatively, staying within the flow of the document However, once the user scrolls the element past a certain point, it \"sticks\" to the viewport (usually the top) and behaves as though it is fixed This is great for creating elements like sticky navigation bars, which only become fixed once the user scrolls to a certain position Here's how you can apply sticky positioning:\ncss positioned {\nposition: sticky;\ntop: 30px;\nleft: 30px;\n}\nIn this example, the positioned element will behave normally until the user scrolls it 30px away from the top, at which point it will \"stick\" to the top of the viewport Here are some key differences between absolute, fixed and sticky positioning:\nAbsolute positioning removes an element from the document flow and positions it relative to the nearest positioned ancestor, or the initial containing block if none exists The element stays in that position regardless of scrolling Fixed positioning also removes the element from the document flow but fixes it relative to the viewport, meaning it will stay visible in the same spot even as the page is scrolled Sticky positioning keeps the element in the normal flow initially but allows it to stick in place after scrolling past a defined threshold",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4417,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3a9d32c56113fcaedf24.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c85dfe733899c393c82135a73da25158",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3a9d32c56113fcaedf24.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the nearest positioned ancestor, or the initial containing block if none exists The element stays in that position regardless of scrolling Fixed positioning also removes the element from the document flow but fixes it relative to the viewport, meaning it will stay visible in the same spot even as the page is scrolled Sticky positioning keeps the element in the normal flow initially but allows it to stick in place after scrolling past a defined thresholdThese strategies allow you to create layouts that include floating elements, sticky headers, and more dynamic UI components, enhancing user experience by making important information always accessible --questions--\n--text--\nWhat is the main difference between fixed and sticky positioning --answers--\nfixed stays in place relative to the viewport, sticky moves based on scroll position sticky stays in place relative to the viewport, fixed moves based on scroll position --feedback--\nOne becomes fixed after scrolling past a threshold Both fixed and sticky behave the same way --feedback--\nOne becomes fixed after scrolling past a threshold Neither works for headers or navigation bars --feedback--\nOne becomes fixed after scrolling past a threshold --video-solution--\n1\n--text--\nWhat property must be defined for sticky positioning to work --answers--\nposition: absolute\n--feedback--\nIt's a hybrid of fixed and relative positioning position: fixed\n--feedback--\nIt's a hybrid of fixed and relative positioning position: sticky\nz-index\n--feedback--\nIt's a hybrid of fixed and relative positioning --video-solution--\n3\n--text--\nHow does fixed positioning differ from absolute positioning --answers--\nfixed is relative to the viewport, while absolute is relative to the nearest positioned ancestor fixed positioning doesn't allow scrolling --feedback--\nThink about what stays visible when scrolling absolute positioning keeps the element within the normal document flow --feedback--\nThink about what stays visible when scrolling fixed positioning hides the element when scrolled --feedback--\nThink about what stays visible when scrolling --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4417,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3a9d32c56113fcaedf24.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d19630a05c38b1afcf9a69797fc29829",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3aa9bc3a481425cb52b3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672c3aa9bc3a481425cb52b3\ntitle: What Is the Z-Index Property, and How Does It Work to Control the Stacking of Positioned Elements challengeType: 19\ndashedName: what-is-the-z-index-property\n--description--\nThe z-index property in CSS is used to control the vertical stacking order of positioned elements that overlap on the page When multiple elements are stacked on top of each other, the z-index value determines which element appears on top The higher the z-index value, the closer the element is to the viewer, while lower values place the element farther back in the stack However, the z-index only works on elements that are positioned, which means the element must have a position value other than static, such as relative, absolute, or fixed The default z-index value is auto, which places the element in the default stacking order Let's take a look at an example with three boxes:\n```html\nBox 1\nBox 2\nBox 3\n```\nNow, we can apply some styles to position the boxes to overlap on each other like this:\n```css container {\nposition: relative;\nwidth: 300px;\nheight: 300px;\nborder: 1px solid black;\n} box1 {\nposition: absolute;\nz-index: 1;\nbackground: lightcoral;\ntop: 20px;\nleft: 20px;\nwidth: 100px;\nheight: 100px;\n} box2 {\nposition: absolute;\nz-index: 3;\nbackground: gold;\ntop: 40px;\nleft: 40px;\nwidth: 100px;\nheight: 100px;\n} box3 {\nposition: absolute;\nz-index: 2;\nbackground: lightgreen;\ntop: 60px;\nleft: 60px;\nwidth: 100px;\nheight: 100px;\n}\n```\nFor the container, the positioning will be set to relative and all of the boxes nested inside will be set to absolute positioning Each box has a different value for the z-index which results in the boxes being layered on top of each other You can think of z-index as a way to create layers on a webpage, and elements with higher z-index values will be placed above those with lower values This is especially useful for controlling how overlapping elements behave in complex layouts, such as modals, pop-ups, or tooltips",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3731,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3aa9bc3a481425cb52b3.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "22df48d0a4643534a99d296dc5cd0d35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3aa9bc3a481425cb52b3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "nested inside will be set to absolute positioning Each box has a different value for the z-index which results in the boxes being layered on top of each other You can think of z-index as a way to create layers on a webpage, and elements with higher z-index values will be placed above those with lower values This is especially useful for controlling how overlapping elements behave in complex layouts, such as modals, pop-ups, or tooltips--questions--\n--text--\nWhat does the z-index property control in CSS --answers--\nThe color of an element --feedback--\nz-index is responsible for how elements overlap visually The vertical stacking order of positioned elements The size of an element --feedback--\nz-index is responsible for how elements overlap visually The horizontal alignment of text --feedback--\nz-index is responsible for how elements overlap visually --video-solution--\n2\n--text--\nIn order for the z-index property to work, what must be true about the element --answers--\nIt must have a fixed width --feedback--\nConsider what enables an element to be placed in a stacking context It must have a position value other than static It must have a display value of block --feedback--\nConsider what enables an element to be placed in a stacking context It must have a background color set --feedback--\nConsider what enables an element to be placed in a stacking context --video-solution--\n2\n--text--\nWhich z-index value places an element on top of all others --answers--\nz-index: 0;\n--feedback--\nThink about which number is highest and how z-index works z-index: 5;\nz-index: auto;\n--feedback--\nThink about which number is highest and how z-index works z-index: -1;\n--feedback--\nThink about which number is highest and how z-index works --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3731,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-floats-and-positioning-in-css\\672c3aa9bc3a481425cb52b3.md",
      "source_type": "git_repo"
    },
    "token_count": 362,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "436b91b94ebb11f78ca30e3ed73b0dd8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403dbf5c9835898632c84.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673403dbf5c9835898632c84\ntitle: What Are Static Properties and Methods in Classes challengeType: 19\ndashedName: what-are-static-properties-and-methods-in-classes\n--description--\nLet's learn about static properties and methods Static properties and methods belong to the class itself, not to the individual instances of the class You can access them directly on the class name without creating an instance of the class They are defined within classes to encapsulate related functionality You can define a static method by writing the static keyword before the name of the method js\nclass MyClass {\nstatic staticMethod() { }\n}\nThen, you can call the static method on the class directly, using dot notation and passing any necessary arguments:\njs\nMyClass staticMethod();\nNotice that you are able to call the method without creating an instance of the class That's one of the key characteristics of static methods Here's an example Let's say that we are creating a movies application and we want to be able to compare movies based on their rating We could consider this comparison method as a higher level method that is not specific to any movie:\njs\nif (movieA rating < movieB rating) {\nconsole log(`${movieB title} has a higher rating `);\n}\nIt's like a more general method related to the Movie class For readability and maintainability purposes, it would be helpful to define it within the Movie class to keep all related methods relatively close to each other Therefore, this is a perfect candidate for a static method You can see it here, just below the constructor:\n```js\nclass Movie {\nconstructor(title, rating) {\nthis title = title;\nthis rating = rating;\n}\nstatic compareMovies(movieA, movieB) {\nif (movieA rating > movieB rating) {\nconsole log(${movieA title} has a higher rating );\n} else if (movieA rating < movieB rating) {\nconsole log(${movieB title} has a higher rating );\n} else {\nconsole log(\"These movies have the same rating \");\n}\n}\n}\n```\nThe static method is defined with the static keyword and it's called compareMovies It has two parameters: movieA and movieB These will be instances of the Movie class We will compare them based on their rating, on a range from 0 to 100 This logic is implemented with a conditional and it will print an appropriate message based on which movie has a higher rating",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403dbf5c9835898632c84.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "842892b01d0d8c710d14ee179381712e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403dbf5c9835898632c84.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "log(\"These movies have the same rating \"); } } } ``` The static method is defined with the static keyword and it's called compareMovies It has two parameters: movieA and movieB These will be instances of the Movie class We will compare them based on their rating, on a range from 0 to 100 This logic is implemented with a conditional and it will print an appropriate message based on which movie has a higher ratingOnce the method has been defined, you can call it on the class But first, you need to have the arguments ready and defined in your program In this case, the method takes two movie instances as arguments, so we define these instances here:\njs\nlet movieA = new Movie(\"Movie A\", 80);\nlet movieB = new Movie(\"Movie B\", 45);\nYou can see that movieA has a higher rating than movieB Let's see the output of this method To call the method, you just need to use dot notation on the class itself You write the name of the class (Movie), followed by a dot, and then the name of the static method (compareMovies) Then, you pass the arguments within parentheses In this case, they are the two movie instances that the method requires js\nMovie compareMovies(movieA, movieB);\nThis is the output:\njs\nMovie A has a higher rating Static methods are also helpful for implementing \"factory\" methods A factory method is a method that you define in addition to the constructor to create objects based on specific criteria Here's an example with a Pizza class The static method createMargherita is a factory method that you can call to create a Margherita pizza instance with its type and price already set ```js\nclass Pizza {\nconstructor(type, price) {\nthis type = type;\nthis price = price;\n}\nstatic createMargherita() {\nreturn new this(\"Margherita\", 6 99);\n}\n}\n```\nThis also brings up something very important about static methods The value of the this keyword in static methods is the class itself, since the static method belongs to the class That's why we can use this to create a new instance of the Pizza class If you call this method on the Pizza class itself and assign the returned instance to a variable, like in this example:\njs\nlet myPizza = Pizza createMargherita();\nYou can use it wherever you need to in your code For example, you can print it to the console:\njs\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403dbf5c9835898632c84.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "b494c98cb47b390a41fa2327b0523b6f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403dbf5c9835898632c84.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the class itself, since the static method belongs to the class That's why we can use this to create a new instance of the Pizza class If you call this method on the Pizza class itself and assign the returned instance to a variable, like in this example: js let myPizza = Pizza createMargherita(); You can use it wherever you need to in your code For example, you can print it to the console: js consolelog(myPizza);\nThis is the output:\njs\nPizza { type: 'Margherita', price: 6 99 }\nYou can also use dot notation to call its methods and access its properties, like this:\njs\nconsole log(myPizza type);\nThis is the output:\njs\nMargherita\nIn addition to methods, you can also define static properties with the static keyword In this example, we have a static numberOfPizzasSold property ```js\nclass Pizza {\nstatic numberOfPizzasSold = 0;\nconstructor(type) {\nthis type = type;\nPizza numberOfPizzasSold++;\n}\n}\n```\nIt's static because it doesn't belong to any particular pizza instance, it belongs to the class itself It has an initial value of 0 and it's updated every time a new instance is created If you create two pizza instances, the value will be updated twice:\njs\nlet pizza1 = new Pizza(\"Margherita\");\nlet pizza2 = new Pizza(\"Neapolitan\");\nTo access the value of a static property, you just need to use dot notation on the class itself, since the property belongs to the class js\nconsole log(Pizza numberOfPizzasSold);\nIn this case, the output is 2 because two pizzas were sold These are the fundamentals of static properties and methods in JavaScript Understanding static members is essential for creating reusable and efficient classes --questions--\n--text--\nWhat is the primary purpose of a static method in a JavaScript class --answers--\nTo create new instances of the class --feedback--\nThink about how static methods are related to the class itself, not to individual objects To access the properties of the class instance --feedback--\nThink about how static methods are related to the class itself, not to individual objects To define methods that can be accessed without creating an instance of the class To inherit properties and methods from a parent class --feedback--\nThink about how static methods are related to the class itself, not to individual objects",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403dbf5c9835898632c84.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7daf01c69eaa5b615d8de295405083c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403dbf5c9835898632c84.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "how static methods are related to the class itself, not to individual objects To access the properties of the class instance --feedback-- Think about how static methods are related to the class itself, not to individual objects To define methods that can be accessed without creating an instance of the class To inherit properties and methods from a parent class --feedback-- Think about how static methods are related to the class itself, not to individual objects--video-solution--\n3\n--text--\nWhat is the main difference between a static method and an instance method in JavaScript --answers--\nStatic methods can only be used within the class, while instance methods can be used outside the class --feedback--\nThink about the scope and accessibility of static and instance methods Static methods can access instance properties, while instance methods cannot access instance properties --feedback--\nThink about the scope and accessibility of static and instance methods Static methods are associated with the class itself, while instance methods are associated with specific instances of the class Static methods are always public, while instance methods can be public or private --feedback--\nThink about the scope and accessibility of static and instance methods --video-solution--\n3\n--text--\nHow can you access a static property of a class in JavaScript --answers--\nBy using the this keyword --feedback--\nThink about how static properties are associated with the class itself By creating an instance of the class and accessing the property through the instance --feedback--\nThink about how static properties are associated with the class itself By directly using the class name and the property name By using the prototype property of the class --feedback--\nThink about how static properties are associated with the class itself --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7975,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-how-to-work-with-classes-in-javascript\\673403dbf5c9835898632c84.md",
      "source_type": "git_repo"
    },
    "token_count": 330,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "88e9761d8ad9a3324e0e893860faad4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-inheritance-and-polymorphism\\68420c0610b61d64fe2cfd12.md",
    "source_type": "git_repo",
    "title": "title needs to be updated to correct title when lectures are finalized",
    "content": "id: 68420c0610b61d64fe2cfd12\ntitle needs to be updated to correct title when lectures are finalized\ntitle: Understanding Inheritance and Polymorphism\nchallengeType: 19\ndashedName needs to be updated to correct title when lectures are finalized\ndashedName: lecture-understanding-inheritance-and-polymorphism\n--description--\nWatch the video or read the transcript and answer the questions below.\n--questions--\n--text--\nQuestion 1\n--answers--\nAnswer 1.1\n--feedback--\nFeedback 1\nAnswer 1.2\n--feedback--\nFeedback 1\nAnswer 1.3\n--feedback--\nFeedback 1\nAnswer 1.4\n--feedback--\nFeedback 1\n--video-solution--\n5\n--text--\nQuestion 2\n--answers--\nAnswer 2.1\n--feedback--\nFeedback 2\nAnswer 2.2\n--feedback--\nFeedback 2\nAnswer 2.3\n--feedback--\nFeedback 2\nAnswer 2.4\n--feedback--\nFeedback 2\n--video-solution--\n5\n--text--\nQuestion 3\n--answers--\nAnswer 3.1\n--feedback--\nFeedback 3\nAnswer 3.2\n--feedback--\nFeedback 3\nAnswer 3.3\n--feedback--\nFeedback 3\nAnswer 3.4\n--feedback--\nFeedback 3\n--video-solution--\n5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1178,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-inheritance-and-polymorphism\\68420c0610b61d64fe2cfd12.md",
      "source_type": "git_repo"
    },
    "token_count": 301,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "c62bccf0a651e11c82aa39417eb11c49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-html-attributes\\66f6db08d55022680a3cfbc9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 66f6db08d55022680a3cfbc9\ntitle: What Role Does HTML Play on the Web challengeType: 19\ndashedName: what-is-html\n--description--\nHTML, which stands for Hypertext Markup Language, is a markup language for creating web pages When you visit a website and see content like paragraphs, headings, links, images, and videos; that's HTML HTML represents the content and structure of a webpage through the use of elements Here's an example of a paragraph element:\n```html\nHello\n```\nMost elements will have an opening tag and a closing tag Sometimes those tags are referred to as start and end tags In between those two tags, you will have the content This content can be text or other HTML elements Both opening and closing tags start with a left angle bracket (<), and end with a right angle bracket (>), with the tag name placed between these angle brackets Here is a closer look at just the opening and closing paragraph tags:\n```html\n```\n```html\n```\nWhat distinguishes an opening tag from a closing tag is the forward slash (/) placed immediately after the left angle bracket in a closing tag Some HTML elements do not have a closing tag These are known as void elements Here is an example of an image element which is a void element:\nhtml\n<img>\nNotice that this image element does not have the closing tag and it does not have any content Void elements cannot have any content and only have a start tag Sometimes you will see void elements that use a / before the > like this:\nhtml\n<img />\nWhile many code formatters like Prettier, will choose to include the / in void elements, the HTML spec states that the presence of the / \"does not mark the start tag as self-closing but instead is unnecessary and has no effect of any kind\" In real world development, you will see both forms so it is important to be familiar with both If you wanted to display an image, you will need to include a couple of attributes inside your image element An attribute is a special value used to adjust the behavior for an HTML element Here is an example of an image element with a src, or source, attribute:\nhtml\n<img src=\"image location\" />\nThe src attribute is used to specify the location for that image For image elements, it's good practice to include another attribute called the alt attribute",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4962,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-html-attributes\\66f6db08d55022680a3cfbc9.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5da5f28d98931d2eb1bd43782bdfdb29",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-html-attributes\\66f6db08d55022680a3cfbc9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "display an image, you will need to include a couple of attributes inside your image element An attribute is a special value used to adjust the behavior for an HTML element Here is an example of an image element with a src, or source, attribute: html <img src=\"image location\" /> The src attribute is used to specify the location for that image For image elements, it's good practice to include another attribute called the alt attributeHere's an example of an image element with the src and alt attributes:\nhtml\n<img src=\"example-cat-img-url\" alt=\"Cat sleeping in the grass\">\nThe alt attribute is used to provide short, descriptive text for the images In this case, the descriptive text is a \"Cat sleeping in the grass\" So, you might be wondering if HTML by itself is enough to build a website Well, the answer is: it depends If you're building a small practice project that only displays text and images, HTML alone might be sufficient However, if you're creating a modern professional website, you will need to have HTML, CSS, and JavaScript HTML is for the content and structure CSS is for styling JavaScript is for adding interactivity to your web pages A good analogy for this is to compare HTML, CSS, and JavaScript with a complete building HTML represents the blocks, concrete, and irons that make up the walls It's the foundation that makes the building strong CSS represents the interior and exterior design that makes the house look beautiful JavaScript represents the electrical and water system that ensures uninterrupted access to water and electricity --questions--\n--text--\nWhat does HTML stand for --answers--\nHyperText Maker Language\n--feedback--\nRefer to the section where HTML was introduced HyperText Marker Language\n--feedback--\nRefer to the section where HTML was introduced HyperText Markdown Language\n--feedback--\nRefer to the section where HTML was introduced HyperText Markup Language\n--video-solution--\n4\n--text--\nWhich of the following is the correct syntax for a closing tag --answers--\n<;p>\n--feedback--\nThink about the additional symbol for defining tags apart from left-angle and right-angle brackets <p>\n--feedback--\nThink about the additional symbol for defining tags apart from left-angle and right-angle brackets </p>\n<///p/>\n--feedback--\nThink about the additional symbol for defining tags apart from left-angle and right-angle brackets --video-solution--\n3\n--text--\nWhich of the following is a valid attribute used inside the img element",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4962,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-html-attributes\\66f6db08d55022680a3cfbc9.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b38a29a67881258faaf54391e5517ad0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-html-attributes\\66f6db08d55022680a3cfbc9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the following is the correct syntax for a closing tag --answers-- <;p> --feedback-- Think about the additional symbol for defining tags apart from left-angle and right-angle brackets <p> --feedback-- Think about the additional symbol for defining tags apart from left-angle and right-angle brackets </p> <///p/> --feedback-- Think about the additional symbol for defining tags apart from left-angle and right-angle brackets --video-solution-- 3 --text-- Which of the following is a valid attribute used inside the img element--answers--\nsrc\nbold\n--feedback--\nReview where the img element and the appropriate attributes were discussed closing\n--feedback--\nReview where the img element and the appropriate attributes were discussed div\n--feedback--\nReview where the img element and the appropriate attributes were discussed --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4962,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-html-attributes\\66f6db08d55022680a3cfbc9.md",
      "source_type": "git_repo"
    },
    "token_count": 166,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3f005e6b7970e649a65aac9b1f5b1aba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-html-attributes\\6708143cab2b583ecd3324f5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6708143cab2b583ecd3324f5\ntitle: What Are Attributes, and How Do They Work challengeType: 19\ndashedName: what-are-attributes\n--description--\nAn attribute is a value placed inside the opening tag of an HTML element Attributes provide additional information about the element or specify how the element should behave Here is the basic syntax for an attribute:\nhtml\n<element attribute=\"value\"></element>\nThe attribute name is followed by an equal sign (=) and a value in quotes The value can be a string or a number, depending on the attribute Let's take a look at a few examples of common HTML attributes The first example is the href attribute, which is used to specify the URL of a link:\nhtml\n<a href=\"https://www example-website com\">Visit our website</a>\nWithout this attribute, the link would not work because there would be no destination URL So you must include this href attribute to make the link functional Other common attributes are the src, or source, and alt, or alternative, attribute - which is used to specify the source of an image and provide alternative descriptive text for the image, respectively:\nhtml\n<img src=\"image jpg\" alt=\"A beautiful image\" />\nSimilar to the href attribute, the src attribute is required because it specifies the image file to be displayed The alt attribute is not required, but it is recommended for accessibility purposes Accessibility means making sure that everyone, including those with disabilities, can use and understand things like websites, apps, and physical spaces You will learn more about accessibility in the upcoming lectures Some attributes are a little unique with their syntax like the checked attribute shown here:\nhtml\n<input type=\"checkbox\" checked />\nIn the following example, we have an input element with the type attribute set to checkbox Inputs are used to collect data from users, and the type attribute specifies the type of input In this case, this input is a checkbox You will learn more about how inputs work in the upcoming lectures The checked attribute is used to specify that the checkbox should be checked by default The checked attribute does not require a value If it is present, the checkbox will be checked by default If the attribute is not present, the checkbox will be unchecked This is known as a boolean attribute You will learn more about booleans in general when you get to the JavaScript section There are several common boolean attributes you will encounter in HTML, such as disabled, readonly, and required",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4723,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-html-attributes\\6708143cab2b583ecd3324f5.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "380bc3c8dd91e039e06fa0e878d28773",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-html-attributes\\6708143cab2b583ecd3324f5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the checkbox should be checked by default The checked attribute does not require a value If it is present, the checkbox will be checked by default If the attribute is not present, the checkbox will be unchecked This is known as a boolean attribute You will learn more about booleans in general when you get to the JavaScript section There are several common boolean attributes you will encounter in HTML, such as disabled, readonly, and requiredThese attributes are used to specify the state of an element, such as whether it is disabled, read-only, or required HTML has many attributes that can be used to customize the behavior and appearance of elements on a webpage Understanding how to use attributes is essential for creating interactive and accessible web content Over the next few lectures, you will learn about more HTML attributes and how to use them effectively in your web development projects --questions--\n--text--\nWhich of the following is an example of a boolean attribute --answers--\nsrc\n--feedback--\nRefer to the section where common boolean attributes were discussed href\n--feedback--\nRefer to the section where common boolean attributes were discussed disabled\nalt\n--feedback--\nRefer to the section where common boolean attributes were discussed --video-solution--\n3\n--text--\nWhat is the role of an attribute in HTML --answers--\nAttributes provide additional information and help define the behavior for HTML elements Attributes change the background color of an element --feedback--\nRefer to the section where the definition for attributes was discussed Attributes change the font size of an element --feedback--\nRefer to the section where the definition for attributes was discussed Attributes add JavaScript functionality to an element --feedback--\nRefer to the section where the definition for attributes was discussed --video-solution--\n1\n--text--\nWhich of the following is the correct syntax for a boolean attribute --answers--\n<input type=\"checkbox\" checked>\n<input type=\"checkbox\" checked=\"on\">\n--feedback--\nRefer to the section where the checked attribute was discussed <input type=\"checkbox\" checked=\"off\">\n--feedback--\nRefer to the section where the checked attribute was discussed <input type=\"checkbox\" checked=\"isChecked\">\n--feedback--\nRefer to the section where the checked attribute was discussed --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4723,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-html-attributes\\6708143cab2b583ecd3324f5.md",
      "source_type": "git_repo"
    },
    "token_count": 435,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "18fc503a18d7e536b850b703c73e7897",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-nuanced-semantic-elements\\6729959bf9c8e835f46b3f78.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6729959bf9c8e835f46b3f78\ntitle: When Should You Use the Emphasis Element Over the Idiomatic Text Element challengeType: 19\ndashedName: when-should-you-use-the-emphasis-element-over-the-idiomatic-text-element\n--description--\nThese elements are very closely related to the concepts of presentational and semantic HTML The idiomatic text element, i, was originally used for presentational purposes to display the text in italics But now, it is frequently used for highlighting alternative voice or mood, idiomatic terms from another language, technical terms, and thoughts Here is example from the official HTML spec, using the i element to show an idiomatic phrase in French:\n```html\nThere is a certain je ne sais quoi in the air ```\nThe lang attribute inside the open <i> tag is used to specify the language of the content In this case, the language would be French The i element does not indicate if the text is important or not, it only shows that it's somehow different from the surrounding text If you do need to emphasize the importance of the text, you can use a similar semantic element called the emphasis element, em This is usually recommended if you need to provide more context You should use this element for parts of the text that require a special emphasis compared to surrounding text It's usually limited to only a few words, because it can alter the meaning of the sentence This is an example of the emphasis element within a paragraph:\n```html\nNever give up on your dreams ```\nYou can see the sentence Never give up on your dreams Notice that the word your will be emphasized, because it's inside this element In the browser you would see the word your is italicized to tell readers that this is an important word in the sentence Even if it looks the same when the text was inside the idiomatic text element, the semantic emphasis element conveys its meaning and importance behind the scenes It's important to know that these elements should not be used for presentational purposes only If you need to display the text in italics, but the text doesn't have a special purpose, style, or meaning in the paragraph, you should use CSS instead --questions--\n--text--\nWhich HTML element is used to differentiate text from its surrounding content without conveying specific importance",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4324,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-nuanced-semantic-elements\\6729959bf9c8e835f46b3f78.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8964bdd43cb48874bf4d4fb4bbd96cfc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-nuanced-semantic-elements\\6729959bf9c8e835f46b3f78.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "idiomatic text element, the semantic emphasis element conveys its meaning and importance behind the scenes It's important to know that these elements should not be used for presentational purposes only If you need to display the text in italics, but the text doesn't have a special purpose, style, or meaning in the paragraph, you should use CSS instead --questions-- --text-- Which HTML element is used to differentiate text from its surrounding content without conveying specific importance--answers--\nem\n--feedback--\nThink about an element that primarily affects text style to highlight when part of the text is different from the overall narrative style strong\n--feedback--\nThink about an element that primarily affects text style to highlight when part of the text is different from the overall narrative style i\nmark\n--feedback--\nThink about an element that primarily affects text style to highlight when part of the text is different from the overall narrative style --video-solution--\n3\n--text--\nWhen should you use CSS instead of the i or em elements --answers--\nWhen the text has a special purpose or meaning in the paragraph --feedback--\nConsider the scenario where the styling is purely visual without any semantic meaning When you want to display text in italics for presentational purposes only When the text is an idiomatic expression --feedback--\nConsider the scenario where the styling is purely visual without any semantic meaning When the text needs to be emphasized for importance --feedback--\nConsider the scenario where the styling is purely visual without any semantic meaning --video-solution--\n2\n--text--\nWhat is the primary difference between i and em --answers--\nThere is no difference; they both emphasize text --feedback--\nConsider the semantic meaning of each tag and their potential uses i indicates that the text differs from the surrounding content, while em emphasizes important text i is for emphasis, while em is for styling --feedback--\nConsider the semantic meaning of each tag and their potential uses They both emphasize text the same way, but em conveys more importance --feedback--\nConsider the semantic meaning of each tag and their potential uses --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4324,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-nuanced-semantic-elements\\6729959bf9c8e835f46b3f78.md",
      "source_type": "git_repo"
    },
    "token_count": 417,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0c297ab733b4bd2d71b9f3cc66b98353",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-nuanced-semantic-elements\\672995ac85fd943657c2ede5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672995ac85fd943657c2ede5\ntitle: When Should You Use the Strong Element Over the Bring Attention To Element challengeType: 19\ndashedName: when-should-you-use-the-strong-element-over-the-bring-attention-to-element\n--description--\nThe \"bring attention to\" element, b, is commonly used to highlight keywords in summaries, or product names in reviews Usually, browsers display this text in boldface Here's an example using the b element to highlight product names in this review:\n```html\nWe tested several products, including the SuperSound 3000 for audio\nquality, the QuickCharge Pro for fast charging, and the\nEcoClean Vacuum for cleaning The first two performed well, but the\nEcoClean Vacuum did not meet expectations ```\nThe browser renders these parts of the text as bold text This visual emphasis will draw readers attention to the product names If you need to emphasize the importance of the text, you should use the strong element instead of the b element strong is a semantic HTML element that emphasizes text that is crucial, or urgent This is an example where the strong element is used to label a very important warning about the potential allergic reactions that customers may have to a product:\n```html\nWarning: This product may cause allergic reactions ```\nThe strong element communicates that sense of urgency Visually both are very similar, because they are both rendered as bold by default But their meanings are quite different While the \"bring attention to\" element only draws attention to the text, without indicating the higher level of importance, the strong element does more than that It conveys a sense of importance, or urgency This is their main difference To choose between them, consider the purpose of the text and its importance within the surrounding content --questions--\n--text--\nWhich HTML element is used to draw attention to a specific part of the text without conveying specific importance --answers--\nstrong\n--feedback--\nThink about the element that primarily affects text style mark\n--feedback--\nThink about the element that primarily affects text style em\n--feedback--\nThink about the element that primarily affects text style b\n--video-solution--\n4\n--text--\nWhich HTML element is used to indicate text that is specially important or urgent --answers--\nstrong\nb\n--feedback--\nThink about the semantic HTML element that conveys the importance of the text em\n--feedback--\nThink about the semantic HTML element that conveys the importance of the text",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3450,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-nuanced-semantic-elements\\672995ac85fd943657c2ede5.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1769d9a205dc9d203cbcfac7bb00609b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-nuanced-semantic-elements\\672995ac85fd943657c2ede5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "primarily affects text style mark --feedback-- Think about the element that primarily affects text style em --feedback-- Think about the element that primarily affects text style b --video-solution-- 4 --text-- Which HTML element is used to indicate text that is specially important or urgent --answers-- strong b --feedback-- Think about the semantic HTML element that conveys the importance of the text em --feedback-- Think about the semantic HTML element that conveys the importance of the textmark\n--feedback--\nThink about the semantic HTML element that conveys the importance of the text --video-solution--\n1\n--text--\nWhat is the primary difference between b and strong --answers--\nThere is no difference – they both make the text bold --feedback--\nThink about the semantic meaning of each element b is for visual emphasis, while strong is for emphasizing importance strong is for styling, while b is for emphasizing importance --feedback--\nThink about the semantic meaning of each element They are both used for presentational purposes only --feedback--\nThink about the semantic meaning of each element --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3450,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-nuanced-semantic-elements\\672995ac85fd943657c2ede5.md",
      "source_type": "git_repo"
    },
    "token_count": 219,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "94d45332c5487c10e22ddcadaf783f7d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-modules-imports-and-exports\\67329fd6ad99c75d4a4b74e4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67329fd6ad99c75d4a4b74e4\ntitle: What Is a Module in JavaScript, and How Can You Import and Export Modules in Your Program challengeType: 19\ndashedName: what-is-a-module-in-javascript-and-how-can-you-import-and-export-modules-in-your-program\n--description--\nIn JavaScript, a module is a self-contained unit of code that encapsulates related functions, classes, or variables Think of a module as a building block for your application, much like a chapter in a book Each module focuses on a specific functionality, making your code more organized, maintainable, and reusable Modules help prevent naming conflicts and allow you to structure your application into separate, interconnected pieces The concept of modules in JavaScript has evolved over time, but the most widely used and supported approach is the ES6 (ECMAScript 2015) module system This system provides a standardized way to define and use modules across different JavaScript environments To create a module, you write your JavaScript code in a separate file Any variables, functions, or classes you want to make available to other parts of your application need to be explicitly exported You can do this using the export keyword For example, let's say you have a file called math js with some math functions:\n```js\nexport function add(a, b) {\nreturn a + b;\n}\nexport function subtract(a, b) {\nreturn a - b;\n}\nconst PI = 3 14159;\nexport { PI };\n```\nIn this example, we're exporting two functions (add and subtract) and a constant (PI) You can export as many items as you need from a single module To use these exported items in another part of your application, you need to import them This is done using the import keyword Let's say you want to use these math functions in a file called app js:\n```js\nimport { add, subtract, PI } from ' /math js';\nconsole log(add(5, 3));        // Outputs: 8\nconsole log(subtract(10, 4));  // Outputs: 6\nconsole log(PI);               // Outputs: 3 14159\n```\nHere, we're importing the specific functions and constant we need from the math js module The ' /math js' part tells JavaScript where to find the module file relative to the current file Sometimes, you might want to import everything a module exports",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5315,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-modules-imports-and-exports\\67329fd6ad99c75d4a4b74e4.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6326f8dad3d2632b59187dc0a409508e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-modules-imports-and-exports\\67329fd6ad99c75d4a4b74e4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "called app js: ```js import { add, subtract, PI } from ' /math js'; console log(add(5, 3)); // Outputs: 8 console log(subtract(10, 4)); // Outputs: 6 console log(PI); // Outputs: 3 14159 ``` Here, we're importing the specific functions and constant we need from the math js module The ' /math js' part tells JavaScript where to find the module file relative to the current file Sometimes, you might want to import everything a module exportsYou can do this using the asterisk (*) syntax:\n```js\nimport * as Math from ' /math js';\nconsole log(Math add(5, 3));        // Outputs: 8\nconsole log(Math subtract(10, 4));  // Outputs: 6\nconsole log(Math PI);               // Outputs: 3 14159\n```\nIn this case, all exports from math js are imported as properties of an object called Math Another common pattern is to have a default export in a module This is typically used when a module primarily exports a single function You can only have one default export per module Here's how it looks:\n```js\n// In math js\nexport default function multiply(a, b) {\nreturn a * b;\n}\n// In app js\nimport multiply from ' /math js';\nconsole log(multiply(4, 5));  // Outputs: 20\n```\nNotice that when importing a default export, you don't need to use curly braces, and you can name the import whatever you want It's important to note that to use ES6 modules in the browser, you need to specify the type as module in your script tag:\n```html\n```\nModules provide a powerful way to organize and structure your JavaScript code They allow you to break your application into smaller, manageable pieces, promote code reuse, and help maintain a clean separation of concerns As you build larger applications, you'll find that modules become an essential tool in your JavaScript development toolkit --questions--\n--text--\nWhat keyword is used to make functions, variables, or classes available to other modules --answers--\nimport\n--feedback--\nThink about the keyword we use to make items accessible outside their original module export\nmodule\n--feedback--\nThink about the keyword we use to make items accessible outside their original module require\n--feedback--\nThink about the keyword we use to make items accessible outside their original module",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5315,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-modules-imports-and-exports\\67329fd6ad99c75d4a4b74e4.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "7a1396c6171eaf30fc118c1ce2269920",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-modules-imports-and-exports\\67329fd6ad99c75d4a4b74e4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "modules become an essential tool in your JavaScript development toolkit --questions-- --text-- What keyword is used to make functions, variables, or classes available to other modules --answers-- import --feedback-- Think about the keyword we use to make items accessible outside their original module export module --feedback-- Think about the keyword we use to make items accessible outside their original module require --feedback-- Think about the keyword we use to make items accessible outside their original module--video-solution--\n2\n--text--\nHow do you import a default export from a module --answers--\nimport { default } from ' /module js';\n--feedback--\nRemember the special syntax we discussed for importing default exports import default from ' /module js';\n--feedback--\nRemember the special syntax we discussed for importing default exports import * as default from ' /module js';\n--feedback--\nRemember the special syntax we discussed for importing default exports import anyName from ' /module js';\n--video-solution--\n4\n--text--\nWhat is the purpose of using modules in JavaScript --answers--\nTo make the code run faster --feedback--\nConsider the main advantages of using modules that we discussed To reduce the file size of the application --feedback--\nConsider the main advantages of using modules that we discussed To organize code into manageable, reusable pieces To encrypt sensitive parts of the code --feedback--\nConsider the main advantages of using modules that we discussed --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5315,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-modules-imports-and-exports\\67329fd6ad99c75d4a4b74e4.md",
      "source_type": "git_repo"
    },
    "token_count": 285,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "50034c08edc9443438bd57a5223e291e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-object-oriented-programming-and-encapsulation\\68420be9af9d89620af7944a.md",
    "source_type": "git_repo",
    "title": "title needs to be updated to correct title when lectures are finalized",
    "content": "id: 68420be9af9d89620af7944a\ntitle needs to be updated to correct title when lectures are finalized\ntitle: Understanding Object Oriented Programming and Encapsulation\nchallengeType: 19\ndashedName needs to be updated to correct title when lectures are finalized\ndashedName: lecture-understanding-object-oriented-programming-and-encapsulation\n--description--\nWatch the video or read the transcript and answer the questions below.\n--questions--\n--text--\nQuestion 1\n--answers--\nAnswer 1.1\n--feedback--\nFeedback 1\nAnswer 1.2\n--feedback--\nFeedback 1\nAnswer 1.3\n--feedback--\nFeedback 1\nAnswer 1.4\n--feedback--\nFeedback 1\n--video-solution--\n5\n--text--\nQuestion 2\n--answers--\nAnswer 2.1\n--feedback--\nFeedback 2\nAnswer 2.2\n--feedback--\nFeedback 2\nAnswer 2.3\n--feedback--\nFeedback 2\nAnswer 2.4\n--feedback--\nFeedback 2\n--video-solution--\n5\n--text--\nQuestion 3\n--answers--\nAnswer 3.1\n--feedback--\nFeedback 3\nAnswer 3.2\n--feedback--\nFeedback 3\nAnswer 3.3\n--feedback--\nFeedback 3\nAnswer 3.4\n--feedback--\nFeedback 3\n--video-solution--\n5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 1212,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-object-oriented-programming-and-encapsulation\\68420be9af9d89620af7944a.md",
      "source_type": "git_repo"
    },
    "token_count": 303,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "0df8f276cfd77bdbd30dc3b3db00a740",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-nuanced-semantic-elements\\672995bda6c67e369aaf8588.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672995bda6c67e369aaf8588\ntitle: What Are Description Lists, and When Should You Use Them challengeType: 19\ndashedName: what-are-description-lists\n--description--\nDescription lists are perfect for presenting terms and definitions in an organized and easy-to-read format, like in a glossary, or real dictionary, where you can find words with their corresponding definitions This is an example of a description list in HTML with two terms and their corresponding details:\n```html\nHTML\nHyperText Markup Language\nCSS\nCascading Style Sheets\n```\nIn this case the terms are the acronyms HTML and CSS, and the details are their expansions The details could also be definitions, or other information related to the terms You will need three HTML elements to define a description list First, the description list element, dl, which is the container for the entire list You can see it wraps around all the other elements of the description list in the example Then, one description term element, dt,  for each term In this case the description list has two terms, HTML and CSS, so it has two of these elements And finally, after each term you will find a description details element, dd, for the description, or details associated with that term In this example, they are Hypertext Markup Language and Cascading Style Sheets In the browser, you would see each term followed by its corresponding description By default, the descriptions are slightly more indented towards the right to distinguish them visually But description lists are not limited to only terms and definitions They are much more versatile than that Here we have a recipe with two ingredients ```html\nFlour\n2 cups\nSugar\n1/2 cup\n```\nThe entire description list is within a description list element The first ingredient, Flour, is within a description term element Then, you can see how much of this ingredient you will need: 2 cups This is within a description details element directly after its corresponding ingredients And the same structure is repeated for Sugar In this case, the recipe has only two ingredients, but if there were more the same structure could be repeated throughout the description list In the browser, you would see the ingredients aligned to the left, and the measurements indented to separate them visually Other use cases for description lists include product specifications, frequently asked questions, contact information, and metadata",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4346,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-nuanced-semantic-elements\\672995bda6c67e369aaf8588.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3e7706befa392420374f2f2abdf521ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-nuanced-semantic-elements\\672995bda6c67e369aaf8588.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "description details element directly after its corresponding ingredients And the same structure is repeated for Sugar In this case, the recipe has only two ingredients, but if there were more the same structure could be repeated throughout the description list In the browser, you would see the ingredients aligned to the left, and the measurements indented to separate them visually Other use cases for description lists include product specifications, frequently asked questions, contact information, and metadataEssentially, when you have two related pieces of information in a key-value pair format, where one acts as a label, the key, and the other acts as additional related information, the value, you can use a description list --questions--\n--text--\nWhich HTML tag is used to define an entire description list --answers--\ndt\n--feedback--\nThink about the HTML element that contains all the other elements of a description list dd\n--feedback--\nThink about the HTML element that contains all the other elements of a description list dl\nli\n--feedback--\nThink about the HTML element that contains all the other elements of a description list --video-solution--\n3\n--text--\nWhich HTML tag is used to represent a term in a description list --answers--\ndl\n--feedback--\nThink about the elements of the description list that come before the details or definitions dt\ndd\n--feedback--\nThink about the elements of the description list that come before the details or definitions li\n--feedback--\nThink about the elements of the description list that come before the details or definitions --video-solution--\n2\n--text--\nWhich HTML tag is used to define or provide more details about a term in a description list --answers--\ndl\n--feedback--\nThink about the elements of a description list that provide additional details about the terms dt\n--feedback--\nThink about the elements of a description list that provide additional details about the terms dd\nli\n--feedback--\nThink about the elements of a description list that provide additional details about the terms --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4346,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-nuanced-semantic-elements\\672995bda6c67e369aaf8588.md",
      "source_type": "git_repo"
    },
    "token_count": 399,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1086b88fa8e925bea7e23a79d3a156f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d1d6af27858c4f487d3f4c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d1d6af27858c4f487d3f4c\ntitle: What Is the Difference Between Real Performance and Perceived Performance challengeType: 19\ndashedName: what-is-the-difference-between-real-performance-and-perceived-performance\n--description--\nWhen we talk about performance, the term itself can feel a bit subjective, right What is good performance What is bad performance Is there a standard way to measure performance or is it completely dependent on the user's personal preferences and perception Let's see We can classify a website's performance into two different categories: perceived performance and real performance The perceived performance is how users perceive the performance of a website It's how they evaluate it in terms of responsiveness and reliability This is a subjective measurement, so it's hard to quantify it, but it's very important, since the user experience determines the success or failure of a website In contrast, real performance is the objective and measurable performance of the website It's measured using metrics like page load time, server response time, and rendering time These measurements are influenced by multiple factors related to the network and to the code itself Even a website with excellent perceived performance can be further optimized for an even better user experience There are several techniques for improving perceived performance Reducing the initial load time as much as possible by loading non-essential resources in the background is essential This technique is known as \"lazy loading \" That first impression can determine what users will think about your website Lazy loading will also impact the real performance of your website By using this technique, you can reduce the amount of content that has to be loaded upfront, so the page will load faster, which is a real performance metric It's also very important to provide quick response and feedback to user interactions For example, showing a loading indicator for a long-running process as soon as the user clicks on an element can help the user feel connected and engaged with the process, making the wait time feel shorter - or at least they'll feel more involved Keeping users actively engaged with your website is very important for improving their time perception Displaying text as soon as it arrives is helpful for keeping users engaged from the start, even if other resources, like images, have not been loaded yet If a user is waiting for a long-running task to be completed, keep them informed on the progress and update it regularly Another tip is to avoid content reflow and jumping content",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d1d6af27858c4f487d3f4c.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "633f818302239e411946e19c2645c129",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d1d6af27858c4f487d3f4c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "more involved Keeping users actively engaged with your website is very important for improving their time perception Displaying text as soon as it arrives is helpful for keeping users engaged from the start, even if other resources, like images, have not been loaded yet If a user is waiting for a long-running task to be completed, keep them informed on the progress and update it regularly Another tip is to avoid content reflow and jumping contentFor example, when ads or images are being loaded, the website might jump or readjust to make room for these new resources if they don't already have a space in the layout These sudden changes can result in a bad user experience because users may feel like the website is still loading To avoid this, plan ahead and assign space for these elements from the start If your website has custom fonts, you should also try to minimize font loading delays, since this may result in flickering - or showing the fallback font while the custom font is being loaded A suggestion for this is using a fallback font that is similar to the custom font, so in case this happens, the change will be much more subtle Also, be sure that the interface elements are active The user should be able to interact with them with minimal lag We will go into these techniques in more detail in the next few lectures While real performance is important, perceived performance can have a tremendous impact on user experience By optimizing for both, you can create websites that are and feel faster, creating a smooth and engaging user experience --questions--\n--text--\nWhat is the primary difference between real performance and perceived performance --answers--\nReal performance is measured by user experience, while perceived performance is measured by technical metrics --feedback--\nThink about how a website can be technically fast but feel slow to a user Real performance is measured by technical metrics, while perceived performance is measured by user experience There is no difference between real and perceived performance They are equivalent because both refer to how users experience the performance of a website --feedback--\nThink about how a website can be technically fast but feel slow to a user Perceived performance is more important than real performance because it is based on objective system metrics, while real performance is based on the user's subjective experience --feedback--\nThink about how a website can be technically fast but feel slow to a user --video-solution--\n2\n--text--\nWhy is it important to optimize for both real and perceived performance --answers--\nTo improve search engine rankings --feedback--\nThink about the overall impact of performance on website success",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d1d6af27858c4f487d3f4c.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2e5c36bf47ca8ae153bb0c67c9e23dab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d1d6af27858c4f487d3f4c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a user Perceived performance is more important than real performance because it is based on objective system metrics, while real performance is based on the user's subjective experience --feedback-- Think about how a website can be technically fast but feel slow to a user --video-solution-- 2 --text-- Why is it important to optimize for both real and perceived performance --answers-- To improve search engine rankings --feedback-- Think about the overall impact of performance on website successTo reduce server costs --feedback--\nThink about the overall impact of performance on website success To enhance the user experience To make websites more accessible --feedback--\nThink about the overall impact of performance on website success --video-solution--\n3\n--text--\nWhich of the following techniques can help improve perceived performance --answers--\nUsing large images --feedback--\nThink about how to reduce initial load time and improve perceived responsiveness Loading all JavaScript files at once --feedback--\nThink about how to reduce initial load time and improve perceived responsiveness Using lazy loading for non-essential resources Avoiding browser caching --feedback--\nThink about how to reduce initial load time and improve perceived responsiveness --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5915,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d1d6af27858c4f487d3f4c.md",
      "source_type": "git_repo"
    },
    "token_count": 227,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2548ad30fccb22cc12204e5b619180e9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f6b17844ae7898583eb3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f6b17844ae7898583eb3\ntitle: What Is INP challengeType: 19\ndashedName: what-is-inp\n--description--\nHave you ever clicked on a webpage and felt like nothing happened This delay impacts user experience and is measured by a metric called Interaction to Next Paint, or INP INP assesses a page's overall responsiveness by measuring the time from when a user interacts — like a click or key press — to the next time the browser updates the display A lower INP indicates a more responsive page But why is INP important A high INP can make users feel that a page is unresponsive, leading to frustration Optimizing INP ensures that users receive timely feedback, enhancing their experience Tools like Chrome's DevTools and web performance APIs can help measure INP by tracking interaction delays To improve INP, minimize main thread work, optimize event handlers, and ensure that user interactions trigger timely visual updates By understanding and optimizing INP, you can create web experiences that feel fast and responsive, keeping your users satisfied --questions--\n--text--\nWhat does INP measure --answers--\nThe time it takes for a page to load --feedback--\nThink about the time between a user's action and when they see a response The delay between user interaction and a visual update The total size of a webpage --feedback--\nThink about the time between a user's action and when they see a response The number of images on a page --feedback--\nThink about the time between a user's action and when they see a response --video-solution--\n2\n--text--\nWhy is a low INP value important --answers--\nIt reduces the number of server requests --feedback--\nConsider how users feel when a page responds quickly to their actions It ensures timely feedback to user interactions It decreases the overall page size --feedback--\nConsider how users feel when a page responds quickly to their actions It increases the number of page views --feedback--\nConsider how users feel when a page responds quickly to their actions --video-solution--\n2\n--text--\nWhich tool can help measure INP --answers--\nPhotoshop\n--feedback--\nThink about tools used for web development and performance analysis Chrome DevTools\nMicrosoft Word\n--feedback--\nThink about tools used for web development and performance analysis VLC Media Player\n--feedback--\nThink about tools used for web development and performance analysis --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f6b17844ae7898583eb3.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 1
  },
  {
    "id": "ecf1bec975a202055d4ff93476f2c042",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f6cea4916d78d5a27ad3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f6cea4916d78d5a27ad3\ntitle: How to Measure and Improve INP challengeType: 19\ndashedName: how-to-measure-and-improve-inp\n--description--\nLet's walk through a practical way to measure Interaction to Next Paint, or INP, using Chrome DevTools First of all, let's open DevTools by pressing \"F12\" or Right-click and click on \"Inspect\" Now, let's say you have a search bar on your webpage Imagine a user types a query, but it takes 600ms before the suggestion dropdown appears Chrome DevTools would mark this high INP value You can optimize by deferring heavy JavaScript, reducing long tasks, and improving event handling The INP would then drop to 150ms, making interactions feel instant Cool, right Now, let's look at a practical measurement technique that helps identify interaction delays so you can create a faster and smoother user experience First, we would open Chrome DevTools We would do so, once again, by opening Google Chrome, navigating to a webpage that we want to analyze, and pressing \"F12\" or right-clicking the page and clicking \"Inspect\" Now, let's head to the \"Performance\" tab - and there is everything that you need Now we are ready to identify the Interaction to Next Paint, or INP We are going to look for the longest interaction delay recorded A good INP is generally below 200ms, and a poor INP is above 500ms And that's it --questions--\n--text--\nHow do you open Chrome DevTools --answers--\nBy pressing \"F12\" or Right-clicking and selecting \"Inspect\" By typing \"DevTools\" in the browser search bar --feedback--\nThink about the easiest way to access developer tools in Chrome By clicking on the Chrome settings menu --feedback--\nThink about the easiest way to access developer tools in Chrome By installing a separate software --feedback--\nThink about the easiest way to access developer tools in Chrome --video-solution--\n1\n--text--\nWhat does a high INP value indicate --answers--\nThe webpage loads quickly --feedback--\nConsider what happens when you click something and have to wait for a response There is a delay between a user interaction and the visual update The browser has cached all resources efficiently --feedback--\nConsider what happens when you click something and have to wait for a response The webpage does not have any JavaScript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3097,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f6cea4916d78d5a27ad3.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a6bed781b34dc434b22d78be2c5d67d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f6cea4916d78d5a27ad3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "access developer tools in Chrome --video-solution-- 1 --text-- What does a high INP value indicate --answers-- The webpage loads quickly --feedback-- Consider what happens when you click something and have to wait for a response There is a delay between a user interaction and the visual update The browser has cached all resources efficiently --feedback-- Consider what happens when you click something and have to wait for a response The webpage does not have any JavaScript--feedback--\nConsider what happens when you click something and have to wait for a response --video-solution--\n2\n--text--\nWhich of the following is NOT a way to improve INP --answers--\nReducing main thread work --feedback--\nOne of these options makes performance worse instead of better Using requestIdleCallback() for non-critical scripts --feedback--\nOne of these options makes performance worse instead of better Adding more large images and scripts to the page Deferring or lazy-loading heavy assets --feedback--\nOne of these options makes performance worse instead of better --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3097,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f6cea4916d78d5a27ad3.md",
      "source_type": "git_repo"
    },
    "token_count": 208,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7596df48c32fdfd0902f8d521ab5d310",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f6a63acd9e781b4b5061.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f6a63acd9e781b4b5061\ntitle: What Are the Key Performance Concepts challengeType: 19\ndashedName: what-are-the-key-performance-concepts\n--description--\nWhy do some websites feel snappy and responsive, while others feel sluggish The answer lies in key performance concepts that affect how a page loads and renders Understanding key web performance concepts is essential for building fast, smooth, and user-friendly websites Let's break down source order, the critical rendering path, latency, and more Let's look at source order first Source order refers to the way HTML elements are structured in the document This determines what loads first and can significantly impact performance and accessibility Some best practices for this include:\nPlacing critical content such as headings, navigation or main text higher in the HTML structure Deferring non-essential scripts such as ones for analytics, or third-party widgets, so they don't block rendering Using progressive enhancement, to ensure the core experience works even before styles and scripts load Progressive enhancement is a way of building websites and applications based on the idea that you should make your page work with HTML first Here is an example of good source order, using the best practices we just went through ```html\nWelcome to FastSite Critical information loads first ```\nBy optimizing source order, we make sure users see important content as soon as possible Now let's look at critical rendering path The critical rendering path is the sequence of steps the browser follows to convert code into pixels on the screen Here are the key steps that we will go into later:\nParsing HTML: Builds the DOM (Document Object Model)\nParsing CSS: Builds the CSSOM (CSS Object Model)\nJavaScript Execution: Can modify the DOM & CSSOM\nRender Tree Construction: Combines the DOM & CSSOM\nLayout & Painting: Determines element sizes & draws pixels\nOptimizations:\nMinimize render-blocking resources (e g , large CSS files, unused JS) Use async and defer attributes for scripts:\nLoad only essential styles first; defer non-critical CSS Overall, a shorter critical rendering path equals a faster perceived performance We will go into this in more detail later on And finally, let's look at latency Latency is the time it takes for a request to travel between the browser and the server So in other words, high latency equals slow pages Some ways of reducing latency include:\nUsing CDNs, or in other words, Content Delivery Networks, to serve files from closer locations",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4749,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f6a63acd9e781b4b5061.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "60b9ad1ef95328bb19738b50512940a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f6a63acd9e781b4b5061.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "non-critical CSS Overall, a shorter critical rendering path equals a faster perceived performance We will go into this in more detail later on And finally, let's look at latency Latency is the time it takes for a request to travel between the browser and the server So in other words, high latency equals slow pages Some ways of reducing latency include: Using CDNs, or in other words, Content Delivery Networks, to serve files from closer locationsEnabling compression using things such as Gzip to reduce file sizes Optimizing images and using lazy loading - which we will also go into later By reducing latency, we make interactions feel instant So in conclusion, by optimizing source order, reducing the critical path, and cutting down latency, you can make your website feel fast --questions--\n--text--\nWhat is source order --answers--\nThe order in which a browser executes JavaScript --feedback--\nThink about what determines which content appears first in the document The structure of a website's CSS files --feedback--\nThink about what determines which content appears first in the document The way HTML elements are arranged in the document The time it takes to load a webpage --feedback--\nThink about what determines which content appears first in the document --video-solution--\n3\n--text--\nHow can you optimize the critical rendering path --answers--\nBy adding more scripts to the head section --feedback--\nThink about reducing delays in rendering important content first By minimizing render-blocking resources and deferring scripts By removing HTML elements --feedback--\nThink about reducing delays in rendering important content first By increasing latency --feedback--\nThink about reducing delays in rendering important content first --video-solution--\n2\n--text--\nWhat is latency --answers--\nThe delay in network requests The process of rendering HTML and CSS --feedback--\nThink about how long it takes for data to travel between the server and the user The amount of images on a webpage --feedback--\nThink about how long it takes for data to travel between the server and the user The size of a website's JavaScript files --feedback--\nThink about how long it takes for data to travel between the server and the user --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4749,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f6a63acd9e781b4b5061.md",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f751a43f9ddb3af54b6d34a2ea6738ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f6e2836565795d789ab7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f6e2836565795d789ab7\ntitle: How Does a Browser Render a Page challengeType: 19\ndashedName: how-does-a-browser-render-a-page\n--description--\nHave you ever wondered what happens behind the scenes when you enter a URL and press enter How does the browser transform code into the interactive pages we see Understanding how a browser renders a web page is essential for developers aiming to optimize performance and enhance user experience In this lecture, we'll demystify the rendering process, breaking it down into clear, digestible steps First the browser parses the HTML and builds the DOM The process begins with the browser fetching the HTML content of the page It parses this HTML to construct the Document Object Model, or DOM — a tree-like structure representing the page's content Consider this simple HTML snippet:\n```html\nHello, World Welcome to our website ```\nThe browser parses this to create a DOM tree with html as the root, containing body, which in turn contains h1 and p elements Next, the browser processes the CSS, constructing the CSS Object Model, or CSSOM This is another tree structure that dictates how elements should be styled Given this CSS:\ncss\nh1 {\ncolor: blue;\n}\np {\nfont-size: 16px;\n}\nThe CSS Object Model specifies that h1 elements are blue and p elements have a font size of 16 pixels The browser then combines the DOM and CSS Object Model to form the render tree This tree includes only the nodes needed to render the page, each paired with its corresponding styles For our example, the render tree consists of the h1 and p elements, styled appropriately With the render tree in hand, the browser calculates the exact position and size of each element in a process called layout or reflow This ensures that elements appear in the correct location and dimensions on the screen Finally, the browser paints the pixels to the screen, rendering each element based on the calculated styles and layout In complex pages, this might involve multiple layers that are composited together to form the final visual output In conclusion, from parsing HTML and CSS to painting pixels on the screen, the browser's rendering process is a sophisticated sequence of steps --questions--\n--text--\nWhat does the browser do first --answers--\nThe browser processes the CSS, constructing the CSSOM --feedback--\nThink about the structure of web pages The browser parses the HTML and builds the DOM",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3678,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f6e2836565795d789ab7.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9e7b1572eca9f1c33995d23eeae96cf6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f6e2836565795d789ab7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "layout In complex pages, this might involve multiple layers that are composited together to form the final visual output In conclusion, from parsing HTML and CSS to painting pixels on the screen, the browser's rendering process is a sophisticated sequence of steps --questions-- --text-- What does the browser do first --answers-- The browser processes the CSS, constructing the CSSOM --feedback-- Think about the structure of web pages The browser parses the HTML and builds the DOMThe browser combines the DOM and CSSOM to form the render tree --feedback--\nThink about the structure of web pages The browser paints the pixels to the screen --feedback--\nThink about the structure of web pages --video-solution--\n2\n--text--\nWhat does the CSSOM stand for --answers--\nThe Custom CSS System Object Model --feedback--\nThink about traditional object oriented design The CSS Operating Model --feedback--\nThink about traditional object oriented design The Custom CSS System Operating Model --feedback--\nThink about traditional object oriented design The CSS Object Model --video-solution--\n4\n--text--\nWhat does constructing the CSSOM do --answers--\nCreates a DOM tree with html as the root --feedback--\nThink about what CSS does Dictates how elements should be styled Fetches the HTML content of the page --feedback--\nThink about what CSS does Paints the pixels to the screen --feedback--\nThink about what CSS does --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3678,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f6e2836565795d789ab7.md",
      "source_type": "git_repo"
    },
    "token_count": 280,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "76ab3f5cea6f2b76ea1eff0ddb24439b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7183a537d7a4908a9ff.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f7183a537d7a4908a9ff\ntitle: What Are Some Ways to Reduce Page Loading Times challengeType: 19\ndashedName: what-are-some-ways-to-reduce-page-loading-times\n--description--\nHave you ever left a website because it took too long to load Slow page loading can frustrate users and increase bounce rates Today, we'll explore practical ways to reduce page loading times, ensuring your audience stays engaged Number 1: optimize media assets Large images and videos are common culprits for slow load times By optimizing these assets, you can significantly speed up your site:\nCompress Images: Use tools like TinyPNG to reduce image file sizes without compromising quality Use Modern Formats: Implement formats like WebP for images and AV1 for videos to achieve better compression rates Lazy Loading: Defer loading off-screen images and videos until they're needed In HTML, add the loading=\"lazy\" attribute to your media tags Next, we have minimize HTTP requests Each file your website requests adds to the load time Reducing the number of HTTP requests can lead to faster page loads You can:\nCombine Files: Merge CSS and JavaScript files to reduce the number of requests Use Inline Critical CSS: Place essential CSS directly in the HTML to speed up initial rendering Use CSS Sprites: Combine multiple images into a single sprite sheet to minimize requests And, of course, you can Leverage Browser Caching Caching allows browsers to store parts of your website locally, reducing load times for returning visitors:\nSet Expiry Headers: Use the Cache-Control header to specify how long browsers should keep files Version Assets: When updating files, change their names or use query strings to ensure browsers fetch the latest versions You can do this along with minifying and Compressing files, which will reduce the size of your files can lead to quicker downloads:\nMinify CSS and JavaScript: Remove unnecessary whitespace and comments using tools like UglifyJS for JavaScript and cssnano for CSS Enable Compression: Configure your server to use Gzip to reduce the size of transmitted files You can also optimize web fonts Web fonts can enhance design but may also slow down your site if not handled properly:\nLimit Font Variants: Only include the character sets and styles you need Use font-display: Control how fonts are displayed during loading by setting the font-display property in your CSS",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4301,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7183a537d7a4908a9ff.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d6e5b70307272180fb6e991e58ea06fa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7183a537d7a4908a9ff.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "using tools like UglifyJS for JavaScript and cssnano for CSS Enable Compression: Configure your server to use Gzip to reduce the size of transmitted files You can also optimize web fonts Web fonts can enhance design but may also slow down your site if not handled properly: Limit Font Variants: Only include the character sets and styles you need Use font-display: Control how fonts are displayed during loading by setting the font-display property in your CSSSo in conclusion, by implementing all these strategies, you can significantly reduce your page loading times, leading to a better user experience and improved site performance --questions--\n--text--\nHow can you best optimize web fonts --answers--\nDo not use the font color red --feedback--\nThink about how to limit font variants Only include the character sets and styles you need Only use titles --feedback--\nThink about how to limit font variants Only use paragraphs --feedback--\nThink about how to limit font variants --video-solution--\n2\n--text--\nHow do you set expiry headers --answers--\nUse the Cache-Expiration header to specify how long the internet should keep files --feedback--\nThink about where files are viewed by you Use the Cache-Control header to specify how long browsers should keep files Use the Cache-Control header to define how long a server should store files before serving new versions --feedback--\nThink about where files are viewed by you Use the Expires header to specify the exact expiration time of the file --feedback--\nThink about where files are viewed by you --video-solution--\n2\n--text--\nHow can you ensure browsers fetch the latest versions of assets --answers--\nWhen updating files, change their names or use query strings Keep refreshing the browser at least 10 times --feedback--\nThink about how you can change an asset so the browser thinks it is new Use browsers that have cute names --feedback--\nThink about how you can change an asset so the browser thinks it is new Avoiding browser caching --feedback--\nThink about how you can change an asset so the browser thinks it is new --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4301,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7183a537d7a4908a9ff.md",
      "source_type": "git_repo"
    },
    "token_count": 410,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "aa211495de2a480e19053ff3f0c4a1ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f70278179479d3eed390.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f70278179479d3eed390\ntitle: How Does Performance Impact Sustainability challengeType: 19\ndashedName: how-does-performance-impact-sustainability\n--description--\nImproving web performance is crucial for delivering a fast and efficient user experience But did you know that optimizing your website's performance doesn't just improve speed — it also helps the environment Every time a page loads, energy is consumed And when sites are inefficient, they use more resources, leading to higher carbon emissions Let's break down how performance impacts sustainability and show you practical ways to optimize your code for a greener web The internet accounts for around 2% of global carbon emissions — that's the same as the airline industry Every byte transferred requires electricity, from data centers to user devices Larger files and inefficient scripts mean more power consumption A high-performance website isn't just faster, it also reduces unnecessary processing and energy use Here's an example of inefficient JavaScript:\njs\n// Inefficient JavaScript\nfunction fetchData() {\nfor (let i = 0; i < 1000000; i++) {\nconsole log(\"Processing \");\n}\nfetch(\"https://api example com/data\") then(response => response json()) then(data => console log(data));\n}\nfetchData();\nThis script runs excessive console logs, wasting CPU cycles and energy Now, let's optimize it:\njs\n// Optimized JavaScript\nasync function fetchDataOptimized() {\nconst response = await fetch(\"https://api example com/data\");\nconst data = await response json();\nconsole log(data);\n}\nfetchDataOptimized();\nBy removing unnecessary loops and using async/await, we lower processing time and energy consumption Here are some practical optimization tips you can use in your future projects Minify Your Assets: Use tools like Terser or UglifyJS to shrink JavaScript and CSS files Smaller files load faster and require less energy Optimize Images: Use next-gen formats like WebP instead of PNGs or JPEGs to reduce file size without quality loss Reduce Network Requests: Each request adds overhead Combine CSS and JavaScript files and use lazy loading to reduce load times Use Efficient Algorithms: A poorly optimized loop can increase CPU usage This is the same as writing inefficient JavaScript that we saw in the example previously Leverage Caching & CDNs: Caching prevents repeated downloads, and CDNs deliver content closer to users, reducing transmission energy And now, what if you want to measure your impact and just how green your site is",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4261,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f70278179479d3eed390.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1c65e890458d13c21071d3edbf4680c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f70278179479d3eed390.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "adds overhead Combine CSS and JavaScript files and use lazy loading to reduce load times Use Efficient Algorithms: A poorly optimized loop can increase CPU usage This is the same as writing inefficient JavaScript that we saw in the example previously Leverage Caching & CDNs: Caching prevents repeated downloads, and CDNs deliver content closer to users, reducing transmission energy And now, what if you want to measure your impact and just how green your site isUse tools like Google Lighthouse to analyze performance and estimate energy savings Or, for a deeper sustainability check, try the Website Carbon Calculator — as it estimates your page's environmental impact In conclusion, by understanding and implementing these performance fundamentals, developers can create web applications that are not only faster and more responsive but also more sustainable --questions--\n--text--\nWhich of these is not a way to optimize your assets --answers--\nMinify Your Assets --feedback--\nThink about what increases website performance, not aesthetics Reduce Network Requests --feedback--\nThink about what increases website performance, not aesthetics Use Light Mode Leverage Caching & CDNs --feedback--\nThink about what increases website performance, not aesthetics --video-solution--\n3\n--text--\nWhat percentage of global carbon emissions does the internet account for --answers--\n2%\n98%\n--feedback--\nIt is the same as the airline industry 99%\n--feedback--\nIt is the same as the airline industry 3%\n--feedback--\nIt is the same as the airline industry --video-solution--\n1\n--text--\nWhat happens every time a page loads --answers--\nEnergy is consumed Energy is released --feedback--\nThink what happens when you use more resources Energy is created --feedback--\nThink what happens when you use more resources Energy is drained --feedback--\nThink what happens when you use more resources --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4261,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f70278179479d3eed390.md",
      "source_type": "git_repo"
    },
    "token_count": 360,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "dd374c6443215873a650630fca022d9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f738dcef5d7abfe4243a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f738dcef5d7abfe4243a\ntitle: How Do You Improve \"Time to Usable\" challengeType: 19\ndashedName: how-do-you-improve-time-to-usable\n--description--\nImproving the \"time to usable\", or in other words the interval from when a user requests a page to when they can meaningfully interact with it, is crucial for enhancing user experience Let's explore effective strategies to achieve a faster time to usable Begin by focusing on the content that the user sees first This means loading essential elements immediately and deferring non-critical components For example, you could try to implement lazy loading We have already covered lazy loading, but here is an example of lazy load images as a refresher:\nhtml\n<img src=\"image jpg\" loading=\"lazy\" alt=\"Description\">\nAll you need to do is add the loading=\"lazy\" attribute to image tags This defers the loading of images until they are needed, typically when they enter the user's viewport By loading images and videos only when they enter the viewport, we are conserving bandwidth as well as causing the speed up of initial rendering Normally, a webpage loads all images at once, even those not visible on the screen With lazy loading, images below the fold, or in other words off-screen, they are only loaded when the user scrolls down to them And here is an example of lazy load iframes:\n```html\n```\nYou can apply the same attribute that you did before, but this time to iframes, and the same concept will apply You can also use the defer attribute to delay non-critical JavaScript until after the initial page load Here is an example of us doing just that:\n```html\n```\nYou could also consider minimizing render-blocking resources Render-blocking resources delay the page from becoming interactive To avoid this, you could try loading CSS asynchronously For non-critical CSS, use the media attribute to load stylesheets conditionally Here is an example of us doing just that:\nhtml\n<link rel=\"stylesheet\" href=\"print css\" media=\"print\">\nBy specifying media value as print, the print css will only be loaded when the page is printed or previewed on screen In this next example, by passing min-width: 800px as the value to the media attribute, we are saying we only want desktop css to load for screens wider than 800px:\n```html\n```\nThis saves bandwidth by skipping unnecessary styles",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4720,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f738dcef5d7abfe4243a.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "93d29a6b54aadfedbf70910509019e2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f738dcef5d7abfe4243a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Here is an example of us doing just that: html <link rel=\"stylesheet\" href=\"print css\" media=\"print\"> By specifying media value as print, the print css will only be loaded when the page is printed or previewed on screen In this next example, by passing min-width: 800px as the value to the media attribute, we are saying we only want desktop css to load for screens wider than 800px: ```html ``` This saves bandwidth by skipping unnecessary stylesSo, in conclusion, by implementing these strategies, you can significantly reduce the \"time to usable\" for your website, ensuring users can interact with your content promptly --questions--\n--text--\nWhat is the best way to describe \"time to usable\" --answers--\nThe time intervals in the setTimeout method --feedback--\nThink about how a user is waiting to use a web page The time from when a user requests a page to when they can meaningfully interact with it The amount of time it takes for the server to process a user's request and return a response --feedback--\nThink about how a user is waiting to use a web page The period during which a user can only view content but not interact with it --feedback--\nThink about how a user is waiting to use a web page --video-solution--\n2\n--text--\nWhich of these sentences is true --answers--\nNormally, a webpage loads only images that are visible on the screen --feedback--\nThink about why we would need concepts such as lazy loading Normally, a webpage loads only images that are not visible on the screen --feedback--\nThink about why we would need concepts such as lazy loading Normally, a webpage loads some images, even those not visible on the screen --feedback--\nThink about why we would need concepts such as lazy loading Normally, a webpage loads all images at once, even those not visible on the screen --video-solution--\n4\n--text--\nWhat do Render-blocking resources do --answers--\nRender-blocking resources stop pages loading completely --feedback--\nThink about why you cannot interact with websites sometimes Render-blocking resources can crash websites --feedback--\nThink about why you cannot interact with websites sometimes Render-blocking resources delay the page from becoming interactive Render-blocking resources can cause power outages --feedback--\nThink about why you cannot interact with websites sometimes --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4720,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f738dcef5d7abfe4243a.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6d2c45fbaf0adbbe412d65da611df1ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f759154eac7b4d5cb1bf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f759154eac7b4d5cb1bf\ntitle: How to Improve the Perceived Performance of Features challengeType: 19\ndashedName: how-to-improve-the-perceived-performance-of-features\n--description--\nAs we know, perceived performance isn't just about how fast a site actually is — it's about how fast it feels to users So, for example, if you have ever used a website that felt slow, even though it wasn't That's perceived performance — how fast a site feels to the user Small tweaks can make a huge difference in the user experience Let's explore some practical ways to improve perceived performance Spinners can make users feel like they're waiting longer than they actually are Instead, try skeleton screens — gray placeholders that mimic real content and gradually load in:\n```html\n```\nUsers feel like the page is loading progressively, rather than waiting in the dark In addition to this, users shouldn't have to wait for everything to load before they can start interacting Load important content first, then load the rest in the background We looked at this previously with lazy loading:\n```html\n```\nThis makes the page feel responsive, even if not everything has loaded yet Now - what if your site could predict what the user will click next With preloading, you can fetch the next page before they request it:\nhtml\n<link rel=\"preload\" href=\"next-page html\" as=\"document\">\nThis reduces perceived loading time to near zero when users navigate And finally, users don't like uncertainty When they click a button, acknowledge their action instantly:\nhtml\n<button onclick=\"this innerText='⏳ Processing '; setTimeout(() => this innerText='✅ Done ', 2000);\">\nClick Me\n</button>\nThis means that, even if there's a delay, the user feels like something is happening So, in conclusion, improving perceived performance isn't just about raw speed, it's about how speed feels to the user Use skeleton screens, prioritize important content, preload smartly, and give instant feedback to make your site feel faster --questions--\n--text--\nWhat is the perceived performance --answers--\nHow fast a site feels to the user How fast a page loads --feedback--\nThink about how a user is waiting for a web page to load How slow a page loads --feedback--\nThink about how a user is waiting for a web page to load How fast a users performance is",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4261,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f759154eac7b4d5cb1bf.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "50e56175a0026c40d69b79c2a52a5529",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f759154eac7b4d5cb1bf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "screens, prioritize important content, preload smartly, and give instant feedback to make your site feel faster --questions-- --text-- What is the perceived performance --answers-- How fast a site feels to the user How fast a page loads --feedback-- Think about how a user is waiting for a web page to load How slow a page loads --feedback-- Think about how a user is waiting for a web page to load How fast a users performance is--feedback--\nThink about how a user is waiting for a web page to load --video-solution--\n1\n--text--\nWhich of the following is an example of preloading --answers--\nFetching the next page before a user requests it Fetching a webpage's content after a user interacts with the page --feedback--\nThink about predicting what the user will click next Displaying placeholder content while waiting for resources to load --feedback--\nThink about predicting what the user will click next Caching assets for offline use after the page has loaded --feedback--\nThink about predicting what the user will click next --video-solution--\n1\n--text--\nWhat is an example of a skeleton screen --answers--\nA screen displaying an image of a skeleton --feedback--\nThink about users feeling like the page is loading progressively, rather than waiting in the dark The bare bones of a web page --feedback--\nThink about users feeling like the page is loading progressively, rather than waiting in the dark A gray placeholder that mimics real content and gradually loads in A loading screen that shows simple shapes or text as the page content loads --feedback--\nThink about users feeling like the page is loading progressively, rather than waiting in the dark --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4261,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f759154eac7b4d5cb1bf.md",
      "source_type": "git_repo"
    },
    "token_count": 336,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "863bfa2a2971ecad9d68467b6ff5a70c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f778a856c37bd31c5022.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f778a856c37bd31c5022\ntitle: What Are Some Key Metrics for Measuring Performance challengeType: 19\ndashedName: what-are-some-key-metrics-for-measuring-performance\n--description--\nTo measure and improve web performance, we use key performance metrics like First Contentful Paint (or FCP), Speed Index, Total Blocking Time (or TBT), Bounce Rate, and Unique Users Let's look at all of these metrics individually First Contentful Paint, or FCP This measures how quickly the first piece of content, like a text or image, appears on the screen A good FCP is regarded as a time below 1 8 seconds, and a poor FCP is usually above 3 seconds You can check your FCP using Chrome DevTools like this:\nStep 1: Open Chrome DevTools\nOpen Google Chrome Go to the webpage you want to test Press \"F12\" or Right-click and \"Inspect\" Step 2: Find and click the \"Lighthouse\" tab in the DevTools Step 3: Click the \"Analyze page load\" button and wait for the analyzation to finish Now we can analyze the results We do this by scrolling down to the \"Metrics\" section and looking for the \"First Contentful Paint\" marker We can see the exact time in milliseconds or seconds FCP and Interaction to Next Paint (or INP), that we looked at previously, are both performance metrics, but they measure different aspects of user experience It's important not to get them mixed up As a reminder, FCP is about how fast users see content after loading, and INP is about how fast users see feedback after clicking or typing Next we have the Speed Index Speed Index measures how quickly visible parts of the page are painted Lower scores mean better performance You can check your Speed Index in the Lighthouse Reports We also have Total Blocking Time or TBT This shows how long the main thread is blocked by heavy JavaScript tasks If TBT is high, users experience laggy interactions To improve TBT, break up long tasks and defer non-essential scripts Next we have the Bounce Rate This is the percentage of visitors who leave without interacting If your site has high bounce rates, it might be because your page is too slow And finally we have unique users This metric tracks how many individual visitors come to your site To view the bounce rate and unique users, you can use Google Analytics",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3929,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f778a856c37bd31c5022.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "64f14b22c3478bc8de51abfce6489525",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f778a856c37bd31c5022.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "experience laggy interactions To improve TBT, break up long tasks and defer non-essential scripts Next we have the Bounce Rate This is the percentage of visitors who leave without interacting If your site has high bounce rates, it might be because your page is too slow And finally we have unique users This metric tracks how many individual visitors come to your site To view the bounce rate and unique users, you can use Google AnalyticsIt will allow you to monitor these metrics and improve engagement --questions--\n--text--\nWhat does First Contentful Paint (FCP) measure --answers--\nHow quickly the entire page loads --feedback--\nThink about when a user first sees something on the screen When the first visible content appears How many users visit the page --feedback--\nThink about when a user first sees something on the screen The total time a page takes to load --feedback--\nThink about when a user first sees something on the screen --video-solution--\n2\n--text--\nWhich metric tracks how quickly a page visually loads --answers--\nBounce Rate --feedback--\nIt measures how fast content appears, not just how many visitors you get Total Blocking Time --feedback--\nIt measures how fast content appears, not just how many visitors you get Speed Index Unique Users --feedback--\nIt measures how fast content appears, not just how many visitors you get --video-solution--\n3\n--text--\nWhat can cause a high Total Blocking Time (TBT) --answers--\nExcessive DOM manipulation causing layout recalculations --feedback--\nThink about what slows down user interactions Too many large images slowing down the page load --feedback--\nThink about what slows down user interactions Long JavaScript tasks blocking the main thread Using a simple CSS file with multiple selectors and high specificity --feedback--\nThink about what slows down user interactions --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3929,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f778a856c37bd31c5022.md",
      "source_type": "git_repo"
    },
    "token_count": 363,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6551c0ff4c014f65d97b1d78ee1249c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7a69809807c59a44002.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f7a69809807c59a44002\ntitle: What Are Some Common Performance Measurement Tools challengeType: 19\ndashedName: what-are-some-common-performance-measurement-tools\n--description--\nIf you want to make your website faster and more responsive, you need the right tools to measure and optimize performance Let's explore some common performance measurement tools and how they help First up, we have Chrome DevTools Chrome DevTools is a built-in tool inside Google Chrome that lets you analyze and debug performance in real-time DevTools will show loading times, CPU usage, and render delays It's especially useful for measuring First Contentful Paint, or FCP, which we know by now, is how fast a user sees the first visible content If your website feels slow, DevTools will help you spot the bottlenecks Next up, Lighthouse Lighthouse is an automated tool that checks performance, SEO, and accessibility To use it, simply open Chrome DevTools and go to the \"Lighthouse\" tab Next, click \"Analyze page load\" and it will give you a score on how fast and optimized your site is, as well as provide recommendations to improve it If you want a quick performance audit, Lighthouse is your go-to tool Now, let's talk about WebPageTest WebPageTest lets you test how your site loads from different locations and devices All you have to do is visit WebPageTest org, enter your website URL, choose a test location and browser and click \"Start Test\" It gives a detailed breakdown of your site's Speed Index, Total Blocking Time, and other key performance metrics If you want to know how real users experience your site globally, WebPageTest is the tool for that Another great tool is Google PageSpeed Insights This tool analyzes your website and suggests quick improvements for both mobile and desktop Just go to PageSpeed Insights, enter your URL, and click \"Analyze\" It will tell you what's slowing your site down and give specific recommendations — like optimizing images, removing render-blocking scripts, and reducing server response times PageSpeed Insights is a fast and easy way to check how Google sees your site's performance Lastly, let's talk about Real User Monitoring, or RUM tools Unlike lab tests, RUM tools track actual user behavior, showing how real visitors experience your site Popular RUM tools include Google Analytics, which tracks page load times and bounce rates",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4147,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7a69809807c59a44002.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "efb36d00b088564e3aef12fb3263ab6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7a69809807c59a44002.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "slowing your site down and give specific recommendations — like optimizing images, removing render-blocking scripts, and reducing server response times PageSpeed Insights is a fast and easy way to check how Google sees your site's performance Lastly, let's talk about Real User Monitoring, or RUM tools Unlike lab tests, RUM tools track actual user behavior, showing how real visitors experience your site Popular RUM tools include Google Analytics, which tracks page load times and bounce ratesAnd New Relic or Datadog, which Monitors real-time performance issues If you want data from actual users, RUM tools are essential Each tool has different strengths, so use a combination to get the best insights Start by testing with Chrome DevTools or Lighthouse, then dive deeper with WebPageTest and RUM tools --questions--\n--text--\nWhat is Lighthouse used for --answers--\nRunning automated performance audits Measuring real user behavior --feedback--\nThink about a tool that scores speed, accessibility, and SEO Checking DNS settings --feedback--\nThink about a tool that scores speed, accessibility, and SEO Monitoring server logs --feedback--\nThink about a tool that scores speed, accessibility, and SEO --video-solution--\n1\n--text--\nWhich tool measures real user experience instead of lab tests --answers--\nGoogle Lighthouse\n--feedback--\nThink about tools like Google Analytics and New Relic Chrome DevTools\n--feedback--\nThink about tools like Google Analytics and New Relic RUM (Real User Monitoring) Tools\nWebPageTest\n--feedback--\nThink about tools like Google Analytics and New Relic --video-solution--\n3\n--text--\nWhat does WebPageTest allow you to do --answers--\nTest from different locations and devices Only analyze server logs --feedback--\nThink about testing how a website loads in different regions Edit a webpage's code directly --feedback--\nThink about testing how a website loads in different regions Monitor social media traffic --feedback--\nThink about testing how a website loads in different regions --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4147,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7a69809807c59a44002.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c6eed0a66f2291b509ffccf8980a2402",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7e9d895bf7dcef00408.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f7e9d895bf7dcef00408\ntitle: What Are Some Techniques for Improving CSS Performance challengeType: 19\ndashedName: what-are-some-techniques-for-improving-css-performance\n--description--\nEvery project is unique and you should carefully consider which ones of these techniques will be most helpful for your web application First, since all styles are parsed, you should remove any unnecessary styles from your CSS stylesheets You should also split your CSS styles into multiple files This way, if a file is not required to render a specific web page, it will not be loaded and it won't block the rendering process By default, the browser assumes that all stylesheets should block the rendering process But you can tell the browser when a stylesheet should be loaded by using the media attribute and a media query In this example, the print css stylesheet will only be applied when the document is being printed because it has the media attribute with the value print:\nhtml\n<link rel=\"stylesheet\" href=\"print css\" media=\"print\" />\nYou can also minify your CSS files automatically to reduce their size during the build process and compress these files in the server where you host your web application Try to keep your CSS selectors as simple as possible and don't try to select more elements than necessary Take advantage of the cascading nature of CSS whenever possible Some styles will be inherited Preloading resources with rel=\"preload\" is another important technique Critical assets should be loaded first Remember that CSS animations can have an impact on performance Animating certain CSS properties, such as dimensions, position, and layout, triggers a process called \"reflow,\" during which the browser recalculates the position and geometry of certain elements on the page This requires a repaint, which is computationally expensive Therefore, it's recommended to reduce the number of CSS animations as much as possible or at least give the user an option to toggle them on or off And even though fonts can enhance the visual presentation of your web application, they can have an impact on performance Some fonts have large files, up to multiple megabytes Try to use two or three fonts at most and use web-safe fonts whenever possible You may also consider preloading the most important fonts to have them ready for quick use These are some of the most important and commonly used techniques for optimizing CSS in web development By incorporating them, you can optimize your website's performance to create a smooth user experience",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4270,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7e9d895bf7dcef00408.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1c6d5cb9c42fb7a369afb796eeb232a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7e9d895bf7dcef00408.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "an impact on performance Some fonts have large files, up to multiple megabytes Try to use two or three fonts at most and use web-safe fonts whenever possible You may also consider preloading the most important fonts to have them ready for quick use These are some of the most important and commonly used techniques for optimizing CSS in web development By incorporating them, you can optimize your website's performance to create a smooth user experience--questions--\n--text--\nWhat is the primary benefit of minifying CSS files --answers--\nImproved readability of the CSS code --feedback--\nThink about how minifying CSS affects the size of the CSS file Enhanced security for the website --feedback--\nThink about how minifying CSS affects the size of the CSS file Faster website loading times Better cross-browser compatibility --feedback--\nThink about how minifying CSS affects the size of the CSS file --video-solution--\n3\n--text--\nWhat attribute should you add to preload an asset --answers--\nload=\"reload\"\n--feedback--\nThink about how you can tell the browser that an asset is critical and should be prioritized rel=\"preload\"\nrel=\"load\"\n--feedback--\nThink about how you can tell the browser that an asset is critical and should be prioritized rel=\"pre\"\n--feedback--\nThink about how you can tell the browser that an asset is critical and should be prioritized --video-solution--\n2\n--text--\nWhich one of the following options is recommended for CSS optimization --answers--\nWriting complex CSS selectors --feedback--\nThink about which one of these options could reduce the time required to parse the CSS Having multiple complex animations --feedback--\nThink about which one of these options could reduce the time required to parse the CSS Loading multiple fonts simultaneously --feedback--\nThink about which one of these options could reduce the time required to parse the CSS Removing unnecessary styles --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4270,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7e9d895bf7dcef00408.md",
      "source_type": "git_repo"
    },
    "token_count": 371,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "102802ac94bbf66281238fb2f4be24db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f80313efe77e43182e86.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f80313efe77e43182e86\ntitle: What Are Some Techniques for Improving JavaScript Performance challengeType: 19\ndashedName: what-are-some-techniques-for-improving-javascript-performance\n--description--\nLet's review some of the most important techniques for improving JavaScript performance specifically You may find this surprising, but the first technique is using less JavaScript whenever possible If you're developing a simple static website, you may be able to do exactly the same without frameworks that rely on JavaScript You should also try to remove any unused JavaScript code and use simpler solutions, if possible For example, you may consider using built-in browser features instead of custom ones These built-in browser features include form validation, the browser's built-in video player, and CSS animations instead of custom JavaScript animations Use as few animations as possible Reduce the amount of DOM manipulation on your JavaScript code, since this is computationally expensive Splitting your JavaScript code into modules that perform critical and non-critical tasks is also helpful This way, you'll be able to preload the critical ones as soon as possible and defer the non-critical ones to render the page as fast as possible Pre-loading files does not guarantee that they will be available when you use them, but the download will start sooner, so the overall waiting time should be shorter Once your code is split into multiple files, you can minify them automatically during the build process to reduce their size and optimize their load time If an event listener is no longer necessary, you should remove it:\njs\nelement removeEventListener(\"mousemove\", handleMouseMove);\nIn this example, we remove the event listener for the mousemove event, so the handleMouseMove function is no longer called when the event is triggered If you keep the event listener, the program will continue performing calculations that are no longer necessary, affecting the overall performance This effect will be even more noticeable if you have multiple active event listeners simultaneously And since we're on the topic of events, it's recommended to use event delegation whenever possible This means that you don't need to set the event listeners on individual child elements You can set it directly on the parent and the event will bubble up until it finds a parent that can handle it Optimizing JavaScript is crucial for developing fast and responsive web applications In a real-world project, you'll constantly analyze the performance of your website to find areas for improvement --questions--\n--text--\nWhat is the primary benefit of minifying JavaScript files",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f80313efe77e43182e86.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bc5ef9db0e8537f17d3d0fd59774a6c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f80313efe77e43182e86.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "means that you don't need to set the event listeners on individual child elements You can set it directly on the parent and the event will bubble up until it finds a parent that can handle it Optimizing JavaScript is crucial for developing fast and responsive web applications In a real-world project, you'll constantly analyze the performance of your website to find areas for improvement --questions-- --text-- What is the primary benefit of minifying JavaScript files--answers--\nImproved readability of the JavaScript code --feedback--\nThink about how minification affects the size of the JavaScript file Enhanced security for the website --feedback--\nThink about how minification affects the size of the JavaScript file Faster website loading times Better cross-browser compatibility --feedback--\nThink about how minification affects the size of the JavaScript file --video-solution--\n3\n--text--\nWhat is the impact of using too many event listeners on performance --answers--\nIt can improve performance by making the code more responsive --feedback--\nThink about how event listeners can affect the browser's event loop It can degrade performance by consuming more memory and CPU resources It has no impact on performance --feedback--\nThink about how event listeners can affect the browser's event loop It can make the code more complex and harder to maintain --feedback--\nThink about how event listeners can affect the browser's event loop --video-solution--\n2\n--text--\nWhat is the goal of preloading critical JavaScript files and deferring non-critical JavaScript files --answers--\nTo improve the initial page load time To reduce the number of HTTP requests --feedback--\nThink about how to prioritize the loading of essential JavaScript files To minify the JavaScript code --feedback--\nThink about how to prioritize the loading of essential JavaScript files To optimize the order of CSS styles\n--feedback--\nThink about how to prioritize the loading of essential JavaScript files --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f80313efe77e43182e86.md",
      "source_type": "git_repo"
    },
    "token_count": 368,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d4f03294d0399099984022268d90d524",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7cf63fafe7d20270498.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f7cf63fafe7d20270498\ntitle: How Can You Use Performance Web APIs to Create Your Own Performance Measurement Tools challengeType: 19\ndashedName: how-can-you-use-performance-web-apis-to-create-your-own-performance-measurement-tools\n--description--\nWhile tools like Lighthouse and Chrome DevTools are great, sometimes you need custom insights tailored to your site That's where Performance Web APIs come in In this lecture, we'll break down how to use three key Web APIs to measure and analyze your website's speed But first, what are Performance Web APIs Performance Web APIs let developers track how efficiently a webpage loads and responds, directly from code These APIs allow you to measure page load times, track rendering and interaction delays and analyze JavaScript execution time With these APIs, you can build your own performance monitoring tools without relying on third-party software Let's explore three powerful Web APIs you can use today First up, performance now() This API gives you high-precision timestamps (in milliseconds) to measure how long different parts of your site take to load Let's say you want to measure how fast a function runs:\n```js\nconst start = performance now();\n// Run some code here\nconst end = performance now();\nconsole log(Execution time: ${end - start}ms);\n```\nThis is more accurate than using Date now() because it measures time in microseconds, avoiding clock drift issues You can use it to track script execution time, event response delays and animation performance Next, the Performance Timing API This API gives you a breakdown on every single stage of page loading, from DNS lookup to DOMContentLoaded Want to measure how long your page takes to fully load ```js\nlet [navigationTiming] = performance getEntriesByType(\"navigation\");\nif (navigationTiming instanceof PerformanceNavigationTiming) {\n// Calculate time from navigation start to DOM content loaded\nconst pageLoadTime =\nnavigationTiming domContentLoadedEventEnd - navigationTiming startTime;\nconsole log(\"DOM Content Loaded Time:\", pageLoadTime, \"ms\");\n}\n```\nKey metrics you can track with this API are DNS lookup time - or in other words the connection speed, Time to First Byte (TTFB) - or server response speed, and  DOMContentLoaded - or in other words, when the page is ready for interaction If your page load times are slow, this API pinpoints exactly where the delay happens And finally, let's talk about PerformanceObserver",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5449,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7cf63fafe7d20270498.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f1db83a6581dcce79098dedf65d194df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7cf63fafe7d20270498.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "navigationTiming startTime; console log(\"DOM Content Loaded Time:\", pageLoadTime, \"ms\"); } ``` Key metrics you can track with this API are DNS lookup time - or in other words the connection speed, Time to First Byte (TTFB) - or server response speed, and DOMContentLoaded - or in other words, when the page is ready for interaction If your page load times are slow, this API pinpoints exactly where the delay happens And finally, let's talk about PerformanceObserverThis API listens for performance events such as layout shifts, long tasks, and user interactions Want to monitor long-running JavaScript tasks ``js\nconst observer = new PerformanceObserver((list) => {\nlist getEntries() forEach((entry) => {\nconsole log(Long task detected: ${entry duration}ms`);\n});\n});\nobserver observe({ type: \"longtask\", buffered: true });\n```\nAnd what can this API track Well, it can track long tasks - or in other words, JavaScript that blocks rendering, layout shifts to detect UI jank, and First Input Delay (FID) - or how fast a page responds to user input If you want real-time performance tracking, this API is a game-changer So, which API should you use Here's a quick comparison:\n| Performance API        | Best For                                           |\n| :--------------------- | :------------------------------------------------- |\n| performance now()    | Precise timing of functions and scripts            |\n| Performance Timing API | Measuring full page load performance               |\n| Performance Observer   | Real-time monitoring of interactions and rendering |\nBy combining these APIs, you can build your own performance measurement tools and track exactly what matters for your site most --questions--\n--text--\nWhat is the main advantage of using performance now() over Date now() --answers--\nIt's more accurate and measures time in microseconds It works only on mobile devices and is not supported on desktops --feedback--\nThink about why precision matters when measuring speed It measures system memory usage, including the browser's memory footprint --feedback--\nThink about why precision matters when measuring speed It helps with CSS animations --feedback--\nThink about why precision matters when measuring speed --video-solution--\n1\n--text--\nWhich API can track long JavaScript tasks that slow down your site --answers--\nPerformance Timing API\n--feedback--\nThink about an API that listens for performance events in real-time Performance now()\n--feedback--\nThink about an API that listens for performance events in real-time",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5449,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7cf63fafe7d20270498.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "76d4adcc4fa83d3ce6e7464bf965e4a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7cf63fafe7d20270498.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "system memory usage, including the browser's memory footprint --feedback-- Think about why precision matters when measuring speed It helps with CSS animations --feedback-- Think about why precision matters when measuring speed --video-solution-- 1 --text-- Which API can track long JavaScript tasks that slow down your site --answers-- Performance Timing API --feedback-- Think about an API that listens for performance events in real-time Performance now() --feedback-- Think about an API that listens for performance events in real-timePerformance Observer\nPageSpeed Insights\n--feedback--\nThink about an API that listens for performance events in real-time --video-solution--\n3\n--text--\nWhat does the Performance Timing API help measure --answers--\nIndividual JavaScript function execution time --feedback--\nThink about an API that tracks every stage of page loading Full page load performance, including DNS lookup and TTFB User interactions like button clicks --feedback--\nThink about an API that tracks every stage of page loading The number of images on a webpage --feedback--\nThink about an API that tracks every stage of page loading --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5449,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-performance-in-web-applications\\67d2f7cf63fafe7d20270498.md",
      "source_type": "git_repo"
    },
    "token_count": 218,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8b29d5bc2c78f5f0057e21a6bfe1e6d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e9437536d762823fefab3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 687e9437536d762823fefab3\ntitle: What Are Some Shortcuts You Can Use in the Command Line to Speed Up Productivity challengeType: 19\ndashedName: what-are-some-shortcuts-you-can-use-in-the-command-line-to-speed-up-productivity\n--description--\nLet's learn about command line shortcuts you can use to speed up productivity Terminal and command line shortcuts can help you streamline your workflows and maximize your productivity For Linux and macOS, which can both trace their roots to Unix, many of these shortcuts will be the same But for Windows, there will be some differences The first shortcut is the up arrow key Pressing this key will allow you to cycle backwards through your command history, one command at a time The down arrow key, then, can be used to cycle forwards through your command history These two keys allow you to quickly cycle through the commands you have previously run to find one you need to run again Many shells will also offer an auto-complete feature, proposing commands based on what you have started to type The tab key can be used to fill in the rest of the suggestion, quickly populating your command line with the full syntax How these suggestions are generated will vary from shell to shell For example, in zsh these suggestions are based on your most recent command history But in PowerShell, they are based on commands, variables, and arguments that are available (with less weight on how recently they were used) Sometimes a command may result in a lot of output on your terminal This extra noise can get in the way, or become disruptive to your workflow In *nix based terminals found on Linux and macOS devices, you can press Control + L to clear the entire screen and start with a fresh clean prompt In PowerShell, you would need to run the cls command (which you can bind to a key combination like Control + L) If you need to interrupt a command to stop its execution, you can use Control + C to kill the process This will terminate the command and create a new prompt, allowing you to continue with whatever else you may need to work on For PowerShell users, Control + C is also used to copy text - and will only work to terminate a process when the context is not ambiguous (such as when there is no text selected to copy) The next couple of shortcuts are only available in *nix based terminals, and do not have a PowerShell alternative",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e9437536d762823fefab3.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9f74100b3c2d5fd98ee89685e4fefcbb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e9437536d762823fefab3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the command and create a new prompt, allowing you to continue with whatever else you may need to work on For PowerShell users, Control + C is also used to copy text - and will only work to terminate a process when the context is not ambiguous (such as when there is no text selected to copy) The next couple of shortcuts are only available in *nix based terminals, and do not have a PowerShell alternativeThere may be times when you need to multitask, allowing a process or command to run in the background while you work on another Pressing Control + Z places the current process in a background task and returns you to the command line, where you can continue your work When you need to shift focus back to the background task, you can use fg to restore it And finally, there may be commands you need to run twice in a row You can press the up arrow key to cycle backwards to the previously run command, but you can also type two exclamation points ( ) into the command line and hit enter - this will automatically run the last executed command Many terminals offer even more shortcuts, and I encourage you to read the documentation for your particular setup to find the shortcuts that work best for you But these basic universal shortcuts should serve as a great starting point for maximizing your productivity and becoming a terminal wizard --questions--\n--text--\nWhich key combination is used to clear the screen in *nix based terminals --answers--\nControl + C\n--feedback--\nThink about which shortcut creates a fresh, clean prompt Control + L\nControl + Z\n--feedback--\nThink about which shortcut creates a fresh, clean prompt The tab key\n--feedback--\nThink about which shortcut creates a fresh, clean prompt --video-solution--\n2\n--text--\nWhat happens when you press Control + Z in a *nix based terminal --answers--\nIt terminates the current process --feedback--\nThis shortcut allows you to multitask while a process runs It places the current process in the background It clears the screen --feedback--\nThis shortcut allows you to multitask while a process runs It cycles through command history --feedback--\nThis shortcut allows you to multitask while a process runs --video-solution--\n2\n--text--\nWhich of the following can be used to quickly run the last executed command in a *nix based terminal --answers--\nControl + L\n--feedback--\nThis involves typing a specific character twice The tab key\n--feedback--\nThis involves typing a specific character twice",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e9437536d762823fefab3.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "054ed07b9ab3efbc37c018a75bcd533f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e9437536d762823fefab3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "It clears the screen --feedback-- This shortcut allows you to multitask while a process runs It cycles through command history --feedback-- This shortcut allows you to multitask while a process runs --video-solution-- 2 --text-- Which of the following can be used to quickly run the last executed command in a *nix based terminal --answers-- Control + L --feedback-- This involves typing a specific character twice The tab key --feedback-- This involves typing a specific character twiceControl + C\n--feedback--\nThis involves typing a specific character twice --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4766,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e9437536d762823fefab3.md",
      "source_type": "git_repo"
    },
    "token_count": 117,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ae05291f440a78b361db54e9ca706065",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e910842f3322350bc8d93.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 687e910842f3322350bc8d93\ntitle: What Is the Terminal, and How Does It Differ from the Command Line challengeType: 19\ndashedName: what-is-the-terminal-and-how-does-it-differ-from-the-command-line\n--description--\nLet's learn about the terminal, and how it differs from the command line The command line is a basic text input interface which allows a user to enter \"commands\", usually in the form of a series of characters, and submit or execute them, usually by pressing the \"Enter\" key You will most-commonly see command line interfaces within a terminal A terminal is a special application that offers a command line interface to perform system-level commands beyond the basic read/write operations You may also hear about \"terminal emulators\", which are essentially applications that wrap a basic terminal interface to offer additional features or functionality But for most general purposes, you are probably safe to refer to these as \"terminals\" as well Finally, we will also need to talk about \"shells\" A shell is the software that wraps the command line and interprets your inputs as commands, returning the output But how can you access the terminal on your system Well, if you are running a modern version of Windows, you will likely have two different options Windows offers two distinct shell applications out of the box: Powershell and Command Prompt Both of these shells come with their own terminal applications (which share the name of the respective shell), so you can use your application menu to start either a Powershell terminal or a Command Prompt terminal Windows also offers a relatively new and modernized terminal emulator aptly named Microsoft Terminal You can install this application from the Windows Store, and are then able to launch it just like you would your Powershell or Command Prompt terminals The advantage of the Microsoft Terminal is that it allows you to access both the Powershell and Command Prompt shells from the same application, as well as your respective Linux shell if you have configured Windows Subsystems for Linux MacOS offers a terminal that is aptly named \"Terminal\" You can access this through your spotlight search, or through your application launcher MacOS also offers support for third-party terminal emulators, such as iTerm or Ghostty You can install these applications from their home pages On Linux, the default terminal (and how you launch it) depends highly on the distro and desktop environment you use There's a lot of support for third-party terminal emulators, too",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5183,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e910842f3322350bc8d93.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "20dbc415073e95c11e4b81bb08d38a32",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e910842f3322350bc8d93.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "for Linux MacOS offers a terminal that is aptly named \"Terminal\" You can access this through your spotlight search, or through your application launcher MacOS also offers support for third-party terminal emulators, such as iTerm or Ghostty You can install these applications from their home pages On Linux, the default terminal (and how you launch it) depends highly on the distro and desktop environment you use There's a lot of support for third-party terminal emulators, tooFor example, you could set up kitty in Arch Linux - and you can launch it with an application manager such as wofi Linux arguably has the largest variety of terminal applications to choose from Most of these can be installed through your distro's package manager The distinction between \"terminal\", \"shell\", and \"command line\" may seem rather pedantic at times And for the most part, the terms can generally be used interchangeably But it is important to know that they have specific meanings, and what each of those meanings are --questions--\n--text--\nWhat is a terminal --answers--\nA basic text input interface for entering commands --feedback--\nThink about how the lecture distinguishes between different components of command-line interfaces A special application that offers a command line interface for system-level commands Software that removes all user inputs in the command line --feedback--\nThink about how the lecture distinguishes between different components of command-line interfaces The Enter key used to submit commands --feedback--\nThink about how the lecture distinguishes between different components of command-line interfaces --video-solution--\n2\n--text--\nWhich of the following best describes a shell --answers--\nA hardware component that displays text input --feedback--\nThe lecture explains what interprets your commands when you type them A special application that allows system-level commands --feedback--\nThe lecture explains what interprets your commands when you type them Software that wraps the command line and interprets inputs as commands A third-party terminal emulator --feedback--\nThe lecture explains what interprets your commands when you type them --video-solution--\n3\n--text--\nOn Windows, what advantage does Microsoft Terminal offer over traditional options --answers--\nIt's the only way to access the command line on Windows --feedback--\nConsider what functionality Microsoft Terminal provides that the traditional Windows terminals don't It allows access to both Powershell and Command Prompt shells from the same application It's the default terminal on all Windows systems --feedback--\nConsider what functionality Microsoft Terminal provides that the traditional Windows terminals don't It replaces the need for a shell entirely",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5183,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e910842f3322350bc8d93.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0419fea3c01b427d550cfde0041448b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e910842f3322350bc8d93.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "advantage does Microsoft Terminal offer over traditional options --answers-- It's the only way to access the command line on Windows --feedback-- Consider what functionality Microsoft Terminal provides that the traditional Windows terminals don't It allows access to both Powershell and Command Prompt shells from the same application It's the default terminal on all Windows systems --feedback-- Consider what functionality Microsoft Terminal provides that the traditional Windows terminals don't It replaces the need for a shell entirely--feedback--\nConsider what functionality Microsoft Terminal provides that the traditional Windows terminals don't --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5183,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e910842f3322350bc8d93.md",
      "source_type": "git_repo"
    },
    "token_count": 110,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ea05d7969b63fe61456feae1ef98493e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-recursion-and-the-call-stack\\6733b02d1e556005a544c5e3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733b02d1e556005a544c5e3\ntitle: What Is Recursion, and How Does It Work challengeType: 19\ndashedName: what-is-recursion-and-how-does-it-work\n--description--\nLet's learn how recursion works in JavaScript Recursion is a complicated feature that allows you to call a function repeatedly until a base-case is reached Unlike a traditional loop, recursion allows you to handle something with an unknown depth, such as deeply nested objects/arrays, or a file tree But you can also use it for more basic tasks, such as counting down from a given number Let's construct a function to do exactly that We’ll call our function recursiveCountdown, and it needs to accept a number We’ll have it print this number to the console:\njs\nconst recursiveCountdown = (number) => {\nconsole log(number);\n};\nNow if we call this and pass the number 5, we’ll see the number print to our terminal But nothing else happens – and the number 5 certainly isn’t a countdown Before we start building the recursive portion of our function, we need to establish our base case first If you don’t have a base case established, your code will run until it exceeds your memory allocation and crashes ```js\nconst recursiveCountdown = (number) => {\nif (number < 1) {\nreturn;\n}\nconsole log(number);\n};\nrecursiveCountdown(5);\n```\nFor our base case, we want the countdown to stop if the number is less than 1 When we hit that base-case, we can return to break out of the function execution Now that we’ve safely prepared a base-case, we can set up the recursion The key point that makes a function recursive is that it calls itself in its execution In this case, we want to call the function after we print the number But in order to count down, our new number needs to be one less:\n```js\nconst recursiveCountdown = (number) => {\nif (number < 1) {\nreturn;\n}\nconsole log(number);\nrecursiveCountdown(number - 1);\n};\nrecursiveCountdown(5); //\n```\nThis would log the numbers 5, 4, 3, 2, and 1 to the console We do get our five numbers But what if we wanted to count up instead",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-recursion-and-the-call-stack\\6733b02d1e556005a544c5e3.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "d396f1c81c2eca69f293325bfc41b7cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-recursion-and-the-call-stack\\6733b02d1e556005a544c5e3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "want to call the function after we print the number But in order to count down, our new number needs to be one less: ```js const recursiveCountdown = (number) => { if (number < 1) { return; } console log(number); recursiveCountdown(number - 1); }; recursiveCountdown(5); // ``` This would log the numbers 5, 4, 3, 2, and 1 to the console We do get our five numbers But what if we wanted to count up insteadRather than writing an entirely new function, we can swap the order of our log and our recursive call:\n```js\nconst recursiveCountdown = (number) => {\nif (number < 1) {\nreturn;\n}\nrecursiveCountdown(number - 1);\nconsole log(number);\n};\nrecursiveCountdown(5);\n```\nThis would log the numbers 1, 2, 3, 4, and 5 to the console But why does that work Well, to understand this you need to understand the call stack The call stack is how JavaScript tracks and resolves function calls The stack functions as a last-in-first-out queue of sorts To understand this better, let’s add some logging to our function:\n``js\nconst recursiveCountdown = (number) => {\nconsole log(Function execution started for number: ${number});\nif (number < 1) {\nconsole log(Base case reached, begin resolving stack);\nreturn;\n}\nconsole log(Calling recursiveCountdown with number: ${number - 1});\nrecursiveCountdown(number - 1);\nconsole log(Function execution completed for number: ${number}`);\n};\nrecursiveCountdown(5);\n```\nWe’ve added four key statements here The first log runs when a function call begins executing The third log runs just before the recursive function is called And the fourth log runs when the function execution has ended",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-recursion-and-the-call-stack\\6733b02d1e556005a544c5e3.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "a49c55d993faeea9828920c68f4940ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-recursion-and-the-call-stack\\6733b02d1e556005a544c5e3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "for number: ${number}); if (number < 1) { console log(Base case reached, begin resolving stack); return; } console log(Calling recursiveCountdown with number: ${number - 1}); recursiveCountdown(number - 1); console log(Function execution completed for number: ${number}`); }; recursiveCountdown(5); ``` We’ve added four key statements here The first log runs when a function call begins executing The third log runs just before the recursive function is called And the fourth log runs when the function execution has endedThe result is:\nmd\nFunction execution started for number: 5\nCalling recursiveCountdown with number: 4\nFunction execution started for number: 4\nCalling recursiveCountdown with number: 3\nFunction execution started for number: 3\nCalling recursiveCountdown with number: 2\nFunction execution started for number: 2\nCalling recursiveCountdown with number: 1\nFunction execution started for number: 1\nCalling recursiveCountdown with number: 0\nFunction execution started for number: 0\nBase case reached, begin resolving stack\nFunction execution completed for number: 1\nFunction execution completed for number: 2\nFunction execution completed for number: 3\nFunction execution completed for number: 4\nFunction execution completed for number: 5\nBut how does this happen Well, this is where the call stack comes in to play When we call recursiveCountdown(5), that function call is added to the call stack When that function call reaches the point where it needs to call recursiveCountdown(4), it has to stop and wait for that result Meanwhile, our recursiveCountdown(4) gets added to the call stack, on top of the recursiveCountdown(5) When that function call reaches the point where it needs to call recursiveCountdown(3), it has to stop and wait for that result Meanwhile, our recursiveCountdown(3) gets added to the call stack, on top of the recursiveCountdown(4) When that function call reaches the point where it needs to call recursiveCountdown(2), it has to stop and wait for that result Meanwhile, our recursiveCountdown(2) gets added to the call stack, on top of the recursiveCountdown(3) When that function call reaches the point where it needs to call recursiveCountdown(1), it has to stop and wait for that result",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-recursion-and-the-call-stack\\6733b02d1e556005a544c5e3.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "3ebf7e8d417b781a29320f178057ded7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-recursion-and-the-call-stack\\6733b02d1e556005a544c5e3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "wait for that result Meanwhile, our recursiveCountdown(3) gets added to the call stack, on top of the recursiveCountdown(4) When that function call reaches the point where it needs to call recursiveCountdown(2), it has to stop and wait for that result Meanwhile, our recursiveCountdown(2) gets added to the call stack, on top of the recursiveCountdown(3) When that function call reaches the point where it needs to call recursiveCountdown(1), it has to stop and wait for that resultMeanwhile, our recursiveCountdown(1) gets added to the call stack, on top of the recursiveCountdown(2) And finally, when that function call reaches the point where it needs to call recursiveCountdown(0), it has to stop and wait for that result Meanwhile, our recursiveCountdown(0) gets added to the call stack, on top of the recursiveCountdown(1) But recursiveCountdown(0) doesn’t call another function – it hits our base case, where it returns early Because the execution of that function has ended, the function call can be considered “resolved” When the call is resolved, it’s removed from the stack Now our recursiveCountdown(1) is no longer waiting on that call – it’s at the top of the stack and can resume executing recursiveCountdown(1) resolves, is removed from the stack, and allows recursiveCountdown(2) to resume execution recursiveCountdown(2) resolves, is removed from the stack, and allows recursiveCountdown(3) to resume execution recursiveCountdown(3) resolves, is removed from the stack, and allows recursiveCountdown(4) to resume execution recursiveCountdown(4) resolves, is removed from the stack, and allows recursiveCountdown(5) to resume execution And recursiveCountdown(5) resolves and is removed from the stack Our call stack is now empty, so the recursion is complete This is a basic overview of how recursion works in JavaScript It’s a complicated concept, and you should play around with some code and log statements until you’re comfortable with the behavior of the call stack For a little fun fact, we talked about how a lack of a base-case can cause your code to crash when it runs out of memory This is because the recursion keeps piling more and more function calls into the call stack until the stack overflows Just like the name of the popular programming community",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-recursion-and-the-call-stack\\6733b02d1e556005a544c5e3.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "4e519200b3e0185b993deda95daa39ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-recursion-and-the-call-stack\\6733b02d1e556005a544c5e3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and you should play around with some code and log statements until you’re comfortable with the behavior of the call stack For a little fun fact, we talked about how a lack of a base-case can cause your code to crash when it runs out of memory This is because the recursion keeps piling more and more function calls into the call stack until the stack overflows Just like the name of the popular programming community--questions--\n--text--\nWhat is the primary purpose of a base case in a recursive function --answers--\nTo initiate the recursive calls --feedback--\nThe lecture mentions what happens if you don't have a base case established To prevent infinite recursion and stack overflow To improve performance of the function --feedback--\nThe lecture mentions what happens if you don't have a base case established To handle error conditions --feedback--\nThe lecture mentions what happens if you don't have a base case established --video-solution--\n2\n--text--\nIn the context of recursion, what is the call stack used for --answers--\nTo store local variables --feedback--\nThe lecture explains how the call stack manages function calls during recursion To track and resolve function calls To optimize recursive functions --feedback--\nThe lecture explains how the call stack manages function calls during recursion To handle asynchronous operations --feedback--\nThe lecture explains how the call stack manages function calls during recursion --video-solution--\n2\n--text--\nWhat happens when a recursive function call reaches its base case --answers--\nIt starts a new recursive cycle --feedback--\nThink about how the function behaves when it hits the condition that stops the recursion It throws an error --feedback--\nThink about how the function behaves when it hits the condition that stops the recursion It returns and allows the previous call to resume execution It continues to call itself indefinitely --feedback--\nThink about how the function behaves when it hits the condition that stops the recursion --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8881,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-recursion-and-the-call-stack\\6733b02d1e556005a544c5e3.md",
      "source_type": "git_repo"
    },
    "token_count": 375,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "70e9a9dc3d6f1029696030964802f564",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d1d844d84c8b540297bbe4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d1d844d84c8b540297bbe4\ntitle: What Is the Overall Purpose of Testing Your Applications challengeType: 19\ndashedName: what-is-the-overall-purpose-of-testing-your-applications\n--description--\nUp until this point, you have been building tons of small projects in languages like HTML, CSS, JavaScript, and more But how do you know if your projects are working correctly One option is to do what is called manual testing This is where a tester will go through each part of the application and test out all of the different features to make sure it works correctly If any bugs are uncovered in the testing process, the tester will report those bugs back to the software team so they can be fixed While it is important to manually test out your applications, often times it will not be enough Real-world applications involve many components and services and can often be complex in nature So only relying on manual testing will result in many bugs lying beneath the surface that can hurt the usability and maintainability of an application This is where automated testing comes in You can write separate test code to check whether your application behaves as expected, without needing to manually click through it Both manual and automated tests can be grouped into different types, depending on what they are testing Over the next few lectures, we are going to cover the different types of testing used in the industry like unit testing, end-to-end testing, functional testing and more Writing tests for your applications will help ensure that your code is doing what it is supposed to be doing It is important that you start to familiarize yourself with the basics of testing because it will be something that you will need in a developer job --questions--\n--text--\nWhy is it important to test your applications --answers--\nYou want to ensure that your applications look professional --feedback--\nThink about how your application is expected to work You want to ensure that your applications work as expected You want to ensure that your applications are responsive --feedback--\nThink about how your application is expected to work You want to ensure that your applications run slower --feedback--\nThink about how your application is expected to work --video-solution--\n2\n--text--\nWhat is manual testing --answers--\nThis involves running security audits on your site to ensure there are no security risks in your application --feedback--\nReview the beginning of the lecture where this was mentioned This involves only testing your JavaScript and CSS files to ensure there are no bugs in them",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3570,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d1d844d84c8b540297bbe4.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "959021449fc8ffc405e2c700edcb35bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d1d844d84c8b540297bbe4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "expected to work You want to ensure that your applications run slower --feedback-- Think about how your application is expected to work --video-solution-- 2 --text-- What is manual testing --answers-- This involves running security audits on your site to ensure there are no security risks in your application --feedback-- Review the beginning of the lecture where this was mentioned This involves only testing your JavaScript and CSS files to ensure there are no bugs in them--feedback--\nReview the beginning of the lecture where this was mentioned This involves running accessibility audits with automated tools to check for any accessibility errors --feedback--\nReview the beginning of the lecture where this was mentioned This involves going through your application and making sure all of the features and sections work as expected --video-solution--\n4\n--text--\nWhich of the following is NOT a type of testing used in the industry --answers--\nFisher Yates testing\nEnd-to-end testing\n--feedback--\nReview the end of the lecture where this was mentioned Unit testing\n--feedback--\nReview the end of the lecture where this was mentioned Functional testing\n--feedback--\nReview the end of the lecture where this was mentioned --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3570,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d1d844d84c8b540297bbe4.md",
      "source_type": "git_repo"
    },
    "token_count": 235,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "dc7d6cd65e815e15a71dd2f896abe100",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e947ae3ea7d2867c3d0e1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 687e947ae3ea7d2867c3d0e1\ntitle: What Are Some Command Options and Flags challengeType: 19\ndashedName: what-are-some-command-options-and-flags\n--description--\nLet's learn about command options and flags In a previous lecture, you learned about passing arguments to commands such as touch readme md Options, or flags, are special arguments you can pass to a command that affect the way it behaves The two terms are used interchangeably, though \"flags\" tends to be used more specifically for options that serve as an on/off toggle Options are typically prefixed with one or two hyphen (-) symbols, which helps provide a visual distinction between an option and an argument First, let's look at the two-hyphen, or \"long form\", syntax Many applications, such as ls, accept a --version flag, which prints the current version of the application to the terminal instead of running the application's commands Many applications also offer a --help flag, which prints instructions on how to use the application The one-hyphen, or \"short form\", syntax typically uses options that are a single letter For example, the -a flag with ls lists all files, including hidden files that start with a dot ( ), like env The advantage of these short options is that you can chain multiple flags together Instead of ls --all --human-readable --size you can use the single letters all at once with ls -ahs Some options expect a value to be passed to them When using long-form options, you typically need to use an equal sign In this syntax, the value is directly concatenated to the option with the equal (=) symbol Here is an example of modifying the behavior of ls to either include or exclude colors:\nbash\nls --color=never\nWhen using short-form options, you typically separate the value with a space For example, here are the long and short form options for setting the width of the ls result:\nbash\nls -w 50\nbash\nls --width=50\nNotice how the short form uses -w 50, while the long form uses --width=50 This distinction is important to know, to avoid passing an option value as a positional argument instead But if you are ever unsure, remember you can usually use the --help flag to see the expected syntax for options",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3926,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e947ae3ea7d2867c3d0e1.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "982e1984cba4d40d342cc35aaee93661",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e947ae3ea7d2867c3d0e1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "example, here are the long and short form options for setting the width of the ls result: bash ls -w 50 bash ls --width=50 Notice how the short form uses -w 50, while the long form uses --width=50 This distinction is important to know, to avoid passing an option value as a positional argument instead But if you are ever unsure, remember you can usually use the --help flag to see the expected syntax for options--questions--\n--text--\nWhat is the difference between \"long form\" and \"short form\" syntax for command options --answers--\nLong form uses a single hyphen while short form uses two hyphens --feedback--\nThink about the number of hyphens used in each form Long form uses two hyphens while short form uses a single hyphen Long form is only used for version information --feedback--\nThink about the number of hyphens used in each form There is no difference between the two forms --feedback--\nThink about the number of hyphens used in each form --video-solution--\n2\n--text--\nWhat is the advantage of using short form options like -ahs --answers--\nThey require less memory to process --feedback--\nConsider how multiple flags can be combined in short form They are easier to remember --feedback--\nConsider how multiple flags can be combined in short form Multiple options can be chained together They always work better than long form options --feedback--\nConsider how multiple flags can be combined in short form --video-solution--\n3\n--text--\nWhen using a long-form option that requires a value, what syntax is typically used --answers--\n--option value\n--feedback--\nRemember the example of setting width with the long form option --option=value\n-o value\n--feedback--\nRemember the example of setting width with the long form option -o=value\n--feedback--\nRemember the example of setting width with the long form option --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3926,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e947ae3ea7d2867c3d0e1.md",
      "source_type": "git_repo"
    },
    "token_count": 392,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4ae10c300df76fab008c4b5a04d87fce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e944b821130283dc83b2e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 687e944b821130283dc83b2e\ntitle: What Is Bash, and What Are Some Basic Commands challengeType: 19\ndashedName: what-is-bash-and-what-are-some-bash-commands\n--description--\nLet's learn about Bash and some of its basic commands Bash stands for Bourne Again SHell, and is arguably the most common shell you will encounter in Unix-like environments As such, it can be very beneficial to understand how to navigate this shell and use the common commands The first command is pwd, which prints the current working directory to the terminal The \"working directory\" refers to the directory the terminal is currently pointed at, which is an important thing to know for many of these other commands It is entirely possible that your terminal is pointed to the wrong directory The cd command allows you to change directories You can specify an absolute path, prefixed with a forward slash (/), a relative path with no prefix, and use the double-dot ( ) syntax to move up to the parent directory The next command is ls, which lists the contents of your current working directory This is helpful to see if a file or folder exists in your directory The ls command also takes flags to show hidden files (the -a flag), file permissions (the -l flag), and other features You will learn more about command flags in the next lecture You can also use less or cat to view the contents of a file What if the directory does not contain the file or folder you need There are commands called mkdir and touch that allow you to create them mkdir creates a new directory, or folder, and touch creates a new file Both of these commands accept the name of the file or folder you want to create For example, touch readme md creates a new Markdown file named readme md Maybe your new file should not have been named readme md, but it should have been readthis md Thankfully, the mv command allows you to move (or rename) a file It takes the old file name and the new file name The rm command allows you to remove (or delete) a file, and with the -r flag will delete a directory Sometimes a file might be protected, and you'll need to include the -f flag The cp command can be used to copy a file or directory to a new location",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4870,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e944b821130283dc83b2e.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "1b70444ed68bba156d96923caa404f41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e944b821130283dc83b2e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "been readthis md Thankfully, the mv command allows you to move (or rename) a file It takes the old file name and the new file name The rm command allows you to remove (or delete) a file, and with the -r flag will delete a directory Sometimes a file might be protected, and you'll need to include the -f flag The cp command can be used to copy a file or directory to a new locationUnlike the mv command, the cp command does not remove the original file - and in order to copy a directory, you'll need to pass the -r flag The echo command can be thought of as the Bash equivalent of a console log() or print() function echo takes a string argument, wrapped in quotes, and prints it to the terminal This might seem silly to run in the terminal, just to get text back in the terminal, but you can actually chain echo to a control symbol The > symbol allows you to specify a filename to create or overwrite with the new string, like echo \"Naomi was here \" > readme md, and the >> symbol will append to the file There are many more Bash commands available to you, such as head, tail, chown, and chmod It would be impossible to cover them all in this lecture But you can use the man command to see the manual or help page for nearly any command You'll likely remember the commands you use most frequently And for the rest, you can always check the man page --questions--\n--text--\nWhat does the pwd command do in Bash --answers--\nChanges directories --feedback--\nThink about what information this command provides to help you navigate Prints the current working directory Creates a new file --feedback--\nThink about what information this command provides to help you navigate Lists directory contents --feedback--\nThink about what information this command provides to help you navigate --video-solution--\n2\n--text--\nWhich command would you use to create a new file called notes txt --answers--\nmkdir notes txt\n--feedback--\nThe lecture mentions a specific command for creating new files cd notes txt\n--feedback--\nThe lecture mentions a specific command for creating new files touch notes txt\nls notes txt\n--feedback--\nThe lecture mentions a specific command for creating new files --video-solution--\n3\n--text--\nIf you wanted to rename a file from oldname txt to newname txt, which command would you use --answers--\nrm oldname txt newname",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4870,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e944b821130283dc83b2e.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "291df415f0c54df9ff29ee705b921e08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e944b821130283dc83b2e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "file called notes txt --answers-- mkdir notes txt --feedback-- The lecture mentions a specific command for creating new files cd notes txt --feedback-- The lecture mentions a specific command for creating new files touch notes txt ls notes txt --feedback-- The lecture mentions a specific command for creating new files --video-solution-- 3 --text-- If you wanted to rename a file from oldname txt to newname txt, which command would you use --answers-- rm oldname txt newnametxt\n--feedback--\nThe lecture mentions that this command can be used for both moving and renaming files mv oldname txt newname txt\ntouch newname txt\n--feedback--\nThe lecture mentions that this command can be used for both moving and renaming files cd oldname txt newname txt\n--feedback--\nThe lecture mentions that this command can be used for both moving and renaming files --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4870,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-command-line-and-working-with-bash\\687e944b821130283dc83b2e.md",
      "source_type": "git_repo"
    },
    "token_count": 181,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a6a4a34b83ba9056f9b0b843c249cf44",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff33452ce69ea169c872.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2ff33452ce69ea169c872\ntitle: What Is Functional Testing, and How Does It Differ from Unit Testing challengeType: 19\ndashedName: what-is-functional-testing-and-how-does-it-differ-from-unit-testing\n--description--\nIn prior lectures, you learned how to test small units of code through unit testing Well, unit testing is part of functional testing Functional testing checks if the features and functions of the application work as expected In this lecture, we will take a look at the differences between functional and non-functional testing The goal of functional testing is to test the system as a whole against multiple scenarios to ensure that the system works as expected An example of functional testing would be smoke testing Smoke testing is where you perform a preliminary check on the system for basic or critical issues before more extensive testing is done In contrast, non-functional testing focuses on things like performance and reliability A real test scenario for functional testing would be a user login A user should be able to log in to the application with their username and password If successful, they should be able to access their account information If there is an issue, then that error needs to be handled properly When you are writing tests, you need to account for all types of success and failure scenarios An example of non-functional testing would be to test the performance of your application under different network conditions In a future lecture, you will learn more about performance testing The reasons why functional testing is so important is because you want to identify bugs early on in your application You also want to make sure that your application meets the requirements that were laid out at the beginning of the planning phase Lastly, you want to ensure that your users have a good user experience Users should not struggle to use your application or be blocked by broken features and system failures --questions--\n--text--\nWhat is functional testing --answers--\nThis tests for accessibility issues only and ensures there is 100% test coverage --feedback--\nRefer to the beginning of the lecture where this was discussed This tests for performance issues and ensures the application performance is strong --feedback--\nRefer to the beginning of the lecture where this was discussed This tests the system as a whole to ensure that the system works as expected This tests for CSS issues only and ensures there is 100% test coverage --feedback--\nRefer to the beginning of the lecture where this was discussed --video-solution--\n3\n--text--\nWhich of the following is an example of non-functional testing",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3800,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff33452ce69ea169c872.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9767f5220fad5aebe023cd2cf0966c4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff33452ce69ea169c872.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "tests for performance issues and ensures the application performance is strong --feedback-- Refer to the beginning of the lecture where this was discussed This tests the system as a whole to ensure that the system works as expected This tests for CSS issues only and ensures there is 100% test coverage --feedback-- Refer to the beginning of the lecture where this was discussed --video-solution-- 3 --text-- Which of the following is an example of non-functional testing--answers--\nTesting the CSS of your application to make sure the styles look correct --feedback--\nRefer to the end of the lecture where this was discussed Testing the HTML of your application to ensure there are no bugs --feedback--\nRefer to the end of the lecture where this was discussed Testing the JavaScript files in your application to ensure they only use arrow functions --feedback--\nRefer to the end of the lecture where this was discussed Testing the performance of your application under different network conditions --video-solution--\n4\n--text--\nWhich of the following is an example of functional testing --answers--\nAgile testing\n--feedback--\nRefer to the beginning of the lecture where this was discussed Regex testing\n--feedback--\nRefer to the beginning of the lecture where this was discussed Smoke testing\nClass testing\n--feedback--\nRefer to the beginning of the lecture where this was discussed --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3800,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff33452ce69ea169c872.md",
      "source_type": "git_repo"
    },
    "token_count": 268,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "cd4c73de41bb50a1fccfb7718eccd6c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff4231359d9f21d1437a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2ff4231359d9f21d1437a\ntitle: What Is End-to-End Testing challengeType: 19\ndashedName: what-is-end-to-end-testing\n--description--\nEnd-to-end testing, or E2E for short, tests real-world scenarios from the user's perspective Examples of E2E testing scenarios include testing the registration and login process or testing the checkout for an e-commerce site To better understand how end-to-end testing works, let's take a look at a real-world example from the freeCodeCamp codebase This example uses Playwright, a popular end-to-end testing framework developed by Microsoft Inside the freeCodeCamp codebase, there is a directory called e2e which holds tests for donations, certifications, exams and more Inside the directory, there is a donate-page-donor spec ts file which has tests for the authenticated donor supporter page The first step is to navigate to the donation page as a demo user who is already a supporter:\njs\ntest beforeEach(async ({ page }) => {\nexecSync(\"node /tools/scripts/seed/seed-demo-user --set-true isDonating\");\nawait page goto(\"/donate\");\n});\nSince there are multiple tests in this file, the beforeEach hook will run before each of the tests Once the user is on the donation page, they will see a thank you message with suggestions on how to support freeCodeCamp further Here are just a few of the tests to check for some of the text found on the donation page:\n```js\ntest(\"should render the donate page correctly\", async ({ page }) => {\nawait expect(\npage getByText(\"Thank you for your continued support\")\n) toBeVisible();\nawait expect(\npage getByText(\n\"Your contributions are crucial in creating resources that empower millions of people to learn new skills and support their families \"\n)\n) toBeVisible(); });\n```\nThere are also tests to check that the donor has a supporter link in the menu bar, as well as a special stylized border around their avatar to indicate they are a supporter:\n```js\ntest(\"The menu should have a supporters link\", async ({ page }) => {\nconst menuButton = page getByTestId(\"header-menu-button\");\nconst menu = page getByTestId(\"header-menu\");\nawait expect(menuButton) toBeVisible();\nawait menuButton click();\nawait expect(menu) toBeVisible();\nawait expect(page getByRole(\"link\", { name: \"Supporters\" }))",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4562,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff4231359d9f21d1437a.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d22c523ac3de8f03459a66ec90105458",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff4231359d9f21d1437a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "toBeVisible(); }); ``` There are also tests to check that the donor has a supporter link in the menu bar, as well as a special stylized border around their avatar to indicate they are a supporter: ```js test(\"The menu should have a supporters link\", async ({ page }) => { const menuButton = page getByTestId(\"header-menu-button\"); const menu = page getByTestId(\"header-menu\"); await expect(menuButton) toBeVisible(); await menuButton click(); await expect(menu) toBeVisible(); await expect(page getByRole(\"link\", { name: \"Supporters\" }))toBeVisible();\n});\ntest(\"The Avatar should have a special border for donors\", async ({ page }) => {\nconst container = page locator(\" avatar-container\");\nawait expect(container) toHaveClass(\"avatar-container gold-border\");\n});\n```\nBy having these types of detailed tests, you can increase the test coverage for your application beyond just unit tests End-to-end tests also help ensure that your application behaves correctly, and is predictable for users Examples of other end-to-end testing tools include Cypress, Selenium, and Puppeteer While end-to-end testing is important, it is expensive because it is time-consuming to set up, design, and maintain E2E tests are great for critical user flows, while unit tests are great for testing small units in the application --questions--\n--text--\nWhich of the following is NOT an example of a commonly used E2E testing tool --answers--\nCypress\n--feedback--\nRefer to the end of the lecture where this was discussed Selenium\n--feedback--\nRefer to the end of the lecture where this was discussed Agile\nPuppeteer\n--feedback--\nRefer to the end of the lecture where this was discussed --video-solution--\n3\n--text--\nWhich of the following is a popular end-to-end testing framework developed by Microsoft --answers--\nPlaywright\nJava\n--feedback--\nRefer to the beginning of the lecture where this was discussed Angular\n--feedback--\nRefer to the beginning of the lecture where this was discussed JUnit\n--feedback--\nRefer to the beginning of the lecture where this was discussed --video-solution--\n1\n--text--\nWhich of the following is a commonly used test scenario for end-to-end tests --answers--\nTesting the validity of CSS code --feedback--\nRefer to the beginning of the lecture where this was discussed Testing the performance for an application --feedback--\nRefer to the beginning of the lecture where this was discussed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4562,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff4231359d9f21d1437a.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a8bf7f44ddf80472b8a05f10738e2644",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff4231359d9f21d1437a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to the beginning of the lecture where this was discussed JUnit --feedback-- Refer to the beginning of the lecture where this was discussed --video-solution-- 1 --text-- Which of the following is a commonly used test scenario for end-to-end tests --answers-- Testing the validity of CSS code --feedback-- Refer to the beginning of the lecture where this was discussed Testing the performance for an application --feedback-- Refer to the beginning of the lecture where this was discussedTesting the validity of HTML code --feedback--\nRefer to the beginning of the lecture where this was discussed Testing the user login process --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4562,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff4231359d9f21d1437a.md",
      "source_type": "git_repo"
    },
    "token_count": 125,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "60a0c03236600c99c62c9d51d746bd12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff5f14f6ce9f6d3cbe22.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2ff5f14f6ce9f6d3cbe22\ntitle: What Is Usability Testing, and What Does the Process Look Like challengeType: 19\ndashedName: what-is-usability-testing-and-what-does-the-process-look-like\n--description--\nUsability testing is when you have real users interacting with the application to discover if there are any design, user experience, or functionality issues in the app This type of testing is important because this feedback will help ensure that the application meets the needs of the users The four common types of usability testing are explorative, comparative, assessment and validation testing Let's first start with explorative usability testing This type of testing involves users interacting with the different features of the application to better understand how they work The goal here is to identify any potential issues in the application so they can be addressed early on and resolved The second type of usability testing is comparative testing This is where you compare your application's user experience with similar applications in the marketplace The goal is to see where your application falls short compared to the competition so those areas can be improved on The third type of usability testing is assessment testing This is where you study how intuitive the application is to use and if there are any major blockers for users This type of testing will result in reduced costs and headaches once the application is live to thousands or even millions of users down the line The last type of usability testing is validation testing This is where you identify any major issues that will prevent the user from using the application effectively This type of testing usually happens after the initial development stage and just before the final release of the application There are many tools out there to assist with usability testing, but here are a few popular ones to be aware of:\nLoop11\nMaze\nUserbrain\nUserTesting and\nUXTweak\nIt is important to note that functional testing is not the same as usability testing Functional testing focuses on the functionality of the application while usability testing focuses on the intuitiveness of the application by users --questions--\n--text--\nWhich of the following is NOT an example of usability testing --answers--\nComparative testing\n--feedback--\nRefer to the beginning of the lecture where this was discussed Agile testing\nValidation testing\n--feedback--\nRefer to the beginning of the lecture where this was discussed Explorative testing\n--feedback--\nRefer to the beginning of the lecture where this was discussed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4068,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff5f14f6ce9f6d3cbe22.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "54d3784c36d272e22e69ca9cb6dc0035",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff5f14f6ce9f6d3cbe22.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "on the functionality of the application while usability testing focuses on the intuitiveness of the application by users --questions-- --text-- Which of the following is NOT an example of usability testing --answers-- Comparative testing --feedback-- Refer to the beginning of the lecture where this was discussed Agile testing Validation testing --feedback-- Refer to the beginning of the lecture where this was discussed Explorative testing --feedback-- Refer to the beginning of the lecture where this was discussed--video-solution--\n2\n--text--\nWhich of the following is a commonly used tool for usability testing --answers--\nMaze\nJUnit\n--feedback--\nRefer to the end of the lecture where this was discussed Jest\n--feedback--\nRefer to the end of the lecture where this was discussed Mocha\n--feedback--\nRefer to the end of the lecture where this was discussed --video-solution--\n1\n--text--\nWhat is the difference between functional and usability testing --answers--\nUsability testing focuses on performance issues in the application, while functional testing focuses on the intuitiveness of the application by users --feedback--\nRefer to the end of the lecture where this was discussed Functional testing focuses on the functionality of the application, while usability testing focuses on the intuitiveness of the application by users Usability testing focuses on the functionality of the application, while functional testing focuses on the intuitiveness of the application by users --feedback--\nRefer to the end of the lecture where this was discussed Functional testing focuses on accessibility issues, while usability testing focuses on the intuitiveness of the application by users --feedback--\nRefer to the end of the lecture where this was discussed --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4068,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff5f14f6ce9f6d3cbe22.md",
      "source_type": "git_repo"
    },
    "token_count": 328,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1ad3007d4b094f03a6f01670205cd751",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff1996e4ae9e67170502.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2ff1996e4ae9e67170502\ntitle: What Is Unit Testing challengeType: 19\ndashedName: what-is-unit-testing\n--description--\nAs you design your applications, you will often have a series of small functions responsible for one thing This is known as the \"single responsibility principle \" When you have a series of small functions, it is best to test these functions to ensure that everything works as expected In this lecture, we will take a look at how to create a unit test using the popular Jest testing framework In this example, we are going to create a function that is responsible for returning a newly formatted string:\njs\nexport function getFormattedWord(str) {\nif ( str) return '';\nreturn str charAt(0) toUpperCase() + str slice(1);\n}\nThis getFormattedWord function has a parameter called str and will first check if the str is empty If so, then an empty string is returned Otherwise, a new string is returned where the first letter is capitalized We are exporting this function so we can use it in a test file In a separate getFormattedWord test js file, we can write some tests to verify that the function is doing what it is supposed to be doing At the top of the getFormattedWord test js file, we need to first import the function like this:\njs\nimport { getFormattedWord } from \" /getFormattedWord js\";\nThen we need to install the Jest package by using npm i jest Then we can add a test to check that a word made up of lowercase characters, hello, is properly formatted to Hello, which starts with a capital H:\njs\ntest('capitalizes the first letter of a word', () => {\nexpect(getFormattedWord('hello')) toBe('Hello');\n});\nThe expect function is used to test a value It's combined with a matcher, which is a function that checks whether the value behaves as expected In this case the matcher is toBe() Jest has a variety of matchers to help you test for truthiness, strings, numbers, and more One way to run your tests is by adding an npm script to your package json file Here's an example script for the Jest framework:\njs\n\"scripts\": {\n\"test\": \"jest\"\n},\nThen just run npm run test in your terminal to run your tests If your tests pass, you should see something in the terminal like this:\n```sh\nPASS /getFormattedWord test",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6077,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff1996e4ae9e67170502.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "0aefb04af4e6a95b073e892a174f913a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff1996e4ae9e67170502.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "has a variety of matchers to help you test for truthiness, strings, numbers, and more One way to run your tests is by adding an npm script to your package json file Here's an example script for the Jest framework: js \"scripts\": { \"test\": \"jest\" }, Then just run npm run test in your terminal to run your tests If your tests pass, you should see something in the terminal like this: ```sh PASS /getFormattedWord testjs\n✓ capitalizes the first letter of a word (1 ms)\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0 103 s, estimated 1 s\nRan all test suites ```\nTo see what a failing test looks like, we can intentionally break the test by updating the function to the following:\njs\nexport function getFormattedWord(str) {\nif ( str) return '';\nreturn \"This is incorrect\";\n}\nNow when you run the npm run test command, there will be an error message because the test was expecting a different result:\n```sh\nFAIL /getFormattedWord test js\n✕ capitalizes the first letter of a word (1 ms)\n● capitalizes the first letter of a word\nexpect(received) toBe(expected) // Object is equality\nExpected: \"Hello\"\nReceived: \"This is incorrect\"\n2 |\n3 | test('capitalizes the first letter of a word', () => {\n4 |   expect(getFormattedWord('hello')) toBe('Hello');\n^\n5 | });\n6 |\nat Object toBe (getFormattedWord test js:4:37)\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 total\nSnapshots:   0 total\nTime:        0 121 s, estimated 1 s\nRan all test suites ```\nNow we can update our function back to the original here:\njs\nexport function getFormattedWord(str) {\nif ( str) return '';\nreturn str charAt(0) toUpperCase() + str slice(1);\n}\nAdd another test to check for cases where no argument is provided to getFormattedWord:\njs\ntest(\"returns an empty string when no argument is provided\", () => {\nexpect(getFormattedWord())",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6077,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff1996e4ae9e67170502.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e189bb57a50399af9cfdd8dfde34d3bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff1996e4ae9e67170502.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "1 failed, 1 total Snapshots: 0 total Time: 0 121 s, estimated 1 s Ran all test suites ``` Now we can update our function back to the original here: js export function getFormattedWord(str) { if ( str) return ''; return str charAt(0) toUpperCase() + str slice(1); } Add another test to check for cases where no argument is provided to getFormattedWord: js test(\"returns an empty string when no argument is provided\", () => { expect(getFormattedWord())toBe(\"\");\n});\nThere are other tests you can add to make things more robust, but these first couple of tests are a good introduction to unit testing When it comes to testing JavaScript applications some common testing frameworks include Jest, Mocha, and Vitest Unit testing is important because it will help you catch more bugs in your programs, and ensure that everything works as expected It also can serve as a form of documentation for your application because it is meant to represent the expected behavior for your code --questions--\n--text--\nWhich of the following refers to the principle where a function should only be responsible for one thing --answers--\nSingle responsibility principle\nMultiple responsibility principle\n--feedback--\nRefer back to the very beginning of the lecture where this was discussed Single request principle\n--feedback--\nRefer back to the very beginning of the lecture where this was discussed Multiple response principle\n--feedback--\nRefer back to the very beginning of the lecture where this was discussed --video-solution--\n1\n--text--\nWhich of the following is NOT a commonly used testing framework in the JavaScript ecosystem --answers--\nJUnit\nJest\n--feedback--\nRefer back to the end of the lecture where this was discussed Vitest\n--feedback--\nRefer back to the end of the lecture where this was discussed Mocha\n--feedback--\nRefer back to the end of the lecture where this was discussed --video-solution--\n1\n--text--\nWhat can you add to a package json file to run your tests in the terminal --answers--\njson\n\"test\": {\n\"test\": \"run test\"\n},\n--feedback--\nRemember that you can create custom scripts in your package json file json\n\"scriptings\": {\n\"jest\"\n},\n--feedback--\nRemember that you can create custom scripts in your package json file json\n\"run\": {\n\"test\"\n},\n--feedback--\nRemember that you can create custom scripts in your package json file",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6077,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff1996e4ae9e67170502.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "c3d0063b4c357ba57c8b5d8336374eb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff1996e4ae9e67170502.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--video-solution-- 1 --text-- What can you add to a package json file to run your tests in the terminal --answers-- json \"test\": { \"test\": \"run test\" }, --feedback-- Remember that you can create custom scripts in your package json file json \"scriptings\": { \"jest\" }, --feedback-- Remember that you can create custom scripts in your package json file json \"run\": { \"test\" }, --feedback-- Remember that you can create custom scripts in your package json filejson\n\"scripts\": {\n\"test\": \"jest\"\n}\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6077,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff1996e4ae9e67170502.md",
      "source_type": "git_repo"
    },
    "token_count": 125,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "c1c40185e62b245df2a6b68ccb850ac7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff7a461f62a03e3d1861.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2ff7a461f62a03e3d1861\ntitle: What Is Performance Testing challengeType: 19\ndashedName: what-is-performance-testing\n--description--\nIf a software application is slow to respond or unstable, that will lead to a poor user experience Performance testing is what you do when you test an application's speed, responsiveness, scalability, and stability under different workloads The goal is to resolve any type of performance bottleneck before it reaches your users In this lecture, we will go through a few types of performance testing The first type is load testing A load in this context refers to the amount of work or demand put on a system Load testing determines how a system behaves during normal and peak load times The goal is to analyze metrics like response times and resource usage and determine if the current software build is ready or not Another type of testing is stress testing This is where you test your application in extreme loads and see how well your system responds to the higher load The goal here is to identify any bottlenecks and vulnerabilities by testing the system beyond its limits The next type of performance testing is soak testing, also known as endurance testing This is a type of load testing where you test the system with a higher load for an extended period of time The goal here is to determine any types of memory leaks and performance degradation Another type of testing is spike testing This is where you dramatically increase and decrease the loads and analyze the system's reactions to the changes The goal here is to see if your system will fail with these dramatic changes in the load Finally, there's breakpoint testing, also known as capacity testing This is where the load will slowly increment over time to the point where the system starts to fail or degrade The goal here is to better understand the system's limits and capacities These are just a few types of performance testing you can do on your applications Since performance plays a vital role in software development, it is important that your perform these types of tests to ensure that your application doesn't have any major issues and provides a smooth experience for users --questions--\n--text--\nWhat is performance testing --answers--\nTesting for an application's linting, formatting, and stability under different workloads --feedback--\nRefer to the beginning of the lecture where this was discussed Testing for an application's accessibility, scalability and linting under different workloads --feedback--\nRefer to the beginning of the lecture where this was discussed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4157,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff7a461f62a03e3d1861.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a2719fc1e68f9e58fe8ac1c7e7e6281e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff7a461f62a03e3d1861.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "your perform these types of tests to ensure that your application doesn't have any major issues and provides a smooth experience for users --questions-- --text-- What is performance testing --answers-- Testing for an application's linting, formatting, and stability under different workloads --feedback-- Refer to the beginning of the lecture where this was discussed Testing for an application's accessibility, scalability and linting under different workloads --feedback-- Refer to the beginning of the lecture where this was discussedTesting for an application's version control, scalability and formatting under different workloads --feedback--\nRefer to the beginning of the lecture where this was discussed Testing for an application's speed, responsiveness, scalability and stability under different workloads --video-solution--\n4\n--text--\nWhich of the following is NOT a type of performance testing --answers--\nCPU testing\n--feedback--\nOne of these options refers to the \"brain\" of a computer and is not a type of performance testing Load testing\n--feedback--\nOne of these options refers to the \"brain\" of a computer and is not a type of performance testing Stress testing\n--feedback--\nOne of these options refers to the \"brain\" of a computer and is not a type of performance testing Breakpoint testing\n--feedback--\nOne of these options refers to the \"brain\" of a computer and is not a type of performance testing --video-solution--\n1\n--text--\nWhich of the following tests dramatically increase and decrease the loads and analyze the system's reactions to the changes --answers--\nLoad testing\n--feedback--\nRefer to the end of the lecture where this was discussed Spike testing\nAccessibility testing\n--feedback--\nRefer to the end of the lecture where this was discussed Stress testing\n--feedback--\nRefer to the end of the lecture where this was discussed --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4157,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff7a461f62a03e3d1861.md",
      "source_type": "git_repo"
    },
    "token_count": 367,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1de7362f35b422dd0a8d9d1794006b5c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff6f069dce9feacb7d25.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2ff6f069dce9feacb7d25\ntitle: What Is Compatibility Testing challengeType: 19\ndashedName: what-is-compatibility-testing\n--description--\nWhen you build out web applications at scale, you will need to think beyond your personal computing environment How will these applications work on a variety of devices, operating systems, and browsers Well, this is where compatibility testing comes in The goal of compatibility testing is to see how well your software works in a variety of different computing environments This provides the team with the ability to catch bugs before they reach production and will help contribute to a smoother product launch Different types of compatibility testing include backwards and forwards compatibility, hardware testing, operating systems, networks, browsers, and mobile devices Let's take a look at each of the types in more detail by starting with backwards and forwards compatibility Backwards compatibility refers to when current software is compatible with earlier versions Forwards compatibility is when software and systems will work with future versions of itself The next type of testing is for hardware Hardware compatibility testing focuses on the software's ability to work properly in different hardware configurations This includes different types of processors, memory, storage, and graphics cards Another type of compatibility testing is for operating systems You don't want to design software that works smoothly on Mac devices but has bugs on Windows or vice versa You also need to consider Linux distributions like Ubuntu and Fedora The next type of testing is network compatibility testing You will have users working with different network speeds, protocols, security settings, and more Therefore, software teams will need to be mindful of all of those different conditions when testing Then, there's browser compatibility testing There are a few popular browsers in the market like Google Chrome, Safari, Firefox, and more Since all browsers work slightly differently, it's important to test your web application thoroughly and make sure your web applications work consistently across many browsers The last type of testing is mobile testing There was a time in web development when most developers didn't think about testing for mobile devices This was because, in the early 2000s, mobile devices weren't nearly as powerful or widely used as they are today But now, tens of millions of people visit websites on phones and tablets So, it is important to ensure that your software applications work on a variety of Android and iOS devices Those are just a few types of testing that you will need to consider when building out your applications",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4542,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff6f069dce9feacb7d25.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9f3c8e0f52a741c8967f33c207e31a48",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff6f069dce9feacb7d25.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "about testing for mobile devices This was because, in the early 2000s, mobile devices weren't nearly as powerful or widely used as they are today But now, tens of millions of people visit websites on phones and tablets So, it is important to ensure that your software applications work on a variety of Android and iOS devices Those are just a few types of testing that you will need to consider when building out your applicationsWhile this might seem like a lot of extra work, it is important to perform compatibility tests because you do want to ensure that your applications work in a variety of computing environments --questions--\n--text--\nWhat is the main goal of compatibility testing --answers--\nTo ensure that your applications have no accessibility errors --feedback--\nRefer to the beginning of the lecture where this was discussed To ensure that your applications are free from linting and formatting errors --feedback--\nRefer to the beginning of the lecture where this was discussed To ensure that your applications work in a variety of computing environments To ensure that your applications only work for different Linux distributions --feedback--\nRefer to the beginning of the lecture where this was discussed --video-solution--\n3\n--text--\nWhich of the following refers to when current software is compatible with earlier versions --answers--\nCPU compatibility\n--feedback--\nThink about how software will work with older versions Accessible compatibility\n--feedback--\nThink about how software will work with older versions Forwards compatibility\n--feedback--\nThink about how software will work with older versions Backwards compatibility\n--video-solution--\n4\n--text--\nWhich of the following is NOT typically targeted in compatibility testing --answers--\nMobile operating systems\n--feedback--\nOne of these options refers to computer memory RAM size\nHardware configuration\n--feedback--\nOne of these options refers to computer memory Network environments\n--feedback--\nOne of these options refers to computer memory --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4542,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff6f069dce9feacb7d25.md",
      "source_type": "git_repo"
    },
    "token_count": 376,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0bcfb8be9aab2da4b3995a18843b018b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db31349f3ace2c5c803c33.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67db31349f3ace2c5c803c33\ntitle: What Are BDD and TDD challengeType: 19\ndashedName: what-are-bdd-and-tdd\n--description--\nThere are two types of testing approaches that you should be aware of in software development Those approaches are TDD (Test-Driven Development) and BDD (Behavior-Driven Development) Let's first take a look at TDD Test-Driven Development is a methodology that emphasizes writing tests first before building out the features for an application Here is the typical process for TDD:\nWrite a test\nEnsure that it fails\nWrite the code for that test\nEnsure that the test passes this time\nMake any necessary refactors to the code\nRepeat steps 1-5 Writing tests before building out features provides real-time feedback to developers during the development process It also helps with catching bugs earlier on in the development stage While some software teams will choose to follow the TDD approach, TDD is a polarizing topic in the industry You will find tons of articles and videos out there both advocating for or bashing TDD Regardless of how you feel about this approach, it is important to be aware of it because you might come across it in real-world scenarios The second testing approach we will take a look at is Behavior-Driven Development (BDD) Behavior-Driven Development is the approach of aligning a series of tests with business goals These tests should be written in a language that can be understood by both technical and non-technical individuals When testing for specific behaviors in a software application, BDD commonly uses the Gherkin language, which is used in businesses to describe behaviors and scenarios The Gherkin language uses Given, When, and Then statements when describing scenarios Here is an example:\nScenario: Creating a New Blog Post\nGiven the user is logged into their account and is on the \"Create New Post\" page,\nWhen the user enters a title and content for the post and clicks the \"Publish\" button,\nThen the blog post should be saved and displayed on the homepage with the correct title, content, and timestamp You first want to define a scenario Example scenarios include when a user logs into an application or places an order on a website In this example, the scenario is for a user creating a new blog post on a site After the scenario is defined, you should start with a Given statement This provides context for where the user is starting before performing an action",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4152,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db31349f3ace2c5c803c33.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "09f69a76b744a192a64b7de62d561364",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db31349f3ace2c5c803c33.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "on the homepage with the correct title, content, and timestamp You first want to define a scenario Example scenarios include when a user logs into an application or places an order on a website In this example, the scenario is for a user creating a new blog post on a site After the scenario is defined, you should start with a Given statement This provides context for where the user is starting before performing an actionThe When statement is used to represent the action taken by the user Finally, the Then statement is used to represent the desired outcome from the previous action taken by the user Once you define all of your scenarios, you can write tests for each scenario Examples of BDD testing frameworks include Cucumber, JBehave, and SpecFlow --questions--\n--text--\nWhat does TDD stand for --answers--\nTab-Driven Development\n--feedback--\nRefer to the beginning of lecture where this was discussed Test-Driven Development\nTable-Driven Development\n--feedback--\nRefer to the beginning of lecture where this was discussed TCP-Driven Development\n--feedback--\nRefer to the beginning of lecture where this was discussed --video-solution--\n2\n--text--\nWhat does BDD stand for --answers--\nBabel-driven development\n--feedback--\nRefer to the beginning of lecture where this was discussed Byte-driven development\n--feedback--\nRefer to the beginning of lecture where this was discussed Behavior-Driven development\nBackend-driven development\n--feedback--\nRefer to the beginning of lecture where this was discussed --video-solution--\n3\n--text--\nWhich of the following languages is used in businesses to describe behaviors and scenarios --answers--\nGherkin\nRust\n--feedback--\nRefer to the end of lecture where this was discussed Chai\n--feedback--\nRefer to the end of lecture where this was discussed JUnit\n--feedback--\nRefer to the end of lecture where this was discussed --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4152,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db31349f3ace2c5c803c33.md",
      "source_type": "git_repo"
    },
    "token_count": 380,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a426074c3c0ef554089dfa2fee233cb5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db30fedfa0b22a1a2a570c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67db30fedfa0b22a1a2a570c\ntitle: What Is the Software Development Life Cycle, and How Does It Relate to Testing challengeType: 19\ndashedName: what-is-the-software-development-life-cycle-and-how-does-it-relate-to-testing\n--description--\nWhen working on software teams, it is important to have a process for designing and building out new products and services The Software Development Life Cycle is commonly used by software teams to build and deploy applications In this lecture, we will break down the different stages of the Software Development Life Cycle (SDLC) and the role that testing plays in it Here are the standard stages used in the Software Development Life Cycle:\nPlanning stage\nDesign stage\nImplementation stage\nTesting stage\nDeployment stage and\nMaintenance stage\nLet's take a closer look at all of those stages in more detail In the planning stage, the development team collects requirements for the proposed work from the stakeholders A stakeholder is someone with a vested interest in the success of the product or service Examples of stakeholders could be investors, owners, or even other employees The planning phase also includes estimating costs for the work and creating a schedule for when the work will be completed The next stage is the Design stage In this phase, the software team breaks down the requirements and decide on the best approaches for solutions This includes deciding on which external tools can be used to help things along and what internal tooling needs to be built to get the job done After the design stage, you have the implementation stage This involves the software team breaking down the requirements into manageable tasks that they divide up amongst themselves and build out Once the implementation stage is complete, the software team moves into the testing stage This involves manual and automated testing for the new work Sometimes the team tests out the application throughout the entire development stage to catch and fix any issues that come up The next stage is the deployment stage This is where the team deploys the new changes to a build or testing environment This allows the team to test out the application some more and fix any issues before the changes go to production The production application is the app that end users will use The last stage is the maintenance stage This involves fixing any issues that arise from customers in the production application This also involves monitoring the system for any possible improvements on the software Finally, there are different models of the Software Development Life Cycle used in the industry, such as Waterfall and Agile",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4833,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db30fedfa0b22a1a2a570c.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "cb8b4b34a87a473804315ef58365f759",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db30fedfa0b22a1a2a570c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "some more and fix any issues before the changes go to production The production application is the app that end users will use The last stage is the maintenance stage This involves fixing any issues that arise from customers in the production application This also involves monitoring the system for any possible improvements on the software Finally, there are different models of the Software Development Life Cycle used in the industry, such as Waterfall and AgileThe Waterfall model is where each phase of the life cycle needs to be completed before the next phase can begin In contrast, the Agile model focuses on iterative development by breaking down work into sprints so teams can quickly make changes and deliver work over time By going through the Software Development Life Cycle, the development team and stakeholders can be on the same page when it comes to requirements, cost estimates, and schedules This makes for more efficient collaboration and communication across the board --questions--\n--text--\nWhich of the following is NOT a stage used in the Software Development Life Cycle --answers--\nPlanning Stage\n--feedback--\nRefer back to the beginning of the lecture where this was discussed Testing Stage\n--feedback--\nRefer back to the beginning of the lecture where this was discussed Regression Stage\nDeployment Stage\n--feedback--\nRefer back to the beginning of the lecture where this was discussed --video-solution--\n3\n--text--\nWhat is the design stage --answers--\nThis is where the team will collect requirements and deadlines from stakeholders --feedback--\nRefer back to the beginning of the lecture where this was discussed This is where the team will break down the requirements and design solutions This is where the team will only focus on UI development --feedback--\nRefer back to the beginning of the lecture where this was discussed This is where the team will only create Figma and Sketch mockups of the work to be done --feedback--\nRefer back to the beginning of the lecture where this was discussed --video-solution--\n2\n--text--\nWhat does the Agile model focus on --answers--\nIterative development\nSlow development\n--feedback--\nRefer to the end of the lecture where this was discussed Expensive development\n--feedback--\nRefer to the end of the lecture where this was discussed UI/UX development\n--feedback--\nRefer to the end of the lecture where this was discussed --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4833,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db30fedfa0b22a1a2a570c.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "51216a9ee058dd9aa59861e8f48153b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff887d2583a079c02e78.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2ff887d2583a079c02e78\ntitle: What Is Security Testing challengeType: 19\ndashedName: what-is-security-testing\n--description--\nThe web is a powerful place filled with a wealth of information and activities But it can also be a dangerous place if you are not careful There are many hackers and cyber criminals out there looking for new ways to breach websites and compromise data You've probably heard of a few high-profile data breaches that affected billion-dollar companies like Meta and Microsoft When it comes to working on web applications, you will need to do thorough security testing to help identity vulnerabilities and weaknesses Here are a few principles to be aware of when it comes to performing security audits and testing:\nConfidentiality: This protects against the release of sensitive information to other recipients that aren't the intended recipient Integrity: This involves preventing malicious users from modifying user information Authentication: This involves verifying the user's identity to ensure that they are allowed to use that system Authorization: This is the process of determining what actions authenticated users are allowed to perform or which parts of the system they are permitted to access Availability: This ensures that information and services are available to authorized users when they need it Non-repudiation: This ensures that both the sender and recipient have proof of delivery and verification of the sender's identity It protects against the sender denying having sent the information Now that we understand the reasoning behind security testing, let's take a look at a few common security threats:\nCross-site Scripting (XSS): You learned about this in an earlier lecture But as a refresher, XSS attacks happen when an attacker injects malicious scripts into a web page that is viewed by other users These scripts can then execute in the context of the victim's browser, potentially stealing cookies and session data or performing other malicious actions without the user's knowledge or consent SQL Injection: SQL is a language for managing and storing information in a relational database SQL injection allows malicious users to inject malicious code into a database You will learn more SQL, relational databases, and SQL injection in a future module Denial-of-Service (DoS) attack: This is when malicious users flood a website with a high number of requests or traffic, causing the server to slow down and possibly crash, making the site unavailable to users There are many more types of security threats, but there are many tools you can use to help protect your web applications and make them more secure",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5425,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff887d2583a079c02e78.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b66fd9d94d9c992e52c840aacb13db00",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff887d2583a079c02e78.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "database You will learn more SQL, relational databases, and SQL injection in a future module Denial-of-Service (DoS) attack: This is when malicious users flood a website with a high number of requests or traffic, causing the server to slow down and possibly crash, making the site unavailable to users There are many more types of security threats, but there are many tools you can use to help protect your web applications and make them more secureHere are the broad categories that security testing tools fall into:\nStatic application security testing: These tools are used to evaluate the source code for an application to identify security vulnerabilities Dynamic application security testing (DAST): These tools interface with the application's frontend to uncover potential security weaknesses Unlike static application security testing, DAST tools do not have access to the source code Another type of security testing is penetration testing (or pentest for short) This involves creating simulated cyberattacks on the application to identify any vulnerabilities in the system Mid to large-sized companies might have a team of dedicated cybersecurity professionals that perform pentests on a regular basis as part of their regular security audits The world of cybersecurity is very vast and detailed But every developer should understand a few common threats against web applications and ways to guard against them --questions--\n--text--\nWhich of the following is NOT a core principle when it comes to performing security audits and testing --answers--\nIntegrity\n--feedback--\nOne of these options is a type of attack and not a core principle for security testing Cross Scripting\nAvailability\n--feedback--\nOne of these options is a type of attack and not a core principle for security testing Non-repudiation\n--feedback--\nOne of these options is a type of attack and not a core principle for security testing --video-solution--\n2\n--text--\nWhich of the following involves malicious users to inject malicious code into a database --answers--\nSQL injection\nDenial-of-Service (DoS) attack\n--feedback--\nRefer to the beginning of the lecture where common security threats were discussed Static application injection\n--feedback--\nRefer to the beginning of the lecture where common security threats were discussed Cross-site Scripting (XSS)\n--feedback--\nRefer to the beginning of the lecture where common security threats were discussed --video-solution--\n1\n--text--\nWhich of the following involves creating simulated cyberattacks on the application to identify any vulnerabilities in the system",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5425,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff887d2583a079c02e78.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "bcf021226575ddfe1a24f5a36fbe4303",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff887d2583a079c02e78.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "database --answers-- SQL injection Denial-of-Service (DoS) attack --feedback-- Refer to the beginning of the lecture where common security threats were discussed Static application injection --feedback-- Refer to the beginning of the lecture where common security threats were discussed Cross-site Scripting (XSS) --feedback-- Refer to the beginning of the lecture where common security threats were discussed --video-solution-- 1 --text-- Which of the following involves creating simulated cyberattacks on the application to identify any vulnerabilities in the system--answers--\nPenetration testing\nUnit testing\n--feedback--\nRefer to the end of the lecture where common security threats were discussed Smoke testing\n--feedback--\nRefer to the end of the lecture where common security threats were discussed Integration testing\n--feedback--\nRefer to the end of the lecture where common security threats were discussed --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5425,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67d2ff887d2583a079c02e78.md",
      "source_type": "git_repo"
    },
    "token_count": 174,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "59414e7aebb659454ce68926362e91b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db3180830cf02eb662ecaf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67db3180830cf02eb662ecaf\ntitle: How Do Assertions Work in Unit Testing challengeType: 19\ndashedName: how-do-assertions-work-in-unit-testing\n--description--\nYou were first introduced to assertions and unit testing in a previous lecture But as a review, unit testing is when you check the output of individual functions or components independently, in contrast with testing the final output of the entire program Assertions are used to test that the code is behaving as expected In this lecture, we are going to take a closer look at assertions in unit tests and explore some best practices A commonly used assertion library is Chai This is the same library used inside of the freeCodeCamp codebase Whenever you go through a workshop or lab, there is an automated test suite that runs against your code to ensure that your code is behaving the way it is supposed to Let's take a look at a few examples that are from the Full Stack Developer Curriculum In Build a Calculator workshop, Step 1 is testing for a function called addTwoAndSeven:\njs\nassert isFunction(addTwoAndSeven);\nThat assertion checks that the provided code contains a function named addTwoAndSeven If the user creates an array, string, or anything else that's not a function and assigns it to addTwoAndSeven, then the test will fail Let's take a look at another assertion from later in the workshop:\njs\nassert equal(addThreeAndFour(), 7);\nThis assertion checks that the return value from the addThreeAndFour function is equal to the number 7 If the return value does not equal 7, then the test will fail There are many more asserts built into Chai, like ones that check if a value is a boolean, if an object has a certain property name, or if a value is null Other common JavaScript assertion libraries are should js and expect js Regardless of which assertion library you are working with, there are a few best practices to be aware of The first is to write clear assert messages Clear and meaningful assert messages should describe the intent behind it Otherwise, it will be difficult to locate which tests are failing Another best practice is to write descriptive failure messages A descriptive failure message should state which condition is true This will help you figure out why a particular assert is failing As you continue learning to code, it's important to familiarize yourself with testing and start writing tests for your personal projects",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3979,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db3180830cf02eb662ecaf.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "71b3460da261ac5dcb2351a5eb8e00dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db3180830cf02eb662ecaf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assert messages Clear and meaningful assert messages should describe the intent behind it Otherwise, it will be difficult to locate which tests are failing Another best practice is to write descriptive failure messages A descriptive failure message should state which condition is true This will help you figure out why a particular assert is failing As you continue learning to code, it's important to familiarize yourself with testing and start writing tests for your personal projectsDoing this will go a long way in helping you prepare for your first developer job --questions--\n--text--\nWhich of the following asserts is used in Chai to test that a value is a function --answers--\nassert functioning()\n--feedback--\nRefer to the beginning of the lecture where this was discussed assert isFunction()\nassert function()\n--feedback--\nRefer to the beginning of the lecture where this was discussed assert isTrueFunction()\n--feedback--\nRefer to the beginning of the lecture where this was discussed --video-solution--\n2\n--text--\nWhich of the following assert is used in Chai to test if two values are equal --answers--\nassert equality()\n--feedback--\nRefer to the beginning of the lecture where this was discussed assert equaling()\n--feedback--\nRefer to the beginning of the lecture where this was discussed assert equal()\nassert equalize()\n--feedback--\nRefer to the beginning of the lecture where this was discussed --video-solution--\n3\n--text--\nWhich of the following is NOT a commonly used assertion library --answers--\nexpect js\n--feedback--\nRefer to the end of the lecture where this was discussed Chai\n--feedback--\nRefer to the end of the lecture where this was discussed should js\n--feedback--\nRefer to the end of the lecture where this was discussed Gherkin\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3979,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db3180830cf02eb662ecaf.md",
      "source_type": "git_repo"
    },
    "token_count": 351,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "af8c8e5fb88cbabe60a361b28a6dfc74",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db3238375ff8340ee1ff90.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67db3238375ff8340ee1ff90\ntitle: What Is A/B Testing challengeType: 19\ndashedName: what-is-ab-testing\n--description--\nMost of you have a select group of websites that you visit every day This might include sites like X, Discord, or freeCodeCamp But have you ever wondered why you often see small changes to the design of your most frequently visited pages Well, this doesn't happen by accident Companies spend a lot of time analyzing analytics and studying user behavior They do this to identify pain points in the user experience for their site or application These companies then use that data to come up with solutions to create a smoother user experience One of the techniques companies employ is called A/B testing This type of testing involves comparing two versions of a page or application and studying which version performs better Sometimes, this type of testing is known as bucket or split testing Let's take a look at an example so you can better understand the concept Imagine you have a landing page with some introductory text and a CTA (call to action) button Remember that a CTA button is used to encourage users to perform a specific action, like donate or log in As you go through the site analytics, you realize that the click-through rate for the CTA is low So you try redesigning that button so it's more prominent on the page You increase the size of the button and change the button color from blue to green To actually see if those changes made a difference, you can use A/B testing You can randomly divide your users into two groups Group A is the control group, which sees the original version of the page with the  smaller blue button, while group B is the experimental group, which see the new version of the page with the larger green button If the new version of the page results in a higher click-through rate, then you can confidently replace the old button styling with the new one Examples of tools to use for A/B testing include GrowthBook and LaunchDarkly There are many common use cases for A/B testing like testing ads, email campaigns, or new product features A/B testing allows you to make more data-driven decisions and continually improve the user experience --questions--\n--text--\nWhat is A/B testing --answers--\nThis test compares two versions of a page or application and studies which version performs better This test checks that each unit of code is working correctly --feedback--\nRefer to the beginning of the lecture where this was discussed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4197,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db3238375ff8340ee1ff90.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "55322f18cc7fb04235b675146fcbfc98",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db3238375ff8340ee1ff90.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "common use cases for A/B testing like testing ads, email campaigns, or new product features A/B testing allows you to make more data-driven decisions and continually improve the user experience --questions-- --text-- What is A/B testing --answers-- This test compares two versions of a page or application and studies which version performs better This test checks that each unit of code is working correctly --feedback-- Refer to the beginning of the lecture where this was discussedThis test checks for any accessibility errors in your applications and automatically applies suggestions for fixes --feedback--\nRefer to the beginning of the lecture where this was discussed This test sees how compatible your application is with different operating systems --feedback--\nRefer to the beginning of the lecture where this was discussed --video-solution--\n1\n--text--\nWhat is one benefit of using A/B testing --answers--\nThis allows you to make more impulsive decisions as well as continually redesign your website --feedback--\nRefer to the end of the lecture where this was discussed This allows you to ensure there are no linting or formatting errors in your code --feedback--\nRefer to the end of the lecture where this was discussed This allows you to make more data driven decisions as well as continually improve the user experience This ensures that your applications will run 10x faster in Linux and Mac environments --feedback--\nRefer to the end of the lecture where this was discussed --video-solution--\n3\n--text--\nWhich of the following is NOT a common use case for using A/B testing --answers--\nNew features\n--feedback--\nOne of these options is an internal change and will have no effect on user experience Ads\n--feedback--\nOne of these options is an internal change and will have no effect on user experience API failures\nEmail campaigns\n--feedback--\nOne of these options is an internal change and will have no effect on user experience --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4197,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db3238375ff8340ee1ff90.md",
      "source_type": "git_repo"
    },
    "token_count": 377,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f4f83085200317f29bf593325cb1a875",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db3248eceee03588a22b8f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67db3248eceee03588a22b8f\ntitle: What Is Alpha and Beta Testing challengeType: 19\ndashedName: what-is-alpha-and-beta-testing\n--description--\nOnce the initial development and software testing are complete, it is important to have the application tested by testers and real users This is where alpha and beta testing come in Alpha testing is done by a select group of testers who go through the application to ensure there are no bugs before it is released into the marketplace This is part of acceptance testing, which ensures that the software application meets the needs of users before its release Alpha testing also utilizes both white and black box testing techniques Black box testing only focuses on the expected behavior of the application, whereas white box testing involves the tester knowing the internal components and performing tests on that After the alpha testing phase, there is the beta testing phase This is where the application is made available to real users Actual users can interact with the application and provide feedback This is a form of user acceptance testing which ensures that the application meets the business requirements as well as user needs While both stages of testing can be time-consuming, it is important to perform alpha and beta tests on your applications This will help ensure that the application is truly ready for the marketplace and meets the needs of its users --questions--\n--text--\nWhich type of testing is performed by internal testers to identify bugs before releasing the application to users --answers--\nAccessibility testing\n--feedback--\nReview the beginning of the lecture where this was discussed Beta testing\n--feedback--\nReview the beginning of the lecture where this was discussed Alpha testing\nA/B testing\n--feedback--\nReview the beginning of the lecture where this was discussed --video-solution--\n3\n--text--\nWhich techniques are utilized in alpha testing --answers--\nYellow and brown box testing\n--feedback--\nReview the beginning of the lecture where this was discussed White and black box testing\nRed and black box testing\n--feedback--\nReview the beginning of the lecture where this was discussed White and blue box testing\n--feedback--\nReview the beginning of the lecture where this was discussed --video-solution--\n2\n--text--\nWhich of the following ensures that the application meets the business requirements as well as user needs --answers--\nUser Accessibility Testing --feedback--\nReview the end of the lecture where this was discussed User Acceptance Testing User Development Testing --feedback--\nReview the end of the lecture where this was discussed User Interface Testing",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2940,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db3248eceee03588a22b8f.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "49952aa273da48fdacec38e5b07aaeb8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db3248eceee03588a22b8f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "lecture where this was discussed White and blue box testing --feedback-- Review the beginning of the lecture where this was discussed --video-solution-- 2 --text-- Which of the following ensures that the application meets the business requirements as well as user needs --answers-- User Accessibility Testing --feedback-- Review the end of the lecture where this was discussed User Acceptance Testing User Development Testing --feedback-- Review the end of the lecture where this was discussed User Interface Testing--feedback--\nReview the end of the lecture where this was discussed --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2940,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db3248eceee03588a22b8f.md",
      "source_type": "git_repo"
    },
    "token_count": 111,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "10fbb2cbdf187d5910d1399a6a217edc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db32542c7075361b06024c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67db32542c7075361b06024c\ntitle: What Is Regression Testing challengeType: 19\ndashedName: what-is-regression-testing\n--description--\nAs an application continues to grow, it is not uncommon to have situations where new changes unintentionally break existing functionality This is known as a regression To help catch these issues before they happen, you can use regression testing Regression testing is when you re-run functional tests against parts of your application to ensure that everything still works as expected If you've implemented bug fixes, enhancements, or even have updates to your configuration, then it's a good idea to perform regression testing There are different tools that you can use to perform regression testing They include Puppeteer, Playwright, Selenium, and Cypress There are also a few testing techniques to be aware of when it comes to regression testing The first is called unit regression testing This is where you have a list of items that need to be tested each time major changes or fixes are implemented into the app Another testing technique is called partial regression testing This involves targeted approaches to ensure that new changes have not broken specific aspects of the application Finally, there's complete regression testing This is the most time-consuming and detailed option, which looks at all the functionalities affected by the recent changes in the codebase and runs tests against them It's important to note that retesting and regression testing are different Retesting is used to check for known issues and ensure that they have been resolved, whereas regression testing searches for unknown issues that might have occurred through recent changes in the codebase --questions--\n--text--\nWhat is retesting --answers--\nThis re-runs tests for issues found in JavaScript files only and fixes them --feedback--\nReview the last part of the lecture where this was discussed This tests for unknown issues that might have resulted in recent additions to the codebase --feedback--\nReview the last part of the lecture where this was discussed This re-runs tests for known HTML-related issues and fixes them --feedback--\nReview the last part of the lecture where this was discussed This tests for known issues and ensures that they have been resolved --video-solution--\n4\n--text--\nWhat is a regression in software --answers--\nThis is where new changes unintentionally break JavaScript code only --feedback--\nReview the beginning of the lecture where this was discussed This is where changes break existing HTML and CSS code only --feedback--\nReview the beginning of the lecture where this was discussed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3457,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db32542c7075361b06024c.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6baf44c4882d244065a3b7434f817c0b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db32542c7075361b06024c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Review the last part of the lecture where this was discussed This tests for known issues and ensures that they have been resolved --video-solution-- 4 --text-- What is a regression in software --answers-- This is where new changes unintentionally break JavaScript code only --feedback-- Review the beginning of the lecture where this was discussed This is where changes break existing HTML and CSS code only --feedback-- Review the beginning of the lecture where this was discussedThis is where new changes unintentionally break existing functionality This is where new changes enhance existing functionality --feedback--\nReview the beginning of the lecture where this was discussed --video-solution--\n3\n--text--\nWhich of the following is NOT a commonly used tool for regression testing --answers--\nSvelte\nPuppeteer\n--feedback--\nReview the beginning of the lecture where this was discussed Playwright\n--feedback--\nReview the beginning of the lecture where this was discussed Selenium\n--feedback--\nReview the beginning of the lecture where this was discussed --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3457,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db32542c7075361b06024c.md",
      "source_type": "git_repo"
    },
    "token_count": 204,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "47f177e62d9c18b11840fa1f17b4bc96",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db31c7ed46f430ce6c2da6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67db31c7ed46f430ce6c2da6\ntitle: What Are the Differences Between Mocking, Faking, and Stubbing challengeType: 19\ndashedName: what-are-the-differences-between-mocking-faking-and-stubbing\n--description--\nMocking is the process of replacing real data with false data that simulates the behavior of real components This allows testers and developers to test for specific components in the application without having to rely on external dependencies A common use case for mocking data would be when dealing with API calls Imagine you have a fetch call like this in your application:\njs\nexport const postService = {\nasync getPosts() {\nconst response = await fetch(\"https://api example com/posts\");\nreturn response json();\n},\n};\nIf you need to test the postService function, you could mock the API response instead of making continuous API calls to fetch the data Fetching from an API takes time and depends on external factors like network availability and server responses Mocking the API response removes those external factors and allows testers to work with a predictable, controlled data set Here is an example mock API response:\njson\n[\n{\n\"id\": 1,\n\"title\": \"Understanding Async/Await in JavaScript\",\n\"content\": \"Async/Await makes asynchronous code look and behave like synchronous code \",\n\"author\": \"Jane Doe\",\n\"created_at\": \"2025-04-10T14:32:00Z\"\n},\n{\n\"id\": 2,\n\"title\": \"10 Tips for Writing Clean Code\",\n\"content\": \"Clean code is not just about code formatting It involves naming, architecture \",\n\"author\": \"John Smith\",\n\"created_at\": \"2025-04-08T09:21:00Z\"\n},\n{\n\"id\": 3,\n\"title\": \"Exploring React 19 Features\",\n\"content\": \"React 19 comes with exciting features like new hooks and better performance \",\n\"author\": \"Alex Lee\",\n\"created_at\": \"2025-04-07T18:47:00Z\"\n}\n]\nNow that we understand what mocking is, let's compare it with stubbing Stubs are objects that return pre-defined responses or dummy data for an expected behavior in an application For example, you can stub the behavior for a database connection in your tests without having to rely on an actual database connection Here is an example of a stub in Jest:\n```js\nimport { postService } from \"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5052,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db31c7ed46f430ce6c2da6.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6e81b702249aef377aa1bf30b231d2d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db31c7ed46f430ce6c2da6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\", \"author\": \"Alex Lee\", \"created_at\": \"2025-04-07T18:47:00Z\" } ] Now that we understand what mocking is, let's compare it with stubbing Stubs are objects that return pre-defined responses or dummy data for an expected behavior in an application For example, you can stub the behavior for a database connection in your tests without having to rely on an actual database connection Here is an example of a stub in Jest: ```js import { postService } from \"/postService\";\nimport { db } from \" /db\";\njest mock(\" /db\", () => ({\ndb: {\nfetchPosts: jest fn(),\n},\n}));\ntest(\"should return stubbed posts\", async () => {\nconst fakePosts = [\n{ id: 1, title: \"Stubbed Post\", content: \"This is a stubbed post \" },\n];\ndb fetchPosts mockResolvedValue(fakePosts);\nconst posts = await postService getPosts();\nexpect(posts) toEqual(fakePosts);\n});\n```\ndb fetchPosts mockResolvedValue(fakePosts); is the stub in this example The last component to discuss are fakes Fakes are simplified versions of real components without the complexity or side effects of the real thing For example, you can fake a database by storing the data in memory instead of interacting with the real database This will allow you to mimic database operations in memory, which will be much faster than dealing with the real database Another common example would be to use fakes when working with file systems You can create a fake file system in place of the real one when it comes to testing As you continue to build out more complex software applications, consider using mocks, stubs, or fakes where appropriate in your testing --questions--\n--text--\nWhich of the following is a common use case to use a mock in testing --answers--\nMocking HTML changes --feedback--\nRefer to the beginning of the lecture where this was discussed Mocking CSS changes --feedback--\nRefer to the beginning of the lecture where this was discussed Mocking API calls Mocking JavaScript string methods --feedback--\nRefer to the beginning of the lecture where this was discussed --video-solution--\n3\n--text--\nWhat are stubs in testing --answers--\nObjects that return null in testing environments --feedback--\nThink about what controlled responses you want to work with in testing scenarios Objects that return pre-defined responses Objects that make multiple API calls",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5052,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db31c7ed46f430ce6c2da6.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6a137db1088bb105c5de3dc1df7a7e8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db31c7ed46f430ce6c2da6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "discussed Mocking CSS changes --feedback-- Refer to the beginning of the lecture where this was discussed Mocking API calls Mocking JavaScript string methods --feedback-- Refer to the beginning of the lecture where this was discussed --video-solution-- 3 --text-- What are stubs in testing --answers-- Objects that return null in testing environments --feedback-- Think about what controlled responses you want to work with in testing scenarios Objects that return pre-defined responses Objects that make multiple API calls--feedback--\nThink about what controlled responses you want to work with in testing scenarios Objects that make several updates to the UI in React applications --feedback--\nThink about what controlled responses you want to work with in testing scenarios --video-solution--\n2\n--text--\nWhich of the following is a common use case for a fake --answers--\nFaking API calls for post requests --feedback--\nRefer to the end of the lecture where this was discussed Faking the styles for an application --feedback--\nRefer to the end of the lecture where this was discussed Faking an HTML file --feedback--\nRefer to the end of the lecture where this was discussed Faking a database --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5052,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-different-types-of-testing\\67db31c7ed46f430ce6c2da6.md",
      "source_type": "git_repo"
    },
    "token_count": 236,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1e872973d2076c27ff12eac214c889a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-event-object-and-event-delegation\\6732a06aed1b095f57b0bb82.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732a06aed1b095f57b0bb82\ntitle: What Is the Change Event, and How Does It Work challengeType: 19\ndashedName: what-is-the-change-event-and-how-does-it-work\n--description--\nThe change event is a special event which is fired when the user modifies the value of certain input elements More specifically:\nWhen a checkbox is ticked or unticked When a radio button is ticked When the user makes a selection from something like a date picker or dropdown menu When an input loses focus (the user tabs to the next field, or clicks out of the form) after the user has changed the value When the user otherwise confirms the value, such as by hitting enter after typing some text Note that the change event does NOT fire when your user types in an input The change event will only fire after they have focused on another element The change event still generates an Event object, but unlike most other events it does not generate a custom implementation – the only properties and methods you will have access to are those on the base Event object This differs from the input event, which generates a dedicated InputEvent object The change event also differs in a few ways An input event WILL trigger when a user types content into a field, for example These differences are important to remember, as you might get tripped up by the timing of these events firing --questions--\n--text--\nWhen does the change event fire for a text input element --answers--\nAs soon as the user starts typing --feedback--\nThe lecture mentions a specific condition for text inputs that differs from immediate typing Every time a character is typed --feedback--\nThe lecture mentions a specific condition for text inputs that differs from immediate typing When the input loses focus after its value has been modified Only when the user presses the Enter key --feedback--\nThe lecture mentions a specific condition for text inputs that differs from immediate typing --video-solution--\n3\n--text--\nWhich of the following will NOT trigger a change event --answers--\nSelecting an option from a dropdown menu --feedback--\nThe lecture discusses several triggers for the change event, but mentions one common action that doesn't trigger it immediately Typing text into an input field without leaving it Ticking a checkbox --feedback--\nThe lecture discusses several triggers for the change event, but mentions one common action that doesn't trigger it immediately Selecting a date from a date picker",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3662,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-event-object-and-event-delegation\\6732a06aed1b095f57b0bb82.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0d9e185e2b27b94fba4a6f26eefc6773",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-event-object-and-event-delegation\\6732a06aed1b095f57b0bb82.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of the following will NOT trigger a change event --answers-- Selecting an option from a dropdown menu --feedback-- The lecture discusses several triggers for the change event, but mentions one common action that doesn't trigger it immediately Typing text into an input field without leaving it Ticking a checkbox --feedback-- The lecture discusses several triggers for the change event, but mentions one common action that doesn't trigger it immediately Selecting a date from a date picker--feedback--\nThe lecture discusses several triggers for the change event, but mentions one common action that doesn't trigger it immediately --video-solution--\n2\n--text--\nHow does the Event object for the change event differ from the Event object for the input event --answers--\nThe change event has more properties than the input event --feedback--\nThe lecture mentions a specific difference in the Event object implementations for these two events The change event uses a custom implementation of the Event object\n--feedback--\nThe lecture mentions a specific difference in the Event object implementations for these two events The input event uses a dedicated InputEvent object, while the change event uses the base Event object\nThere is no difference between the two Event objects --feedback--\nThe lecture mentions a specific difference in the Event object implementations for these two events --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3662,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-event-object-and-event-delegation\\6732a06aed1b095f57b0bb82.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4b3dc315dc73d231bc8aabd2fa044ea4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-html-boilerplate\\670838e914096b194b0c51aa.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp",
    "content": "id: 670838e914096b194b0c51aa\ntitle: What Is an HTML Boilerplate, and Why Is It Important challengeType: 19\ndashedName: what-is-an-html-boilerplate\n--description--\nLet's learn about the HTML boilerplate What is the HTML boilerplate, you ask It's like a ready-made template for your webpages Think of it as the foundations of a house A boilerplate includes the basic structure and essential elements every HTML document needs It saves you time and helps ensure your pages are set up properly Here is an example:\n```html\nfreeCodeCamp\n```\nLet's break down the key parts of this boilerplate First, there is the DOCTYPE declaration:\n```html\n```\nIt tells browsers which version of HTML you're using Next, comes the html tag:\n```html\n```\nThis wraps around all your content, and can specify the language of your page Inside the html tag, you'll find two main sections - a head, and a body:\n```html\n```\nThe head section contains important behind-the-scenes information:\nhtml\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1 0\" />\n<title>Document Title Goes Here</title>\n<link rel=\"stylesheet\" href=\" /styles css\" />\n</head>\nYour site's metadata, contained in meta elements, has details about things like character encoding, and how websites like Twitter should preview your page's link Your site's title, found in the title element, determines the text that appears in the browser tab or window Finally, you'll typically link your page's external stylesheets in the head section using link elements The body section is where all your content goes:\n```html\nI am a main title\nExample paragraph text\n```\nNow, why is a boilerplate important It ensures your pages are structured correctly and work well across different browsers Using a boilerplate helps you avoid common mistakes and follow best practices It's a great starting point for any web project Remember, you can customize your own boilerplate to fit your needs As you gain experience, you might add your own preferred elements or meta tags As you continue to improve your personal boilerplate, you'll find that it saves you time when starting new projects Next time you start a new HTML file, consider using a boilerplate It will definitely give you a solid foundation to build on",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4322,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-html-boilerplate\\670838e914096b194b0c51aa.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b5638572c6bbed773a70b78b95515156",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-html-boilerplate\\670838e914096b194b0c51aa.md",
    "source_type": "git_repo",
    "title": "freeCodeCamp",
    "content": "It's a great starting point for any web project Remember, you can customize your own boilerplate to fit your needs As you gain experience, you might add your own preferred elements or meta tags As you continue to improve your personal boilerplate, you'll find that it saves you time when starting new projects Next time you start a new HTML file, consider using a boilerplate It will definitely give you a solid foundation to build on--questions--\n--text--\nWhere would you set the character encoding for your page --answers--\nA meta element in the body --feedback--\nCharacter encoding is metadata information A head element in the body --feedback--\nCharacter encoding is metadata information A meta element in the head In the DOCTYPE --feedback--\nCharacter encoding is metadata information --video-solution--\n3\n--text--\nWhere would you set the language for your page --answers--\nIn the opening html tag A meta element in the body --feedback--\nThis is an attribute on the outer-most element A head element in the body --feedback--\nThis is an attribute on the outer-most element A meta element in the head --feedback--\nThis is an attribute on the outer-most element --video-solution--\n1\n--text--\nWhat purpose does a boilerplate serve --answers--\nProvides a starting structure for your websites --feedback--\nA boilerplate is helpful in many ways Ensures you are not missing any essential elements --feedback--\nA boilerplate is helpful in many ways Allows you to get started writing the content of your page faster --feedback--\nA boilerplate is helpful in many ways All of the above --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4322,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-html-boilerplate\\670838e914096b194b0c51aa.md",
      "source_type": "git_repo"
    },
    "token_count": 322,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c6a34040b3ec0b535068b98d967cec0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-html-boilerplate\\670838977810401844af6fe0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 670838977810401844af6fe0\ntitle: What Is the Role of the Link Element in HTML, and How Can It Be Used to Link to External Stylesheets challengeType: 19\ndashedName: what-is-the-role-of-the-link-element-in-html\n--description--\nLet's learn about the link element, and how to use it to link to external stylesheets The link element is used to link to external resources like stylesheets and site icons Here is the basic syntax for using the link element for an external CSS file:\nhtml\n<link rel=\"stylesheet\" href=\" /styles css\" />\nThe rel attribute is used to specify the relationship between the linked resource and the HTML document In this situation, we need to specify that this linked resource is a stylesheet It is considered best practice to separate your HTML and CSS in different files Developers will use the link element for their external CSS file instead of writing everything in the HTML document The href attribute is used to specify the location of the URL for the external resource The dot followed by a forward slash in the example tells the computer to look in the current folder, or directory, for the styles css file The link element should be placed inside the head element as seen in the following example:\nhtml\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1 0\" />\n<title>Examples of the link element</title>\n<link rel=\"stylesheet\" href=\" /styles css\" />\n</head>\nOften times you will see multiple link elements inside a professional codebase that link to different stylesheets, fonts, and icons Here is an example of using the link element to link to an external Google Font called Playwright Cuba:\nhtml\n<link rel=\"preconnect\" href=\"https://fonts googleapis com\" />\n<link rel=\"preconnect\" href=\"https://fonts gstatic com\" crossorigin />\n<link\nhref=\"https://fonts googleapis com/css2 family=Playwrite+CU:wght@100 400&display=swap\"\nrel=\"stylesheet\"\n/>\nGoogle Fonts are a set of free and open source custom fonts that you can use inside any project You can choose which fonts you would like to use and Google will provide you with the necessary HTML and CSS code In this example, the preconnect value for the rel attribute tells the browser to create an early connection to the value specified in the href attribute",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4769,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-html-boilerplate\\670838977810401844af6fe0.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "7a07bb16ffd727a57ccd5b179463488c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-html-boilerplate\\670838977810401844af6fe0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "/> <link href=\"https://fonts googleapis com/css2 family=Playwrite+CU:wght@100 400&display=swap\" rel=\"stylesheet\" /> Google Fonts are a set of free and open source custom fonts that you can use inside any project You can choose which fonts you would like to use and Google will provide you with the necessary HTML and CSS code In this example, the preconnect value for the rel attribute tells the browser to create an early connection to the value specified in the href attributeThis is done to speed up loading times for these external resources Another common use case for the link element is to link to icons Here is an example of linking to a favicon:\nhtml\n<link rel=\"icon\" href=\"favicon ico\" />\nA favicon, which is short for favorite icon, is a small icon typically displayed in the browser tab next the site title A lot of websites will use a favicon to display their brand icon --questions--\n--text--\nWhat is the role of the link element in HTML --answers--\nIt specifies the content type of the linked resource --feedback--\nPay close attention to the name of this element because it will give you clue as to what it does It determines the visibility of the linked resource on the webpage --feedback--\nPay close attention to the name of this element because it will give you clue as to what it does It defines the font size of the linked resource when displayed --feedback--\nPay close attention to the name of this element because it will give you clue as to what it does It is used to link to external resources like stylesheets and site icons --video-solution--\n4\n--text--\nWhat is the role of the rel attribute inside the link element --answers--\nIt is used to indicate the language of the linked document --feedback--\nThe rel attribute represents a relationship It is used to specify the relationship between the linked resource and the HTML document It is used to define the media type of the linked document --feedback--\nThe rel attribute represents a relationship It is used to determine the size of the linked document --feedback--\nThe rel attribute represents a relationship --video-solution--\n2\n--text--\nWhat is a favicon --answers--\nA type of JavaScript file used to enhance website functionality --feedback--\nLook closely at the name since it will imply what a favicon is A type of font used to style text on a website --feedback--\nLook closely at the name since it will imply what a favicon is",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4769,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-html-boilerplate\\670838977810401844af6fe0.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6ffe9470f77ee910f5140ea36ca08815",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-html-boilerplate\\670838977810401844af6fe0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "relationship It is used to determine the size of the linked document --feedback-- The rel attribute represents a relationship --video-solution-- 2 --text-- What is a favicon --answers-- A type of JavaScript file used to enhance website functionality --feedback-- Look closely at the name since it will imply what a favicon is A type of font used to style text on a website --feedback-- Look closely at the name since it will imply what a favicon isA small icon typically displayed in the browser tab next to the site title A security feature used to prevent cross-site scripting attacks --feedback--\nLook closely at the name since it will imply what a favicon is --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4769,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-html-boilerplate\\670838977810401844af6fe0.md",
      "source_type": "git_repo"
    },
    "token_count": 137,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "787dee2e70ff20dcc20cad1263f54e08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-html-boilerplate\\670839051794aa19fcef6dc8.md",
    "source_type": "git_repo",
    "title": "Examples of the UTF-8 encoding",
    "content": "id: 670839051794aa19fcef6dc8\ntitle: What Is UTF-8 Character Encoding, and Why Is It Needed challengeType: 19\ndashedName: what-is-utf-8-character-encoding\n--description--\nWhat is UTF-8 character encoding, and why is it needed UTF-8, or UCS Transformation Format 8, is a standardized character encoding widely used on the web Character encoding is the method computers use to store characters as data Essentially, all text on a web page is a sequence of characters stored as one or more bytes In computing, a byte is a unit of data consisting of 8 bits, or binary digits UTF-8 supports every character in the Unicode character set - and this includes characters and symbols from all writing systems, languages, and technical symbols Here is an example of using the meta element with the charset attribute to set the character encoding to UTF-8:\nhtml\n<meta charset=\"UTF-8\" />\nBy setting the character encoding to UTF-8, it will ensure that the accented \"e\" character (é) is displayed correctly on the page Here is an extended code example of using the UTF-8 character encoding:\n```html\nExamples of the UTF-8 encoding\nCafé\n```\nFor each new project you create, you should include this meta element with the charset attribute set to UTF-8 --questions--\n--text--\nWhich attribute is used to set the UTF-8 character encoding for HTML documents --answers--\npattern\n--feedback--\nRefer back to the examples showing which attribute to use content\n--feedback--\nRefer back to the examples showing which attribute to use charset\nlang\n--feedback--\nRefer back to the examples showing which attribute to use --video-solution--\n3\n--text--\nWhat is character encoding --answers--\nA method computers use to store characters as data A way to compress text files --feedback--\nThink about what computers do with characters It determines the font used to display text on a screen --feedback--\nThink about what computers do with characters It refers to the process of converting spoken language into written text --feedback--\nThink about what computers do with characters --video-solution--\n1\n--text--\nHow many bits are inside of a byte --answers--\n1\n--feedback--\nRefer back to the information about bytes and bits 33\n--feedback--\nRefer back to the information about bytes and bits",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2789,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-html-boilerplate\\670839051794aa19fcef6dc8.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "21c719d417e0d8036bda4b9fc28ff212",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-html-boilerplate\\670839051794aa19fcef6dc8.md",
    "source_type": "git_repo",
    "title": "Examples of the UTF-8 encoding",
    "content": "do with characters It determines the font used to display text on a screen --feedback-- Think about what computers do with characters It refers to the process of converting spoken language into written text --feedback-- Think about what computers do with characters --video-solution-- 1 --text-- How many bits are inside of a byte --answers-- 1 --feedback-- Refer back to the information about bytes and bits 33 --feedback-- Refer back to the information about bytes and bits7\n--feedback--\nRefer back to the information about bytes and bits 8\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2789,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-html-boilerplate\\670839051794aa19fcef6dc8.md",
      "source_type": "git_repo"
    },
    "token_count": 118,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3c8287f6c6c92ca1f740814727f36952",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672aa6ee9011775b27e23399.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa6ee9011775b27e23399\ntitle: What Is User-Centered Design challengeType: 19\ndashedName: what-is-user-centered-design\n--description--\nUser-centered design is a web development approach that prioritizes the end user, from their needs to their preferences and limitations The goal of user-centered design is to craft a web page that is intuitive, efficient to use, and pleasing for your users to interact with One of the first aspects of user-centered design is considering your target demographics For example, if your intended user-base is younger, you might leverage more flashy eye-catching designs that grab their attention immediately For an older audience, you might focus more on clear and streamlined designs without distractions Another aspect to consider is the goal of your end users For example, if you're building an e-commerce page for your products, you probably don't want to advertise someone else's products on your page But if you're building a personal blog, you might include advertisement elements to generate revenue from passive readers User behavior is an important factor as well You'll want to leverage an analytics tool, like Google Analytics, to measure how your users engage with your pages This can reveal areas where users might be getting \"stuck\" and leaving your page, or opportunities to improve the overall interaction flow A key to user-centered design is to actually involve your users Providing a feedback channel where they can share their experiences and pain points with your site allows you to capture vital information and iterate further to improve Ultimately, user-centered design means you need to put the user at the forefront of your decision making, whether that's through research or direct feedback --questions--\n--text--\nWhat is the main goal of user-centered design --answers--\nTo make the website visually appealing --feedback--\nUser-centered design means focusing on the user To prioritize the developer's preferences --feedback--\nUser-centered design means focusing on the user To create a website that is intuitive and efficient for users To reduce development costs --feedback--\nUser-centered design means focusing on the user --video-solution--\n3\n--text--\nWhy is it important to consider target demographics in user-centered design --answers--\nTo determine the website's color scheme --feedback--\nThe demographics of your audience might influence the design To choose appropriate design elements for the intended audience To decide on the website's content --feedback--\nThe demographics of your audience might influence the design To set the price of products or services",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3480,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672aa6ee9011775b27e23399.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "77b6a7492bba2f95477252ea89da2b4f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672aa6ee9011775b27e23399.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "To reduce development costs --feedback-- User-centered design means focusing on the user --video-solution-- 3 --text-- Why is it important to consider target demographics in user-centered design --answers-- To determine the website's color scheme --feedback-- The demographics of your audience might influence the design To choose appropriate design elements for the intended audience To decide on the website's content --feedback-- The demographics of your audience might influence the design To set the price of products or services--feedback--\nThe demographics of your audience might influence the design --video-solution--\n2\n--text--\nWhat is one way to gather information about user behavior on your website --answers--\nConduct in-person interviews --feedback--\nAutomated measurements of user interactions provide a broad and unbiased data set Use social media polls --feedback--\nAutomated measurements of user interactions provide a broad and unbiased data set Implement analytics tools like Google Analytics Ask friends and family for opinions --feedback--\nAutomated measurements of user interactions provide a broad and unbiased data set --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3480,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672aa6ee9011775b27e23399.md",
      "source_type": "git_repo"
    },
    "token_count": 208,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0cdc58ad10f2a7bba0bd2d259fb430e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-event-object-and-event-delegation\\67338e93b75977a344cf6d40.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67338e93b75977a344cf6d40\ntitle: How Do Event Bubbling, and Event Delegation Work challengeType: 19\ndashedName: how-do-event-bubbling-and-event-delegation-work\n--description--\nEvent bubbling, or propagation, refers to how an event \"bubbles up\" to parent objects when triggered For example, consider this code:\n```html\nClick me~ ```\nThe p element here would be considered the parent of the span element When you click on the span element, like you are instructed to, the span element becomes the target of a click event That event, however, also bubbles up to the parent – the p element can receive and consume that event as needed But what does this actually mean Well, you could attach an event listener to the p element:\njs\nconst p = document querySelector(\"p\");\np addEventListener(\"click\", (event) => {\nconsole log(event target);\n});\nThen, when you click on the span element you will see the text Click me~ logged to the console The event propagates to the parent p element, which consumes it in an event listener to display the target of the event Notice how the target is still the span element This is because the span element received the initial click Just to be sure how things are working, let's expand our code:\njs\nconst p = document querySelector(\"p\");\nconst span = document querySelector(\"span\");\np addEventListener(\"click\", (event) => {\nconsole log(\"P listener: \");\nconsole log(event target);\n});\nspan addEventListener(\"click\", (event) => {\nconsole log(\"Span listener: \");\nconsole log(event target);\n});\nTo give you an idea of how the event bubbles up, here's what you'll see in the console after clicking the span element:\nhtml\n\"Span listener: \"\n<span>Click me~ </span>\n\"P listener: \"\n<span>Click me~ </span>\nNow let's see what happens when you prevent the propagation of an event with stopPropagation() We'll call it in our span's event listener:\njs\nconst p = document querySelector(\"p\");\nconst span = document querySelector(\"span\");\np addEventListener(\"click\", (event) => {\nconsole log(\"P listener: \");\nconsole log(event target);\n});\nspan addEventListener(\"click\", (event) => {\nconsole log(\"Span listener: \");\nconsole log(event target);\nevent",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6329,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-event-object-and-event-delegation\\67338e93b75977a344cf6d40.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f5773191e9855902952e4a8403a34e61",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-event-object-and-event-delegation\\67338e93b75977a344cf6d40.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the span element: html \"Span listener: \" <span>Click me~ </span> \"P listener: \" <span>Click me~ </span> Now let's see what happens when you prevent the propagation of an event with stopPropagation() We'll call it in our span's event listener: js const p = document querySelector(\"p\"); const span = document querySelector(\"span\"); p addEventListener(\"click\", (event) => { console log(\"P listener: \"); console log(event target); }); span addEventListener(\"click\", (event) => { console log(\"Span listener: \"); console log(event target); eventstopPropagation();\n});\nAnd then click our span again:\nhtml\n\"Span listener: \"\n<span>Click me~ </span>\nThis time, we don't see our p listener trigger The event never fires for the p element, because we told it to stop propagation while it was being processed for the child span element Event delegation can be thought of as the opposite It's the process of taking a captured event, and delegating it to another element Going back to our code, let's update it so clicking on a span element changes it to red:\njs\nconst p = document querySelector(\"p\");\nconst span = document querySelector(\"span\");\np addEventListener(\"click\", (event) => {});\nspan addEventListener(\"click\", (event) => {\nevent target style color = \"red\";\n});\nBut what if you have twenty span elements Or maybe you use JavaScript to create more span elements on the fly Rather than having to attach an event listener to every single span element, you can actually use the listener on the p element for all of them In other words, you can delegate the handling of the span clicks to the parent p element Our code might now look something like this:\njs\nconst p = document querySelector(\"p\");\np addEventListener(\"click\", (event) => {\nevent target style color = \"red\";\n});\nNotice how we no longer have any listener attached to the span element at all You have properly delegated the event handling to the p element But does it work Let's generate a few extra span elements and see:\n```html\nClick me~ Click me~ Click me~ Click me~ ```\nNow, each time we click on a span, that element's text will become red",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6329,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-event-object-and-event-delegation\\67338e93b75977a344cf6d40.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ac54fd9a410ced8caa1170566d233f4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-event-object-and-event-delegation\\67338e93b75977a344cf6d40.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "querySelector(\"p\"); p addEventListener(\"click\", (event) => { event target style color = \"red\"; }); Notice how we no longer have any listener attached to the span element at all You have properly delegated the event handling to the p element But does it work Let's generate a few extra span elements and see: ```html Click me~ Click me~ Click me~ Click me~ ``` Now, each time we click on a span, that element's text will become redAnd just like that, with a single event listener we've properly allowed a click event to bubble up from span elements to the parent p, and delegated the logic for that click event to the p element Event propagation and delegation can be a complex topic, especially as you get into heavily nested elements like tables You are encouraged to explore this further and experiment with some of the code we've written here --questions--\n--text--\nWhat is event bubbling in JavaScript --answers--\nThe process of creating new events --feedback--\nThink about how the lecture describes the \"direction\" of event propagation The way an event travels from child elements to parent elements A method to prevent default behavior of events --feedback--\nThink about how the lecture describes the \"direction\" of event propagation The process of attaching multiple event listeners to a single element --feedback--\nThink about how the lecture describes the \"direction\" of event propagation --video-solution--\n2\n--text--\nWhat is the purpose of the stopPropagation() method --answers--\nTo prevent the default behavior of an event --feedback--\nThe lecture demonstrates this method's effect on event bubbling To remove all event listeners from an element --feedback--\nThe lecture demonstrates this method's effect on event bubbling To stop an event from bubbling up to parent elements To delegate event handling to child elements --feedback--\nThe lecture demonstrates this method's effect on event bubbling --video-solution--\n3\n--text--\nWhat is the main advantage of using event delegation --answers--\nIt allows events to bubble up to parent elements --feedback--\nConsider the example with multiple span elements and how event handling was simplified It prevents the default behavior of events --feedback--\nConsider the example with multiple span elements and how event handling was simplified It reduces the number of event listeners needed for multiple elements It stops event propagation automatically --feedback--\nConsider the example with multiple span elements and how event handling was simplified --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6329,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-understanding-the-event-object-and-event-delegation\\67338e93b75977a344cf6d40.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6ea3204223ee3b289049db461effe743",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bafd715f6ba77d57f3ec0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bafd715f6ba77d57f3ec0\ntitle: What Are User Requirements, User Research, and Testing challengeType: 19\ndashedName: what-is-user-research-and-testing-and-user-requirements\n--description--\nUser research is the systematic study of the people who use your product The goal is to measure user needs, behaviors, and pain points User research comes in many forms Perhaps one of the most common is the Net Promoter Score, or NPS The NPS measures how likely your users are to recommend your product to a friend NPS is measured through a survey offered at key milestones along the user's journey, such as after 7 days, 30 days, and 90 days NPS is measured on a scale of 0 to 10, with 9 and 10 indicating an active promoter of your site Another research vector is an exit interview This is a survey you show to your users when they cancel a subscription or delete an account Data from this survey can give you insight into the factors causing user churn, so you can address them User testing, on the other hand, refers to the practice of capturing data from users as they interface with your application For example, a video game going through beta testing is a form of user testing One you might run into as a web developer is A/B testing A/B testing involves shipping a new feature to a randomly selected subset of your user base You can then leverage analytics data to determine if the feature is beneficial Finally, user requirements refer to the stories or rubric that your application needs to follow This can inform the development process User requirements might be defined by user research, or industry standards They can even be defined by stakeholder input These requirements may be functional, meaning they dictate how your application should work, or non-functional, meaning they define how your application should behave User requirements are not static, either The information from both user testing and user research can impact the requirements, and they will change as your user base changes Understanding the difference is essential for collecting the most accurate data so you can deliver the best experience for your end users --questions--\n--text--\nWhat is the primary purpose of user research --answers--\nTo increase sales of a product --feedback--\nUser research involves studying the people who use your product To measure user needs, behaviors, and pain points To develop new features for an application --feedback--\nUser research involves studying the people who use your product",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4308,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bafd715f6ba77d57f3ec0.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c7168f798370da6a9135e9c392a0b1b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bafd715f6ba77d57f3ec0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Understanding the difference is essential for collecting the most accurate data so you can deliver the best experience for your end users --questions-- --text-- What is the primary purpose of user research --answers-- To increase sales of a product --feedback-- User research involves studying the people who use your product To measure user needs, behaviors, and pain points To develop new features for an application --feedback-- User research involves studying the people who use your productTo conduct A/B testing on a website --feedback--\nUser research involves studying the people who use your product --video-solution--\n2\n--text--\nWhich of the following is NOT a typical method of user research or testing --answers--\nNet Promoter Score (NPS) --feedback--\nThe lecture discusses several methods, but one common research method is not explicitly mentioned Exit interviews --feedback--\nThe lecture discusses several methods, but one common research method is not explicitly mentioned A/B testing --feedback--\nThe lecture discusses several methods, but one common research method is not explicitly mentioned Version Control --video-solution--\n4\n--text--\nWhat is the difference between functional and non-functional user requirements --answers--\nFunctional requirements are important, while non-functional requirements are optional --feedback--\nThe lecture mentions that requirements can be categorized into two types based on what they dictate about the application Functional requirements define how the application should work, while non-functional requirements define how it should behave Functional requirements are set by stakeholders, while non-functional requirements come from user research --feedback--\nThe lecture mentions that requirements can be categorized into two types based on what they dictate about the application Functional requirements are static, while non-functional requirements change over time --feedback--\nThe lecture mentions that requirements can be categorized into two types based on what they dictate about the application --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4308,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bafd715f6ba77d57f3ec0.md",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0f3b84cc2a39692516ad474fac9d36ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bafe4ef812b78696b0e27.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bafe4ef812b78696b0e27\ntitle: What Are Best Practices for Designing a Dark Mode Feature challengeType: 19\ndashedName: what-are-best-practices-for-designing-a-dark-mode-feature\n--description--\nDark mode is a special feature on web applications where you can change the default light color scheme to a dark color scheme This helps reduce eye strain and improve readability in low-light conditions When designing your dark mode features, it is important to understand best practices to ensure that your dark mode feature is effective and user-friendly The first consideration is the avoidance of saturated colors in dark mode Saturated colors are colors that are bright and intense For example, a bright magenta button against a dark gray background can be too intense and cause eye strain Instead, you should use desaturated colors in dark mode Desaturated colors are colors that are less intense, have a lower saturation level, and more comfortable to look at in dark mode Another consideration with dark mode is the use of pure black backgrounds with white text While this high contrast can be effective, it can also be too harsh on the eyes Instead, consider using a dark gray background with light gray text for a softer contrast Text will be easier on the eyes and more comfortable to read in dark mode Another consideration is the use of dark mode with the site's brand identity A brand identity is a set of visual elements that represent a brand, such as the logo, colors, and typography When implementing dark mode, you should consider how the dark mode feature is consistent with your brand's colors and style It is fine to have the brand icon and buttons at full saturation, while the surrounding elements are desaturated In general, when it comes to design, you always want to be mindful of the user experience and contrast levels Dark mode is no exception, and by following these best practices, you can create a dark mode feature that is effective and user-friendly --questions--\n--text--\nWhat is dark mode --answers--\nA feature that changes the default light color scheme to a dark color scheme A feature that changes the default dark color scheme to a light color scheme --feedback--\nThe name of the feature is a clue to its purpose A feature that changes the default font size to a larger size --feedback--\nThe name of the feature is a clue to its purpose A feature that changes the default layout of a web page --feedback--\nThe name of the feature is a clue to its purpose",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3847,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bafe4ef812b78696b0e27.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f1bbdcb3b5e12aa24fee87013aee7ba3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bafe4ef812b78696b0e27.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "dark color scheme A feature that changes the default dark color scheme to a light color scheme --feedback-- The name of the feature is a clue to its purpose A feature that changes the default font size to a larger size --feedback-- The name of the feature is a clue to its purpose A feature that changes the default layout of a web page --feedback-- The name of the feature is a clue to its purpose--video-solution--\n1\n--text--\nWhy is it not a good idea to use pure black backgrounds with white text in dark mode --answers--\nPure black backgrounds can cause security issues --feedback--\nThink about the high contrast between pure black and white and how it can affect readability Pure black backgrounds can cause performance issues --feedback--\nThink about the high contrast between pure black and white and how it can affect readability Pure black backgrounds with white text are too subtle --feedback--\nThink about the high contrast between pure black and white and how it can affect readability Pure black backgrounds with white text can be too harsh on the eyes --video-solution--\n4\n--text--\nWhat types of colors are suggested to use in dark mode --answers--\nRed colors --feedback--\nThink about the intensity of colors and how they can affect readability in dark mode Desaturated colors Bright colors --feedback--\nThink about the intensity of colors and how they can affect readability in dark mode Pastel colors --feedback--\nThink about the intensity of colors and how they can affect readability in dark mode --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3847,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bafe4ef812b78696b0e27.md",
      "source_type": "git_repo"
    },
    "token_count": 300,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4afabcb93850b87f736a0a1e209c2288",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672baff13bc5b3789691c75c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672baff13bc5b3789691c75c\ntitle: What Are Best Practices for Designing Breadcrumbs challengeType: 19\ndashedName: what-are-best-practices-for-designing-breadcrumbs\n--description--\nWhen it comes to web design, there are many types of navigational aids you can use Examples include top navigation bars, sidebars, and footers But if your site is on the more complex side with deeper levels of navigation, you might want to consider using breadcrumbs Breadcrumbs are a navigation aid that shows the user where they are in the site's hierarchy Here is an example of what breadcrumbs look like for a mock-up electronics website:\nmd\nHome / Electronics / Phones / Smartphone XYZ\nIn most websites, breadcrumbs are displayed at the top of the page, showing the user the path they took to get to the current page Starting from the Homepage, the user navigated to the Electronics category, then to the Phones category, and finally to the Smartphone XYZ product You have probably interacted with breadcrumbs on a website as you were searching for a product or specific piece of information The use of breadcrumbs is helpful because it can help users understand where they are in the site's hierarchy and how to navigate back to the previous pages This is especially useful when a user has come from a search result or an external link and needs to understand the context of the page they are on When it comes to designing breadcrumbs, there are a few considerations to keep in mind The first is to decide on what the separator will be The separator is the character that separates the different levels of the hierarchy Common separators include the greater than sign (>), right angle quotation marks (») ,and the forward slash (/) The second consideration is the placement of the breadcrumbs Breadcrumbs are typically placed at the top of the page, either above or below the main navigation bar Users shouldn't have to struggle to find the breadcrumbs, so make sure they are visible and easy to locate Another consideration is the size of the breadcrumbs You want to make sure the breadcrumbs are large enough to be easily read, but not so large that they take up too much space on the page Remember, the breadcrumbs aren't meant to serve as a primary navigation tool, but rather as a secondary navigational aid In websites where there is a lot of information on a page, users can easily see where they are in the hierarchy and navigate back to previous pages using breadcrumbs So when should you use breadcrumbs on your site",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4395,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672baff13bc5b3789691c75c.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "95e80eb091eb6f73556c5abb8fd950be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672baff13bc5b3789691c75c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to be easily read, but not so large that they take up too much space on the page Remember, the breadcrumbs aren't meant to serve as a primary navigation tool, but rather as a secondary navigational aid In websites where there is a lot of information on a page, users can easily see where they are in the hierarchy and navigate back to previous pages using breadcrumbs So when should you use breadcrumbs on your siteIf your site is simple and has a shallow hierarchy, breadcrumbs might not be necessary A shallow hierarchy means that the site has only a few levels of navigation, so breadcrumbs might not add much value Typically, you will see breadcrumbs on e-commerce sites, news sites, and other sites with a deep hierarchy like technical documentation sites --questions--\n--text--\nWhat are breadcrumbs --answers--\nA navigation aid that shows the user where they are in the site's hierarchy A type of container for images --feedback--\nReview the beginning of this lecture for the answer A navigation aid only found on mobile sites --feedback--\nReview the beginning of this lecture for the answer A type of container for text --feedback--\nReview the beginning of this lecture for the answer --video-solution--\n1\n--text--\nWhen should you use breadcrumbs on your site --answers--\nYou should never use breadcrumbs --feedback--\nThink about the benefits of breadcrumbs and when they would be most useful If your site has a deep hierarchy for navigation If your site is simple and has a shallow hierarchy --feedback--\nThink about the benefits of breadcrumbs and when they would be most useful You should only use them for mobile sites --feedback--\nThink about the benefits of breadcrumbs and when they would be most useful --video-solution--\n2\n--text--\nWhich of the following is a common separator for breadcrumbs --answers--\n>>>>\n--feedback--\nReview the middle of this lecture for the answer ||||\n--feedback--\nReview the middle of this lecture for the answer /\n&&&\n--feedback--\nReview the middle of this lecture for the answer --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4395,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672baff13bc5b3789691c75c.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9cd4851ff7b37c11d49dddbf5999f360",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb009952c7a7904a750cb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bb009952c7a7904a750cb\ntitle: What Are Best Practices for Designing Infinite Scrolls challengeType: 19\ndashedName: what-are-best-practices-for-designing-infinite-scrolls\n--description--\nInfinite scrolling is a design pattern that loads more content as the user scrolls down the page Oftentimes, this is used on social media sites like Twitter For example, if you are logged in and want to see more tweets, you can scroll down and more tweets will load This is an example of infinite scrolling Infinite scrolling is also used as a substitute for pagination Pagination is a design pattern that breaks up content into pages This is often used when there is a lot of content to display An example of pagination is when you search for something on Google and you see the search results on multiple pages With pagination, you have to click on a button to go to the next page With infinite scrolling, you just keep scrolling down and more content will load As you incorporate infinite scrolling into your design, there are a few best practices to keep in mind The first consideration is to provide a \"Load More\" button that loads the next set of results when the user clicks on it This is a good way to give the user control over when they want to see more content Another consideration would be to add a \"Back\" button This gives users the ability to go back to the previous page without having to scroll all the way back up This creates a better user experience and gives them more control over their browsing experience Sometimes you will see designs with a \"Back to the top\" button which leads users back to the top of the page of results Another consideration is to provide a loading indicator Users should have a clear indication that more content is being loaded; otherwise, they might think that the page is broken One of the last considerations would be to keep the footer accessible to the user If the footer contains important information, then it should be accessible to the user at all times In conclusion, infinite scrolling is a great way to display content on your website However, you should keep in mind the best practices when designing your infinite scroll so that you can provide the best user experience possible --questions--\n--text--\nWhat is infinite scrolling --answers--\nA design pattern that changes the scrollbar on the page --feedback--\nReview the beginning of the lecture where this concept is introduced A design pattern that changes the size of the page",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4027,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb009952c7a7904a750cb.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "aa53d62d3e8a8a11cfe3cfc51d482c62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb009952c7a7904a750cb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "conclusion, infinite scrolling is a great way to display content on your website However, you should keep in mind the best practices when designing your infinite scroll so that you can provide the best user experience possible --questions-- --text-- What is infinite scrolling --answers-- A design pattern that changes the scrollbar on the page --feedback-- Review the beginning of the lecture where this concept is introduced A design pattern that changes the size of the page--feedback--\nReview the beginning of the lecture where this concept is introduced A design pattern to change the background color of the page --feedback--\nReview the beginning of the lecture where this concept is introduced A design pattern that loads more content as the user scrolls down the page\n--video-solution--\n4\n--text--\nWhat is the role of a \"load more\" button in infinite scrolling --answers--\nIt reloads the page --feedback--\nThe name implies what it's role is To give users control over when they want to see more content It allows users to go back to previously loaded content --feedback--\nThe name implies what it's role is It restricts the amount of data that can be loaded --feedback--\nThe name implies what it's role is --video-solution--\n2\n--text--\nWhy is it important to keep the footer accessible while using an infinite scroll --answers--\nIt helps make the colors stand out more on the page --feedback--\nThink about what information the user should have access to\nIt helps make the page load faster --feedback--\nThink about what information the user should have access to\nIt is not important to keep the footer accessible --feedback--\nThink about what information the user should have access to\nSo the user can access the links and important information from the footer at all times --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4027,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb009952c7a7904a750cb.md",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6db737086731c85e8e1fcfbaac25db70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672baffc684be178dd02fa06.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672baffc684be178dd02fa06\ntitle: What Are Best Practices for Designing Cards challengeType: 19\ndashedName: what-are-best-practices-for-designing-cards\n--description--\nCard components are a very common occurrence in e-commerce, social media, and news sites They are used to help display information in a structured way When you are designing your cards, it is important to understand best practices so your users can easily understand the information you are trying to convey The first consideration for card design should be simplicity You don't want your cards to be visually cluttered or display too much information For example, if a card design is visually cluttered, there will be too much information for the user to process all at once Having less information and good spacing between items on the card makes it easier for the user to process the information, and allows for multiple cards on the page Another thing to consider is where the user can click on the card Some card designs will have a single button, making it obvious where the user can click Other card designs will have the entire card clickable When the user hovers over any part of the card, the card will change color or have a shadow effect to indicate that the card is clickable Whatever design you choose, it needs to be consistent throughout your site and easy for the user to understand Another consideration is the use of media on your cards Choosing high-quality media can significantly enhance the user experience If you are using images or videos for say a product card, the higher the quality the more the user will be interested in that product But if you use poor media quality, then the user might not trust the quality of your products and services One of the last things to consider is the use of color hierarchy You want to make sure that the most important information on the card is the most prominent You can use bright colors for important elements like a call-to-action button, and light colors for less important items on a card As you continue to work on web applications, keep in mind the different best practices for card design This will help you create better user experiences for your users --questions--\n--text--\nWhy is it important to have a simple card design --answers--\nYou want users to have a good user experience and digest the information easily You want users to be confused --feedback--\nThink about the user experience\nYou want users to be overwhelmed --feedback--\nThink about the user experience\nYou want users to be frustrated",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3853,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672baffc684be178dd02fa06.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fa6a5fc89c45d18488e02a1cc37f7f03",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672baffc684be178dd02fa06.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "mind the different best practices for card design This will help you create better user experiences for your users --questions-- --text-- Why is it important to have a simple card design --answers-- You want users to have a good user experience and digest the information easily You want users to be confused --feedback-- Think about the user experience You want users to be overwhelmed --feedback-- Think about the user experience You want users to be frustrated--feedback--\nThink about the user experience\n--video-solution--\n1\n--text--\nWhy is it important to have good color hierarchy on your card design --answers--\nTo make it difficult for users to understand the information --feedback--\nThink about what information is most important on the card\nTo make the site perform better --feedback--\nThink about what information is most important on the card\nTo highlight the most important information on the card To make the card visually cluttered --feedback--\nThink about what information is most important on the card\n--video-solution--\n3\n--text--\nWhat are the advantages of using high quality media on your card design --answers--\nThere are no advantages --feedback--\nThink about how high quality media can impact the user experience\nUsers will leave the site immediately --feedback--\nThink about how high quality media can impact the user experience\nIt will speed up the performance of the site --feedback--\nThink about how high quality media can impact the user experience\nUsers will trust the quality of your products and services --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3853,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672baffc684be178dd02fa06.md",
      "source_type": "git_repo"
    },
    "token_count": 301,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "818d381154e564b20affc71b012ebbcf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb015cfc889794359c4e0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bb015cfc889794359c4e0\ntitle: What Are Best Practices for Designing Modal Dialogs challengeType: 19\ndashedName: what-are-best-practices-for-designing-modal-dialogs\n--description--\nWhat is a modal It's the type of pop-up that a website might show you on top of their content The content behind a modal is usually dimmed This helps the user visually focus on the area you want them to interact with – in this case, the modal It's always a good idea to allow the user to click outside of the modal to close it You'll often see very prominent buttons on modals These are called CTAs, or call-to-action You want these to be easily identifiable since the purpose of interrupting the user's flow with a modal is to prompt them to take a specific action Modals should also have a close button While you may really want the user to click on your CTAs, it's important to give them an option to back out of the modal and resume whatever they were previously doing There are, of course, accessibility concerns with modals, such as correctly managing focus on elements However, if you use these general practices as your starting point, you'll have a solid foundation to build on --questions--\n--text--\nWhat is the purpose of dimming the content behind a modal dialog --answers--\nTo save battery life on mobile devices --feedback--\nThe lecture mentions a specific reason for this visual effect To help users visually identify the area they should interact with To make the website load faster --feedback--\nThe lecture mentions a specific reason for this visual effect To prevent users from seeing sensitive information --feedback--\nThe lecture mentions a specific reason for this visual effect --video-solution--\n2\n--text--\nWhat does CTA stand for in the context of modal design --answers--\nClick To Activate --feedback--\nThe lecture provides the full term for this acronym when discussing prominent buttons in modals Complete The Action --feedback--\nThe lecture provides the full term for this acronym when discussing prominent buttons in modals Call-to-Action Close The Application --feedback--\nThe lecture provides the full term for this acronym when discussing prominent buttons in modals --video-solution--\n3\n--text--\nWhy is it important to include a close button in a modal dialog --answers--\nIt's required by law in some countries --feedback--\nThe lecture emphasizes the importance of allowing users to back out of the modal",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3011,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb015cfc889794359c4e0.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "55adaaadf612157e1b025c70317aff75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb015cfc889794359c4e0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Action --feedback-- The lecture provides the full term for this acronym when discussing prominent buttons in modals Call-to-Action Close The Application --feedback-- The lecture provides the full term for this acronym when discussing prominent buttons in modals --video-solution-- 3 --text-- Why is it important to include a close button in a modal dialog --answers-- It's required by law in some countries --feedback-- The lecture emphasizes the importance of allowing users to back out of the modalTo prevent the modal from crashing the browser --feedback--\nThe lecture emphasizes the importance of allowing users to back out of the modal To give users an option to exit the modal and resume their previous activity To make the modal look more professional --feedback--\nThe lecture emphasizes the importance of allowing users to back out of the modal --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3011,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb015cfc889794359c4e0.md",
      "source_type": "git_repo"
    },
    "token_count": 166,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5614464833a26967cd14733be4d846e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb02009ffc0797ca567ab.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bb02009ffc0797ca567ab\ntitle: What Are Best Practices for Progress Indication on Forms, Registration, and Setup challengeType: 19\ndashedName: what-are-best-practices-for-progress-indication-on-forms-registration-and-setup\n--description--\nProgress indication is a way to show users how far they are in a process It can be used in forms, registration, and setup processes The goal is to help users understand where they are in the process and how much more they need to do For example, you can use a progress indication bar to show users what is left to do when filling forms You don't want to create a situation where the user needs to fill out a lengthy form and they don't know how many more steps they need to complete Transparency is key so the user knows whether they have enough time to sit down and complete the form or if they need to come back later When designing a progress indication section, there are a few best practices to keep in mind The first consideration is to keep it simple You don't want to overwhelm the user with too much information where they get frustrated and leave the site The second consideration is to make it possible to go back to previous steps This is important because users may want to go back and check their previous answers or make changes Another consideration is to make the progress indication section easy to find If the user can't find it, they won't know how far they are in the process The last consideration is to have clear section titles, percentages, or steps If you just have a progress bar with no context, the user won't know what it means These are just a few best practices to keep in mind when designing progress indication on forms, registration, and setup processes Study a few examples on big websites and see how they implement progress indication Then test your design with real users to see how well it works --questions--\n--text--\nWhat is the primary goal of using a progress indication in forms or registration processes --answers--\nTo entertain users while they complete the form --feedback--\nFocus on the purpose of providing users with information about their progress To inform users about how far they are in the process and what is left to do To reduce the number of steps in the process --feedback--\nFocus on the purpose of providing users with information about their progress To speed up the form submission process --feedback--\nFocus on the purpose of providing users with information about their progress",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3972,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb02009ffc0797ca567ab.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1cbc7cb7dff4785bf2227955756d5ffe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb02009ffc0797ca567ab.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "they complete the form --feedback-- Focus on the purpose of providing users with information about their progress To inform users about how far they are in the process and what is left to do To reduce the number of steps in the process --feedback-- Focus on the purpose of providing users with information about their progress To speed up the form submission process --feedback-- Focus on the purpose of providing users with information about their progress--video-solution--\n2\n--text--\nWhy is it important to allow users to go back to previous steps in a form or registration process --answers--\nTo let users change their answers or review previous entries To make the form more complex --feedback--\nThink about why users might need to revisit earlier parts of the process To limit the number of steps in the process --feedback--\nThink about why users might need to revisit earlier parts of the process To increase the time users spend on the site --feedback--\nThink about why users might need to revisit earlier parts of the process --video-solution--\n1\n--text--\nWhat should you consider when placing a progress indication section on a webpage --answers--\nIt should be as small as possible to avoid distracting the user --feedback--\nConsider how users will interact with and understand the progress indication It should be easy to find and clearly labeled with context like section titles or percentages It should be hidden until the user reaches the final step --feedback--\nConsider how users will interact with and understand the progress indication It should only include a visual progress bar with no text --feedback--\nConsider how users will interact with and understand the progress indication --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3972,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb02009ffc0797ca567ab.md",
      "source_type": "git_repo"
    },
    "token_count": 320,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fc343e8e7626ecc8e7728d30e528f52a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb02ecb230779bbbaccd9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bb02ecb230779bbbaccd9\ntitle: What Are Best Practices for Designing Shopping Carts challengeType: 19\ndashedName: what-are-best-practices-for-designing-shopping-carts\n--description--\nThere are thousands of e-commerce websites on the internet, and the shopping cart is a crucial part of the e-commerce experience A good design can make the shopping cart experience more enjoyable and increase sales A poor design can lead to abandoned carts and lost sales In this lecture, we will discuss some best practices for designing shopping carts The first design consideration is making sure the shopping cart is visible to users at all times Most shopping cart designs will have the cart displayed in the upper right hand corner of the page Users should see the number of items in their cart displayed next to the cart icon, and be able to click on the cart to see more details about the items they are purchasing Another consideration is providing a clear way for users to update the quantity of items in their cart This can be done by providing a quantity input field next to each item in the cart Users can easily update the quantity of an item by changing the number in the input field You should also provide a \"Remove\" button next to each item in the cart This allows users to easily remove items from their cart You don't want to make it difficult for users to remove items from their cart, as this can lead to frustration and abandoned carts Another consideration is the shopping cart icon itself The icon should be something easily recognizable for all users A common icon is a shopping cart with a handle and wheels Other icons might be a shopping bag or a basket But you don't want to choose an icon that is too abstract or difficult to understand When the user wants to review the total in their cart, they should be able to easily find the total cost of all items in the cart This should be displayed prominently on the page, so users don't have to search for it Finally, you should provide a clear call-to-action button for users to proceed to checkout This button should be prominently displayed on the page, so users don't have to search for it You don't want to have too many buttons on the page, as this can lead to confusion The call-to-action button should be the most prominent button on the page, so users know exactly what to do next You should use the brand's primary color for the button, so it stands out from the rest of the page",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4638,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb02ecb230779bbbaccd9.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9a13cbd522aecca07c050ed5a54e66e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb02ecb230779bbbaccd9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to checkout This button should be prominently displayed on the page, so users don't have to search for it You don't want to have too many buttons on the page, as this can lead to confusion The call-to-action button should be the most prominent button on the page, so users know exactly what to do next You should use the brand's primary color for the button, so it stands out from the rest of the pageThese are just a few best practices for designing shopping carts By following these guidelines, you can create a shopping cart that is easy to use and will help increase sales for your e-commerce website --questions--\n--text--\nWhat is a crucial aspect of designing a shopping cart that can impact the shopping experience and sales --answers--\nThe color of the shopping cart icon --feedback--\nConsider what feature helps users always be aware of their cart and its contents The position of the shopping cart on the page The number of items in the cart --feedback--\nConsider what feature helps users always be aware of their cart and its contents The brand of the e-commerce website --feedback--\nConsider what feature helps users always be aware of their cart and its contents --video-solution--\n2\n--text--\nHow should users be able to update the quantity of items in their cart --answers--\nBy contacting customer service --feedback--\nLook for a method that allows users to directly change the number of items they have By using a dropdown menu --feedback--\nLook for a method that allows users to directly change the number of items they have By entering a new number in a quantity input field By adding a new item with the desired quantity --feedback--\nLook for a method that allows users to directly change the number of items they have --video-solution--\n3\n--text--\nWhat is an important feature to include in the shopping cart to help users proceed with their purchase --answers--\nA \"Save for Later\" option --feedback--\nThink about what helps users finalize their purchase and complete the transaction smoothly Multiple call-to-action buttons --feedback--\nThink about what helps users finalize their purchase and complete the transaction smoothly A clear and prominent checkout button An option to chat with a sales representative --feedback--\nThink about what helps users finalize their purchase and complete the transaction smoothly --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4638,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb02ecb230779bbbaccd9.md",
      "source_type": "git_repo"
    },
    "token_count": 453,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5216572561e220d324e51d112070b098",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb04476b1997a1da8b79b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bb04476b1997a1da8b79b\ntitle: What Is Deferred and Lazy Registration challengeType: 19\ndashedName: what-is-deferred-and-lazy-registration\n--description--\nLazy registration is a UI design pattern that allows users to browse and interact with your application without having to register A good example of this would be an e-commerce site Users should be able to browse through the products and add a few items to their cart Then, if they are interested in purchasing, they will need to register The reason is that users need to see the value your site offers before they are willing to provide their information and register When designing your applications, users should be able to see the value and feel like the application is safe to provide their information Otherwise, they will not be willing to register and you will lose potential customers You will need to make sure to communicate that the user's sensitive data will be protected and secure In later modules, we will discuss how to secure your application and protect your user's data Another good example of lazy registration would be YouTube YouTube is a video sharing platform with millions of videos on everything from tech, pop culture, and gaming If you visit YouTube, users can watch as many videos as they like without needing to sign in or register However, if they want to like, comment, or subscribe to a channel, they will need to register If the user likes the content they are watching or wants to participate in the conversations, then they will be more willing to register Lazy registration is a useful design pattern that allows users to see the value of your application before they are willing to provide their information The next time you are designing an application, consider using lazy registration to increase user engagement and retention --questions--\n--text--\nHow does lazy registration impact user interaction with an application --answers--\nIt immediately limits user access until they complete a registration form --feedback--\nThe goal is to let users experience the application first It encourages users to engage with content before asking for their registration details It requires users to provide payment information before accessing any features --feedback--\nThe goal is to let users experience the application first It makes the registration process mandatory before users can view any part of the application --feedback--\nThe goal is to let users experience the application first --video-solution--\n2\n--text--\nWhat is one of the main benefits of lazy registration in UI design --answers--\nUsers can immediately make purchases without registering",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4033,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb04476b1997a1da8b79b.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bab3533686dd97b27c39dea7b99a6916",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb04476b1997a1da8b79b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "for their registration details It requires users to provide payment information before accessing any features --feedback-- The goal is to let users experience the application first It makes the registration process mandatory before users can view any part of the application --feedback-- The goal is to let users experience the application first --video-solution-- 2 --text-- What is one of the main benefits of lazy registration in UI design --answers-- Users can immediately make purchases without registering--feedback--\nThink about the value proposition of the application Users can see the value of the application before deciding to register Users are required to register to view any content --feedback--\nThink about the value proposition of the application Users can bypass all security protocols during registration --feedback--\nThink about the value proposition of the application --video-solution--\n2\n--text--\nWhich of the following is an example of a platform that uses lazy registration --answers--\nA banking app requiring users to register before browsing financial products --feedback--\nThis platform allows users to access most of its features without needing to register immediately An e-commerce site allowing users to browse products and add items to a cart before registering An email service that asks users to register before reading any emails --feedback--\nThis platform allows users to access most of its features without needing to register immediately A health app that requires registration to access general health tips --feedback--\nThis platform allows users to access most of its features without needing to register immediately --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4033,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb04476b1997a1da8b79b.md",
      "source_type": "git_repo"
    },
    "token_count": 289,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1ddfb93e8bb68f1d6f1ba316285c9ed0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb03999f39379f67d8972.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bb03999f39379f67d8972\ntitle: What Is Progressive Disclosure challengeType: 19\ndashedName: what-is-progressive-disclosure\n--description--\nA progressive disclosure is a design pattern used to only show users relevant content based on their current activity and hide the rest This is done to reduce cognitive load and make the user experience more intuitive For example, when you use Google's search page, most of your searches will be simple So having a simple user interface with very few options makes sense But for the few times you will need a more advanced search, Google provides an advanced search option that will reveal more options You can find Google's advanced search option from the settings menu on the Google homepage Or you can go to google com/advanced_search Another example of progressive disclosure would be the \"More details\" button on products in an e-commerce website When you visit a site like Amazon, you will see a list of product images in different categories This allows users to shop with ease and not get overwhelmed by too much information If the user is interested in a particular product, they can click on the product image to reveal more details about the product Displaying all of the information right away may be overwhelming for the user So, by using progressive disclosure, the user can choose to see more information when they are ready So, what are some best practices for designing with the progressive disclosure technique The first consideration is to keep all important information visible at all times Users should not have to struggle to find key information because it is hidden by extra advanced features Another consideration is to provide a single access point for users to access additional features or information This could be a button or link that is always visible on the page Consider again Amazon's site: the additional product information is only made available when the user click on the product they are interested in There aren't multiple buttons or links to click on to see the additional information Adding multiple access points can be confusing for users and can lead to a poor user experience As you design your applications, think about the overall user experience and how you can use progressive disclosure to make it easier for users to find the information they need When done correctly it can make a big difference to the overall user experience --questions--\n--text--\nWhat is the main purpose of using progressive disclosure in design --answers--\nTo increase the number of features visible at all times --feedback--\nConsider how progressive disclosure helps manage the amount of information shown to users",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4537,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb03999f39379f67d8972.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8040e21401fdd112c181b6dff731176a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb03999f39379f67d8972.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "about the overall user experience and how you can use progressive disclosure to make it easier for users to find the information they need When done correctly it can make a big difference to the overall user experience --questions-- --text-- What is the main purpose of using progressive disclosure in design --answers-- To increase the number of features visible at all times --feedback-- Consider how progressive disclosure helps manage the amount of information shown to usersTo overwhelm users with all available options --feedback--\nConsider how progressive disclosure helps manage the amount of information shown to users To only show users relevant content based on their current activity To make the user interface more complex --feedback--\nConsider how progressive disclosure helps manage the amount of information shown to users --video-solution--\n3\n--text--\nHow does Google implement progressive disclosure on its search page --answers--\nBy displaying all search options at once --feedback--\nThink about how Google provides advanced features without overwhelming users By offering an advanced search option that reveals more features when needed By hiding the search bar behind a modal dialog --feedback--\nThink about how Google provides advanced features without overwhelming users By providing a new search page for each query --feedback--\nThink about how Google provides advanced features without overwhelming users --video-solution--\n2\n--text--\nWhat should be avoided to ensure a good user experience with progressive disclosure --answers--\nProviding a single, clear access point to additional information --feedback--\nReflect on how having multiple options or points of access might impact user experience Using multiple access points to confuse users Keeping important information visible at all times --feedback--\nReflect on how having multiple options or points of access might impact user experience Ensuring that additional information is available when needed --feedback--\nReflect on how having multiple options or points of access might impact user experience --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4537,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-centered-design\\672bb03999f39379f67d8972.md",
      "source_type": "git_repo"
    },
    "token_count": 357,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2329b9d0d5f889aa791b5f8316dd41df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672aa6c9e379285acca5a2aa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa6c9e379285acca5a2aa\ntitle: What Are Common Design Terms to Help You Communicate with Designers challengeType: 19\ndashedName: what-are-common-design-terms-to-help-you-communicate-with-designers\n--description--\nAs a developer, you may need to work closely with designers If you understand basic design terminology, you'll have a shared vocabulary and you'll be able to participate in the design process more actively This can make your workflow more efficient and result in a better user experience So let's dive in We'll start with the term layout Layout is how the visual elements are arranged on a page or screen to communicate a message These elements may include text, images, and white space The layout is like the blueprint of a design Designers must consider the placement, size, and hierarchy of each element The term that is closely related to layout is alignment Alignment is how the elements are placed in relation to one another Using alignment correctly is helpful for making the design look clean and organized Designers create visual order by aligning elements along imaginary lines, edges, or a central point Great Now let's talk about composition Composition is the art of arranging elements to create a harmonious design It determines how elements like images, text, and shapes relate to each other and contribute to the design in an artistic way While layout mostly focuses on the placement of the elements, composition also considers the artistic impact that this placement will have in the overall design Composition is closely related to concepts of balance Balance is how the visual weight is distributed within a composition Designers aim to create an equilibrium through symmetrical or asymmetrical arrangements A balanced design feels harmonious Hierarchy is another important concept that you should know Hierarchy establishes the order of importance of the elements in a design It's about making sure the most important information is noticed first You can implement a visual hierarchy with size, color, contrast, alignment, white space, and even typography To create clear distinctions between the elements, you can use contrast Contrast is helpful for guiding user attention to what you want to emphasize You can do this through variations in color, size, shape, texture, or any other visual characteristic Strong contrast is also helpful for improving readability Another helpful term is white space White Space, also known as \"negative space\", is the empty space in a design It's the area surrounding the elements You might be surprised to know that white space is not necessarily white",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5305,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672aa6c9e379285acca5a2aa.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f0858838371ed22403d94883ba20ef0e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672aa6c9e379285acca5a2aa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Contrast is helpful for guiding user attention to what you want to emphasize You can do this through variations in color, size, shape, texture, or any other visual characteristic Strong contrast is also helpful for improving readability Another helpful term is white space White Space, also known as \"negative space\", is the empty space in a design It's the area surrounding the elements You might be surprised to know that white space is not necessarily whiteActually, it can be space in any color or texture Its purpose is to improve the readability and enhance the visual hierarchy of a design These are general design concepts that you will find very often, but you may also find design terms that are more closely related to software development The user interface, also known as UI, is how humans interact with computers A user interface includes the visual and interactive elements that users can see on their screens, like icons, images, text, menus, links, and buttons The user experience, also known as UX, is about how users feel when using a product or service An application with a well-designed user experience is intuitive, easy to use, efficient, accessible, and enjoyable The user interface plays a key role in making the user experience as easy and enjoyable as possible, so they are very closely related These are some of the common terms that you should know to communicate with designers With this knowledge, now you can take a more active role in the design process --questions--\n--text--\nWhich design principle refers to the visual weight distribution within a layout --answers--\nAlignment\n--feedback--\nThink about how the elements in a design are arranged to create a sense of equilibrium with symmetrical or asymmetrical arrangements Balance\nHierarchy\n--feedback--\nThink about how the elements in a design are arranged to create a sense of equilibrium with symmetrical or asymmetrical arrangements Contrast\n--feedback--\nThink about how the elements in a design are arranged to create a sense of equilibrium with symmetrical or asymmetrical arrangements --video-solution--\n2\n--text--\nWhat is the term for the empty space around the elements in a design --answers--\nLayout\n--feedback--\nThink about the area that separates these elements Hierarchy\n--feedback--\nThink about the area that separates these elements White Space\nContrast\n--feedback--\nThink about the area that separates these elements --video-solution--\n3\n--text--\nWhich design principle establishes the order of importance of the elements in a design",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5305,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672aa6c9e379285acca5a2aa.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "85ff065f68c4b60d39cefaeb41476730",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672aa6c9e379285acca5a2aa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a sense of equilibrium with symmetrical or asymmetrical arrangements --video-solution-- 2 --text-- What is the term for the empty space around the elements in a design --answers-- Layout --feedback-- Think about the area that separates these elements Hierarchy --feedback-- Think about the area that separates these elements White Space Contrast --feedback-- Think about the area that separates these elements --video-solution-- 3 --text-- Which design principle establishes the order of importance of the elements in a design--answers--\nAlignment\n--feedback--\nThink about how the elements are arranged and styled to create a sense of importance Contrast\n--feedback--\nThink about how the elements are arranged and styled to create a sense of importance Hierarchy\nProximity\n--feedback--\nThink about how the elements are arranged and styled to create a sense of importance --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5305,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672aa6c9e379285acca5a2aa.md",
      "source_type": "git_repo"
    },
    "token_count": 174,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5a4174c6496725f6d027520ee270417b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baaa62d4b46667a8ac869.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672baaa62d4b46667a8ac869\ntitle: What Is the Importance of Good Visual Hierarchy in Design challengeType: 19\ndashedName: what-is-the-importance-of-good-visual-hierarchy-in-design\n--description--\nVisual hierarchy refers to the way you layout and display the content of your page to guide the viewer's attention A strong hierarchy can provide a clear path for the eye to follow, ensuring that the information you convey is consumed in the order that you intended Let's consider a basic page layout in which the HTML for the page is semantically correct, but the styling applied does not create a strong visual hierarchy If the font size isn't distinct, there is no visible indication of the document flow, although things are separated by headings To create a visual hierarchy, you should apply different font sizes to the heading tiers You could also use something like a \"callout box\" to highlight a specific section Visual hierarchy can also help increase your user conversion For example, you can take advantage of the callout box to further draw attention to a Call to Action (CTA) button With the CTA button being visually tied to the work history section, it guides the user to the vital information and the action you want them to take based on that information Finally, your visual hierarchy can be important for conveying other components, like a navigation bar or a footer This makes it easier for your users to find the essential information that they may be looking for --questions--\n--text--\nWhat is the primary purpose of visual hierarchy in web design --answers--\nTo make the website more colorful --feedback--\nThink about how visual hierarchy affects the way users consume information on a webpage To guide the viewer's attention in a specific order To reduce the amount of content on a page --feedback--\nThink about how visual hierarchy affects the way users consume information on a webpage To increase the loading speed of a website --feedback--\nThink about how visual hierarchy affects the way users consume information on a webpage --video-solution--\n2\n--text--\nWhich of the following is NOT mentioned as a technique for creating visual hierarchy in the article --answers--\nUsing different font sizes for headings --feedback--\nRecall the specific examples provided in the article for improving visual hierarchy Implementing a callout box for important information --feedback--\nRecall the specific examples provided in the article for improving visual hierarchy Applying animation effects to elements Creating distinct sections for navigation and footer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3569,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baaa62d4b46667a8ac869.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5d20bb3d8cdcbec02bfb5b1b5a284c6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baaa62d4b46667a8ac869.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "information on a webpage --video-solution-- 2 --text-- Which of the following is NOT mentioned as a technique for creating visual hierarchy in the article --answers-- Using different font sizes for headings --feedback-- Recall the specific examples provided in the article for improving visual hierarchy Implementing a callout box for important information --feedback-- Recall the specific examples provided in the article for improving visual hierarchy Applying animation effects to elements Creating distinct sections for navigation and footer--feedback--\nRecall the specific examples provided in the article for improving visual hierarchy --video-solution--\n3\n--text--\nHow can a strong visual hierarchy potentially impact user conversion --answers--\nBy making the website more aesthetically pleasing --feedback--\nRemember the example with the CTA button and its relationship to the work history section By reducing the number of clicks required to navigate the site --feedback--\nRemember the example with the CTA button and its relationship to the work history section By drawing attention to important information and Call-to-Action (CTA) buttons By increasing the website's search engine ranking --feedback--\nRemember the example with the CTA button and its relationship to the work history section --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3569,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baaa62d4b46667a8ac869.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "de0adc9d85f1138b705e12e29011b52d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baab2a0c3df66ad987b94.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672baab2a0c3df66ad987b94\ntitle: How Does Scale Work in Design challengeType: 19\ndashedName: how-does-scale-work-in-design\n--description--\nThe \"scale\" of something refers to its size When you're looking at scaling in your web design, you're looking at the size relationships between different elements, and how these elements might adapt to different screen sizes Using the correct scale for your elements plays an important role in visual hierarchy Larger elements will draw more attention, which can guide your users through the content in the way that you want For example, the visual separation between a heading and a paragraph draws your reader’s attention, but the scale should be appropriate to get an eye-catching text that pulls your reader to that section Scale doesn't apply just to text, though It's also important for images And while the scale of a banner image might make sense for a desktop layout, it might be too large on a mobile layout By scaling an image down to a more appropriate ratio, you can keep the visual impact while ensuring the information on the site is visible Scale is also important for interactivity, and the ability to actually use your website If the text in a navigation bar is not at an appropriate scale, mobile phone users will have a hard time tapping on the links And if you scale it appropriately, you end up with links that are not only easier to read, but easier to click on for your mobile users There are many ways that scale is important in your designs We've covered the basics, so you should now have a fundamental understanding of its importance --questions--\n--text--\nWhat is the primary purpose of using correct scale in web design --answers--\nTo make everything the same size --feedback--\nThink about how scale affects visual hierarchy and user attention To guide users through content To use as much space as possible --feedback--\nThink about how scale affects visual hierarchy and user attention To make text harder to read --feedback--\nThink about how scale affects visual hierarchy and user attention --video-solution--\n2\n--text--\nWhy might a large banner image be problematic on a mobile layout --answers--\nIt loads too slowly --feedback--\nConsider how screen real estate differs between desktop and mobile devices It's not visually appealing --feedback--\nConsider how screen real estate differs between desktop and mobile devices It takes up too much screen space It's not interactive enough --feedback--\nConsider how screen real estate differs between desktop and mobile devices",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baab2a0c3df66ad987b94.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c2c57d9c4fc4c0c0f325c00cbbc9feb7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baab2a0c3df66ad987b94.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "visual hierarchy and user attention --video-solution-- 2 --text-- Why might a large banner image be problematic on a mobile layout --answers-- It loads too slowly --feedback-- Consider how screen real estate differs between desktop and mobile devices It's not visually appealing --feedback-- Consider how screen real estate differs between desktop and mobile devices It takes up too much screen space It's not interactive enough --feedback-- Consider how screen real estate differs between desktop and mobile devices--video-solution--\n3\n--text--\nWhat is an important consideration for scaling navigation elements on mobile devices --answers--\nMaking them as small as possible --feedback--\nThink about the physical interaction users have with mobile devices Ensuring they're easy to tap Using bright colors --feedback--\nThink about the physical interaction users have with mobile devices Removing them entirely --feedback--\nThink about the physical interaction users have with mobile devices --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baab2a0c3df66ad987b94.md",
      "source_type": "git_repo"
    },
    "token_count": 182,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4101b086960cef0a7d719e6cfa97625e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baa97f2990e6631d522e7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672baa97f2990e6631d522e7\ntitle: How Do You Create Good Background and Foreground Contrast in Your Designs challengeType: 19\ndashedName: how-do-you-create-good-background-and-foreground-contrast-in-your-designs\n--description--\nFirst, you may need to familiarize yourself with contrast Contrast is the difference between two colors - or how easy it is to tell them apart Colors with a higher contrast will be more visually distinct, whereas colors with a lower contrast will be more visually similar For example, black and white have a very high contrast ratio Whereas light blue and light purple have less of a contrast Of course, in these examples the distinction might be made clearer because of the layout But what about applying these colors to text You can have the high contrast black text on a white background And the low contrast purple text on a blue background But how do you determine what is a \"good enough\" contrast You can't base it solely on how the text looks to you, as every user will have a different experience Thankfully, the Web Content Accessibility Guidelines, or WCAG, provide a standard for this Text with a contrast ratio of 4 5:1 is considered the AA standard, which is the bare minimum you should follow to be accessible to most users Text with a contrast ratio of 7:1 is considered the AAA standard, and ensures the best level of accessibility There are a number of websites that can check the contrast ratio between two colors, but most browsers will allow you to do this directly in the developer tools on your website Let's open the developer tools and inspect the text elements of the example site The black text on a white background has a contrast ratio of 21:1, which more than meets the AAA standard The purple text on a blue background, however, has a contrast ratio of 1 48:1, which does not even meet the AA standard How can you fix this Well, there are three aspects that impact the contrast ratio The first is the hue, which represents the general color type, like red, blue, orange Let's shift to a hue that is further away from blue In this case, let's use red Unfortunately, this change only brought the contrast ratio to 1 49:1,  which means you need to change the saturation, or the \"amount\" of color present Let's increase the amount of red in the text",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4585,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baa97f2990e6631d522e7.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3da5115c56e0a853342da23f60aa6132",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baa97f2990e6631d522e7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Well, there are three aspects that impact the contrast ratio The first is the hue, which represents the general color type, like red, blue, orange Let's shift to a hue that is further away from blue In this case, let's use red Unfortunately, this change only brought the contrast ratio to 1 49:1, which means you need to change the saturation, or the \"amount\" of color present Let's increase the amount of red in the textThat brings us much closer to the goal, with a 3 54:1 contrast ratio However, you can potentially get even closer by changing the last value, which is lightness Lightness represents how much white is present in the color Let's decrease the lightness of the red Now there is a much darker red against the light blue background, which brings the contrast ratio to 10 34:1 You could continue to adjust the colors to find the balance between the visual effect you want and an accessible contrast ratio But it is important to remember that accessibility should always take precedence --questions--\n--text--\nWhat is contrast in the context of web design --answers--\nThe brightness of colors on a webpage --feedback--\nThink about how the lecture defines contrast in relation to colors The difference between two colors and how easily they can be distinguished The number of colors used on a webpage --feedback--\nThink about how the lecture defines contrast in relation to colors The sharpness of images on a webpage --feedback--\nThink about how the lecture defines contrast in relation to colors --video-solution--\n2\n--text--\nAccording to the Web Content Accessibility Guidelines (WCAG), what is the minimum contrast ratio for text to meet the AA standard --answers--\n3:1\n--feedback--\nRecall the specific numbers mentioned for different accessibility standards 4 5:1\n7:1\n--feedback--\nRecall the specific numbers mentioned for different accessibility standards 21:1\n--feedback--\nRecall the specific numbers mentioned for different accessibility standards --video-solution--\n2\n--text--\nWhich of the following is NOT mentioned as an aspect that impacts the contrast ratio --answers--\nHue\n--feedback--\nRemember the three aspects discussed in the lecture that can be adjusted to improve contrast Saturation\n--feedback--\nRemember the three aspects discussed in the lecture that can be adjusted to improve contrast Lightness\n--feedback--\nRemember the three aspects discussed in the lecture that can be adjusted to improve contrast Opacity\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4585,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baa97f2990e6631d522e7.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c2cf8243b36dd95167e002223dbbcdba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baabf16290b66e6b79a39.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672baabf16290b66e6b79a39\ntitle: How Does Alignment Work in Design challengeType: 19\ndashedName: how-does-alignment-work-in-design\n--description--\nWhen you are designing web pages, it is important to create cohesive and visually appealing designs One way to achieve this is through the use of alignment Alignment is the process of arranging text and images in a way that creates a visual connection between elements It helps to create a sense of order and organization on the page, making it easier for users to navigate and understand the content There are several types of alignment you can use, but the basic ones are:\nleft alignment\ncenter alignment\nright alignment\njustified alignment\nvertical alignment\nLeft, right, and center alignments are all subtypes of horizontal alignment, while vertical alignment is used to align elements along a vertical axis Let's take a closer look at each type of alignment and how you can use them in your designs Left alignment is commonly used with text where each element is aligned to the left margin Aligning all of the headings and paragraphs on a web page to the left margin makes it easier for the user to read and follow the content The opposite of left alignment is right alignment, where each element is aligned to the right margin This is often used on websites to display additional content like promotional banners or advertisements For example, an ad that is aligned to the right margin makes it stand out from the rest of the content on the page but doesn't distract the user from the main content Center alignment is where elements are centered on the page This is often used for headings, logos, and other important elements that you want to draw attention to Justified alignment is when text is aligned to both the left and right margins This is typically used for descriptive passages or articles, and creates a clean and professional look The last type of alignment is vertical alignment, which is used to align elements along a vertical axis Vertical alignment can be used, for example, for a contact form on a website Aligning all of the form inputs like the name, email, and message fields along a vertical axis makes it easier for the user to fill out the form By using different types of alignment, you can create a sense of order and organization on the page that makes it easier for users to navigate and understand the content --questions--\n--text--\nWhat is alignment in design --answers--\nThe process of adding borders to elements on a page",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4125,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baabf16290b66e6b79a39.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bd905daabf08a4466d1e3c7b5d47140f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baabf16290b66e6b79a39.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Aligning all of the form inputs like the name, email, and message fields along a vertical axis makes it easier for the user to fill out the form By using different types of alignment, you can create a sense of order and organization on the page that makes it easier for users to navigate and understand the content --questions-- --text-- What is alignment in design --answers-- The process of adding borders to elements on a page--feedback--\nThink about how elements are arranged on a page The process of arranging text and images in a way that creates a visual connection between elements The process of adding color to a design --feedback--\nThink about how elements are arranged on a page The process of creating a layout for a web page --feedback--\nThink about how elements are arranged on a page --video-solution--\n2\n--text--\nWhat is left alignment commonly used for --answers--\nIt's commonly used with videos --feedback--\nThink about which elements make sense to align to the left margin It's commonly used with footer elements --feedback--\nThink about which elements make sense to align to the left margin It's commonly used with text where each element is aligned to the left margin It's commonly used with lists --feedback--\nThink about which elements make sense to align to the left margin --video-solution--\n3\n--text--\nWhat is vertical alignment --answers--\nIt's used to align elements along a vertical axis It's used to align elements along a diagonal axis --feedback--\nVertical alignment is the opposite of horizontal alignment It's used to align elements along a horizontal axis --feedback--\nVertical alignment is the opposite of horizontal alignment It's used to align elements along a circular axis --feedback--\nVertical alignment is the opposite of horizontal alignment --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4125,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baabf16290b66e6b79a39.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4a4bbade592a497b4a803328f6f63a37",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baacb7f2f446728e77efe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672baacb7f2f446728e77efe\ntitle: What Is the Importance of Whitespace in Design challengeType: 19\ndashedName: what-is-the-importance-of-whitespace-in-design\n--description--\nWhite space refers to any type of space around elements like images, text, and buttons White space is important in design because it helps to create a balance between the elements on the page Let's take a look at some examples of how white space can be used effectively in design For example, let's consider a call-to-action (CTA) button CTAs are used to encourage users to take a specific action like signing up for a newsletter or making a purchase By using white space effectively, we can help to make a CTA button more prominent and encourage users to click on it Now let's take a closer look at the different types of white space This first example uses both macro and active white space Macro white space is the space between larger elements like images, text blocks, and buttons Active white space is the space that is intentionally created to help guide the user's eye and draw attention to certain elements on the page In contrast to active white space, there is also passive white space Passive white space is the space that is left over after all the elements on a page have been placed Another type of whitespace would be micro white space This is the space between individual characters in a line of text Micro white space is important because it helps to improve readability and legibility, making it easier for users to scan and understand the content When designing your web pages, you always want to be mindful of the law of proximity This law states that elements that are close together are perceived as being related, while elements that are far apart are perceived as being unrelated You can use white space to help group related elements together and help navigate users through the content on your page --questions--\n--text--\nWhat is macro white space --answers--\nThe space between individual characters in a line of text --feedback--\nThink about space seen around larger elements The space around images only --feedback--\nThink about space seen around larger elements The space around text only --feedback--\nThink about space seen around larger elements The space between larger elements like images, text blocks and buttons --video-solution--\n4\n--text--\nWhat is active white space --answers--\nSpace that is only for text elements on a page --feedback--\nThink about the purpose of active white space",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3551,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baacb7f2f446728e77efe.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "436afb5f5a67bfd4984e76d8af7da1f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baacb7f2f446728e77efe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "line of text --feedback-- Think about space seen around larger elements The space around images only --feedback-- Think about space seen around larger elements The space around text only --feedback-- Think about space seen around larger elements The space between larger elements like images, text blocks and buttons --video-solution-- 4 --text-- What is active white space --answers-- Space that is only for text elements on a page --feedback-- Think about the purpose of active white spaceSpace that is for figure elements on a page --feedback--\nThink about the purpose of active white space Space that is for list items on a page --feedback--\nThink about the purpose of active white space Space that is intentionally created to help guide the user's eye and draw attention to certain elements on the page --video-solution--\n4\n--text--\nWhat is passive white space --answers--\nSpace that is left over after all the elements on a page have been placed Space that is only for text elements on a page --feedback--\nThink about how this space contrasts to active white space Space that is for image elements on a page --feedback--\nThink about how this space contrasts to active white space Space that is for nav elements on a page --feedback--\nThink about how this space contrasts to active white space --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3551,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baacb7f2f446728e77efe.md",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "4943d1c889aa484d64cb7b12de401265",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baae11d06c867a16f64e1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672baae11d06c867a16f64e1\ntitle: What Is Progressive Enhancement challengeType: 19\ndashedName: what-is-progressive-enhancement\n--description--\nProgressive enhancement is a design approach that ensures all users, regardless of browser or device, can access the essential content and functionality of an application It focuses on delivering a core experience that works for everyone, while offering extra features and improvements to users with more advanced browsers or better internet connections The progressive enhancement approach lives by these core principles:\nAll core content and basic functionality should be accessible on all browsers\nAll advanced layouts should be provided through external CSS stylesheets\nAll advanced functionality should be provided through external JavaScript files\nA user's browser preferences should be respected\nUsing a progressive enhancement approach makes your applications more accessible because all core content and functionality should not be blocked in unsupported environments In terms of speed, a progressive enhancement approach can also help improve the performance of your applications Those users that are working with slower internet connection speeds will still be able to access the content because the browser will download the necessary resources first When it comes to SEO, progressive enhancement can also help improve the visibility of your applications Search engines will be able to crawl the content of your applications because the core content is available in the initial HTML response While some have criticized this approach deeming that it is not always realistic for applications that rely heavily on JavaScript for their functionality, it is still a good practice to follow when building applications --questions--\n--text--\nWhat is the main goal of progressive enhancement --answers--\nTo ensure that the application is heavily reliant on JavaScript --feedback--\nThink about accessible content for all users To ensure all users, regardless of browser or device, can access the essential content and functionality of an application To ensure that the latest complex features are available to all users --feedback--\nThink about accessible content for all users To ensure that the application is only available to users with the latest browsers --feedback--\nThink about accessible content for all users --video-solution--\n2\n--text--\nWhich of the following is NOT a core principle of progressive enhancement --answers--\nA user's browser preferences should be respected --feedback--\nThink about which option does not respect the user's preferences All advanced layouts should be provided through external CSS stylesheets --feedback--\nThink about which option does not respect the user's preferences A user's browser preferences should be ignored All advanced functionality should be provided through external JavaScript files",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4021,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baae11d06c867a16f64e1.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "dd97c5de03b186eb9b2189267b5057a1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baae11d06c867a16f64e1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "content for all users --video-solution-- 2 --text-- Which of the following is NOT a core principle of progressive enhancement --answers-- A user's browser preferences should be respected --feedback-- Think about which option does not respect the user's preferences All advanced layouts should be provided through external CSS stylesheets --feedback-- Think about which option does not respect the user's preferences A user's browser preferences should be ignored All advanced functionality should be provided through external JavaScript files--feedback--\nThink about which option does not respect the user's preferences --video-solution--\n3\n--text--\nWhat is a common criticism of the progressive enhancement approach --answers--\nIt is not always realistic for applications that rely heavily on JavaScript for their functionality It can result in a less engaging user experience on modern devices due to its focus on backward compatibility --feedback--\nThink about the limitations of the approach and the amount of resources needed It leads to bloated web pages with excessive code and resources that are not needed by modern browsers --feedback--\nThink about the limitations of the approach and the amount of resources needed It requires extensive browser testing on older, less capable browsers, which can be time-consuming and expensive --feedback--\nThink about the limitations of the approach and the amount of resources needed --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4021,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baae11d06c867a16f64e1.md",
      "source_type": "git_repo"
    },
    "token_count": 257,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2c961696e8bf242fc10640e01c623d24",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6734ddabad59e593a49afafe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6734ddabad59e593a49afafe\ntitle: Welcome Message from Quincy\nchallengeType: 19\ndashedName: welcome-message-from-quincy\n--description--\nI'm Quincy Larson, teacher and founder of freeCodeCamp org Our charity's mission is to create free learning resources to help people learn math, programming, and computer science And that's precisely what we've done for you here This free, verified certification includes thousands of hours of lectures, interactive labs, and projects You're going to build dozens of apps from scratch This is real coding Everything's fully interactive You'll immediately apply concepts as you learn them And you'll get plenty of practice and spaced repetition along the way Over the past decade, tens of thousands of people who've learned to code using freeCodeCamp have gotten their first developer jobs Many of these people don't even have a university degree But I'm not going to sugarcoat it: learning to code is hard You're going to spend many nights and weekends sharpening your skills by building projects The good news is that the freeCodeCamp community is with you all the way You can get help anytime you get stuck Just use the freeCodeCamp forum or the freeCodeCamp Discord Or you can use the search bar and search through thousands of reference articles created by the community In the next lecture, I'll explain how the freeCodeCamp curriculum and how the certifications work --questions--\n--text--\nWhat is the mission of freeCodeCamp org --answers--\nTo create paid premium courses for computer science students --feedback--\nRefer back to the beginning of the lecture for the organization's mission To help university graduates get their first developer jobs --feedback--\nRefer back to the beginning of the lecture for the organization's mission To create free learning resources to help people learn math, programming, and computer science To provide certification programs for experienced developers --feedback--\nRefer back to the beginning of the lecture for the organization's mission --video-solution--\n3\n--text--\nAccording to the lecture, what should you expect when learning to code --answers--\nIt will be easy and you'll master it quickly --feedback--\nThe lecture emphasizes hands-on practice and building projects It will be hard and require many nights and weekends of practice You need a university degree to be successful --feedback--\nThe lecture emphasizes hands-on practice and building projects You can learn it all from lectures without building projects --feedback--\nThe lecture emphasizes hands-on practice and building projects",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3469,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6734ddabad59e593a49afafe.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b1e1448dd7a39c1064e7a3abff82d6c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6734ddabad59e593a49afafe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "lecture, what should you expect when learning to code --answers-- It will be easy and you'll master it quickly --feedback-- The lecture emphasizes hands-on practice and building projects It will be hard and require many nights and weekends of practice You need a university degree to be successful --feedback-- The lecture emphasizes hands-on practice and building projects You can learn it all from lectures without building projects --feedback-- The lecture emphasizes hands-on practice and building projects--video-solution--\n2\n--text--\nWhere can you get help when you get stuck while learning on freeCodeCamp --answers--\nOnly through the freeCodeCamp forum --feedback--\nThere are multiple ways to get help according to the lecture Only through the freeCodeCamp Discord --feedback--\nThere are multiple ways to get help according to the lecture The freeCodeCamp forum, Discord, or by searching through reference articles You have to figure it out on your own --feedback--\nThere are multiple ways to get help according to the lecture --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3469,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6734ddabad59e593a49afafe.md",
      "source_type": "git_repo"
    },
    "token_count": 202,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0bf5f19675547d345832bf13e0751bb5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baad7bbc4f86762ca173e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672baad7bbc4f86762ca173e\ntitle: What Are Best Practices for Working with Images in Your Designs challengeType: 19\ndashedName: what-are-best-practices-for-working-with-images-in-your-designs\n--description--\nAdding images to your websites is a great way to engage your users and increase the visual appeal of your site But there are a few things to consider when working with images in your designs The first thing to consider is creating responsive images Responsive images are images that scale to fit the size of the screen they are being viewed on This is important because it ensures that your images look good on all devices, from desktops to mobile phones Another thing to consider is the resolution for images Higher quality images with better resolution have more pixels per inch Pixels are small squares that make up an image Pixels per inch, or PPI, is the number of pixels in one inch of an image The higher the PPI, the better the image quality You want to make sure that your images are high quality and look good on all devices This means that you should use high resolution images that are optimized for the web Another thing to consider is the size of your images and how they fit within the spaces in the layout You want to make sure that your images are the right size and are not too large or too small Using large images that are meant to fit in smaller spaces in the design can slow down your website and make it harder for users to load your site You want to make sure that your images are the right size and are optimized for the web When it comes to image placement, you want to think about balance, hierarchy, and alignment to help ensure your images are optimized for the web Balance is the distribution of visual weight in a design You want to make sure there is a good balance between text and images on the site so it creates a harmonious design Hierarchy is the order in which elements are viewed on a page You want to make sure that images that align with important content are placed higher than images that are less important Alignment is the placement of elements in relation to each other You want to make sure that your images are aligned with the text and other elements on your site so that it creates a cohesive design The last thing to consider is accessibility for images You want to make sure that your images are accessible to all users, including those with visual impairments",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4301,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baad7bbc4f86762ca173e.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7cf09404724ab210a27822029a72409f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baad7bbc4f86762ca173e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "with important content are placed higher than images that are less important Alignment is the placement of elements in relation to each other You want to make sure that your images are aligned with the text and other elements on your site so that it creates a cohesive design The last thing to consider is accessibility for images You want to make sure that your images are accessible to all users, including those with visual impairmentsThis means that you should use alt text for your images so that screen readers can read the text to users who are visually impaired --questions--\n--text--\nWhat is the importance of balance in design when placing images --answers--\nTo ensure images are the right size --feedback--\nThink about how text and images work together in a design To make images accessible to all users\n--feedback--\nThink about how text and images work together in a design To create a harmonious design by distributing visual weight To improve the resolution of images --feedback--\nThink about how text and images work together in a design --video-solution--\n3\n--text--\nWhat is the purpose of using high resolution images in your designs --answers--\nTo make sure your images have the right color --feedback--\nThink about how the final image will look on different devices To ensure that your images look good on all devices To make sure that your images are the right size --feedback--\nThink about how the final image will look on different devices To make sure that your images are accessible to all users --feedback--\nThink about how the final image will look on different devices --video-solution--\n2\n--text--\nWhat is PPI --answers--\nThe number of pixels per one inch of an image The number of points per one inch of an image --feedback--\nReview the beginning of the lecture where PPI was first introduced The number of pixels per one centimeter of an image --feedback--\nReview the beginning of the lecture where PPI was first introduced The number picas per one image --feedback--\nReview the beginning of the lecture where PPI was first introduced --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4301,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-user-interface-design-fundamentals\\672baad7bbc4f86762ca173e.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1253c560307dcfd8a74d2d11d90beb9b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6734e2c5780912abd874e79c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6734e2c5780912abd874e79c\ntitle: How Does the Certification Process Work challengeType: 19\ndashedName: how-does-the-certification-process-work\n--description--\nfreeCodeCamp offers free, verified certifications We've structured our curriculum to give you tons of practice with each tool and each concept, to help you prepare for your certification exams You'll read short lectures and answer comprehension-check questions about them You'll code your way through step-by-step interactive workshops And you'll build dozens of projects from scratch Along the way, you'll pass dozens of quizzes and exams And you'll prove to us — and you'll prove to yourself — that you've mastered these tools and concepts Toward the end of the curriculum, you'll build your own unique capstone project that we'll review and give you feedback on This will be a project worthy of adding to your professional portfolio After you've completed the curriculum, passed the final exam, and built your capstone project, you can claim your free verified certification Your certification will have its own unique verification URL, unique serial number, and unique QR code You can add your certification to your résumé, LinkedIn, CV, and portfolio website At freeCodeCamp, we take developer education seriously There are no shortcuts You'll spend thousands of hours completing the curriculum Even if life gets in the way, and you have to stop for a while, we'll be here, ready to help you push forward with your skills You need to work hard, yes But you also need to work smart Before we dive into the curriculum, I'm going to share some insight into how most people learn effectively, and how most people work smart --questions--\n--text--\nWhat are the main components of the freeCodeCamp certification coursework --answers--\nReading textbooks and giving tech talks on the subjects learned in the certification --feedback--\nRefer back to the first part of this lecture for the answer Writing essays, contributing to open source projects and doing a freelance project --feedback--\nRefer back to the first part of this lecture for the answer Attending webinars and doing short coding challenges --feedback--\nRefer back to the first part of this lecture for the answer Reading short lectures, coding interactive workshops, and building projects --video-solution--\n4\n--text--\nWhat is required to claim your free verified certification from freeCodeCamp --answers--\nCoding interactive workshops",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3551,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6734e2c5780912abd874e79c.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "15a3af3fd2dbd10e017106b9fff81ba9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6734e2c5780912abd874e79c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "lecture for the answer Writing essays, contributing to open source projects and doing a freelance project --feedback-- Refer back to the first part of this lecture for the answer Attending webinars and doing short coding challenges --feedback-- Refer back to the first part of this lecture for the answer Reading short lectures, coding interactive workshops, and building projects --video-solution-- 4 --text-- What is required to claim your free verified certification from freeCodeCamp --answers-- Coding interactive workshops--feedback--\nfreeCodeCamp uses many methods to test your comprehension and retention of tools and concepts Building projects --feedback--\nfreeCodeCamp uses many methods to test your comprehension and retention of tools and concepts Passing exams --feedback--\nfreeCodeCamp uses many methods to test your comprehension and retention of tools and concepts All of the above --video-solution--\n4\n--text--\nWhat makes each freeCodeCamp certification unique --answers--\nIt has its own unique verification URL --feedback--\nThink about the features mentioned that verify authenticity and uniqueness It has its own unique serial number --feedback--\nThink about the features mentioned that verify authenticity and uniqueness It has its own QR code --feedback--\nThink about the features mentioned that verify authenticity and uniqueness All of the above --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3551,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6734e2c5780912abd874e79c.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a7ef6455a2d693f01ab161242c2f682b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6763500bd5a85d5898cc21a9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6763500bd5a85d5898cc21a9\ntitle: How do Most People Learn Effectively challengeType: 19\ndashedName: how-do-most-people-learn-effectively\n--description--\nLearning is a skill all its own And I'm going to quickly introduce you to key observations that scientists have made about learning These come from engineering professor Barbara Oakley's book, Learning how to Learn Concept number 1: spaced repetition Learning for half an hour each day for a week is much more effective than learning for three and a half hours all in one day This is because of the role that sleep plays in memory When you sleep, your brain builds and reinforces neural structures With spaced repetition, you review concepts regularly — first every few days, then every few weeks, then every few months Each time, your retention of those concepts improves freeCodeCamp has spaced repetition baked right into the curriculum Concept number 2: interleaving practice Rather than just studying one concept for an entire study session, it's better to get a little exposure to lots of concepts This shakes up your brain, and forces you to continually reframe what you know Through interleaving practice, you train yourself to be more agile in your thinking For this reason, the freeCodeCamp curriculum covers a ton of ground quickly, then circles back to reinforce everything over and over Concept number 3: active recall It's easy to trick yourself into thinking you're much better at a skill than you actually are Almost all beginners experience what scientists call an \"illusion of competence\" But, the best way to shatter that illusion is to actively recall and apply what you're learning The freeCodeCamp curriculum does this through quizzes, coding exercises, and full-blown projects Again, we've incorporated all of these concepts into the freeCodeCamp curriculum You're welcome to customize your learning as you see fit But when in doubt, just keep going through the curriculum, from top to bottom, and you'll be fine In the next lecture, we will discuss some strategies for building effective learning habits --questions--\n--text--\nWhat is the concept called where learning is spread out over time, allowing sleep to reinforce memory structures --answers--\nSpaced Repetition\nSpeed Reading\n--feedback--\nThis concept emphasizes learning a bit each day rather than all at once Memorization\n--feedback--\nThis concept emphasizes learning a bit each day rather than all at once",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3908,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6763500bd5a85d5898cc21a9.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d6de75e859777e792f5231a128873206",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6763500bd5a85d5898cc21a9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "from top to bottom, and you'll be fine In the next lecture, we will discuss some strategies for building effective learning habits --questions-- --text-- What is the concept called where learning is spread out over time, allowing sleep to reinforce memory structures --answers-- Spaced Repetition Speed Reading --feedback-- This concept emphasizes learning a bit each day rather than all at once Memorization --feedback-- This concept emphasizes learning a bit each day rather than all at oncePassive Review\n--feedback--\nThis concept emphasizes learning a bit each day rather than all at once --video-solution--\n1\n--text--\nWhich learning approach involves switching between different concepts or skills during a single study session to keep your thinking flexible --answers--\nFocused Immersion\n--feedback--\nIt's the technique that mixes things up to prevent your brain from getting stuck on one track Interleaving Practice\nHighlighting Notes\n--feedback--\nIt's the technique that mixes things up to prevent your brain from getting stuck on one track Mental Mapping\n--feedback--\nIt's the technique that mixes things up to prevent your brain from getting stuck on one track --video-solution--\n2\n--text--\nWhat strategy helps you overcome the illusion of competence by actively testing your understanding through quizzes and exercises --answers--\nPassive Listening\n--feedback--\nIt's the method where you try to recall information without looking at the answers first Rereading Notes\n--feedback--\nIt's the method where you try to recall information without looking at the answers first Active Recall\nReading Lectures Only\n--feedback--\nIt's the method where you try to recall information without looking at the answers first --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3908,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6763500bd5a85d5898cc21a9.md",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8155abfc5ceb2644672df22016e5e78e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6734e2dcb965e5ac0ea38e0f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6734e2dcb965e5ac0ea38e0f\ntitle: How Can You Build Effective Learning Habits and Work Smarter challengeType: 19\ndashedName: how-can-you-build-effective-learning-habits-and-work-smarter\n--description--\nTo make it through something as rigorous as the freeCodeCamp curriculum, you'll need to not only work hard – you'll need to work smart Over the years, I've talked with thousands of people who've learned to code and gotten developer jobs Here are some tips that have worked for them Tip number 1: pace yourself Learning to code is a marathon, not a sprint Remember that it's better to code 30 minutes every day of the week, than to try and cram all your learning into one day This is thanks to the important role that sleep plays in learning The freeCodeCamp curriculum already incorporates all those learning concepts I mentioned earlier: spaced repetition, interleaving practice, active recall All you need to do is sit down and work through the curriculum consistently every day This is easier said than done Most people who start this curriculum will at some point stop Hopefully, some of those people will come back and finish in the future But let's talk about you We want you to finish what you start And the best advice I have is to remember to pace yourself Tip number 2: routine is your friend If you make a habit of waking up 30 minutes earlier every day, you can get in a coding session before you go to work After a few weeks of doing this, it just becomes part of your routine You don't really have to think too much about it, or expend any additional willpower It's just something that you do Now, I understand that you're probably busy I wish I could tell you that there was just some magic book that you could buy, and that would be enough The reason buying a book feels so good is that it feels like you're also buying the time to read it But there's no magic involved in learning to code You've got to put in the time You've got to put in the reps at the keyboard I'll tell you this: if you can code for even 30 minutes a day, you're going to make serious gains over the course of a year Tip number 3: Use the Pomodoro technique Pomodoro is the Italian word for tomato In Italy they have these tomato shaped clocks that you set for 25 minutes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5047,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6734e2dcb965e5ac0ea38e0f.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ad6f86d446eaa25b08705acd42ffc4c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6734e2dcb965e5ac0ea38e0f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "involved in learning to code You've got to put in the time You've got to put in the reps at the keyboard I'll tell you this: if you can code for even 30 minutes a day, you're going to make serious gains over the course of a year Tip number 3: Use the Pomodoro technique Pomodoro is the Italian word for tomato In Italy they have these tomato shaped clocks that you set for 25 minutesSitting down to code isn't easy It takes willpower So to make it easier to sit down and start that coding, just tell yourself that you're going to code for 25 minutes Set a timer Then, once you've finished 25 minutes, you can take a break But by this point, you may be so deep into your coding session, that you don't even need to take a break The Pomodoro technique makes it a lot easier to get started Final tip: remember to get plenty of sleep You'll learn best when you're at your best Sleep plays a vital role in how your brain learns I encourage you to try to sleep at least 8 hours each night And with that, you're ready to dive into the curriculum and start working toward earning your freeCodeCamp verified certification Happy coding --questions--\n--text--\nWhat does the \"Pace yourself\" tip emphasize as key to making progress through the curriculum --answers--\nLearning as much as possible all in one day --feedback--\nIt's about treating coding like a marathon rather than a sprint Completing the curriculum without breaks --feedback--\nIt's about treating coding like a marathon rather than a sprint Working a little bit each day Stopping frequently whenever it feels hard --feedback--\nIt's about treating coding like a marathon rather than a sprint --video-solution--\n3\n--text--\nWhat is the main benefit of establishing a coding routine --answers--\nIt doubles the amount of learning in half the time --feedback--\nThink about what happens after you wake up 30 minutes earlier every day to code It reduces the need for sleep --feedback--\nThink about what happens after you wake up 30 minutes earlier every day to code It helps make coding a habit that requires less willpower It eliminates the need for practice or repetition --feedback--\nThink about what happens after you wake up 30 minutes earlier every day to code --video-solution--\n3\n--text--\nHow does the Pomodoro technique help with starting a coding session",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5047,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6734e2dcb965e5ac0ea38e0f.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "58b5c227230ea2679fb37425319e9e77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6734e2dcb965e5ac0ea38e0f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "minutes earlier every day to code It reduces the need for sleep --feedback-- Think about what happens after you wake up 30 minutes earlier every day to code It helps make coding a habit that requires less willpower It eliminates the need for practice or repetition --feedback-- Think about what happens after you wake up 30 minutes earlier every day to code --video-solution-- 3 --text-- How does the Pomodoro technique help with starting a coding session--answers--\nIt guarantees you will code for hours without stopping --feedback--\nYou set a timer for a short, fixed amount of time to break the initial resistance It instantly makes you a faster coder by strictly timing every keystroke --feedback--\nYou set a timer for a short, fixed amount of time to break the initial resistance It automatically determines which tasks you should work on, removing the need for planning --feedback--\nYou set a timer for a short, fixed amount of time to break the initial resistance It makes it easier to begin coding by committing to just 25 minutes --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5047,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-welcome-to-freecodecamp\\6734e2dcb965e5ac0ea38e0f.md",
      "source_type": "git_repo"
    },
    "token_count": 212,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "be72878bd71bde2903cb692acea42bac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672aa5e1f8b935577acfb2b9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa5e1f8b935577acfb2b9\ntitle: What Is CSS, and What Is Its Role on the Web challengeType: 19\ndashedName: what-is-css\n--description--\nCSS, which stands for Cascading Style Sheets, is a crucial component of modern web development It's a markup language used to apply styles for HTML In simpler terms, if HTML is the structure of a web page, CSS is what makes it look good The primary role of CSS is to separate the content of a web page from its visual presentation This separation allows web developers to create more flexible and maintainable websites With CSS, you can control the layout, colors, fonts, and overall visual appearance of web pages without altering the HTML structure Let's consider a simple analogy If you think of a website as a house, HTML would be the foundation and framework, while CSS would be the paint, wallpaper, and decorations that make the house visually appealing and unique CSS works by selecting HTML elements and applying styles to them These styles can include properties like color, font size, and many more By changing these properties, you can dramatically alter how a web page looks without changing its content One of the most powerful aspects of CSS is its ability to create responsive designs This means that with CSS, you can make your website look great on any device, whether it's a desktop computer, a tablet, or a smartphone CSS allows you to adjust layouts, font sizes, and other visual elements based on the screen size of the device viewing the website Another important feature of CSS is its cascading nature, which is where the \"cascading\" in its name comes from This means that styles can be inherited and overridden, allowing for a hierarchical structure of styling CSS also supports the use of external stylesheets This means you can keep all your styling rules in a separate file, which can then be linked to multiple HTML pages This feature greatly enhances the maintainability of websites, especially larger ones Instead of having to change styles on each individual page, you can make changes in one CSS file that will affect all linked pages In the world of web development, CSS plays a vital role in creating visually appealing, responsive, and user-friendly websites It allows developers to transform simple HTML documents into engaging web experiences that capture users' attention and enhance their interaction with web content --questions--\n--text--\nWhat is the primary purpose of CSS in web development --answers--\nTo structure the content of web pages",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672aa5e1f8b935577acfb2b9.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3b8da5077bab85d0e719aa8ac53cf635",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672aa5e1f8b935577acfb2b9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "you can make changes in one CSS file that will affect all linked pages In the world of web development, CSS plays a vital role in creating visually appealing, responsive, and user-friendly websites It allows developers to transform simple HTML documents into engaging web experiences that capture users' attention and enhance their interaction with web content --questions-- --text-- What is the primary purpose of CSS in web development --answers-- To structure the content of web pages--feedback--\nThink about how CSS relates to the visual aspects of a website To handle server-side logic --feedback--\nThink about how CSS relates to the visual aspects of a website To separate the presentation of a document from its content To manage database operations --feedback--\nThink about how CSS relates to the visual aspects of a website --video-solution--\n3\n--text--\nHow does CSS contribute to responsive web design --answers--\nBy handling user authentication --feedback--\nConsider how websites adapt to different devices By allowing adjustments to layout and styling based on device screen size By improving server response time --feedback--\nConsider how websites adapt to different devices By compressing image files --feedback--\nConsider how websites adapt to different devices --video-solution--\n2\n--text--\nWhat is meant by the \"cascading\" nature of CSS --answers--\nIt refers to the way water falls in a website background --feedback--\nThink about how styles can be applied generally and then more specifically It means CSS files must be arranged in a specific order --feedback--\nThink about how styles can be applied generally and then more specifically It allows styles to be inherited and overridden in a hierarchical manner It describes how quickly CSS loads in a browser --feedback--\nThink about how styles can be applied generally and then more specifically --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4154,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672aa5e1f8b935577acfb2b9.md",
      "source_type": "git_repo"
    },
    "token_count": 348,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3750b39759e4fba07dac1e91a7e4b668",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbbe2891564c4e316164.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672acbbe2891564c4e316164\ntitle: What Is the Basic Anatomy of a CSS Rule challengeType: 19\ndashedName: what-is-the-basic-anatomy-of-a-css-rule\n--description--\nCSS is responsible for the styles of a web page All of these styles are made up of various CSS rules A CSS rule is made up of two main parts: a selector and a declaration block Let's take a look at the basic syntax:\ncss\nselector {\nproperty: value;\n}\nA selector is a pattern used in CSS to identify and target specific HTML elements for styling Examples of selectors include type selectors, class selectors, and ID selectors The curly braces provided in the basic syntax are known as a declaration block A declaration block applies a set of styles for a given selector, or selectors Inside the declaration block, you will have a series of declarations Each declaration consists of a property and a value The property is the CSS identifier that specifies which feature is being styled An example of a property would be the background-color property The value would be the specific setting applied to that property For example, if the property is background-color, a value could be purple, which sets the background color to purple After each property name, you need to place a colon, and after each value, you should have a semicolon Now that you know the syntax for a CSS rule, let's take a look at an example css\np {\ncolor: blue;\n}\nIn this CSS rule, a type selector targets all paragraph elements on the page Inside the declaration block, there is a one declaration The declaration consists of the color property with a value set to blue This will change the text color for all paragraph elements to blue If you want to apply the same set of styles to multiple selectors, you can create a selector list with each selector separated by a comma Here is an example of styling multiple selectors:\n```css\ntitle, subheading {\ncolor: navy;\n}\n```\nIn this selector list, there is an id selector targeting the HTML element with the id value of title All id selectors must start with a hash # symbol Then there is a comma followed by a class selector that targets all HTML elements with the class value of subheading All class selectors must start with a dot The entire selector list will receive the same styling, with the text color set to navy --questions--\n--text--\nWhat is the purpose of a selector in a CSS rule --answers--\nTo apply styles to HTML elements",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4346,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbbe2891564c4e316164.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c6e66909b3568564629147595d6d1143",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbbe2891564c4e316164.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "title All id selectors must start with a hash # symbol Then there is a comma followed by a class selector that targets all HTML elements with the class value of subheading All class selectors must start with a dot The entire selector list will receive the same styling, with the text color set to navy --questions-- --text-- What is the purpose of a selector in a CSS rule --answers-- To apply styles to HTML elements--feedback--\nThe selector is the first part of the CSS rule and specifies the elements to be styled To determine which HTML elements the rule will apply to To define the specific style properties and values --feedback--\nThe selector is the first part of the CSS rule and specifies the elements to be styled To create new HTML elements --feedback--\nThe selector is the first part of the CSS rule and specifies the elements to be styled --video-solution--\n2\n--text--\nWhich of the following CSS rules correctly changes the text color of all paragraph elements to blue --answers--\ncss\np {\nbackground-color: blue;\n}\n--feedback--\nLook for the selector that targets all paragraph elements and the property that changes text color css\np {\ncolor: blue;\n}\ncss p {\ncolor: blue;\n}\n--feedback--\nLook for the selector that targets all paragraph elements and the property that changes text color ```css\np {\ncolor: blue;\n}\n```\n--feedback--\nLook for the selector that targets all paragraph elements and the property that changes text color --video-solution--\n2\n--text--\nGiven the following CSS rule, what will be the text size of the targeted HTML element css\nh1 {\ncolor: green;\nfont-size: 24px;\n}\n--answers--\ngreen\n--feedback--\nThe value is the specific measurement or setting applied to the property within the declaration block 24px\n16px\n--feedback--\nThe value is the specific measurement or setting applied to the property within the declaration block font-size\n--feedback--\nThe value is the specific measurement or setting applied to the property within the declaration block --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4346,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbbe2891564c4e316164.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9fda2b24bf7d2720d34c0e4d119896b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbce8163374c903253c9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672acbce8163374c903253c9\ntitle: What Is the Meta Viewport Element Used For challengeType: 19\ndashedName: what-is-the-meta-viewport-element-used-for\n--description--\nThe meta viewport element is a crucial component in responsive web design It's a special HTML meta element that gives the browser instructions on how to control the page's dimensions and scaling on different devices, particularly on mobile phones and tablets Let's take a look at the basic syntax of the meta viewport element:\nhtml\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1 0\">\nThis element is typically placed in the head section of your HTML document But what does each part of the element mean The width=device-width part tells the browser to set the width of the page to match the screen width of the device This is essential for creating responsive layouts that adapt to different screen sizes The initial-scale=1 0 sets the initial zoom level when the page is first loaded A value of 1 0 means that the page is displayed at 100% zoom, without any scaling By using the meta viewport element, you're ensuring that your web pages are displayed properly on mobile devices Without it, mobile browsers will typically render the page at a desktop screen width and then scale it down, which can result in a poor user experience with tiny, hard-to-read text The meta viewport element also allows you to control whether users can zoom in and out of your web pages While it's possible to disable zooming with the user-scalable=no attribute, it's generally recommended to avoid this for accessibility reasons Many users rely on the ability to zoom for better readability, especially those with visual impairments Here's an example of what not to do:\nhtml\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1 0, user-scalable=no\">\nInstead, it's better to design your website to be responsive and readable at different zoom levels, ensuring that all users can comfortably access your content The meta viewport element plays a crucial role in creating mobile-friendly websites It ensures that your carefully crafted responsive designs are displayed as intended on various devices, providing a better user experience for all visitors to your site --questions--\n--text--\nWhat is the primary purpose of the <meta name=\"viewport\"> tag --answers--\nTo improve website loading speed --feedback--\nThink about how websites adapt to different screen sizes To control page dimensions and scaling on different devices To provide page descriptions for search engines",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4140,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbce8163374c903253c9.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9ff9e8f00184d25bc3dcc3d0afdaaeac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbce8163374c903253c9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "crucial role in creating mobile-friendly websites It ensures that your carefully crafted responsive designs are displayed as intended on various devices, providing a better user experience for all visitors to your site --questions-- --text-- What is the primary purpose of the <meta name=\"viewport\"> tag --answers-- To improve website loading speed --feedback-- Think about how websites adapt to different screen sizes To control page dimensions and scaling on different devices To provide page descriptions for search engines--feedback--\nThink about how websites adapt to different screen sizes To enable JavaScript functionality --feedback--\nThink about how websites adapt to different screen sizes --video-solution--\n2\n--text--\nWhat does width=device-width in the <meta name=\"viewport\"> tag do --answers--\nIt sets the width of all images to match the device width --feedback--\nConsider how this attribute relates to responsive design It tells the browser to match the page width to the device's screen width It adjusts the font size based on the device width --feedback--\nConsider how this attribute relates to responsive design It limits the maximum width of the webpage --feedback--\nConsider how this attribute relates to responsive design --video-solution--\n2\n--text--\nWhy is it generally recommended to avoid using user-scalable=no in the <meta name=\"viewport\"> tag --answers--\nIt can cause the website to crash on certain devices --feedback--\nThink about how this might affect users with different needs It prevents the website from being indexed by search engines --feedback--\nThink about how this might affect users with different needs It can create accessibility issues for users who need to zoom It makes the website load slower on mobile devices --feedback--\nThink about how this might affect users with different needs --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4140,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbce8163374c903253c9.md",
      "source_type": "git_repo"
    },
    "token_count": 344,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1a883faa1fa808a3bcf891644e15b20a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbdd06b44c4cd3bf8713.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672acbdd06b44c4cd3bf8713\ntitle: What Are Some Default Browser Styles Applied to HTML challengeType: 19\ndashedName: what-are-some-default-browser-styles-applied-to-html\n--description--\nWhen you start working with HTML and CSS, you'll notice that some styles are applied to your web pages even before you write any CSS These styles are called \"default browser styles\" or \"user-agent styles\" These default browser styles provide basic formatting to ensure that HTML elements are displayed in a readable way across all browsers However, these styles can vary slightly from one browser to another, which is why it's important to understand them when designing a consistent look for your website Let’s take a look at some common default browser styles applied to various HTML elements Headings are one of the most commonly used HTML elements and are styled by default to have varying sizes and weights For example, h1 (the highest-level heading) is usually bold and larger in font size compared to lower-level headings like h2, h3, and so on These heading tags help define the hierarchy and structure of your content The following example shows all six heading elements from h1 to h6 ```html\nHeading 1\nHeading 2\nHeading 3\nHeading 4\nHeading 5\nHeading 6\n```\nAnother element with default styles is the hr element, which creates a horizontal rule often used to visually separate sections of content Browsers generally apply a simple line style to this element To understand it better, let's look at this code example:\n```html\nParagraph 1\nParagraph 2\nParagraph 3\nParagraph 4\n```\nThe horizontal rule appears as a thin line with spacing above and below the text to distinguish between sections of content Next, we will look at the blockquote element Blockquotes are used to indicate a section of text that is a quotation from another source Browsers typically add indentation and sometimes italicize the text The indentation helps set blockquotes apart from the rest of the text, making it clear that this content is quoted from another source Let's take a look at this code example:\n```html\nParagraph 1\nParagraph 2\nI think, therefore I am (Rene Descartes)\nParagraph 3\nParagraph 4\n```\nIn the example above, the blockquote element will produce an indent on the text, applied by the default browser styles",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5663,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbdd06b44c4cd3bf8713.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a4bf6610bb9ce3ef0fc0f558c62e3f2c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbdd06b44c4cd3bf8713.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "typically add indentation and sometimes italicize the text The indentation helps set blockquotes apart from the rest of the text, making it clear that this content is quoted from another source Let's take a look at this code example: ```html Paragraph 1 Paragraph 2 I think, therefore I am (Rene Descartes) Paragraph 3 Paragraph 4 ``` In the example above, the blockquote element will produce an indent on the text, applied by the default browser stylesAnother element with default styles is the anchor element (<a>), which is styled with a default blue color and underlining to make it recognizable as a link Let's take at look at the following HTML example:\n```html\nParagraph 1\nParagraph 2\nVisit the freeCodeCamp learn page\nParagraph 3\nParagraph 4\n```\nThe above code has four paragraph elements with an anchor element in the middle The anchor element is styled in blue with an underline to show users to go to the freeCodeCamp learn page Finally, we'll look at the unordered and ordered list elements Browsers add basic formatting to lists, including indentation and bullets or numbers, depending on whether you are using an unordered list (ul) or an ordered list (ol) Let's take a look at an example:\n```html\nSample Paragraph\nitem 1\nitem 2\nitem 3\nitem\nanother item\nyet another item\nEnding Paragraph\n```\nIn the above code example, we are using an unordered list and an ordered list Both of these lists will be slightly indented to the right by default For all of these examples, you saw how the browser applied default spacing, varying font sizes, and weights to these HTML elements In later lectures, you will learn how to reset some of these default styles using a CSS reset --questions--\n--text--\nWhat is the default style applied to heading tags (h1 to h6) in most browsers --answers--\nThey all have the same size and weight --feedback--\nThink about how headings create hierarchy in content They have varying sizes and weights, with h1 being the largest and boldest h1 is italicized, and h6 is underlined --feedback--\nThink about how headings create hierarchy in content All heading tags are centered by default --feedback--\nThink about how headings create hierarchy in content --video-solution--\n2\n--text--\nWhat does the hr element typically look like by default in most browsers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5663,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbdd06b44c4cd3bf8713.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f6aa4f3ba9db23d3bda7d137bdce1c80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbdd06b44c4cd3bf8713.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "have the same size and weight --feedback-- Think about how headings create hierarchy in content They have varying sizes and weights, with h1 being the largest and boldest h1 is italicized, and h6 is underlined --feedback-- Think about how headings create hierarchy in content All heading tags are centered by default --feedback-- Think about how headings create hierarchy in content --video-solution-- 2 --text-- What does the hr element typically look like by default in most browsers--answers--\nA thin horizontal line with spacing above and below A dashed line that spans the full width of the page --feedback--\nConsider what a horizontal rule generally looks like on a webpage with no additional CSS A thick black line with no spacing --feedback--\nConsider what a horizontal rule generally looks like on a webpage with no additional CSS A colored bar that separates sections --feedback--\nConsider what a horizontal rule generally looks like on a webpage with no additional CSS --video-solution--\n1\n--text--\nHow are anchor tags (a) typically styled by default in browsers --answers--\nbold and green --feedback--\nThink about the most common style applied to links on a webpage underline and blue italic and red --feedback--\nThink about the most common style applied to links on a webpage\nunderline and purple --feedback--\nThink about the most common style applied to links on a webpage\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5663,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbdd06b44c4cd3bf8713.md",
      "source_type": "git_repo"
    },
    "token_count": 278,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e3b948fd823578fbdd3232c9d3c2a909",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc03c257524d6a5151e8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672acc03c257524d6a5151e8\ntitle: How Do Width and Height Work challengeType: 19\ndashedName: how-do-width-and-height-work\n--description--\nIn CSS, the width and height properties are used to control the dimensions of elements on a webpage These properties can be defined in different units such as pixels (px), percentages (%), viewport units (vw, vh), and more The width property specifies the width of an element If you do not specify a width, then the default is set to auto This means the element will take up the full width of its parent container The height property specifies the height of an element Similarly, the height is auto by default, which means it will adjust to the content inside Here's an example using the width and height properties:\n```html\n```\nIn this example, we have a div element with class named box This element will be occupying 100px in height and width, whereas the background color will be skyblue Pixels are a fixed-size unit of measurement in CSS, providing precise control over dimensions The min-width property specifies the minimum width an element can be Even if the content inside is smaller, the element won’t shrink below this value The min-height specifies the minimum height an element can be It ensures that the element does not become shorter than the set value Here is an example:\n```html\n```\nThe above example demonstrates how min-width and min-height work Even though the box has its width and height set to 50px, it will actually be 100px by 100px This is because the min-width and min-height are set to 100px, which are larger than the specified width and height Remember, if min-width or min-height are larger than the width or height, they will override the smaller values This ensures that elements don't become too small, which is important for maintaining a consistent and usable design The max-width specifies the maximum width an element can grow to, even if there is enough space for it to be wider The max-height specifies the maximum height an element can grow to, regardless of the content size Here is an example:\n```html\n```\nThe above example demonstrates how max-width and max-height override width and height Even though the box is set to 200px by 200px, it will actually be 150px by 150px This is because the max-width and max-height are set to 150px, which is smaller",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5136,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc03c257524d6a5151e8.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4a0cf082b9edfb55f1e8691934a4462d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc03c257524d6a5151e8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "even if there is enough space for it to be wider The max-height specifies the maximum height an element can grow to, regardless of the content size Here is an example: ```html ``` The above example demonstrates how max-width and max-height override width and height Even though the box is set to 200px by 200px, it will actually be 150px by 150px This is because the max-width and max-height are set to 150px, which is smallerRemember, when max-width or max-height are smaller than width or height, they take precedence This is important for controlling the maximum size of elements in your layouts CSS prioritizes min-width and min-height over width and height max-width and max-height restrict dimensions if values exceed their limits For example, if you set width to 600px and max-width to 500px, the element will be limited to 500px wide The max-width overrides the wider setting, keeping the element within the specified maximum size This ensures elements stay within desired size ranges, regardless of standard width and height values --questions--\n--text--\nWhat will happen if you set width: 600px; and max-width: 500px; on a div element --answers--\nThe element will be 600px wide --feedback--\nThink about which property takes precedence in such a situation The element will be 500px wide The element will be 550px wide --feedback--\nThink about which property takes precedence in such a situation The element will be 100px wide --feedback--\nThink about which property takes precedence in such a situation --video-solution--\n2\n--text--\nIf you set min-height: 200px and height: 150px on an element, what will be the height of the element --answers--\n150px\n--feedback--\nConsider how min-height influences the final height 100px\n--feedback--\nConsider how min-height influences the final height 200px\n250px\n--feedback--\nConsider how min-height influences the final height --video-solution--\n3\n--text--\nWhich of the following is NOT a valid unit used with the width property --answers--\nhv\npx\n--feedback--\nReview the beginning of the lecture for the answer %\n--feedback--\nReview the beginning of the lecture for the answer vw\n--feedback--\nReview the beginning of the lecture for the answer --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5136,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc03c257524d6a5151e8.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "1fc9544d1bd8eabaeb5bf643d1890e60",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbf7490c054d213a8c1f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672acbf7490c054d213a8c1f\ntitle: What Are Inline, Internal, and External CSS, and When Should You Use Each One challengeType: 19\ndashedName: what-are-inline-internal-and-external-css\n--description--\nCSS can be applied to a webpage in three main ways: inline, internal, or external Each method has its own use case, advantages, and limitations, and knowing when to use each one is essential for writing clean, efficient, and maintainable code Let’s break down the three types of CSS and when you should use them Inline CSS is written directly within an HTML element using the style attribute It applies styles to a specific element Here's an example using inline CSS:\n```html\nThis is an inline-styled paragraph ```\nIn this example, we are using the style attribute to set the paragraph text to red Inline CSS is generally used for quick, one-off styles or to override other styles for a specific element However, it should be avoided in most cases because it can clutter the HTML and make the code harder to maintain Most of the time, it's better to use internal or external CSS to keep your styles organized and maintainable Internal CSS is written within the style tags inside the head section of an HTML document It applies styles to the entire page and is useful when you need to style a single document Here's an example of internal CSS:\n```html\nThis paragraph is styled using internal CSS ```\nIn the above example, the internal CSS applies blue text to all p elements on the page Internal CSS is best used when you need to apply styles to a specific page rather than across multiple pages It’s useful for single-page websites or when the styles don’t need to be reused elsewhere However, there are some downsides, such as not promoting reusability across multiple pages Additionally, like inline CSS, it mixes HTML and CSS, making the code harder to maintain in larger projects External CSS is written in a separate css file and linked to the HTML document using the link element in the head section It allows you to style multiple pages consistently and is the preferred method in professional web development Here's the HTML part of our code example:\n```html\nThis paragraph is styled using external CSS ```\nIn an earlier lecture, you learned that the link element has a rel attribute that specifies the relationship between the current document and the linked resource, such as linking to a stylesheet or an external resource",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5378,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbf7490c054d213a8c1f.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9d4b48f7ae1e9ce22fb9be790cc4c463",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbf7490c054d213a8c1f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "link element in the head section It allows you to style multiple pages consistently and is the preferred method in professional web development Here's the HTML part of our code example: ```html This paragraph is styled using external CSS ``` In an earlier lecture, you learned that the link element has a rel attribute that specifies the relationship between the current document and the linked resource, such as linking to a stylesheet or an external resourceOn the other hand, the href attribute specifies the URL of the linked resource, indicating where the resource should be retrieved from Here the CSS portion of the same example in separate file named style css css\np {\ncolor: green;\n}\nThis example targets all paragraph elements on the page and sets the text color to green External CSS is ideal for large projects where you want to maintain a consistent style across multiple pages It promotes separation of concerns by having HTML handle the structure and CSS handle the styling, which makes the code more maintainable and scalable Understanding when to use each type of CSS is crucial for efficient and effective web development In most cases, external CSS should be your go-to approach, especially for larger and more complex projects --questions--\n--text--\nWhen is it most appropriate to use inline CSS --answers--\nFor styling all paragraphs in a document --feedback--\nThink about when you need to apply a style directly to an element without affecting other elements For overriding styles quickly on a single element For styling an entire website --feedback--\nThink about when you need to apply a style directly to an element without affecting other elements For separating concerns in large projects --feedback--\nThink about when you need to apply a style directly to an element without affecting other elements --video-solution--\n2\n--text--\nWhich type of CSS is best suited for applying styles to a single webpage only --answers--\nInline CSS --feedback--\nThink about the CSS method that is placed inside the head tag and applies to just one page External CSS --feedback--\nThink about the CSS method that is placed inside the head tag and applies to just one page Internal CSS Universal CSS --feedback--\nThink about the CSS method that is placed inside the head tag and applies to just one page --video-solution--\n3\n--text--\nWhy is external CSS preferred in larger projects --answers--\nIt allows for quick, one-time style changes --feedback--\nConsider the benefits of keeping HTML structure and CSS styles in separate files It applies styles to only a specific element --feedback--\nConsider the benefits of keeping HTML structure and CSS styles in separate files",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5378,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbf7490c054d213a8c1f.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "316e2091a0bce6b4f7e3049b6281f43b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbf7490c054d213a8c1f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Universal CSS --feedback-- Think about the CSS method that is placed inside the head tag and applies to just one page --video-solution-- 3 --text-- Why is external CSS preferred in larger projects --answers-- It allows for quick, one-time style changes --feedback-- Consider the benefits of keeping HTML structure and CSS styles in separate files It applies styles to only a specific element --feedback-- Consider the benefits of keeping HTML structure and CSS styles in separate filesIt promotes separation of concerns and reusability across multiple pages It makes the HTML more complicated --feedback--\nConsider the benefits of keeping HTML structure and CSS styles in separate files --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5378,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acbf7490c054d213a8c1f.md",
      "source_type": "git_repo"
    },
    "token_count": 133,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a25272be9e16776f4c883bd463021a9c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc100d59d24da7b4e09c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672acc100d59d24da7b4e09c\ntitle: What Are the Different Types of CSS Combinators challengeType: 19\ndashedName: what-are-the-different-types-of-css-combinators\n--description--\nCSS combinators are used to define the relationship between selectors in CSS They help in selecting elements based on their relationship to other elements, which allows for more precise and efficient styling We will discuss some primary CSS combinators and their use cases, starting with the descendant combinator A descendant combinator is used to target elements matched by the second selector if they are nested within an ancestor element that matches the first selector An ancestor can be a parent element or a parent's parent To better understand how this works, let's take a look at an example css\nfigure img {\nborder: 4px solid black;\n}\nIn the above example, we use the descendant combinator to select all image elements inside figure elements and apply a solid black border on all four sides Note that a space is used between the parent and child selector In this case, the figure would be the parent and the img would be the child If you had multiple images inside a figure element, using the descendant combinator would be a good way to apply a solid black border around each of those images Another type of combinator would be the child combinator The child combinator (>) in CSS is used to select elements that are direct children of a specified parent element This combinator targets only elements with a specific parent, making your CSS rules more precise and preventing unintended styling of deeper nested elements Let's take a look at the following HTML example:\n```html\nFirst\nSecond\nThird\n```\nIn above HTML structure, the container class is applied to a div element Inside this container, there is a direct child p element (\"First\"), followed by two additional div elements, each containing a p element (\"Second\" and \"Third\") The first p element is a direct child of the container element, while the other two p elements are nested inside other div elements, making them deeper descendants To apply styles to just the direct child of the container class, you can use the child combinator like this:\ncss container > p {\ncolor: blue;\n}\nIn the above example, we are only targeting the direct child of container class This will give the direct child the text color of blue",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7633,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc100d59d24da7b4e09c.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "1c03b89ebdfc861e313803dfd843d327",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc100d59d24da7b4e09c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a direct child of the container element, while the other two p elements are nested inside other div elements, making them deeper descendants To apply styles to just the direct child of the container class, you can use the child combinator like this: css container > p { color: blue; } In the above example, we are only targeting the direct child of container class This will give the direct child the text color of blueBecause the other two paragraph elements are nested inside div elements, they are not considered direct children of the container class and will not get the text color of blue Another common combinator would be the next-sibling combinator The next-sibling combinator (+) in CSS selects an element that immediately follows a specified sibling element This combinator is useful when you want to apply styles to an element that directly follows another element, allowing for targeted styling based on the element's position relative to its siblings Let's take a look at the following HTML example:\n```html\nA cute orange cat lying on its back ```\nHere, we have a figure element containing an img element followed by a figcaption element The figcaption element is the immediate sibling of the img element If you wanted to apply a black border around the figcaption element, you can use the next-sibling combinator like this:\ncss\nimg + figcaption {\nborder: 4px solid black;\n}\nIn this example, the next-sibling combinator (+) selects the figcaption element that immediately follows the img element The applied CSS rule adds a 4px solid black border around the figcaption Another common combinator is the subsequent-sibling combinator The subsequent-sibling combinator (~) in CSS selects all siblings of a specified element that come after it Unlike the next-sibling combinator, which targets only the immediately following sibling, the subsequent-sibling combinator (~) can target any siblings that follow the specified element, offering greater flexibility in styling Let's take a look at the following HTML example:\n```html\nSubheading\nFirst paragraph Second paragraph Third paragraph Another paragraph element\n```\nIn this HTML structure, we have an h2 element followed by four paragraph elements The paragraph elements are siblings of the h2 element",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7633,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc100d59d24da7b4e09c.md",
      "source_type": "git_repo"
    },
    "token_count": 440,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "9a86ba99d4c4426c3fa92cb544f6a484",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc100d59d24da7b4e09c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "come after it Unlike the next-sibling combinator, which targets only the immediately following sibling, the subsequent-sibling combinator (~) can target any siblings that follow the specified element, offering greater flexibility in styling Let's take a look at the following HTML example: ```html Subheading First paragraph Second paragraph Third paragraph Another paragraph element ``` In this HTML structure, we have an h2 element followed by four paragraph elements The paragraph elements are siblings of the h2 elementIf you want to style all of the paragraph elements that come after the h2 element, then you can use the subsequent-sibling combinator like this:\ncss\nh2 ~ p {\ncolor: green;\n}\nIn this example, all paragraph elements following the h2 element will have the text color green The subsequent-sibling combinator (~) targets all paragraph siblings that appear after the h2 element, regardless of whether they are immediate siblings In conclusion, understanding and using various CSS combinators allows you to apply precise styles to your HTML elements, enhancing the control and flexibility of your design By mastering these selectors, you can create more sophisticated and targeted styling rules that improve both the appearance and functionality of your web pages --questions--\n--text--\nWhich CSS rule will style all span elements that are inside div elements, regardless of how deeply they are nested --answers--\ncss\ndiv > span {\ncolor: red;\n}\n--feedback--\nConsider the combinator that applies to elements within any level of nesting inside the specified parent css\ndiv + span {\ncolor: red;\n}\n--feedback--\nConsider the combinator that applies to elements within any level of nesting inside the specified parent css\ndiv ~ span {\ncolor: red;\n}\n--feedback--\nConsider the combinator that applies to elements within any level of nesting inside the specified parent css\ndiv span {\ncolor: red;\n}\n--video-solution--\n4\n--text--\nWhich CSS rule will style only the direct child li elements of ul elements --answers--\ncss\nul > li {\nfont-weight: bold;\n}\ncss\nul li {\nfont-weight: bold;\n}\n--feedback--\nThink about the combinator that targets elements that are direct children of a specified parent css\nul + li {\nfont-weight: bold;\n}\n--feedback--\nThink about the combinator that targets elements that are direct children of a specified parent css\nul ~ li {\nfont-weight: bold;\n}\n--feedback--\nThink about the combinator that targets elements that are direct children of a specified parent",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7633,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc100d59d24da7b4e09c.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "da23193385141f48d38d29252d89ef43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc100d59d24da7b4e09c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "li { font-weight: bold; } css ul li { font-weight: bold; } --feedback-- Think about the combinator that targets elements that are direct children of a specified parent css ul + li { font-weight: bold; } --feedback-- Think about the combinator that targets elements that are direct children of a specified parent css ul ~ li { font-weight: bold; } --feedback-- Think about the combinator that targets elements that are direct children of a specified parent--video-solution--\n1\n--text--\nWhich CSS rule will style the first p element that immediately follows any h1 element --answers--\ncss\nh1 > p {\nmargin-top: 0;\n}\n--feedback--\nConsider the combinator that applies to an element immediately following a specified sibling css\nh1 + p {\nmargin-top: 0;\n}\ncss\nh1 ~ p {\nmargin-top: 0;\n}\n--feedback--\nConsider the combinator that applies to an element immediately following a specified sibling css\nh1 p {\nmargin-top: 0;\n}\n--feedback--\nConsider the combinator that applies to an element immediately following a specified sibling --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7633,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc100d59d24da7b4e09c.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "40a6cc971d17eea0b93c38c2d9313be3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc1e24c1e54df5ad89bd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672acc1e24c1e54df5ad89bd\ntitle: What Is the Difference Between Inline and Block-Level Elements in CSS challengeType: 19\ndashedName: what-is-the-difference-between-inline-and-block-level-elements-in-css\n--description--\nIn HTML and CSS, elements are classified as either inline elements or block-level elements, and this classification dictates how they behave in the document layout Understanding this difference is crucial for controlling how your content is displayed on a webpage Block-level elements are elements that take up the full width available to them by default, stretching across the width of their container These elements always start on a new line and push other content to the next line, creating a \"block\" of content Block-level elements have the CSS property display: block; applied by default This property ensures that the element stretches to fill the container's width and appears on a new line Some common block-level elements are div elements, paragraphs, headings, ordered lists, unordered lists, and section elements Here is a code example of a block-level element:\n```html\nFirst paragraph\nSecond paragraph\n```\nIn this example, we have two paragraph elements where the first one has a red border around it The two paragraph elements do not share the same line because they are block level elements by default So, both paragraph elements will take up the full width of its container, which in this case is the body element Block-level elements are ideal when you want content to stack vertically, such as paragraphs, sections, or larger blocks of content They're commonly used to define the layout and structure of a webpage Inline elements, unlike block-level elements, only take up as much width as they need and do not start on a new line These elements flow within the content, allowing text and other inline elements to appear alongside them Inline elements have the CSS property display: inline; applied by default This property ensures that the element remains within the flow of the content and does not break onto a new line Common inline elements are span, anchor, and img elements Here's an example to better understand inline elements:\n```html\nThis is a\nred\nword inside a paragraph ```\nIn this example, we have a span element nested inside of a paragraph element The span element has a red text color with a green border around it so you can see the highlighted word better",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4562,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc1e24c1e54df5ad89bd.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "729dce547a311da1d287f1d6048d8def",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc1e24c1e54df5ad89bd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the flow of the content and does not break onto a new line Common inline elements are span, anchor, and img elements Here's an example to better understand inline elements: ```html This is a red word inside a paragraph ``` In this example, we have a span element nested inside of a paragraph element The span element has a red text color with a green border around it so you can see the highlighted word betterAs you can see, the span element only takes up as much space as the word \"red\" and does not push the following content to a new line Inline elements are best used for styling smaller portions of text or content within a line, such as emphasizing a word, creating hyperlinks, or applying specific styles to parts of a paragraph --questions--\n--text--\nWhat is the default behavior of block-level elements in CSS --answers--\nThey take up as much width as necessary and stay within the flow of content --feedback--\nBlock-level elements create large \"blocks\" of content on a webpage They take up the full width of their container and start on a new line They are only used for images and links --feedback--\nBlock-level elements create large \"blocks\" of content on a webpage They are always aligned to the center of the page --feedback--\nBlock-level elements create large \"blocks\" of content on a webpage --video-solution--\n2\n--text--\nWhich of the following is an example of an inline element --answers--\ndiv\n--feedback--\nInline elements do not force other elements to a new line p\n--feedback--\nInline elements do not force other elements to a new line span\nsection\n--feedback--\nInline elements do not force other elements to a new line --video-solution--\n3\n--text--\nHow can you change the behavior of a block-level element to behave like an inline element --answers--\nApply display: inline-block;\n--feedback--\nThink about which display value makes elements stay within the flow of content Apply display: flex;\n--feedback--\nThink about which display value makes elements stay within the flow of content Apply display: inline;\nApply display: none;\n--feedback--\nThink about which display value makes elements stay within the flow of content --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4562,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc1e24c1e54df5ad89bd.md",
      "source_type": "git_repo"
    },
    "token_count": 444,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "02f10f08191fad5d4aaa1b9ce854928c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc3f6f3e3c4e31ec3e12.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672acc3f6f3e3c4e31ec3e12\ntitle: How Does Inline-Block Work, and How Does It Differ from Inline and Block Elements challengeType: 19\ndashedName: how-does-inline-block-work\n--description--\nWhen working with CSS, you often encounter three different types of display behaviors for elements: inline, block, and inline-block Each of these properties affects how elements are positioned and how they interact with other elements on the page In this lecture, we will focus on how the inline-block property works and how it differs from both inline and block-level elements Block-level elements behave like large containers or \"blocks\" that take up the full width of their parent container They always start on a new line, and their height and width can be adjusted Inline elements only take up as much space as they need They flow within the surrounding content and do not break onto a new line The inline-block property is a hybrid of these two behaviors Like inline elements, inline-block elements remain in the text flow without starting on a new line However, unlike inline elements, you can adjust the width and height of an inline-block element, just as you would with block-level elements In short, the key difference between inline and inline-block is that inline elements cannot have their size controlled, whereas inline-block elements allow for full control over dimensions while still staying inline with other content Let's take a look at an example ```html\nInline-Block Element 1\nInline-Block Element 2\n```\nIn the above example, we have a div with a class of container Inside that div element, we have two span elements Here is the accompanying CSS:\n```css inline-block-element {\ndisplay: inline-block;\nwidth: 150px;\nheight: 100px;\n} element1 {\nbackground-color: lightblue;\n} element2 {\nbackground-color: lightgreen;\n}\n```\nEach of the span elements is set to display:inline-block and has a width and height set as well The inline-block elements will appear side by side because they behave like inline elements, but they also have a specified width and height, which gives them block-like properties But, if you remove the display: inline-block property, neither the height nor the width will be applied even though you defined it clearly Here is the revised CSS:\n```css inline-block-element {\nwidth: 150px;\nheight: 100px;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5450,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc3f6f3e3c4e31ec3e12.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6df36220f34a9242e334eb8cd31dd53b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc3f6f3e3c4e31ec3e12.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "set to display:inline-block and has a width and height set as well The inline-block elements will appear side by side because they behave like inline elements, but they also have a specified width and height, which gives them block-like properties But, if you remove the display: inline-block property, neither the height nor the width will be applied even though you defined it clearly Here is the revised CSS: ```css inline-block-element { width: 150px; height: 100px; }element1 {\nbackground-color: lightblue;\n} element2 {\nbackground-color: lightgreen;\n}\n```\nIn this code, we removed the display: inline-block; property but kept everything else intact Here, the span elements revert to their default behavior as inline elements As a result, the specified width and height are ignored, and the elements only take up the space needed for their content Understanding how inline-block works is useful because you can use it for creating layouts that require both alignment and dimension control within a continuous text flow --questions--\n--text--\nWhat is the key characteristic of an inline-block element that distinguishes it from an inline element --answers--\nInline-block elements cannot be nested inside block elements --feedback--\nThink about whether inline elements allow you to adjust their dimensions Inline-block elements automatically span the full width of their container --feedback--\nThink about whether inline elements allow you to adjust their dimensions Inline-block elements allow setting of height and width, unlike inline elements Inline-block elements always break onto a new line --feedback--\nThink about whether inline elements allow you to adjust their dimensions --video-solution--\n3\n--text--\nWhich scenario is best suited for using inline-block elements over inline or block elements --answers--\nWhen you need an element to take up the entire width of its parent container --feedback--\nConsider how inline-block strikes a balance between inline flow and size control When you want an element to remain inline but need to adjust its size When you need an element to always start on a new line --feedback--\nConsider how inline-block strikes a balance between inline flow and size control When you don't want an element to be affected by padding and margins --feedback--\nConsider how inline-block strikes a balance between inline flow and size control --video-solution--\n2\n--text--\nIn what situation would an element with display: inline-block; behave differently than one with display: block; --answers--\nWhen you need the element to take up the entire width of the container",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5450,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc3f6f3e3c4e31ec3e12.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c2d7e1909fa8936a1ba41fd49204194f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc3f6f3e3c4e31ec3e12.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a new line --feedback-- Consider how inline-block strikes a balance between inline flow and size control When you don't want an element to be affected by padding and margins --feedback-- Consider how inline-block strikes a balance between inline flow and size control --video-solution-- 2 --text-- In what situation would an element with display: inline-block; behave differently than one with display: block; --answers-- When you need the element to take up the entire width of the container--feedback--\nThink about how inline-block elements behave with respect to text and other inline content When you want the element to flow alongside text and other inline elements When you need the element to start on a new line automatically --feedback--\nThink about how inline-block elements behave with respect to text and other inline content When you don't want the element to have any height or width properties --feedback--\nThink about how inline-block elements behave with respect to text and other inline content --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5450,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc3f6f3e3c4e31ec3e12.md",
      "source_type": "git_repo"
    },
    "token_count": 196,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "aa51afc87b55438175a0e1a9def1e99b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\67329f508a6ec45b046700b3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67329f508a6ec45b046700b3\ntitle: What Are the Key Characteristics of JavaScript Arrays challengeType: 19\ndashedName: what-are-the-key-characteristics-of-javascript-arrays\n--description--\nAn array in JavaScript is an ordered collection of values, each identified by a numeric index The values in a JavaScript array can be of different data types, including numbers, strings, booleans, objects, and even other arrays To create an array in JavaScript, you can use square brackets, [], and separate the values with commas Here's an example:\njs\nlet fruits = [\"apple\", \"banana\", \"orange\"];\nIn this example, we declare a variable fruits and assign it an array containing three string values: apple, banana, and orange One of the key characteristics of arrays is that they are zero-indexed, meaning that the first element in an array has an index of 0, the second element has an index of 1, and so on You can access individual elements in an array using their index For example:\njs\nlet fruits = [\"apple\", \"banana\", \"orange\"];\nconsole log(fruits[0]); // \"apple\"\nconsole log(fruits[2]); // \"orange\"\nIn this example, we use the index 0 to access the first element (apple) and the index 2 to access the third element (orange) Arrays in JavaScript have a special length property that returns the number of elements in the array You can access this property using the length keyword For example:\njs\nlet fruits = [\"apple\", \"banana\", \"orange\"];\nconsole log(fruits length); // 3\nAnother key characteristic of arrays in JavaScript is that they are dynamic, meaning that their size can change after they are created You can add or remove elements from an array using various array methods, such as push(), pop(), shift(), unshift(), splice(), and more These methods will be taught in upcoming lectures JavaScript arrays are versatile and useful when it comes to data storage inside your programs Throughout this module, you'll get to see firsthand how working with arrays will help you efficiently manage and manipulate collections of data --questions--\n--text--\nWhich of the following is NOT true about JavaScript arrays --answers--\nThey are zero-indexed --feedback--\nRecall how each value in an array is numerically indexed, and how that affects the way values are stored They are an unordered collection of values",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3752,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\67329f508a6ec45b046700b3.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "858e82076403bc12c83aba990b8fc62a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\67329f508a6ec45b046700b3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and useful when it comes to data storage inside your programs Throughout this module, you'll get to see firsthand how working with arrays will help you efficiently manage and manipulate collections of data --questions-- --text-- Which of the following is NOT true about JavaScript arrays --answers-- They are zero-indexed --feedback-- Recall how each value in an array is numerically indexed, and how that affects the way values are stored They are an unordered collection of valuesThey can contain another array as a value --feedback--\nRecall how each value in an array is numerically indexed, and how that affects the way values are stored They are dynamic, and their size can change after they're created --feedback--\nRecall how each value in an array is numerically indexed, and how that affects the way values are stored --video-solution--\n2\n--text--\nWhat will be the output of the following code js\nlet numbers = [1, 2, 3, 4, 5];\nconsole log(numbers[2]);\n--answers--\n2\n--feedback--\nRemember that arrays in JavaScript are zero-indexed 3\n4\n--feedback--\nRemember that arrays in JavaScript are zero-indexed 5\n--feedback--\nRemember that arrays in JavaScript are zero-indexed --video-solution--\n2\n--text--\nWhat will be the output of the following code js\nlet colors = [\"red\", \"green\", \"blue\"];\nconsole log(colors length);\n--answers--\n2\n--feedback--\nThe length property of an array returns the number of elements it contains 3\n4\n--feedback--\nThe length property of an array returns the number of elements it contains undefined\n--feedback--\nThe length property of an array returns the number of elements it contains --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3752,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\67329f508a6ec45b046700b3.md",
      "source_type": "git_repo"
    },
    "token_count": 359,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "08d823f16d2cf8f9a2002ccc3beeb660",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aebaa8abb9086a9bb17a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732aebaa8abb9086a9bb17a\ntitle: How Do You Access and Update Elements in an Array challengeType: 19\ndashedName: how-do-you-access-and-update-elements-in-an-array\n--description--\nIn the previous lecture, you were first introduced to working with arrays and accessing different elements from arrays Here is a reminder on how to access the second element from an array:\n```js\nconst fruits = [\"apple\", \"banana\", \"cherry\"];\nconsole log(fruits[1]); // \"banana\"\n```\nSince arrays are zero based indexed, the first element will be at index 0, the second index will be at index 1, etc It's important to note that if you try to access an index that doesn't exist in the array, JavaScript will return undefined js\nlet fruits = [\"apple\", \"banana\", \"cherry\"];\nconsole log(fruits[3]); // undefined\nIn this example, there is no index 3 for the fruits array So the log will show undefined Now, let's look at how to update elements in an array You can update an element by assigning a new value to a specific index js\nlet fruits = [\"apple\", \"banana\", \"cherry\"];\nfruits[1] = \"blueberry\";\nconsole log(fruits); // [\"apple\", \"blueberry\", \"cherry\"]\nIn this example, we've replaced banana with blueberry at index 1 This method allows you to change any element in the array, as long as you know its index You can also add new elements to an array by assigning a value to an index that doesn't yet exist:\njs\nlet fruits = [\"apple\", \"banana\", \"cherry\"];\nfruits[3] = \"date\";\nconsole log(fruits); // Outputs: [\"apple\", \"blueberry\", \"cherry\", \"date\"]\nHowever, exercise caution when doing this If you assign a value to an index that is much larger than the current length of the array, you will create undefined elements for the indices in between, which can lead to unexpected behavior As you continue to work with JavaScript, you'll find that these ways of accessing and updating array elements are fundamental to many programming tasks Whether you're building a simple todo list or processing complex data structures, these skills will be invaluable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3600,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aebaa8abb9086a9bb17a.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6843e80bce1bc1a79d399f210426f8a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aebaa8abb9086a9bb17a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "If you assign a value to an index that is much larger than the current length of the array, you will create undefined elements for the indices in between, which can lead to unexpected behavior As you continue to work with JavaScript, you'll find that these ways of accessing and updating array elements are fundamental to many programming tasks Whether you're building a simple todo list or processing complex data structures, these skills will be invaluable--questions--\n--text--\nIf you have an array let numbers = [10, 20, 30, 40, 50], what will numbers[2] return --answers--\n20\n--feedback--\nRemember that array indexing starts at 0 30\n40\n--feedback--\nRemember that array indexing starts at 0 2\n--feedback--\nRemember that array indexing starts at 0 --video-solution--\n2\n--text--\nWhat happens if you try to access an array element at an index that doesn't exist --answers--\nIt throws an error --feedback--\nThink about what JavaScript does when it can't find a value at a specified index It returns null --feedback--\nThink about what JavaScript does when it can't find a value at a specified index It returns undefined It returns the last element of the array --feedback--\nThink about what JavaScript does when it can't find a value at a specified index --video-solution--\n3\n--text--\nWhat is the index number used to represent the first element of an array --answers--\n5\n--feedback--\nRemember we don't start counting at 1 We start counting at a different number when dealing with arrays 2\n--feedback--\nRemember we don't start counting at 1 We start counting at a different number when dealing with arrays 0\n1\n--feedback--\nRemember we don't start counting at 1 We start counting at a different number when dealing with arrays --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3600,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aebaa8abb9086a9bb17a.md",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "865792e24520c63f07c3dd5d8243ad56",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc538e6ef24e9dd3c94f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672acc538e6ef24e9dd3c94f\ntitle: What Are Margins and Padding, and How Do They Work challengeType: 19\ndashedName: what-are-margins-and-padding\n--description--\nMargin and padding are essential properties in CSS for creating well-structured, readable, and visually appealing web pages Margins control the space outside an element, helping to separate it from other elements and define the layout structure, while padding controls the space inside an element, improving content readability and aesthetic appeal To better understand the differences between margin and padding, let's take a look at some examples Here is an HTML example of three paragraph elements on the page:\n```html\nParagraph one\nParagraph two\nParagraph three\n```\nTo apply spacing to the top of each paragraph element, you can use the margin-top property like this:\ncss\np {\nmargin-top: 20px;\nborder: 2px solid black;\n}\nIn this example, we are applying 20px of margin only to the top of each paragraph element We also have a solid black border on all four sides so you can see the margin better The four different margin properties are margin-top, margin-right, margin-bottom and margin-left Here is an example of using all four properties:\n```html\nParagraph one\nParagraph two\nParagraph three\n```\ncss\np {\nmargin-top: 10px;\nmargin-right: 20px;\nmargin-bottom: 30px;\nmargin-left: 40px;\nborder: 2px solid black;\n}\nIn this example, we are assigning spacing values on all four sides of the paragraph element A solid black border has also been added so you can see the margins better Another way to use the margin property is with shorthand notation You can specify one, two, three, or four values at once Let’s explore these options together When using a singular value on the margin shorthand, that exact value will be applied to all four sides of the target element Here is an example of using a single value on margin shorthand:\ncss\np {\nmargin: 10px;\n}\nThis code example will apply 10px of margin equally to all four sides of the paragraph element When using two values, the first value applies to the top and bottom, while the second value applies to the left and right sides of the element",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6432,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc538e6ef24e9dd3c94f.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "cda9bf3635f2b3ca19b89b32a5ab10db",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc538e6ef24e9dd3c94f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "that exact value will be applied to all four sides of the target element Here is an example of using a single value on margin shorthand: css p { margin: 10px; } This code example will apply 10px of margin equally to all four sides of the paragraph element When using two values, the first value applies to the top and bottom, while the second value applies to the left and right sides of the elementHere is an example of using of two values for the margin shorthand:\ncss\np {\nmargin: 10px 20px;\n}\nThis sets the top and bottom margins to 10px, and 20px for the left and right margins for the paragraph element If three values are provided, the first value applies to the top margin, the second value to the left and right margin, and the third value to the bottom margin Here is an example to better understand:\ncss\np {\nmargin: 10px 20px 30px;\n}\nThis sets the margin to 10px for the top, 20px for the left and right, and 30px for the bottom When using four values, this gives you more control, as you can independently specify each margin value for each side of the target element The first value targets the top, the second value targets the right, the third value targets the bottom, and the fourth value targets the left Here is an example of using the margin shorthand with four values:\ncss\np {\nmargin: 10px 20px 30px 40px;\n}\nThis sets the margin to 10px for the top, 20px for the right, 30px for the bottom, and 40px for the left The padding property is used to apply space inside the element, between the content and its border Like the margin property, the four padding properties are padding-top, padding-right, padding-bottom and padding-left Here's an example on how to set the padding for a paragraph element:\n```html\nParagraph one\nParagraph two\nParagraph three\n```\ncss\np {\npadding-top: 10px;\npadding-right: 20px;\npadding-bottom: 30px;\npadding-left: 40px;\nborder: 2px solid black;\n}\nThis sets the padding to 10px for the top, 20px for the right, 30px for the bottom, and 40px for the left",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6432,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc538e6ef24e9dd3c94f.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "3028304c828a5a6aae559a741a854ee7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc538e6ef24e9dd3c94f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and its border Like the margin property, the four padding properties are padding-top, padding-right, padding-bottom and padding-left Here's an example on how to set the padding for a paragraph element: ```html Paragraph one Paragraph two Paragraph three ``` css p { padding-top: 10px; padding-right: 20px; padding-bottom: 30px; padding-left: 40px; border: 2px solid black; } This sets the padding to 10px for the top, 20px for the right, 30px for the bottom, and 40px for the leftAs you can see that, padding is applied to the content which is inside the border, unlike margin which applies to outside the border Just like the margin property, you can also choose to use the shorthand for the padding property You can either specify one, two, three, or four values on the padding shorthand property as well Here is an example of using the padding shorthand for paragraph element from earlier:\ncss\np {\npadding: 10px 20px 30px 40px;\nborder: 2px solid black;\n}\nIn the example, using the shorthand the code will set the padding to 10px for the top, 20px for the right, 30px for the bottom, and 40px for the left of the paragraph element --questions--\n--text--\nWhich CSS property would you use to create space between the border of an element and its neighboring elements --answers--\npadding\n--feedback--\nThis property is used to create space outside the element's border border\n--feedback--\nThis property is used to create space outside the element's border margin\nwidth\n--feedback--\nThis property is used to create space outside the element's border --video-solution--\n3\n--text--\nWhich CSS property would you use to create space between the content of an element and its border --answers--\npadding\nmargin\n--feedback--\nThis property is used to create space inside the element's border border\n--feedback--\nThis property is used to create space inside the element's border height\n--feedback--\nThis property is used to create space inside the element's border --video-solution--\n1\n--text--\nWhat is the correct order of values when using the shorthand property for margin or padding with four values --answers--\nleft, right, top, bottom --feedback--\nThink about the direction you would go in a clockwise manner starting from the top",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6432,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc538e6ef24e9dd3c94f.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "c8d28359f6e11de8ab925165fbb9ccdc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc538e6ef24e9dd3c94f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to create space inside the element's border border --feedback-- This property is used to create space inside the element's border height --feedback-- This property is used to create space inside the element's border --video-solution-- 1 --text-- What is the correct order of values when using the shorthand property for margin or padding with four values --answers-- left, right, top, bottom --feedback-- Think about the direction you would go in a clockwise manner starting from the toptop, left, bottom, right --feedback--\nThink about the direction you would go in a clockwise manner starting from the top top, right, bottom, left right, bottom, left, top --feedback--\nThink about the direction you would go in a clockwise manner starting from the top --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6432,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-what-is-css\\672acc538e6ef24e9dd3c94f.md",
      "source_type": "git_repo"
    },
    "token_count": 161,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "bd118684a4b25e63c72e385c2a94df67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aec982904608b637716b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732aec982904608b637716b\ntitle: How Do You Add and Remove Elements from the Beginning and End of an Array challengeType: 19\ndashedName: how-do-you-add-and-remove-elements-from-the-beginning-and-end-of-an-array\n--description--\nArrays in JavaScript are dynamic, which means you can easily add or remove elements from them There are four main methods for adding and removing elements from the beginning and end of an array: push(), pop(), shift(), and unshift() Let's explore each of these methods in detail The push() method is used to add one or more elements to the end of an array The return value for the push() method is the new length of the array Here's an example of adding a new fruit to the existing fruits array:\njs\nconst fruits = [\"apple\", \"banana\"];\nconst newLength = fruits push(\"orange\");\nconsole log(newLength); // 3\nconsole log(fruits); // [\"apple\", \"banana\", \"orange\"]\nIn this example, we start with an array called fruits which contains two elements We then use the push() method to add the string orange to the end of the array You might have noticed that we are using const when declaring the fruits array But why is it possible to add more elements to this fruits array when fruits is a constant This is possible because declaring an array with the const keyword creates a reference to the array While the array itself is mutable and can be modified, you cannot reassign a new value to the fruits constant, like this:\njs\nconst fruits = [\"apple\", \"banana\"];\nfruits = [\"This\", \"will\", \"not\", \"work\"];\nconsole log(fruits); // Uncaught TypeError: Assignment to constant variable The next method we will look at is the pop() method The pop() method removes the last element from an array and returns that element It also modifies the original array Here's how it works:\njs\nlet fruits = [\"apple\", \"banana\", \"orange\"];\nlet lastFruit = fruits pop();\nconsole log(fruits); // [\"apple\", \"banana\"]\nconsole log(lastFruit); // \"orange\"\nIn this example, we start with an array of three fruits The pop() method removes the last element (orange) from the array and returns it The original fruits array is modified and contains only two elements The unshift() method adds one or more elements to the beginning of an array and returns its new length",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aec982904608b637716b.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "41eeaa65064acb444e95bfacd7067b0f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aec982904608b637716b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "js let fruits = [\"apple\", \"banana\", \"orange\"]; let lastFruit = fruits pop(); console log(fruits); // [\"apple\", \"banana\"] console log(lastFruit); // \"orange\" In this example, we start with an array of three fruits The pop() method removes the last element (orange) from the array and returns it The original fruits array is modified and contains only two elements The unshift() method adds one or more elements to the beginning of an array and returns its new lengthIt works similarly to push(), but modifies the start of the array instead of the end Here's an example:\njs\nlet numbers = [2, 3];\nlet newLength = numbers unshift(1);\nconsole log(numbers); // [1, 2, 3]\nconsole log(newLength); // 3\nIn this example, we use unshift() to add the number 1 to the beginning of the numbers array The method returns the new length of the array, which is 3 Finally, the shift() method removes the first element from an array and returns that element It's similar to pop(), but it works at the beginning of the array instead of the end Here's how it works:\njs\nlet colors = [\"red\", \"green\", \"blue\"];\nlet firstColor = colors shift();\nconsole log(colors); // [\"green\", \"blue\"]\nconsole log(firstColor); // \"red\"\nIn this example, we start with an array of three colors The shift() method removes the first element (red) from the array and returns it The original colors array is modified to contain only two elements Note that while push() and unshift() can add multiple elements at once, pop() and shift() remove only one element at a time --questions--\n--text--\nWhat will be the output of the following code js\nlet arr = [1, 2, 3];\narr push(4);\narr unshift(0);\nconsole log(arr);\n--answers--\n[1, 2, 3, 4, 0]\n--feedback--\nConsider the order of operations and what each method does to the array [0, 1, 2, 3, 4]\n[0, 4, 1, 2, 3]\n--feedback--\nConsider the order of operations and what each method does to the array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aec982904608b637716b.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b2691dc53f349030f7261f2eccddbfb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aec982904608b637716b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "shift() remove only one element at a time --questions-- --text-- What will be the output of the following code js let arr = [1, 2, 3]; arr push(4); arr unshift(0); console log(arr); --answers-- [1, 2, 3, 4, 0] --feedback-- Consider the order of operations and what each method does to the array [0, 1, 2, 3, 4] [0, 4, 1, 2, 3] --feedback-- Consider the order of operations and what each method does to the array[4, 0, 1, 2, 3]\n--feedback--\nConsider the order of operations and what each method does to the array --video-solution--\n2\n--text--\nWhat will be the output of the following code js\nlet arr = [\"a\", \"b\", \"c\", \"d\"];\nlet first = arr shift();\nlet last = arr pop();\nconsole log(first, last, arr);\n--answers--\n\"a\" \"d\" [\"b\", \"c\"]\n\"d\" \"a\" [\"b\", \"c\"]\n--feedback--\nRemember that shift() removes from the beginning and pop() removes from the end \"a\" \"b\" [\"c\", \"d\"]\n--feedback--\nRemember that shift() removes from the beginning and pop() removes from the end \"b\" \"c\" [\"a\", \"d\"]\n--feedback--\nRemember that shift() removes from the beginning and pop() removes from the end --video-solution--\n1\n--text--\nWhat will be the result of the following code js\nlet arr = [\"a\", \"b\", \"c\"];\narr unshift(\"x\", \"y\");\narr pop();\nconsole log(arr);\n--answers--\n[\"x\", \"y\", \"a\", \"b\"]\n[\"x\", \"y\", \"a\", \"b\", \"c\"]\n--feedback--\nPay attention to the order of operations and what each method does to the array [\"a\", \"b\", \"x\", \"y\"]\n--feedback--\nPay attention to the order of operations and what each method does to the array [\"y\", \"x\", \"a\", \"b\"]\n--feedback--\nPay attention to the order of operations and what each method does to the array --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5290,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aec982904608b637716b.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "29ad5897a2f17cbca693e2b370e389d2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aed2ac3d3c08f6149dd6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732aed2ac3d3c08f6149dd6\ntitle: What Is the Difference Between One-Dimensional and Two-Dimensional Arrays challengeType: 19\ndashedName: what-is-the-difference-between-one-dimensional-and-two-dimensional-arrays\n--description--\nIn programming, arrays are fundamental data structures used to store collections of elements Understanding the difference between one-dimensional and two-dimensional arrays is crucial for organizing and manipulating data effectively Let's explore these concepts in a way that's easy for beginners to grasp A one-dimensional array, often called an array, is like a single row of boxes Imagine you have a line of storage lockers at a train station Each locker can hold one item, and you can access any locker directly if you know its number In programming terms, each item in a one-dimensional array is accessed using a single index For example, in JavaScript, you might create and use a one-dimensional array like this:\njs\nlet fruits = [\"apple\", \"banana\", \"cherry\", \"date\"];\nconsole log(fruits[2]); // Outputs: \"cherry\"\nHere, fruits is a one-dimensional array You can think of it as a single row of fruit names To access any fruit, you use one number (the index) inside square brackets Now, let's move on to two-dimensional arrays If a one-dimensional array is like a single row of lockers, a two-dimensional array is like a grid of lockers – multiple rows and columns In programming, a two-dimensional array is essentially an array of arrays It's used to represent data that has a natural grid-like structure, such as a chessboard, a spreadsheet, or pixels in an image To access an element in a two-dimensional array, you need two indices: one for the row and one for the column",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4979,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aed2ac3d3c08f6149dd6.md",
      "source_type": "git_repo"
    },
    "token_count": 365,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ff0d20d8e25a49dfc215b262514ae0c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aed2ac3d3c08f6149dd6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "array is like a single row of lockers, a two-dimensional array is like a grid of lockers – multiple rows and columns In programming, a two-dimensional array is essentially an array of arrays It's used to represent data that has a natural grid-like structure, such as a chessboard, a spreadsheet, or pixels in an image To access an element in a two-dimensional array, you need two indices: one for the row and one for the columnHere's an example of how you might create and use a two-dimensional array in JavaScript:\n```js\nlet chessboard = [\n[\"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"],\n[\"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n[\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\"],\n[\"r\", \"n\", \"b\", \"q\", \"k\", \"b\", \"n\", \"r\"]\n];\nconsole log(chessboard[0][3]); // Outputs: \"Q\"\n```\nIn this example, chessboard is a two-dimensional array representing a chess game's initial setup To access the queen (Q) in the top row, we use two indices: [0][3] The first index, 0, selects the first row, and the second index, 3, selects the fourth column in that row The key difference between one-dimensional and two-dimensional arrays lies in how you access and organize the data One-dimensional arrays use a single index and are suitable for linear data like lists or sequences Two-dimensional arrays use two indices and are ideal for grid-like data structures It's worth noting that in JavaScript, two-dimensional arrays are actually arrays of arrays This means each element of the outer array is itself an array This nested structure allows for great flexibility but also requires careful handling to avoid errors As you progress in your programming journey, you'll find that choosing between one-dimensional and two-dimensional arrays depends on the nature of your data and how you need to manipulate it",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4979,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aed2ac3d3c08f6149dd6.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f5a358a83e4e4d4312ce4a1bf2c97d27",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aed2ac3d3c08f6149dd6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "are ideal for grid-like data structures It's worth noting that in JavaScript, two-dimensional arrays are actually arrays of arrays This means each element of the outer array is itself an array This nested structure allows for great flexibility but also requires careful handling to avoid errors As you progress in your programming journey, you'll find that choosing between one-dimensional and two-dimensional arrays depends on the nature of your data and how you need to manipulate itOne-dimensional arrays are simpler and sufficient for many tasks, while two-dimensional arrays become invaluable when dealing with more complex, structured data --questions--\n--text--\nHow many indices do you need to access an element in a two-dimensional array --answers--\nOne --feedback--\nThink about how we accessed the chess piece in our example Two Three --feedback--\nThink about how we accessed the chess piece in our example It depends on the size of the array --feedback--\nThink about how we accessed the chess piece in our example --video-solution--\n2\n--text--\nWhat kind of data structure is best represented by a one-dimensional array --answers--\nA grid of numbers --feedback--\nConsider what we compared a one-dimensional array to in the lecture A list of items A table of information --feedback--\nConsider what we compared a one-dimensional array to in the lecture A 3D model --feedback--\nConsider what we compared a one-dimensional array to in the lecture --video-solution--\n2\n--text--\nIn JavaScript, what is a two-dimensional array, essentially --answers--\nA special data type built into the language\n--feedback--\nRecall how we described the structure of a two-dimensional array in JavaScript An array of arrays A linked list of arrays --feedback--\nRecall how we described the structure of a two-dimensional array in JavaScript A matrix object --feedback--\nRecall how we described the structure of a two-dimensional array in JavaScript --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4979,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aed2ac3d3c08f6149dd6.md",
      "source_type": "git_repo"
    },
    "token_count": 376,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "cd9aab268e9339071e1762d6de41500a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aedd2d92e30923b9bc24.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732aedd2d92e30923b9bc24\ntitle: What Is Array Destructuring, and How Does It Work challengeType: 19\ndashedName: what-is-array-destructuring-and-how-does-it-work\n--description--\nArray destructuring is a feature in JavaScript that allows you to extract values from arrays and assign them to variables in a more concise and readable way It provides a convenient syntax for unpacking array elements into distinct variables This technique is particularly useful when working with arrays and functions that return multiple values Here is an example of using array destructuring:\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\"];\nlet [first, second, third] = fruits;\nconsole log(first);  // \"apple\"\nconsole log(second); // \"banana\"\nconsole log(third);  // \"orange\"\n```\nIn this example, we have an array called fruits with three elements Using array destructuring, we assign the first element to the variable first, the second element to second, and the third element to third This allows us to easily access individual elements of the array without using index notation Here is what it would look like if you accessed each of those elements by their index instead of using array destructuring:\n```js\nconst fruits = [\"apple\", \"banana\", \"orange\"];\nconst first = fruits[0];\nconst second = fruits[1];\nconst third = fruits[2];\nconsole log(first); // \"apple\"\nconsole log(second); // \"banana\"\nconsole log(third); // \"orange\"\n```\nArray destructuring also allows you to skip elements you're not interested in by using commas For instance:\n```js\nlet colors = [\"red\", \"green\", \"blue\", \"yellow\"];\nlet [firstColor, , thirdColor] = colors;\nconsole log(firstColor); // Output: \"red\"\nconsole log(thirdColor); // Output: \"blue\"\n```\nIn this example, we skip the second element of the colors array by using an extra comma This assigns red to firstColor and blue to thirdColor, effectively ignoring green Another powerful feature of array destructuring is the ability to use default values If the array has fewer elements than the variables you're trying to assign, you can provide default values:\n```js\nlet numbers = [1, 2];\nlet [a, b, c = 3] = numbers;\nconsole log(a); // 1\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5593,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aedd2d92e30923b9bc24.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a0bf86f22f7593061bb491064d2b944a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aedd2d92e30923b9bc24.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "we skip the second element of the colors array by using an extra comma This assigns red to firstColor and blue to thirdColor, effectively ignoring green Another powerful feature of array destructuring is the ability to use default values If the array has fewer elements than the variables you're trying to assign, you can provide default values: ```js let numbers = [1, 2]; let [a, b, c = 3] = numbers; console log(a); // 1 consolelog(b); // 2\nconsole log(c); // 3\n```\nHere, we assign default value 3 to c because the numbers array doesn't have a third element Now, let's discuss the rest syntax, denoted by three dots ( ) It allows you to capture the remaining elements of an array that haven’t been destructured into a new array Here's how it works:\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\", \"mango\", \"kiwi\"];\nlet [first, second, rest] = fruits;\nconsole log(first);  // \"apple\"\nconsole log(second); // \"banana\"\nconsole log(rest);   // [\"orange\", \"mango\", \"kiwi\"]\n```\nIn this example, first and second capture the first two elements of the fruits array, and rest captures all remaining elements as a new array The rest syntax must be the last element in the destructuring pattern Array destructuring is a powerful feature that can make your code more concise and easier to read It's especially useful when working with arrays, and when you need to extract specific elements from an array --questions--\n--text--\nWhat will be the output of the following code js\nlet numbers = [1, 2, 3, 4, 5];\nlet [a, , b, rest] = numbers;\nconsole log(a, b, rest);\n--answers--\n1 2 [3, 4, 5]\n--feedback--\nPay attention to the comma placement in the destructuring assignment and remember what the rest syntax does 1 3 [4, 5]\n1 2 [4, 5]\n--feedback--\nPay attention to the comma placement in the destructuring assignment and remember what the rest syntax does 1 3 [2, 4, 5]\n--feedback--\nPay attention to the comma placement in the destructuring assignment and remember what the rest syntax does",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5593,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aedd2d92e30923b9bc24.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "75d09ebd5dde983bc46c6ee307928fc7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aedd2d92e30923b9bc24.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "log(a, b, rest); --answers-- 1 2 [3, 4, 5] --feedback-- Pay attention to the comma placement in the destructuring assignment and remember what the rest syntax does 1 3 [4, 5] 1 2 [4, 5] --feedback-- Pay attention to the comma placement in the destructuring assignment and remember what the rest syntax does 1 3 [2, 4, 5] --feedback-- Pay attention to the comma placement in the destructuring assignment and remember what the rest syntax does--video-solution--\n2\n--text--\nWhat will be the output of the following code js\nlet colors = [\"red\", \"green\", \"blue\"];\nlet [primary, secondary, tertiary, quaternary = \"yellow\"] = colors;\nconsole log(quaternary);\n--answers--\nundefined\n--feedback--\nConsider what happens when you try to destructure more variables than there are elements in the array, and remember the concept of default values null\n--feedback--\nConsider what happens when you try to destructure more variables than there are elements in the array, and remember the concept of default values \"yellow\"\nThis will throw an error --feedback--\nConsider what happens when you try to destructure more variables than there are elements in the array, and remember the concept of default values --video-solution--\n3\n--text--\nWhat will be the output of the following code js\nlet fruits = [\"apple\", \"banana\", \"orange\", \"grape\"];\nlet [first, rest, last] = fruits;\nconsole log(first, rest, last);\n--answers--\n\"apple\" [\"banana\", \"orange\"] \"grape\"\n--feedback--\nConsider the placement of the rest syntax in the destructuring assignment and think about whether this is a valid use of the rest syntax \"apple\" [\"banana\", \"orange\", \"grape\"] undefined\n--feedback--\nConsider the placement of the rest syntax in the destructuring assignment and think about whether this is a valid use of the rest syntax This will throw a SyntaxError \"apple\" [] \"grape\"\n--feedback--\nConsider the placement of the rest syntax in the destructuring assignment and think about whether this is a valid use of the rest syntax --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5593,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732aedd2d92e30923b9bc24.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "61e38e156df5a4ae53339277322e0a48",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays-variables-and-naming-practices\\6732c6ab21031b60d2b0c999.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732c6ab21031b60d2b0c999\ntitle: What Are Some Common Practices for Naming Variables and Functions challengeType: 19\ndashedName: what-are-some-common-practices-for-naming-variables-and-functions\n--description--\nNaming variables and functions is an important aspect of writing clean, readable and maintainable code Good naming practices makes your code self-documenting reducing the need for extensive comments and making it easier for other developers including your future self to understand your code Let's start with general naming conventions in JavaScript In previous lectures you learned about using camel case for variable names For boolean variables, it's a common practice to use prefixes such as is, has, or can This immediately tells the reader that the variable is a boolean:\njs\nlet isLoading = true;\nlet hasPermission = false;\nlet canEdit = true;\nFor functions the name should clearly indicate what the function does It's often helpful to start with a verb:\n```js\nfunction getUserData(){\n/ /\n}\nfunction calculateTotal(){\n/ /\n}\nfunction validateInput(){\n/ /\n}\n```\nFor functions that return a boolean often called predicates, you can use the same is, has, or can prefixes:\n```js\nfunction isValidEmail(email) {\n/ /\n}\nfunction hasRequiredFields(form) {\n/ /\n}\n```\nWhen you have functions that retrieve data it's common to start with the word get:\n```js\nfunction getProductDetails(productId) {\n/ /\n}\nfunction getUserProfile(userId) {\n/ /\n}\n```\nWhen you have functions that set data it's common to start with the word set:\n```js\nfunction setUserPreferences(preferences) {\n/ /\n}\nfunction setPageTitle(title) {\n/ /\n}\n```\nFor event handler functions, you might prefix with handle or suffix with handler:\n```js\nfunction handleClick(){\n/ /\n}\nfunction onSubmit(){\n/ /\n}\nfunction keyPressHandler(){\n/ /\n}\n```\nAn event handler is an action that happens after an event has happened like a button click You will learn about that in future lectures When naming iterator variables and loops, it's common to use single letters like i, j, or k, but for nested loops or more complex iterations more descriptive names can be helpful:\n```js\nfor (let i = 0; i < array length; i++) {\n/ /\n}\nfor (let studentIndex = 0; studentIndex < students length; studentIndex++) {\n/",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5052,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays-variables-and-naming-practices\\6732c6ab21031b60d2b0c999.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "af5340466c378b79517ec3a225016880",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays-variables-and-naming-practices\\6732c6ab21031b60d2b0c999.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "happens after an event has happened like a button click You will learn about that in future lectures When naming iterator variables and loops, it's common to use single letters like i, j, or k, but for nested loops or more complex iterations more descriptive names can be helpful: ```js for (let i = 0; i < array length; i++) { / / } for (let studentIndex = 0; studentIndex < students length; studentIndex++) { //\n}\n```\nFor array names consider using plural nouns to indicate that the variable contains multiple items:\njs\nconst colors = ['red', 'green', 'blue'];\nconst userNames = ['Alice', 'Bob', 'Charlie'];\nRemember the goal is to make your code as self explanatory as possible A good rule of thumb is that if you need to add a comment to explain what a variable or function does, you might want to consider renaming it to something more descriptive Lastly, be consistent with your codebase or team If your team has established naming conventions, stick to them Consistency makes the code more readable and maintainable for everyone involved --questions--\n--text--\nWhich of the following is a good name for a boolean variable that checks if a user is logged in --answers--\nuser_logged\n--feedback--\nThink about the conventions we discussed for boolean variables checkLogin\n--feedback--\nThink about the conventions we discussed for boolean variables isLoggedIn\nlogin\n--feedback--\nThink about the conventions we discussed for boolean variables --video-solution--\n3\n--text--\nWhat's a good naming convention for a function that retrieves product information --answers--\nproductInformation\n--feedback--\nRemember the prefix we typically use for getter functions getProductInfo\nretrieveProduct\n--feedback--\nRemember the prefix we typically use for getter functions prod_info\n--feedback--\nRemember the prefix we typically use for getter functions --video-solution--\n2\n--text--\nWhich of the following should you do if you’re working in an established codebase and / or with a team --answers--\nUse your text editor's find-and-replace feature to update any function or variable names you come across that could be improved, even it's not related to the task you're working on --feedback--\nRemember that this lecture covers some naming conventions, and each codebase could have its own established conventions Stick to the naming conventions for variables and functions that have already been established Come up with your own naming conventions for any new code you write",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5052,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays-variables-and-naming-practices\\6732c6ab21031b60d2b0c999.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4f4276a1df4e7519cf6a1eb93dda6461",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays-variables-and-naming-practices\\6732c6ab21031b60d2b0c999.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--answers-- Use your text editor's find-and-replace feature to update any function or variable names you come across that could be improved, even it's not related to the task you're working on --feedback-- Remember that this lecture covers some naming conventions, and each codebase could have its own established conventions Stick to the naming conventions for variables and functions that have already been established Come up with your own naming conventions for any new code you write--feedback--\nRemember that this lecture covers some naming conventions, and each codebase could have its own established conventions Strictly use the naming conventions covered in this lecture --feedback--\nRemember that this lecture covers some naming conventions, and each codebase could have its own established conventions --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5052,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays-variables-and-naming-practices\\6732c6ab21031b60d2b0c999.md",
      "source_type": "git_repo"
    },
    "token_count": 149,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "50271c79b299f5f9a62772b5d81ba91c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays-variables-and-naming-practices\\6732c6ba2ea42b610b9f9ce1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732c6ba2ea42b610b9f9ce1\ntitle: How Do You Get the Length for an Array, and How Can You Create an Empty Array of Fixed Length challengeType: 19\ndashedName: how-do-you-get-the-length-for-an-array-and-how-can-you-create-an-empty-array-of-fixed-length\n--description--\nIn prior lectures you were first introduced to the length property, this property returns the number of elements in an array So here is a quick reminder on how it works:\njs\nconst fruits = ['apple', 'banana', 'orange'];\nconsole log(fruits length); // 3\nIt's possible to have arrays with empty slots Empty slots are defined as slots with nothing in them This is different than an array with the value of undefined These types of arrays are known as sparse arrays Here is an example:\njs\nconst sparseArray = [1, , , 4];\nconsole log(sparseArray length); // 4\nIn this case even though we only have two defined elements, 1 and 4 The length is 4 because the highest index (3) plus 1 gives us a length of 4 Now let's discuss how to create an empty array of fixed length There are few ways to do this in JavaScript but one common method is to use the Array() constructor with a numeric argument The Array() constructor can be used with the new keyword to create a new array Here is an example:\njs\nconst emptyArray = new Array(5);\nconsole log(emptyArray length); // 5\nconsole log(emptyArray); // [,,,,]\nIn this example, we create a new array using the Array(5) This creates a sparse array with a length of 5 where all the slots are empty Another way to create an empty array of fixed length is to use the Array from() method with a length argument This method creates an array of the specified length with all elements initialized to undefined:\n```js\nconst fixedLengthArray = Array from({ length: 5 });\nconsole log(fixedLengthArray length); // 5\n// [undefined, undefined, undefined, undefined, undefined]\nconsole log(fixedLengthArray);\n```\nIf you want to create an array of specific length and fill it with a default value, you can use the Array fill() method:\njs\nconst filledArray = new Array(3) fill(0);\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4240,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays-variables-and-naming-practices\\6732c6ba2ea42b610b9f9ce1.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bbb85c18b92f098e20c07b55ecd05503",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays-variables-and-naming-practices\\6732c6ba2ea42b610b9f9ce1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "from() method with a length argument This method creates an array of the specified length with all elements initialized to undefined: ```js const fixedLengthArray = Array from({ length: 5 }); console log(fixedLengthArray length); // 5 // [undefined, undefined, undefined, undefined, undefined] console log(fixedLengthArray); ``` If you want to create an array of specific length and fill it with a default value, you can use the Array fill() method: js const filledArray = new Array(3) fill(0); consolelog(filledArray); // [0, 0, 0]\nThis creates an array of length three and fills all elements with the value 0 Understanding how to get the length of an array and create arrays of fixed length is important for many programming tasks especially when you need to initialize arrays for specific algorithms or data structures --questions--\n--text--\nWhat will be the output of the following code js\nlet arr = [1, 2, 3, , 5];\nconsole log(arr length);\n--answers--\n4\n--feedback--\nRemember that the length property returns the highest numeric index plus one, even if there are empty slots 5\n3\n--feedback--\nRemember that the length property returns the highest numeric index plus one, even if there are empty slots This will throw an error --feedback--\nRemember that the length property returns the highest numeric index plus one, even if there are empty slots --video-solution--\n2\n--text--\nWhat will be the output of the following code js\nlet arr = new Array(3);\nconsole log(arr);\n--answers--\n[undefined, undefined, undefined]\n--feedback--\nConsider how the Array() constructor behaves when given a single numeric argument [null, null, null]\n--feedback--\nConsider how the Array() constructor behaves when given a single numeric argument [3]\n--feedback--\nConsider how the Array() constructor behaves when given a single numeric argument [<3 empty items>]\n--video-solution--\n4\n--text--\nWhat will be the output of the following code js\nlet arr = new Array(3) fill(1);\nconsole log(arr);\n--answers--\n[1, 1, 1]\n[3]\n--feedback--\nThe fill() method fills all the elements of an array with a static value [undefined, undefined, undefined]\n--feedback--\nThe fill() method fills all the elements of an array with a static value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4240,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays-variables-and-naming-practices\\6732c6ba2ea42b610b9f9ce1.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "1ca9afb0ea1a15cdb6a815c540bce008",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays-variables-and-naming-practices\\6732c6ba2ea42b610b9f9ce1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "[3] --feedback-- Consider how the Array() constructor behaves when given a single numeric argument [<3 empty items>] --video-solution-- 4 --text-- What will be the output of the following code js let arr = new Array(3) fill(1); console log(arr); --answers-- [1, 1, 1] [3] --feedback-- The fill() method fills all the elements of an array with a static value [undefined, undefined, undefined] --feedback-- The fill() method fills all the elements of an array with a static value[<3 empty items>]\n--feedback--\nThe fill() method fills all the elements of an array with a static value --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4240,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays-variables-and-naming-practices\\6732c6ba2ea42b610b9f9ce1.md",
      "source_type": "git_repo"
    },
    "token_count": 149,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d4ae77db2c677c44552536b3b5b8c094",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732b2a6de5a1c15edf05b75.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732b2a6de5a1c15edf05b75\ntitle: How Can You Use String and Array Methods to Reverse a String challengeType: 19\ndashedName: how-can-you-use-string-and-array-methods-to-reverse-a-string\n--description--\nReversing a string is a common programming task that can be accomplished in JavaScript using a combination of string and array methods The process involves three main steps:\nSplitting the string into an array of characters Reversing the array Joining the characters back into a string Let's explore each of these steps using the split(), reverse(), and join() methods The first step in reversing a string is to convert it into an array of individual characters We can do this using the split() method The split() method divides a string into an array of substrings and specifies where each split should happen based on a given separator If no separator is provided, the method returns an array containing the original string as a single element Examples of common separators include:\nAn empty string (\"\"), which splits the string into individual characters A single space (\" \"), which splits the string wherever spaces occur A dash (\"-\"), which splits the string at each dash Here's an example of using the split method to create an array of characters:\njs\nlet str = \"hello\";\nlet charArray = str split(\"\");\nconsole log(charArray); // [\"h\", \"e\", \"l\", \"l\", \"o\"]\nIn this example, we use split(\"\") (with an empty string pass to it) to convert the string hello into an array of its individual characters Once we have an array of characters, we can use the reverse() method to reverse the order of elements in the array The reverse() method is an array method that reverses an array in place This means it modifies the original array rather than creating a new one Here's how we can use it:\njs\nlet charArray = [\"h\", \"e\", \"l\", \"l\", \"o\"];\ncharArray reverse();\nconsole log(charArray); // [\"o\", \"l\", \"l\", \"e\", \"h\"]\nIn this example, reverse() changes the order of elements in charArray, reversing it from [\"h\", \"e\", \"l\", \"l\", \"o\"] to [\"o\", \"l\", \"l\", \"e\", \"h\"] The final step is to convert the reversed array of characters back into a string",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4779,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732b2a6de5a1c15edf05b75.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2641118932cf3a9f18b4ccd4f9651f52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732b2a6de5a1c15edf05b75.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "it modifies the original array rather than creating a new one Here's how we can use it: js let charArray = [\"h\", \"e\", \"l\", \"l\", \"o\"]; charArray reverse(); console log(charArray); // [\"o\", \"l\", \"l\", \"e\", \"h\"] In this example, reverse() changes the order of elements in charArray, reversing it from [\"h\", \"e\", \"l\", \"l\", \"o\"] to [\"o\", \"l\", \"l\", \"e\", \"h\"] The final step is to convert the reversed array of characters back into a stringWe can accomplish this using the join() method The join() method creates and returns a new string by concatenating all of the elements in an array, separated by a specified separator string If you want to join the characters without any separator, you can use an empty string as the argument Here's an example:\njs\nlet reversedArray = [\"o\", \"l\", \"l\", \"e\", \"h\"];\nlet reversedString = reversedArray join(\"\");\nconsole log(reversedString); // \"olleh\"\nIn this example, join(\"\") (with an empty string pass to it as an argument) combines all the characters in the array into a single string without any separator between them Remember that strings in JavaScript are immutable, which means you can't directly reverse a string by modifying it That's why we need to convert it to an array, reverse the array, and then convert it back to a string This combination of string and array methods provides a powerful and flexible way to manipulate strings in JavaScript --questions--\n--text--\nWhat will be the output of the following code js\nlet str = \"coding\";\nlet reversed = str split(\"\") reverse() join(\"\");\nconsole log(reversed);\n--answers--\ncoding\n--feedback--\nRemember the order of operations: split, reverse, then join gnidoc\n[\"g\", \"n\", \"i\", \"d\", \"o\", \"c\"]\n--feedback--\nRemember the order of operations: split, reverse, then join undefined\n--feedback--\nRemember the order of operations: split, reverse, then join --video-solution--\n2\n--text--\nWhat will be the result of \"hello\" split(\"\") --answers--\n\"hello\"\n--feedback--\nThe split(\"\") method splits a string into an array of individual characters [\"hello\"]\n--feedback--\nThe split(\"\") method splits a string into an array of individual characters",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4779,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732b2a6de5a1c15edf05b75.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "85dc04e808afa441cd716dd3ca67bc39",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732b2a6de5a1c15edf05b75.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the order of operations: split, reverse, then join gnidoc [\"g\", \"n\", \"i\", \"d\", \"o\", \"c\"] --feedback-- Remember the order of operations: split, reverse, then join undefined --feedback-- Remember the order of operations: split, reverse, then join --video-solution-- 2 --text-- What will be the result of \"hello\" split(\"\") --answers-- \"hello\" --feedback-- The split(\"\") method splits a string into an array of individual characters [\"hello\"] --feedback-- The split(\"\") method splits a string into an array of individual characters[\"h\", \"e\", \"l\", \"l\", \"o\"]\n\"h,e,l,l,o\"\n--feedback--\nThe split(\"\") method splits a string into an array of individual characters --video-solution--\n3\n--text--\nWhat will be the output of the following code js\nlet word = \"hello\";\nlet chars = word split(\"\");\nchars reverse();\nconsole log(chars join(\"-\"));\n--answers--\nhello\n--feedback--\nPay attention to the separator used in the join() method o-l-l-e-h\nolleh\n--feedback--\nPay attention to the separator used in the join() method [\"o\", \"l\", \"l\", \"e\", \"h\"]\n--feedback--\nPay attention to the separator used in the join() method --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4779,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-arrays\\6732b2a6de5a1c15edf05b75.md",
      "source_type": "git_repo"
    },
    "token_count": 281,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c706e6bc4def402b06088ea7c029fd05",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-attribute-selectors\\672aa840de72b3607bba4bed.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa840de72b3607bba4bed\ntitle: What Is the Attribute Selector, and How Can It Be Used to Target Links with the href and title Attributes challengeType: 19\ndashedName: what-is-the-attribute-selector\n--description--\nThe attribute selector in CSS is a powerful tool that allows you to target HTML elements based on their attributes This means you can apply styles to elements that have specific attributes or even certain values for those attributes It's particularly useful when you want to style elements dynamically or when class names alone don't provide enough specificity For example, you can use the attribute selector to target all links that have an href attribute This is especially handy when you want to apply a uniform style to all links on a page Here's how you can use the attribute selector to target links with the href attribute:\ncss\na[href] {\ncolor: blue;\ntext-decoration: underline;\n}\nThis CSS rule will apply a blue color and an underline to any link that includes an href attribute, ensuring that all clickable links are styled consistently But attribute selectors can be more specific Suppose you want to target only the links that have a title attribute The title attribute often provides additional information about the link, and you might want to style these links differently to indicate that they have extra information available Here's how you can do it:\ncss\na[title] {\nfont-weight: bold;\ntext-decoration: none;\n}\nThis rule applies bold text and removes the underline from any link with a title attribute It's a great way to visually differentiate these links from others on the page You can also combine attribute selectors to get even more precise For example, if you want to style links that have both href and title attributes, you can do this:\ncss\na[href][title] {\ncolor: green;\n}\nIn this case, only links that contain both href and title attributes will be styled with green text This level of control is what makes attribute selectors so powerful in CSS Another example for an attribute selector is to match a single value within a space-separated list of values in an attribute Here is an example of an anchor element with multiple classes:\nhtml\n<a href=\"https://example",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-attribute-selectors\\672aa840de72b3607bba4bed.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2f913c81516b9b8b8bd20636c5d9aba0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-attribute-selectors\\672aa840de72b3607bba4bed.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "you can do this: css a[href][title] { color: green; } In this case, only links that contain both href and title attributes will be styled with green text This level of control is what makes attribute selectors so powerful in CSS Another example for an attribute selector is to match a single value within a space-separated list of values in an attribute Here is an example of an anchor element with multiple classes: html <a href=\"https://examplecom\" class=\"btn primary large\">Visit Example Site</a>\nTo target this specific anchor element, you can use the following selector:\ncss\na[class~=\"primary\"] {\ncolor: red;\nfont-weight: bold;\n}\nThe [attr~=value] syntax is used here to target all anchor elements where the class attribute contains the word \"primary\" If you need to target an element where the attribute value is prefixed by a specific value, then you can use the [attr^=value] syntax Here is an example:\ncss\na[href^=\"https://\"] {\ncolor: green;\ntext-decoration: underline;\n}\nIn this example, the a[href^=\"https://\"] selector will target all anchor elements where the href attribute value starts with \"https://\" To target elements where the attribute value ends with a specific value, you can use the [attr$=value] syntax Here is an example:\ncss\na[href$=\" jpg\"] {\ncolor: darkgreen;\ntext-decoration: underline dotted;\n}\nIn this example, the a[href$=\" jpg\"] selector will target all anchor elements where the href attribute value ends with jpg Using attribute selectors not only enhances the styling of your webpage but also improves accessibility by making interactive elements like links more distinguishable based on their attributes --questions--\n--text--\nWhich CSS selector would you use to target all links with an href attribute --answers--\na[href]\na[href=\"\"]\n--feedback--\nConsider the selector that targets any element with a specific attribute a[href=\"https\"]\n--feedback--\nConsider the selector that targets any element with a specific attribute a[href*=\"https\"]\n--feedback--\nConsider the selector that targets any element with a specific attribute --video-solution--\n1\n--text--\nWhat does the attribute selector do in CSS --answers--\nIt targets elements based on their tag name --feedback--\nThink about how CSS can style elements depending on the attributes they have It targets elements based on their class name",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-attribute-selectors\\672aa840de72b3607bba4bed.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "bfd97a8c1e9ed809690987ed3424c66f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-attribute-selectors\\672aa840de72b3607bba4bed.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "that targets any element with a specific attribute a[href=\"https\"] --feedback-- Consider the selector that targets any element with a specific attribute a[href*=\"https\"] --feedback-- Consider the selector that targets any element with a specific attribute --video-solution-- 1 --text-- What does the attribute selector do in CSS --answers-- It targets elements based on their tag name --feedback-- Think about how CSS can style elements depending on the attributes they have It targets elements based on their class name--feedback--\nThink about how CSS can style elements depending on the attributes they have It targets elements based on their attributes It targets elements based on their ID --feedback--\nThink about how CSS can style elements depending on the attributes they have --video-solution--\n3\n--text--\nWhich of the following CSS rules will style links with both href and title attributes --answers--\na[href]\n--feedback--\nConsider combining attribute selectors to target elements with multiple attributes a[title]\n--feedback--\nConsider combining attribute selectors to target elements with multiple attributes a[href][title]\na[href*=\"title\"]\n--feedback--\nConsider combining attribute selectors to target elements with multiple attributes --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-attribute-selectors\\672aa840de72b3607bba4bed.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "efff0b53fedb9f8470e530404c2fe763",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-attribute-selectors\\672c375857128708d04d0e22.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672c375857128708d04d0e22\ntitle: How to Use the Attribute Selector to Target Ordered List Elements with the type Attribute challengeType: 19\ndashedName: how-to-use-the-attribute-selector-to-target-ordered-list-elements-with-the-type-attribute\n--description--\nWhen working with ordered lists in HTML, the type attribute allows you to specify the style of numbering used, such as numerical, alphabetical, or Roman numerals The type attribute can be set on an ol (ordered list) element to control the numbering format:\n1 for numerical lists (such as 1, 2, 3, ),\nA for uppercase alphabetical lists (such as A, B, C, ),\na for lowercase alphabetical lists (such as a, b, c, ),\nI for uppercase Roman numerals (such as I, II, III, ),\ni for lowercase Roman numerals (such as i, ii, iii, ) Here's how you can use the attribute selector to target an ordered list with a specific type attribute:\ncss\nol[type=\"A\"] {\ncolor: purple;\nfont-weight: bold;\n}\nIn this example, the CSS rule will apply purple text and bold font weight to any ordered list that uses uppercase alphabetical numbering, which is specified by type=\"A\" Similarly, you can target ordered lists that use lowercase Roman numerals by selecting those with type=\"i\":\ncss\nol[type=\"i\"] {\ncolor: green;\n}\nThis rule will change the text color to green for any ordered list that uses lowercase Roman numerals The ability to style ordered lists based on their type attribute gives you greater control over the appearance of lists in your document, allowing for customization based on how content is structured --questions--\n--text--\nWhich CSS selector would you use to target ordered lists that use uppercase alphabetical numbering --answers--\nol[type=\"A\"]\nol[type=\"a\"]\n--feedback--\nConsider the attribute value that corresponds to uppercase letters ol[type=\"1\"]\n--feedback--\nConsider the attribute value that corresponds to uppercase letters ol[type=\"I\"]\n--feedback--\nConsider the attribute value that corresponds to uppercase letters --video-solution--\n1\n--text--\nHow would you target ordered lists that use lowercase Roman numerals --answers--\nol[type=\"I\"]\n--feedback--\nThink about the value for Roman numerals in lowercase ol[type=\"1\"]\n--feedback--\nThink about the value for Roman numerals in lowercase",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3138,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-attribute-selectors\\672c375857128708d04d0e22.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ecf51c3361ee529b4a6c1ce052687fab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-attribute-selectors\\672c375857128708d04d0e22.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "use uppercase alphabetical numbering --answers-- ol[type=\"A\"] ol[type=\"a\"] --feedback-- Consider the attribute value that corresponds to uppercase letters ol[type=\"1\"] --feedback-- Consider the attribute value that corresponds to uppercase letters ol[type=\"I\"] --feedback-- Consider the attribute value that corresponds to uppercase letters --video-solution-- 1 --text-- How would you target ordered lists that use lowercase Roman numerals --answers-- ol[type=\"I\"] --feedback-- Think about the value for Roman numerals in lowercase ol[type=\"1\"] --feedback-- Think about the value for Roman numerals in lowercaseol[type=\"i\"]\nol[type=\"A\"]\n--feedback--\nThink about the value for Roman numerals in lowercase --video-solution--\n3\n--text--\nWhich attribute is commonly used in HTML to specify the numbering style of an ordered list --answers--\ndata-type\n--feedback--\nThis attribute defines whether the list is numbered with numbers, letters, or Roman numerals type\nstyle\n--feedback--\nThis attribute defines whether the list is numbered with numbers, letters, or Roman numerals order\n--feedback--\nThis attribute defines whether the list is numbered with numbers, letters, or Roman numerals --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3138,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-attribute-selectors\\672c375857128708d04d0e22.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "888371bf0be74954fd870b163708ccbe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-attribute-selectors\\672c37498952920879c43de9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672c37498952920879c43de9\ntitle: How to Use the Attribute Selector to Target Elements with the lang and data-lang Attributes challengeType: 19\ndashedName: how-to-use-the-attribute-selector-to-target-elements-with-the-lang-and-data-lang-attributes\n--description--\nWhen building multilingual websites or handling custom data attributes, you often need to style elements based on the language they contain or specific data values The lang and data-lang attributes are commonly used for these purposes, and the attribute selector in CSS allows you to apply styles based on these attributes effectively The lang attribute is used in HTML to specify the language of the content within an element You might want to style elements differently based on the language they are written in, especially on a multilingual website Here's an example of how you can use the attribute selector to target elements with a specific lang attribute:\ncss\np[lang=\"en\"] {\nfont-style: italic;\n}\nThis CSS rule applies italic styling to any paragraph element where the lang attribute is set to English (en) This could be useful for emphasizing English text in a document that includes multiple languages Similarly, you can use the attribute selector to target elements with a data-lang attribute Custom data attributes like data-lang are commonly used to store additional information in elements, such as specifying the language used within a specific section of text Here's how you can use CSS to target and style elements based on the data-lang attribute:\ncss\ndiv[data-lang=\"fr\"] {\ncolor: blue;\n}\nIn this case, any div element with a data-lang attribute set to French (fr) will have its text color changed to blue This allows you to quickly identify and style sections of content based on the language information stored in the data-lang attribute Attribute selectors like these provide a powerful way to apply conditional styling based on the metadata embedded within your HTML, making your web pages more dynamic and context-aware --questions--\n--text--\nWhich CSS selector would you use to target all paragraphs where the lang attribute is set to English --answers--\np[lang=\"en\"]\np[lang]\n--feedback--\nConsider the selector that targets elements with a specific lang attribute value p[lang=\"es\"]\n--feedback--\nConsider the selector that targets elements with a specific lang attribute value p[lang*=\"en\"]\n--feedback--\nConsider the selector that targets elements with a specific lang attribute value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3735,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-attribute-selectors\\672c37498952920879c43de9.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ce4d5209c1adf22177e5770284720adf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-attribute-selectors\\672c37498952920879c43de9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "embedded within your HTML, making your web pages more dynamic and context-aware --questions-- --text-- Which CSS selector would you use to target all paragraphs where the lang attribute is set to English --answers-- p[lang=\"en\"] p[lang] --feedback-- Consider the selector that targets elements with a specific lang attribute value p[lang=\"es\"] --feedback-- Consider the selector that targets elements with a specific lang attribute value p[lang*=\"en\"] --feedback-- Consider the selector that targets elements with a specific lang attribute value--video-solution--\n1\n--text--\nHow would you target all div elements that have a data-lang attribute set to fr --answers--\ndiv[data-lang]\n--feedback--\nThink about the selector that matches the exact value of the data-lang attribute div[data-lang=\"fr\"]\ndiv[lang=\"fr\"]\n--feedback--\nThink about the selector that matches the exact value of the data-lang attribute div[data-lang*=\"fr\"]\n--feedback--\nThink about the selector that matches the exact value of the data-lang attribute --video-solution--\n2\n--text--\nWhich attribute would you use in HTML to specify the language of the content inside an element --answers--\ndata-lang\n--feedback--\nThis attribute is commonly used to define the language for accessibility and SEO purposes class\n--feedback--\nThis attribute is commonly used to define the language for accessibility and SEO purposes lang\nid\n--feedback--\nThis attribute is commonly used to define the language for accessibility and SEO purposes --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3735,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-attribute-selectors\\672c37498952920879c43de9.md",
      "source_type": "git_repo"
    },
    "token_count": 308,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e98f835b7d563795a584f902dc3a3904",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733ab12b60bd7f6b2b0b0c0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733ab12b60bd7f6b2b0b0c0\ntitle: How Does the Audio Constructor Work, and What Are Some Common Methods challengeType: 19\ndashedName: how-does-the-audio-constructor-work-and-what-are-some-common-methods\n--description--\nLet's learn about the Audio constructor and its common methods The Audio constructor, like other constructors, is a special function called with the new keyword It returns an HTMLAudioElement, which you can then use to play audio for the user, or append to the DOM for the user to control themselves When you call the constructor, you can optionally pass a URL as the (only) argument This URL should point to the source of the audio file you want to play Or, if you need to change the source dynamically, you can assign the URL to the src property of the returned audio element The returned audio element offers various methods for controlling the audio You'll most likely use the play() method, which begins audio playback There is also the pause() method, which pauses the audio playback but preserves the current location in the track allowing play() to resume playback from that point You might expect there to be a stop() method, to pause audio playback and reset the track to the beginning But instead, you should call pause() and set the currentTime property directly Finally, the canPlayType() method can be used to determine if a browser is likely to be able to play your specific audio format You will learn about audio and video formats in the next lecture --questions--\n--text--\nWhat does the Audio constructor return when called with the new keyword --answers--\nAn AudioContext object --feedback--\nThe constructor returns a specific type of HTML element A MediaElement --feedback--\nThe constructor returns a specific type of HTML element An HTMLAudioElement A Promise that resolves to an audio file --feedback--\nThe constructor returns a specific type of HTML element --video-solution--\n3\n--text--\nHow can you set the source of an audio file for an Audio object --answers--\nBy passing a URL as an argument to the Audio constructor --feedback--\nThere are two ways to set the audio source By assigning a URL to the src property of the audio element --feedback--\nThere are two ways to set the audio source By using the setSource() method --feedback--\nThere are two ways to set the audio source By either passing a URL to the constructor or setting the src property",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3326,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733ab12b60bd7f6b2b0b0c0.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "34f939950337e4b6a4bfa61e3e6dc5fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733ab12b60bd7f6b2b0b0c0.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "for an Audio object --answers-- By passing a URL as an argument to the Audio constructor --feedback-- There are two ways to set the audio source By assigning a URL to the src property of the audio element --feedback-- There are two ways to set the audio source By using the setSource() method --feedback-- There are two ways to set the audio source By either passing a URL to the constructor or setting the src property--video-solution--\n4\n--text--\nWhich method should you use to pause audio playback and reset the track to the beginning --answers--\nCall the stop() method --feedback--\nThe lecture mentions the two things you need to do to pause and reset the audio back to the beginning Call the reset() method --feedback--\nThe lecture mentions the two things you need to do to pause and reset the audio back to the beginning Call the pause() method, and then set currentTime property Call the pause() method, and then call the reset() method --feedback--\nThe lecture mentions the two things you need to do to pause and reset the audio back to the beginning --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3326,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733ab12b60bd7f6b2b0b0c0.md",
      "source_type": "git_repo"
    },
    "token_count": 224,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "18ba3395bf1e0cfaf9b8b0e2d3d24ffd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d8203da84a08a0f5eab4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733d8203da84a08a0f5eab4\ntitle: What Are the Different Types of Video and Audio Formats challengeType: 19\ndashedName: what-are-the-different-types-of-video-and-audio-formats\n--description--\nLet's learn about the different types of audio and video formats You have probably heard of, or even used, a few common ones If the terms MP3, MP4, MOV, or WebM are familiar to you, those are all different formats for video and audio And there are quite a few more that are available Before we dive in to file formats, we need to talk about MIME types A MIME type, standing for Multipurpose Internet Mail Extensions, is a standardized way to programmatically indicate a file type Nearly every file format has a MIME type HTML, for example, has the type text/html A JSON object has the type application/json Even a Windows exe installer has a MIME type: application/vnd microsoft portable-executable The MIME type can tell an application, such as your browser, how to handle a specific file In the case of audio and video, the MIME type indicates it is a multimedia format that can be embedded in the web page An MP3 file has the MIME type audio/mp3 An MP4, however, can have the MIME type audio/mp4 OR video/mp4, depending on whether it's a video file or audio-only This distinction tells the browser how to handle the file There are plenty of other file formats, such as the waveform format WAV, the multipurpose OGG, WMV for the Windows media player, the open source MKV, and many more Knowing the differences between these file formats can help you ensure your users get the best experience, but sometimes you can't know what format a user's computer will support (or not support) Thankfully, video and audio elements both support the source element With the source element, you can specify a file type and source and can include multiple different types by using multiple source elements When you do this, the browser will determine the best format to use for the user's current environment This takes away the guess work and allows you to focus on building engaging applications --questions--\n--text--\nWhat does MIME stand for in the context of file types --answers--\nMultimedia Internet Media Extension --feedback--\nMIME type was originally for mail Multiple Internet Mail Extensions --feedback--\nMIME type was originally for mail",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d8203da84a08a0f5eab4.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ced63f08207353666509b2831d8d9600",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d8203da84a08a0f5eab4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "different types by using multiple source elements When you do this, the browser will determine the best format to use for the user's current environment This takes away the guess work and allows you to focus on building engaging applications --questions-- --text-- What does MIME stand for in the context of file types --answers-- Multimedia Internet Media Extension --feedback-- MIME type was originally for mail Multiple Internet Mail Extensions --feedback-- MIME type was originally for mailMultipurpose Internet Mail Extensions Media Information and Metadata Encoding --feedback--\nMIME type was originally for mail --video-solution--\n3\n--text--\nWhat is the primary purpose of a MIME type --answers--\nTo compress file sizes for faster internet transfer --feedback--\nA MIME type indicates the type of file To encrypt files for secure transmission --feedback--\nA MIME type indicates the type of file To standardize the way file types are indicated programmatically To convert files between different formats\n--feedback--\nA MIME type indicates the type of file --video-solution--\n3\n--text--\nWhat is the MIME type for an MP3 file --answers--\naudio/mpeg\n--feedback--\nAn MP3 file cannot contain video audio/mp3\nvideo/mp3\n--feedback--\nAn MP3 file cannot contain video application/mp3\n--feedback--\nAn MP3 file cannot contain video --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d8203da84a08a0f5eab4.md",
      "source_type": "git_repo"
    },
    "token_count": 270,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f54f78beba8b0c10891fa5956b0fbbf3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d829d983c008d2db41a1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733d829d983c008d2db41a1\ntitle: What Are Codecs and How Do They Work challengeType: 19\ndashedName: what-is-codecs-and-how-does-it-work\n--description--\nLet's learn about codecs and how they work If you have worked with videos or audio before, you may have heard about codecs A codec, short for \"encoder/decoder\", is an algorithm or software that can convert audio and video between analogue and digital formats Codecs can be specified as part of the MIME type The basic syntax to define a codec is to add a semi-colon after the media type, then codecs= and the codec For example, an OGG audio file which uses the Vorbis codec might have a MIME type of audio/ogg; codecs=vorbis Or, if a file supports multiple codecs, you can specify them as comma separated, but must surround them with quotes: video/webm; codecs=\"vp8, vorbis\" But some file types have a much more complicated syntax for codecs For example, an MP4 might have a codec of codecs=\"avc1 4d002a\", indicating it was encoded with H 264 But when might you actually use these Well, you can include them in the type attribute for a source element This allows you to specify different codecs for the same format, giving the browser more granular options when determining which format to use for that user's environment But you can also use them as part of the MIME type you pass to the global MediaSource isTypeSupported() method This method accepts a MIME-type, and returns true if the environment is likely to support it Or rather, it returns false if it fails to instantiate a buffer for that file type This approach allows you to programmatically select a source yourself, rather than relying on whatever the browser determines is \"best\" --questions--\n--text--\nWhat does the term \"codec\" stand for in the context of multimedia --answers--\nCompress/Decompress\n--feedback--\nA codec denotes how a file has been encoded Code/Decode\n--feedback--\nA codec denotes how a file has been encoded Encoder/Decoder\nEncrypt/Decrypt\n--feedback--\nA codec denotes how a file has been encoded --video-solution--\n3\n--text--\nHow are codecs specified as part of the MIME type --answers--\nBy adding a prefix before the media type",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3589,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d829d983c008d2db41a1.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6eadc5074858dbb40fabd3bd610d5b32",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d829d983c008d2db41a1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the browser determines is \"best\" --questions-- --text-- What does the term \"codec\" stand for in the context of multimedia --answers-- Compress/Decompress --feedback-- A codec denotes how a file has been encoded Code/Decode --feedback-- A codec denotes how a file has been encoded Encoder/Decoder Encrypt/Decrypt --feedback-- A codec denotes how a file has been encoded --video-solution-- 3 --text-- How are codecs specified as part of the MIME type --answers-- By adding a prefix before the media type--feedback--\nCodecs are specified in the MIME type, as an attribute after the media type By adding a suffix after the media type --feedback--\nCodecs are specified in the MIME type, as an attribute after the media type By adding a semi-colon after the media type, followed by codecs= and the codec name By replacing the media type entirely with the codec name --feedback--\nCodecs are specified in the MIME type, as an attribute after the media type --video-solution--\n3\n--text--\nWhat is the purpose of the MediaSource isTypeSupported() method --answers--\nTo automatically convert a file to a supported format --feedback--\nThis method tries to instantiate a buffer for the specified file type, to determine if the type is supported To check if a specific MIME type and codec are likely supported in the current environment To force the browser to use a specific codec --feedback--\nThis method tries to instantiate a buffer for the specified file type, to determine if the type is supported To list all supported codecs in the current environment --feedback--\nThis method tries to instantiate a buffer for the specified file type, to determine if the type is supported --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3589,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d829d983c008d2db41a1.md",
      "source_type": "git_repo"
    },
    "token_count": 350,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "114434742faff587002ae12f85332c7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d83630e76f08ff49e6dc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733d83630e76f08ff49e6dc\ntitle: What Is the HTMLMediaElement API and How Does It Work challengeType: 19\ndashedName: what-is-the-htmlmediaelement-api-and-how-does-it-work\n--description--\nThe HTMLMediaElement API is a powerful tool to control the behavior of audio and video elements on your page It extends the base HTMLElement interface, so you have access to the base properties as well as these helpful methods You've already explored some of the methods in a previous lecture about the Audio element, such as play() and pause() These same methods are available on video elements as well There are some other helpful methods, such as the addTextTrack() method This method allows you to specify a text track to associate with the media element which is especially helpful for adding subtitles to a video Or the fastSeek() method, which allows you to move the playback position to a specific time within the media The HTMLMediaElement API also provides access to some new events that a standard element does not have The play and pause events are fired when the media starts and stops playing The ended event fires when the end of the media has been reached The waiting event fires when playback is automatically paused due to data buffering And the canplay and canplaythrough events fire when the media can be partially played, or played in totality The HTMLMediaElement offers a great deal of control over your interactive media, and we've only scratched the surface I encourage you to explore and experiment with the API to find the best ways to integrate it with your applications --questions--\n--text--\nWhat does the addTextTrack() method do --answers--\nAdds background music to the media --feedback--\nThe addTextTrack() method can be used to add subtitles to a video Allows you to specify a text track to associate with the media element Creates a new audio track --feedback--\nThe addTextTrack() method can be used to add subtitles to a video Removes existing subtitles from a video --feedback--\nThe addTextTrack() method can be used to add subtitles to a video --video-solution--\n2\n--text--\nWhich event fires when the media can be played in its entirety without interruption --answers--\nplay\n--feedback--\nConsider which event indicates the entire video can be played all the way through canplay\n--feedback--\nConsider which event indicates the entire video can be played all the way through",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3190,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d83630e76f08ff49e6dc.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1b6333d35388e79b62801ddec39887d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d83630e76f08ff49e6dc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "used to add subtitles to a video Removes existing subtitles from a video --feedback-- The addTextTrack() method can be used to add subtitles to a video --video-solution-- 2 --text-- Which event fires when the media can be played in its entirety without interruption --answers-- play --feedback-- Consider which event indicates the entire video can be played all the way through canplay --feedback-- Consider which event indicates the entire video can be played all the way throughcanplaythrough\nended\n--feedback--\nConsider which event indicates the entire video can be played all the way through --video-solution--\n3\n--text--\nWhich event fires when playback is automatically paused due to data buffering --answers--\npause\n--feedback--\nThe event shares the name with what you do while a video is loading waiting\nended\n--feedback--\nThe event shares the name with what you do while a video is loading canplay\n--feedback--\nThe event shares the name with what you do while a video is loading --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3190,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d83630e76f08ff49e6dc.md",
      "source_type": "git_repo"
    },
    "token_count": 209,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7e4023c32973da4274fd01713062b167",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d8606fb893099e3d0df3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733d8606fb893099e3d0df3\ntitle: What Are Some Other Examples of Video and Audio APIs challengeType: 19\ndashedName: what-are-some-other-examples-of-video-and-audio-apis\n--description--\nYou've learned about the HTMLMediaElement and MediaStreams APIs, but there are a few more APIs that can be quite helpful in working with video and audio The first is the Screen Capture API As the name might suggest, this API allows you to record a user's screen This API is exposed by calling the getDisplayMedia() method of the mediaDevices object and consuming the returned media stream Then there is the MediaStream Recording API This API works in tandem with the MediaStreams APIs, allowing you to record a MediaStream (or even an HTMLMediaElement directly) It then fires dataavailable events with Blob payloads you can write to the local file storage Underlying all of this technology is the Media Source Extensions API The Media Source Extensions API is what allows you to directly pass a user's webcam feed to a video element with the srcObject property, for example And finally, the Web Audio API which powers everything audible on the web This API includes important objects like an AudioBuffer (representing a Buffer specifically containing audio data) or the AudioContext And that wraps up our lectures on audio and video --questions--\n--text--\nWhat is the primary function of the Screen Capture API --answers--\nTo play video files --feedback--\nThink about the meaning of \"screen capture\" To record a user's screen To edit video content --feedback--\nThink about the meaning of \"screen capture\" To stream video from external sources --feedback--\nThink about the meaning of \"screen capture\" --video-solution--\n2\n--text--\nWhich method is used to access the Screen Capture API --answers--\ngetScreenMedia()\n--feedback--\nRemember that screens are considered displays captureScreen()\n--feedback--\nRemember that screens are considered displays getDisplayMedia()\nrecordScreen()\n--feedback--\nRemember that screens are considered displays --video-solution--\n3\n--text--\nWhich API allows you to pass a user's webcam feed directly to a video element's srcObject property --answers--\nScreen Capture API --feedback--\nThis core API extends the behavior of media sources MediaStream Recording API --feedback--\nThis core API extends the behavior of media sources Media Source Extensions API Web Audio API --feedback--\nThis core API extends the behavior of media sources",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2707,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d8606fb893099e3d0df3.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6c7961f3dd04fce1f1666e88626e97a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d8606fb893099e3d0df3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "are considered displays getDisplayMedia() recordScreen() --feedback-- Remember that screens are considered displays --video-solution-- 3 --text-- Which API allows you to pass a user's webcam feed directly to a video element's srcObject property --answers-- Screen Capture API --feedback-- This core API extends the behavior of media sources MediaStream Recording API --feedback-- This core API extends the behavior of media sources Media Source Extensions API Web Audio API --feedback-- This core API extends the behavior of media sources--video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2707,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d8606fb893099e3d0df3.md",
      "source_type": "git_repo"
    },
    "token_count": 108,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e10ab70074c12ff59de47ae047f6961a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d852175df50937f06061.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733d852175df50937f06061\ntitle: How Can You Work with the Media Streams to Capture Video and Audio from a Local Device challengeType: 19\ndashedName: how-can-you-work-with-the-media-streams-getusermedia-to-capture-video-and-audio-from-a-local-device\n--description--\nInstead of playing audio and video, you may sometimes want to capture audio or video The Media Capture and Streams API, or the MediaStream API, allows you to do this In order to use the API, however, you need to create the MediaStream object You could do this with the constructor, but it would not be tied to the user's hardware Instead, the mediaDevices property of the global navigator object has a getUserMedia() method for you to use This method accepts a single constraints object which defines the type of media you want to receive This object has an audio and video property, reflecting audio and video streams These properties can be false, if you do not want to receive that type of stream, true if you do, or objects defining additional constraints For example, you can require a specific resolution of video output:\njs\nwindow navigator mediaDevices getUserMedia({\naudio: true,\nvideo: {\nwidth: {\nmin: 1280,\nideal: 1920,\nmax: 3840\n},\nheight: {\nmin: 720,\nideal: 1080,\nmax: 2160\n}\n}\n});\nThis constraint object specifies minimum and maximum resolutions for the video feed The ideal property specifies the resolution you'd most like to have – and the stream will provide the resolution closest to your ideal Once you've created your MediaStream (assuming the user approves the automated request to access their hardware), you can use the stream data however you need Note that getUserMedia() returns a Promise, which means you will either need a callback function to consume the stream, or use async/await syntax You will learn more about Promises and asynchronous programming in future lectures Here's a basic example which renders the user's webcam feed to the page js\nconst video = document querySelector(\"video\");\nconst stream =\nawait window navigator mediaDevices getUserMedia({ video: true });\nvideo srcObject = stream;\nawait video play();\nIt is worth noting that this API does not offer access to screen capture You'll learn about that API in the next lecture --questions--\n--text--\nWhich method is used to access the user's media devices",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3674,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d852175df50937f06061.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4591729dc5e40b5ca5df6f2e43290d25",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d852175df50937f06061.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "programming in future lectures Here's a basic example which renders the user's webcam feed to the page js const video = document querySelector(\"video\"); const stream = await window navigator mediaDevices getUserMedia({ video: true }); video srcObject = stream; await video play(); It is worth noting that this API does not offer access to screen capture You'll learn about that API in the next lecture --questions-- --text-- Which method is used to access the user's media devices--answers--\ncreateMediaStream()\n--feedback--\nThis method accesses the user's media devices getMediaDevices()\n--feedback--\nThis method accesses the user's media devices getUserMedia()\ncaptureStream()\n--feedback--\nThis method accesses the user's media devices --video-solution--\n3\n--text--\nIn the constraints object for video, what does the ideal property represent --answers--\nThe minimum acceptable resolution --feedback--\nThink about what the word ideal means The maximum possible resolution --feedback--\nThink about what the word ideal means The preferred resolution The default resolution if no other constraints are met --feedback--\nThink about what the word ideal means --video-solution--\n3\n--text--\nWhat is returned by the getUserMedia() method --answers--\nA MediaStream object --feedback--\nThe getUserMedia() method is asynchronous A constraints object --feedback--\nThe getUserMedia() method is asynchronous A Promise A video element --feedback--\nThe getUserMedia() method is asynchronous --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3674,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video\\6733d852175df50937f06061.md",
      "source_type": "git_repo"
    },
    "token_count": 291,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "baea571355df4cc8f0eda29e26c79f57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video-elements\\67168278ac6df6a799555db5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67168278ac6df6a799555db5\ntitle: What Are the Roles of the HTML Audio and Video Elements, and How Do They Work challengeType: 19\ndashedName: what-are-the-roles-of-the-html-audio-and-video-elements\n--description--\nThe audio and video elements allow you to add sound and video content to your HTML documents The audio element supports popular audio formats like mp3, wav, and ogg The video element supports mp4, ogg, and webm formats To include audio content on your web page, you can use the audio element with the src attribute pointing to the location of your audio file:\nhtml\n<audio src=\"CrystalizeThatInnerChild mp3\"></audio>\nIf you try to run this example, you'll see that nothing shows up on the page However, if you inspect the page with the developer tools, you'll see the audio element is indeed on the page If you want to see the audio player on the page, then you can add the audio element with the controls attribute:\nhtml\n<audio src=\"CrystalizeThatInnerChild mp3\" controls></audio>\nThe controls attribute enables users to manage audio playback, including adjusting volume, and pausing, or resuming playback The controls attribute is a boolean attribute that can be added to an element to enable built-in playback controls If omitted, no controls will be shown Apart from the src and controls attributes, there are several other attributes that enhance the functionality of the audio element The loop attribute is a boolean attribute that makes the audio replay continuously Here's an example of using the loop attribute to play one of Quincy Larson's songs titled \"Can't stay down\":\n```html\n<audio\nsrc=\"https://cdn freecodecamp org/curriculum/js-music-player/can't-stay-down mp3\"\nloop\ncontrols\n```\nWhen the song reaches the end, it will loop back around and play it again from the beginning Another attribute you can use is the muted attribute When present in the audio element, this boolean attribute will start the audio in a muted state Here's an example of using the muted attribute:\n```html\n<audio\nsrc=\"https://cdn freecodecamp org/curriculum/js-music-player/can't-stay-down mp3\"\nloop\ncontrols\nmuted\n```\nWhen you start the song in the browser, you'll not hear anything",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5634,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video-elements\\67168278ac6df6a799555db5.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0cf09996bc0962db8e32a830a2772fb2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video-elements\\67168278ac6df6a799555db5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "controls ``` When the song reaches the end, it will loop back around and play it again from the beginning Another attribute you can use is the muted attribute When present in the audio element, this boolean attribute will start the audio in a muted state Here's an example of using the muted attribute: ```html <audio src=\"https://cdn freecodecamp org/curriculum/js-music-player/can't-stay-down mp3\" loop controls muted ``` When you start the song in the browser, you'll not hear anythingTo hear the music you will need to click on the volume icon When it comes to audio file types, there are differences in which browsers support which type To accommodate this, you can use source elements inside the audio element and the browser will select the first source that it understands Here's an example of using multiple source elements for an audio element:\nhtml\n<audio controls>\n<source src=\"audio ogg\" type=\"audio/ogg\" />\n<source src=\"audio wav\" type=\"audio/wav\" />\n<source src=\"audio mp3\" type=\"audio/mpeg\" />\n</audio>\nThe browser will first start with the ogg type, and if it can't play the audio, then it'll move down to the next type in the list All the attributes we have learned so far are also supported in the video element Here's an example of using a video element with the loop, controls, and muted attributes:\n```html\n```\nFor the src, or source attribute, we are using a video called \"Big Buck Bunny\" from archive org If you wanted to display an image while the video is downloading, you can use the poster attribute This attribute is not available for audio elements and is unique to the video element Here's an example of using the poster attribute with content provided by peach blender org:\n```html\n```\nThis example is also using the width attribute to set the width to 620 pixels so the video fits better on the screen --questions--\n--text--\nWhat attribute allows the audio to start in a muted state --answers--\nmute\n--feedback--\nRemember the attribute that specifically controls the sound state when the audio starts quiet\n--feedback--\nRemember the attribute that specifically controls the sound state when the audio starts pause\n--feedback--\nRemember the attribute that specifically controls the sound state when the audio starts muted\n--video-solution--\n4\n--text--\nWhich attribute lets you see the play and pause buttons",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5634,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video-elements\\67168278ac6df6a799555db5.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f46195b6003c3cb8dbca7a8a950232e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video-elements\\67168278ac6df6a799555db5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "on the screen --questions-- --text-- What attribute allows the audio to start in a muted state --answers-- mute --feedback-- Remember the attribute that specifically controls the sound state when the audio starts quiet --feedback-- Remember the attribute that specifically controls the sound state when the audio starts pause --feedback-- Remember the attribute that specifically controls the sound state when the audio starts muted --video-solution-- 4 --text-- Which attribute lets you see the play and pause buttons--answers--\nloop\n--feedback--\nThink about the attribute that generates playback for the audio and video UI controls\ndetails\n--feedback--\nThink about the attribute that generates playback for the audio and video UI muted\n--feedback--\nThink about the attribute that generates playback for the audio and video UI --video-solution--\n2\n--text--\nWhat is the purpose of the poster attribute in the video element --answers--\nTo set the video source --feedback--\nConsider what you would want to show to the user before the video starts playing To control the video playback --feedback--\nConsider what you would want to show to the user before the video starts playing To display an image while the video is downloading To mute the video --feedback--\nConsider what you would want to show to the user before the video starts playing --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5634,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-audio-and-video-elements\\67168278ac6df6a799555db5.md",
      "source_type": "git_repo"
    },
    "token_count": 262,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e75229c7e9303f983c2b95808b7afb66",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672aa669960f6a596081fcad.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa669960f6a596081fcad\ntitle: How Do Background Image Size, Repeat, Position, and Attachment Work challengeType: 19\ndashedName: how-to-work-with-background-image-size-repeat-position-and-attachment\n--description--\nWhen working with background images in CSS, you have several properties at your disposal to control how these images are displayed The main properties we'll focus on are background-size, background-repeat, background-position, and background-attachment Let’s first take a look at the background-image property:\ncss\nbody {\nbackground-image: url(\"https://cdn freecodecamp org/curriculum/cat-photo-app/relaxing-cat jpg\");\n}\nThe above CSS sets a cat background image for the body element If you want to set the size for the background image, you can use the background-size property You can use contain to scale the image as large as possible without cropping or stretching Here's an example with background-size: contain:\ncss\nbody {\nbackground-image: url(\"https://cdn freecodecamp org/curriculum/cat-photo-app/relaxing-cat jpg\");\nbackground-size: contain;\nmin-height: 100px;\n}\nWe are setting the min-height to 100px so the background image is visible and the layout maintains a baseline height, ensuring that even with minimal content, the design appears balanced and visually appealing If we change the background-size property to use the cover value, then the background image will scale to cover the entire body element while maintaining its aspect ratio css\nbody {\nbackground-image: url(\"https://cdn freecodecamp org/curriculum/cat-photo-app/relaxing-cat jpg\");\nbackground-size: cover;\nmin-height: 100px;\n}\nIn the previous examples, you probably noticed that the background image would continuously repeat By default, background images repeat both horizontally and vertically to fill the entire element However, you can control this behavior You can use the background-repeat property with the value set to no-repeat css\nbody {\nbackground-image: url(\"https://cdn freecodecamp org/curriculum/cat-photo-app/relaxing-cat jpg\");\nbackground-size: contain;\nbackground-repeat: no-repeat;\nmin-height: 100px;\n}\nWith the background-size set to contain and the background-repeat set to no-repeat, the image will no longer repeat on the screen If you wanted to repeat the background image horizontally, you can use the repeat-x value for the background-repeat property",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672aa669960f6a596081fcad.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "7aaab0eb16e18937f355494c52571a67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672aa669960f6a596081fcad.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the entire element However, you can control this behavior You can use the background-repeat property with the value set to no-repeat css body { background-image: url(\"https://cdn freecodecamp org/curriculum/cat-photo-app/relaxing-cat jpg\"); background-size: contain; background-repeat: no-repeat; min-height: 100px; } With the background-size set to contain and the background-repeat set to no-repeat, the image will no longer repeat on the screen If you wanted to repeat the background image horizontally, you can use the repeat-x value for the background-repeat propertycss\nbody {\nbackground-image: url(\"https://cdn freecodecamp org/curriculum/cat-photo-app/relaxing-cat jpg\");\nbackground-size: contain;\nbackground-repeat: repeat-x;\nmin-height: 100px;\n}\nIf you wanted to repeat the background image vertically, you can use the repeat-y value for the background-repeat property css\nbody {\nbackground-image: url(\"https://cdn freecodecamp org/curriculum/cat-photo-app/relaxing-cat jpg\");\nbackground-size: contain;\nbackground-repeat: repeat-y;\nmin-height: 100px;\n}\nTo position a background image on the screen, you can use the background-position property The background-position property allows you to set where in the element the background image appears You can use keywords like top, bottom, left, right, and center, or specific pixel or percentage values Here is an example using the center and top for the background-position:\ncss\nbody {\nbackground-image: url(\"https://cdn freecodecamp org/curriculum/cat-photo-app/relaxing-cat jpg\");\nbackground-size: contain;\nbackground-repeat: no-repeat;\nbackground-position: center top;\nmin-height: 100px;\n}\nThis CSS code positions the background image at the center of the element horizontally and at the top vertically Lastly, background-attachment determines whether the background image scrolls with the content or remains fixed when the page is scrolled The main values are scroll (default), where the background image scrolls with the content, and fixed, where the background image stays in the same position on the screen Here is an example using the fixed value for the background-attachment property:\ncss\nbody {\nbackground-image: url(\"https://cdn freecodecamp org/curriculum/cat-photo-app/relaxing-cat",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672aa669960f6a596081fcad.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "1d051024dcea9fcbdcd3e82bc21147ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672aa669960f6a596081fcad.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "center of the element horizontally and at the top vertically Lastly, background-attachment determines whether the background image scrolls with the content or remains fixed when the page is scrolled The main values are scroll (default), where the background image scrolls with the content, and fixed, where the background image stays in the same position on the screen Here is an example using the fixed value for the background-attachment property: css body { background-image: url(\"https://cdn freecodecamp org/curriculum/cat-photo-app/relaxing-catjpg\");\nbackground-position: center top;\nbackground-attachment: fixed;\n}\nThis CSS code sets the background image to remain fixed in place even when the page is scrolled If you wanted to combine a few of the properties into one line, you can do that by using the shorthand background property Here is an example:\ncss\nbody {\nbackground: center top fixed\nurl(\"https://cdn freecodecamp org/curriculum/cat-photo-app/relaxing-cat jpg\");\n}\nThe above example combines the background-image, background-position, and background-attachment into a single line By mastering these properties, you'll have great control over how background images are displayed in your web designs, allowing for more visually appealing and functional layouts --questions--\n--text--\nWhich background-size value would you use to ensure the entire background image is visible without any cropping, even if it doesn't cover the whole element --answers--\ncover\n--feedback--\nThink about which option ensures the full image is shown without stretching or cropping contain\nauto\n--feedback--\nThink about which option ensures the full image is shown without stretching or cropping 100%\n--feedback--\nThink about which option ensures the full image is shown without stretching or cropping --video-solution--\n2\n--text--\nIf you want a background image to repeat horizontally but not vertically, which background-repeat value would you use --answers--\nrepeat\n--feedback--\nConsider which option specifically mentions horizontal repetition no-repeat\n--feedback--\nConsider which option specifically mentions horizontal repetition repeat-x\nrepeat-y\n--feedback--\nConsider which option specifically mentions horizontal repetition --video-solution--\n3\n--text--\nWhich background-attachment value would you use to make a background image stay in place when the user scrolls the page --answers--\nscroll\n--feedback--\nThink about which term implies the image doesn't move with scrolling fixed\nlocal\n--feedback--\nThink about which term implies the image doesn't move with scrolling",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672aa669960f6a596081fcad.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "1b259f711ad9e2b0334cef1f1635aac0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672aa669960f6a596081fcad.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "which option specifically mentions horizontal repetition no-repeat --feedback-- Consider which option specifically mentions horizontal repetition repeat-x repeat-y --feedback-- Consider which option specifically mentions horizontal repetition --video-solution-- 3 --text-- Which background-attachment value would you use to make a background image stay in place when the user scrolls the page --answers-- scroll --feedback-- Think about which term implies the image doesn't move with scrolling fixed local --feedback-- Think about which term implies the image doesn't move with scrollingstatic\n--feedback--\nThink about which term implies the image doesn't move with scrolling --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6670,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672aa669960f6a596081fcad.md",
      "source_type": "git_repo"
    },
    "token_count": 123,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "f0d5d6883a77505d4ee87389652b49c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98be592cfb451f651451.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672b98be592cfb451f651451\ntitle: What Is a Background Gradient, and How Does It Work challengeType: 19\ndashedName: what-is-a-background-gradient\n--description--\nA background gradient in CSS is a smooth transition between two or more colors that can be applied to the background of an element Gradients allow you to create visually appealing backgrounds without needing images There are two main types of gradients in CSS: linear gradients and radial gradients A linear gradient transitions colors along a straight line You can define the direction and the colors involved Here is the basic syntax:\ncss\nbackground: linear-gradient(direction, color-stop1, color-stop2, );\nIn this example, we are using the background CSS property with a value of the linear gradient The direction specifies the direction of the gradient It can be an angle (such as 45deg), a keyword (such as to right, to bottom), or a side/corner color-stop specifies the colors and positions where the gradient transitions occur To better understand how linear gradients work, let's take a look at the following example:\ncss linear-gradient{\nbackground: linear-gradient(to right, red, yellow);\nheight: 40vh;\n}\nThis CSS creates a linear gradient that transitions from red on the left to yellow on the right The gradient is applied to an element with a height of 40% of the viewport height You'll learn more about vh units in a future lecture The to right direction means the gradient runs horizontally from left to right Another type of gradient would be the radial gradient A radial gradient transitions colors radiating from an origin (usually the center) outward in a circular or elliptical shape Here is the basic syntax:\ncss\nbackground: radial-gradient(shape size at position, color-stop1, color-stop2, )\nOn the syntax, the shape specifies the shape of gradient which could be circle or ellipse The size determines the size of the gradient's ending shape which could be closest-side, closest-corner, farthest-side, farthest-corner, contain, or cover position determines the position of the gradient's center which could be specified using keywords (such as center, top left, bottom right) or precise values (such as 50% 50%, 10px 20px) Lastly, color stops are a list of colors that the gradient transitions through Each color stop can optionally include a position value (percentage or length) indicating where the color should be placed An example would be:\ncss",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5376,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98be592cfb451f651451.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "26e692416ae18a67aaaa2f8e80d07d0a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98be592cfb451f651451.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "could be closest-side, closest-corner, farthest-side, farthest-corner, contain, or cover position determines the position of the gradient's center which could be specified using keywords (such as center, top left, bottom right) or precise values (such as 50% 50%, 10px 20px) Lastly, color stops are a list of colors that the gradient transitions through Each color stop can optionally include a position value (percentage or length) indicating where the color should be placed An example would be: cssradial-gradient{\nbackground: radial-gradient(circle closest-side at center, red, yellow 50%, green);\nheight: 60vh;\n}\nThis CSS creates a circular radial gradient centered in the element It starts with red at the center, transitions to yellow at 50% of the radius, and ends with green The closest-side keyword makes the gradient's ending shape fit the closest side of the element The gradient is applied to an element with a height of 60% of the viewport height Understanding how to work with CSS gradients can significantly enhance your designs by providing visually appealing backgrounds without the need for images With options like linear gradients for smooth transitions and radial gradients for circular effects, they offer both flexibility and creativity in web design --questions--\n--text--\nWhat does the circle keyword specify in a radial-gradient() function --answers--\nThe gradient will have a square shape --feedback--\nConsider what shape the gradient will take when using the circle keyword The gradient will extend in a diagonal direction --feedback--\nConsider what shape the gradient will take when using the circle keyword The gradient will have a circular shape The gradient will be applied to the text --feedback--\nConsider what shape the gradient will take when using the circle keyword --video-solution--\n3\n--text--\nWhat does the farthest-corner keyword do in the size parameter of a radial-gradient() function --answers--\nIt makes the gradient extend to the nearest corner of the element --feedback--\nThink about how the size of the gradient affects its coverage relative to the element It makes the gradient cover the entire element's width --feedback--\nThink about how the size of the gradient affects its coverage relative to the element It makes the gradient extend to the farthest corner of the element It makes the gradient only appear within the element's padding --feedback--\nThink about how the size of the gradient affects its coverage relative to the element",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5376,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98be592cfb451f651451.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3b4e21f41a68e5fb61985bf800cbf444",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98be592cfb451f651451.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "how the size of the gradient affects its coverage relative to the element It makes the gradient cover the entire element's width --feedback-- Think about how the size of the gradient affects its coverage relative to the element It makes the gradient extend to the farthest corner of the element It makes the gradient only appear within the element's padding --feedback-- Think about how the size of the gradient affects its coverage relative to the element--video-solution--\n3\n--text--\nIn the radial-gradient(circle at center, red, yellow 50%, green) function, where is the gradient's center located --answers--\nAt the top right corner of the element --feedback--\nConsider the placement specified by the at center part of the function At the bottom left corner of the element --feedback--\nConsider the placement specified by the at center part of the function At the center of the element At the outer edge of the element --feedback--\nConsider the placement specified by the at center part of the function --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5376,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98be592cfb451f651451.md",
      "source_type": "git_repo"
    },
    "token_count": 201,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "78e594e5e62af36728b0b4931cb1223c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98db3bcdd545ab3b3c73.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672b98db3bcdd545ab3b3c73\ntitle: What Are the Different Ways You Can Add Borders Around Images challengeType: 19\ndashedName: what-are-the-different-ways-you-can-add-borders-around-images\n--description--\nIn CSS, there are several ways to add borders around images, each offering different styling options and levels of control Let's explore some of the most common and versatile methods The most straightforward way to add a border to an image is by using the border property This property is a shorthand that allows you to set the width, style, and color of the border all at once css\nimg {\nborder: 2px solid red;\n}\nThis CSS rule adds a 2-pixel wide, solid red border around all img elements You can adjust the width, style (such as dashed, dotted, or double), and color to suit your design needs If you need more control over individual sides of the border, you can use the specific border properties for each side:\ncss\nimg {\nborder-top: 1px solid red;\nborder-right: 2px dashed green;\nborder-bottom: 3px dotted blue;\nborder-left: 4px double yellow;\n}\nThis allows you to create unique border styles for each side of the image Another way to create a border effect is by using the outline property While similar to border, outline doesn't affect the element's dimensions or layout:\ncss\nimg {\noutline: 3px solid gold;\n}\nThis creates a gold outline around the image without changing its size or position If you want to create rounded corners on your border, you can use the border-radius property in conjunction with border:\ncss\nimg {\nborder: 2px solid black;\nborder-radius: 10px;\n}\nRemember, these techniques can be combined and customized to create unique border effects The choice of method depends on your specific design requirements and the level of complexity you need --questions--\n--text--\nWhich CSS property allows you to create a border that doesn't affect the element's dimensions --answers--\nborder\n--feedback--\nThink about which property creates a line around an element without changing its size or position outline\nbox-shadow\n--feedback--\nThink about which property creates a line around an element without changing its size or position border-image\n--feedback--\nThink about which property creates a line around an element without changing its size or position",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98db3bcdd545ab3b3c73.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "8c8203798a35a7fdcb302cec5bba9fe3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98db3bcdd545ab3b3c73.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "complexity you need --questions-- --text-- Which CSS property allows you to create a border that doesn't affect the element's dimensions --answers-- border --feedback-- Think about which property creates a line around an element without changing its size or position outline box-shadow --feedback-- Think about which property creates a line around an element without changing its size or position border-image --feedback-- Think about which property creates a line around an element without changing its size or position--video-solution--\n2\n--text--\nHow would you create a 3-pixel wide, dashed, red border only on the left side of an image --answers--\ncss\nimg {\nborder: 3px dashed red left;\n}\n--feedback--\nConsider which property specifically targets one side of an element's border css\nimg {\nborder-left: 3px dashed red;\n}\ncss\nimg {\nleft-border: 3px dashed red;\n}\n--feedback--\nConsider which property specifically targets one side of an element's border css\nimg {\nborder: left 3px dashed red;\n}\n--feedback--\nConsider which property specifically targets one side of an element's border --video-solution--\n2\n--text--\nWhich CSS property would you use to round the corners of a border --answers--\nborder-style\n--feedback--\nThink of a word related to a circle or curve border-radius\nborder-spacing\n--feedback--\nThink of a word related to a circle or curve border-bottom\n--feedback--\nThink of a word related to a circle or curve --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3517,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98db3bcdd545ab3b3c73.md",
      "source_type": "git_repo"
    },
    "token_count": 313,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "9d3ba8e11adf9c7694a7a9d343cfac00",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98cd77b6b7456b6ef2de.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672b98cd77b6b7456b6ef2de\ntitle: What Are Some Accessibility Considerations for Backgrounds challengeType: 19\ndashedName: what-are-some-accessibility-considerations-for-backgrounds\n--description--\nIn web design, backgrounds play a vital role in defining the overall look and feel of a webpage However, when designing with backgrounds, it's crucial to consider accessibility to ensure your content is usable and readable by all users, including those with visual impairments One of the primary accessibility concerns related to backgrounds is ensuring that there is sufficient contrast between the background and the text Without adequate contrast, users with visual impairments, including those with low vision or color blindness, may struggle to read the content on your page Contrast refers to the difference in lightness or darkness between two colors Sufficient contrast between the background color and the text color is essential for readability The Web Content Accessibility Guidelines (WCAG) recommend a minimum contrast ratio of 4 5:1 for normal text and 3:1 for large text For example, placing white text on a light-gray background would result in poor contrast, making the text difficult to read However, white text on a dark-blue background would provide good contrast, enhancing readability for all users Here’s an example of poor contrast:\n```html\nThis is an example of poor contrast ```\nNow, here’s an example of good contrast:\n```html\nThis is an example of good contrast ```\nAnother consideration is avoiding placing text over busy or complex backgrounds, such as images or gradients with multiple colors Busy backgrounds can make it hard to distinguish the text from the background, regardless of the contrast If you must use a background image, it’s a good idea to apply a semi-transparent overlay or a solid color behind the text to make it more readable Here's an example of how you can do this:\ncss background-image-text {\nbackground-image: url('fcc-logo svg');\ncolor: white;\npadding: 20px;\nbackground-color: rgba(0, 0, 0, 0 75);\n}\nThis code places a semi-transparent black overlay behind the text, improving its readability against the background image When designing backgrounds, avoid using color as the sole means of conveying information For example, using just color to indicate an error or success message (such as red for error or green for success) can be problematic for users with color blindness",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98cd77b6b7456b6ef2de.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6e05078d145abcdeb2b31220d75bf483",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98cd77b6b7456b6ef2de.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "css background-image-text { background-image: url('fcc-logo svg'); color: white; padding: 20px; background-color: rgba(0, 0, 0, 0 75); } This code places a semi-transparent black overlay behind the text, improving its readability against the background image When designing backgrounds, avoid using color as the sole means of conveying information For example, using just color to indicate an error or success message (such as red for error or green for success) can be problematic for users with color blindnessIn addition to color, you should use symbols or text to convey information For example, alongside a red error message, you could use an icon or bold text to make it clear that there’s an error Though less common, background audio or videos can also affect accessibility Background music or auto-playing videos can be distracting for some users, particularly those with cognitive disabilities If you include background audio, always provide a way for users to mute or pause the audio By taking these accessibility considerations into account, you can create more inclusive designs that ensure your content is readable and usable by all users, regardless of their abilities --questions--\n--text--\nWhy is it important to maintain sufficient contrast between text and background --answers--\nTo make the page look more colorful --feedback--\nThink about how visually impaired users might interact with your website To make the text more readable for all users To reduce loading times on the webpage --feedback--\nThink about how visually impaired users might interact with your website To highlight text in different ways --feedback--\nThink about how visually impaired users might interact with your website --video-solution--\n2\n--text--\nWhich of the following should be avoided when placing text over a background --answers--\nApplying a high-contrast background --feedback--\nConsider which approach makes text difficult to read Using a busy or complex background without any overlay Using white text on a black background --feedback--\nConsider which approach makes text difficult to read Using a solid background color behind text --feedback--\nConsider which approach makes text difficult to read --video-solution--\n2\n--text--\nWhat is the issue with using color as the only indicator of information, such as showing an error message in red --answers--\nIt makes the website look less colorful --feedback--\nThink about how users who can't distinguish between certain colors might be affected It doesn't affect users with visual impairments --feedback--\nThink about how users who can't distinguish between certain colors might be affected",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98cd77b6b7456b6ef2de.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b65fe6268a9441680d5c138c3f26bb0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98cd77b6b7456b6ef2de.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--feedback-- Consider which approach makes text difficult to read --video-solution-- 2 --text-- What is the issue with using color as the only indicator of information, such as showing an error message in red --answers-- It makes the website look less colorful --feedback-- Think about how users who can't distinguish between certain colors might be affected It doesn't affect users with visual impairments --feedback-- Think about how users who can't distinguish between certain colors might be affectedIt can be problematic for users with color blindness It requires more CSS code --feedback--\nThink about how users who can't distinguish between certain colors might be affected --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5153,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-backgrounds-and-borders\\672b98cd77b6b7456b6ef2de.md",
      "source_type": "git_repo"
    },
    "token_count": 133,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "dfa06ffe3e719a7e2a44dcd8148eafad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ab64775d35f78f5238fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733ab64775d35f78f5238fe\ntitle: What Does CRUD Stand For, and How Do the Basic Operations Work challengeType: 19\ndashedName: what-does-crud-stand-for-and-how-do-the-basic-operations-work\n--description--\nCRUD is an acronym that stands for Create, Read, Update, and Delete These are the four operations of persistent storage Persistent storage refers to saving data in a way that makes it available even after the power is turned off or the device is restarted Understanding how the basic operation of CRUD works is crucial to web development because it forms the foundation for working with databases and building applications where users can add, view, modify, and delete data Now, let’s take a look at each part of CRUD more closely\nCreate refers to the process of creating new data For example, in a web app, this could be when a user adds a new post to a blog Read is the operation where data is retrieved from a database For instance, when you visit a blog post or view your profile on a website, you’re performing a read operation to fetch and display data stored in the database Update involves modifying existing data in the database An example would be editing a blog post or updating your profile information Delete is the operation that removes data from a database For instance, when you delete a blog post or account, you’re performing a delete operation CRUD is used when working with databases, the UI, and RESTful APIs RESTful APIs are a set of conventions for building web services that allow the client to interact with a database or backend system by performing CRUD operations through standard HTTP methods HTTP stands for Hypertext Transfer Protocol and it is the foundation for data communication on the web There are HTTP methods which define the actions that can be performed on resources over the web The common methods are GET, POST, PUT, PATCH, DELETE You will learn more about RESTful APIs and HTTP in future lectures, but here is a quick break down of how CRUD maps to the different HTTP methods POST is used to create a new resource GET is used to retrieve or read data PUT is used to update a resource by replacing it entirely PATCH is used to partially update a resource DELETE is used to remove a resource Here’s an example of how CRUD operations might be represented in code using a simple array in JavaScript:\n```js\nlet items = [];\n// Create\nfunction createItem(item) {\nitems",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4460,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ab64775d35f78f5238fe.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0048f94569c70db431b36b82936a9078",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ab64775d35f78f5238fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to the different HTTP methods POST is used to create a new resource GET is used to retrieve or read data PUT is used to update a resource by replacing it entirely PATCH is used to partially update a resource DELETE is used to remove a resource Here’s an example of how CRUD operations might be represented in code using a simple array in JavaScript: ```js let items = []; // Create function createItem(item) { itemspush(item);\n}\n// Read\nfunction readItems() {\nreturn items;\n}\n// Update\nfunction updateItem(index, newItem) {\nitems[index] = newItem;\n}\n// Delete\nfunction deleteItem(index) {\nitems splice(index, 1);\n}\n// Example Usage\ncreateItem('Book');\nconsole log(readItems()); // ['Book']\nupdateItem(0, 'Magazine');\nconsole log(readItems()); // ['Magazine']\ndeleteItem(0);\nconsole log(readItems()); // []\n```\nIn this example:\nWe create an item by pushing it into an array We read the items by returning the array We update an item by modifying the array element at a given index We delete an item by removing it from the array using splice() This is a basic representation of how CRUD operations work at a conceptual level --questions--\n--text--\nWhat does the C in CRUD stand for --answers--\nConnect\n--feedback--\nThink about which operation involves adding new data Create\nCompile\n--feedback--\nThink about which operation involves adding new data Compute\n--feedback--\nThink about which operation involves adding new data --video-solution--\n2\n--text--\nWhich HTTP method is typically used for the Read operation in CRUD --answers--\nPOST\n--feedback--\nWhich method is used to request data from a server GET\nPUT\n--feedback--\nWhich method is used to request data from a server DELETE\n--feedback--\nWhich method is used to request data from a server --video-solution--\n2\n--text--\nWhat is the purpose of the Delete operation in CRUD --answers--\nTo modify data --feedback--\nConsider what happens when you no longer need certain data To remove data To add new data --feedback--\nConsider what happens when you no longer need certain data To read data --feedback--\nConsider what happens when you no longer need certain data --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4460,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ab64775d35f78f5238fe.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a6e2b2f612b2e7554d1253dc4d70441a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff4a9319c8486750886c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733ff4a9319c8486750886c\ntitle: What Is localStorage, and What Are Some Common Methods challengeType: 19\ndashedName: what-is-localstorage-and-what-are-some-common-methods\n--description--\nThe Web Storage API provides a mechanism for browsers to store key-value pairs right within the browser, allowing developers to store information that can be used across different page reloads and sessions The two main components in the Web Storage API are localStorage and sessionStorage localStorage is the part of the Web Storage API that allows data to persist even after the browser window is closed or the page is refreshed This data remains available until it is explicitly removed by the application or the user sessionStorage is another part of the Web Storage API that stores data for the duration of the page session, meaning the data is available as long as the browser tab or window is open However, unlike localStorage, the data in sessionStorage is cleared when the tab or window is closed You will learn more about sessionStorage in the next lecture Common use cases for localStorage include storing user settings, such as themes or language preferences, remembering form data across browser sessions, and caching small pieces of information to improve the performance of web apps Caching refers to storing frequently accessed data in a temporary storage location, known as a cache, so that subsequent requests for that data can be served more quickly without having to recompute or fetch it from a slower data source, such as a database or external server Some common localStorage methods include the setItem, getItem, removeItem and clear methods Here is an example of using the setItem() method which stores a key-value pair in localStorage js\nlocalStorage setItem('username', 'JaneDoe');\nThen if we want retrieve that value of a given key from localStorage, we can use the getItem() method js\nlet username = localStorage getItem('username');\nconsole log(username); // JaneDoe\nTo remove an item from localStorage using its key, you can use the removeItem() method js\nlocalStorage removeItem('username');\nTo clear all data in localStorage, you can use the clear() method js\nlocalStorage clear();\nNow, let’s take a look at an example where we use localStorage to store the preferred theme of a user ```js\n// Store the user's theme preference\nlocalStorage setItem('theme', 'dark');\n// Retrieve the stored theme preference\nconst userTheme = localStorage getItem('theme');\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5086,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff4a9319c8486750886c.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "c926ecbb8d2fdef48475b6b03b0042a9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff4a9319c8486750886c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "JaneDoe To remove an item from localStorage using its key, you can use the removeItem() method js localStorage removeItem('username'); To clear all data in localStorage, you can use the clear() method js localStorage clear(); Now, let’s take a look at an example where we use localStorage to store the preferred theme of a user ```js // Store the user's theme preference localStorage setItem('theme', 'dark'); // Retrieve the stored theme preference const userTheme = localStorage getItem('theme'); consolelog(userTheme); // 'dark'\n// Remove the theme preference\nlocalStorage removeItem('theme');\n// Clear all localStorage data\nlocalStorage clear();\n```\nIn this example:\nWe first store a theme choice (dark) for the user We then retrieve that theme and output it to the console Finally, we demonstrate how to remove a specific item or clear all stored data localStorage is very useful for storing small pieces of data that need to persist between sessions, but it's important to note that localStorage should not be used to store sensitive information, such as passwords, because it can pose security risks --questions--\n--text--\nWhat is the purpose of the Web Storage API --answers--\nTo send small pieces of data to the server with every HTTP request --feedback--\nThe Web Storage API helps you store data directly in the user's browser To store key-value pairs in the browser To store sensitive data in encrypted form --feedback--\nThe Web Storage API helps you store data directly in the user's browser To run JavaScript code on the server --feedback--\nThe Web Storage API helps you store data directly in the user's browser --video-solution--\n2\n--text--\nWhich method is used to save data in local storage --answers--\nlocalStorage getItem()\n--feedback--\nThe method starts with set and involves setting a key-value pair localStorage setItem()\nlocalStorage save()\n--feedback--\nThe method starts with set and involves setting a key-value pair localStorage store()\n--feedback--\nThe method starts with set and involves setting a key-value pair --video-solution--\n2\n--text--\nHow does localStorage differ from sessionStorage --answers--\nlocalStorage data is cleared when the tab is closed, sessionStorage is permanent --feedback--\nThink about what happens to localStorage when you close and reopen the browser localStorage persists across browser sessions, while sessionStorage is cleared when the browser or tab is closed localStorage sends data to the server, sessionStorage stores data locally --feedback--\nThink about what happens to localStorage when you close and reopen the browser",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5086,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff4a9319c8486750886c.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "615f401963db5937ebaeafa37bf0ca52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff4a9319c8486750886c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--video-solution-- 2 --text-- How does localStorage differ from sessionStorage --answers-- localStorage data is cleared when the tab is closed, sessionStorage is permanent --feedback-- Think about what happens to localStorage when you close and reopen the browser localStorage persists across browser sessions, while sessionStorage is cleared when the browser or tab is closed localStorage sends data to the server, sessionStorage stores data locally --feedback-- Think about what happens to localStorage when you close and reopen the browserBoth behave the same way and there is no difference --feedback--\nThink about what happens to localStorage when you close and reopen the browser --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5086,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff4a9319c8486750886c.md",
      "source_type": "git_repo"
    },
    "token_count": 124,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c8188514632d263415c56d4bff688381",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff5814129c48b4fca88e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733ff5814129c48b4fca88e\ntitle: What Is sessionStorage, and What Are Some Common Methods challengeType: 19\ndashedName: what-is-sessionstorage-and-what-are-some-common-methods\n--description--\nIn the previous lecture, we learned about working with localStorage and were briefly introduced to sessionStorage Recall, that sessionStorage is when the data is cleared as soon as the user closes the tab or window in which the web application is running It’s ideal for situations where data only needs to persist for the length of a single session, such as maintaining form data during navigation or storing temporary state information during a checkout process Much like localStorage, sessionStorage uses key-value pairs to store and retrieve data The methods used with sessionStorage are also the same as localStorage, with the only real difference being how long the data is stored Here are a few examples of working with the different methods:\nsessionStorage setItem(): Stores a key-value pair in sessionStorage js\nsessionStorage setItem('cart', '3 items');\nsessionStorage getItem(): Retrieves the value of a given key from sessionStorage js\nlet cart = sessionStorage getItem('cart');\nconsole log(cart); // Outputs: '3 items'\nsessionStorage removeItem(): Removes a specific item from sessionStorage using its key js\nsessionStorage removeItem('cart');\nsessionStorage clear(): Clears all data stored in sessionStorage js\nsessionStorage clear();\nLet’s look at an example where we store data in sessionStorage which only lasts as long as the browser tab or window is open:\n```js\n// Store data in sessionStorage\nsessionStorage setItem('currentUser', 'JohnDoe');\n// Retrieve the stored data\nconst user = sessionStorage getItem('currentUser');\nconsole log(user); // 'JohnDoe'\n// Remove a specific key from sessionStorage\nsessionStorage removeItem('currentUser');\n// Clear all sessionStorage data\nsessionStorage clear();\n```\nIn this example, we:\nStore the current user’s name (JohnDoe) in sessionStorage Retrieve and display it Remove the item associated with the key currentUser Clear all sessionStorage data The key difference from localStorage is that as soon as the user closes the tab, all stored session data will be lost sessionStorage is particularly useful in scenarios like:\nStoring temporary data such as form entries during a multi-page form process Storing temporary selections or preferences that don’t need to persist across sessions Maintaining state on a single-page application that doesn’t need to be remembered once the tab is closed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4778,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff5814129c48b4fca88e.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b4038d4db5da324fb553a7c2c8d3f649",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff5814129c48b4fca88e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "key currentUser Clear all sessionStorage data The key difference from localStorage is that as soon as the user closes the tab, all stored session data will be lost sessionStorage is particularly useful in scenarios like: Storing temporary data such as form entries during a multi-page form process Storing temporary selections or preferences that don’t need to persist across sessions Maintaining state on a single-page application that doesn’t need to be remembered once the tab is closedsessionStorage ensures that once the user leaves the page, the session data is cleared, which is great for scenarios where you don’t want to hold onto information beyond the current session --questions--\n--text--\nWhat happens to the data stored in sessionStorage when the browser tab is closed --answers--\nThe data is permanently stored until manually removed --feedback--\nsessionStorage only persists for the length of a browser session The data persists until the computer is turned off --feedback--\nsessionStorage only persists for the length of a browser session The data is cleared when the tab or window is closed The data is synced with localStorage --feedback--\nsessionStorage only persists for the length of a browser session --video-solution--\n3\n--text--\nWhich of the following methods is used to remove a single key-value pair from sessionStorage --answers--\nsessionStorage removeItem()\nsessionStorage deleteItem()\n--feedback--\nThe method name begins with remove and affects one specific item sessionStorage clear()\n--feedback--\nThe method name begins with remove and affects one specific item sessionStorage unset()\n--feedback--\nThe method name begins with remove and affects one specific item --video-solution--\n1\n--text--\nIn which of the following scenarios would sessionStorage be more appropriate than localStorage --answers--\nStoring user settings like themes that persist across sessions --feedback--\nThink about what data only needs to persist for a single session Storing form data that is only needed during the current browser session Storing sensitive user information like passwords --feedback--\nThink about what data only needs to persist for a single session Storing data that needs to be shared between different browser windows --feedback--\nThink about what data only needs to persist for a single session --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4778,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff5814129c48b4fca88e.md",
      "source_type": "git_repo"
    },
    "token_count": 425,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c23977317f8374b11cf4000d8227fe4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff9d2fb9c449af68ad99.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733ff9d2fb9c449af68ad99\ntitle: What Are Some Negative Patterns Associated with Client-Side Storage challengeType: 19\ndashedName: what-are-some-negative-patterns-associated-with-client-side-storage\n--description--\nClient-side storage allows websites to store data on a user's device However, like many technologies, it can be misused Let’s explore some negative patterns associated with client-side storage, focusing on cookies and their misuse for tracking and fingerprinting Let's start with cookies In an earlier lecture, you learned that cookies are data stored on a user's device when they visit a web app A common misuse of cookies is excessive tracking Websites use cookies to track a user's interactions with a web app, creating a history of their digital activities This is done for targeted advertising but can raise significant privacy concerns For example, a shopping website might use a tracking cookie like this:\njs\ndocument cookie = \"userID=123; path=/; expires=Thu, 18 Dec 2024 6:00:00 UTC\";\nThis code sets a cookie named userID with a value of 123 The cookie will be sent with every request to the website, allowing it to track the user's actions While this might seem harmless, imagine hundreds of websites sharing this information – it could create a very detailed picture of your online life and choices Another concerning practice is browser fingerprinting This technique uses client-side information to create a unique \"fingerprint\" of a user's browser Websites have the ability to gather information about your browser version, installed plugins, screen resolution, and other data to uniquely identify you Here's a simple example of how a website can create a fingerprint of you:\njs\nlet fingerprintExample = navigator userAgent + screen width + screen height;\nconsole log(fingerprintExample);\nThis code combines your browser's user agent with your screen dimensions While this is a basic example, real fingerprinting methods are much more complex and can be highly accurate in identifying users localStorage can also be misused as some websites use it to store sensitive information insecurely For instance:\njs\nlocalStorage setItem('userPassword', 'someonesPasswordHere');\nThis code stores a user's password in localStorage This is a serious security risk as the data in localStorage is not encrypted and can be accessed easily In conclusion, while client-side storage offers many benefits, it's crucial to use it responsibly",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff9d2fb9c449af68ad99.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d762d62e8ad66e20cae34c3e4e8a9eac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff9d2fb9c449af68ad99.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "fingerprinting methods are much more complex and can be highly accurate in identifying users localStorage can also be misused as some websites use it to store sensitive information insecurely For instance: js localStorage setItem('userPassword', 'someonesPasswordHere'); This code stores a user's password in localStorage This is a serious security risk as the data in localStorage is not encrypted and can be accessed easily In conclusion, while client-side storage offers many benefits, it's crucial to use it responsiblyAs you continue your web development journey, always consider the privacy and security of your users' data on the client side --questions--\n--text--\nWhat is a potential negative use of cookies in web development --answers--\nRemembering user login information --feedback--\nThink about which option might raise privacy concerns Tracking user behavior across multiple websites Storing user preferences --feedback--\nThink about which option might raise privacy concerns Improving website load times --feedback--\nThink about which option might raise privacy concerns --video-solution--\n2\n--text--\nWhat is browser fingerprinting --answers--\nA technique to improve browser security --feedback--\nConsider which option relates to identifying individual users A method to create unique browser themes --feedback--\nConsider which option relates to identifying individual users A way to identify users based on browser and system characteristics A process to optimize website performance for different browsers --feedback--\nConsider which option relates to identifying individual users --video-solution--\n3\n--text--\nWhy is storing sensitive information like passwords in localStorage a security risk --answers--\nlocalStorage has limited capacity --feedback--\nThink about the security features (or lack thereof) in localStorage Data in localStorage is not encrypted localStorage is slower than cookies --feedback--\nThink about the security features (or lack thereof) in localStorage localStorage doesn't work in all browsers --feedback--\nThink about the security features (or lack thereof) in localStorage --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4352,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff9d2fb9c449af68ad99.md",
      "source_type": "git_repo"
    },
    "token_count": 374,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6dc404e98afcb728366bcc8c30f8d1ed",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ffacd0ad1e49ec2af051.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733ffacd0ad1e49ec2af051\ntitle: How Can You Use Cookies to Store Arbitrary Data, Normally Controlled by HTTP Headers challengeType: 19\ndashedName: how-can-you-use-cookies-to-store-arbitrary-data-normally-controlled-by-http-headers\n--description--\nAs you learned in previous lectures, cookies are simple data that websites can store on a user's device However, you can actually store more complex data structures in cookies One common method is to use JSON to store objects or arrays Here's an example:\n```js\nconst userData = {\nname: \"John Doe\",\nage: 30,\nrole: \"admin\"\n};\ndocument cookie = \"userInfo=\" + JSON stringify(userData) + \"; path=/\";\n```\nIn this example, we're creating an object with user data, converting it to a JSON string, and then storing it in a cookie When we want to retrieve this data, we can parse the JSON string into an object using JSON parse() Now, you might be wondering about the \"HTTP headers\" aspect of our topic Typically, cookies are set by the server using HTTP headers For example, a server might send a header like this:\nhttp\nSet-Cookie: username=John Doe; expires=Thu, 31 Dec 2024 6:00:00 IST; path=/\nThis header tells the browser to set a cookie We can also set cookies directly in the browser using JavaScript This is useful for storing data that doesn't need to be sent to the server immediately Please note that cookies have a size limit of around 4KB, and storing too much data in them may slow down your web app Storing large amounts of data in cookies can increase network traffic as cookies are sent with every HTTP request --questions--\n--text--\nWhat is the purpose of the 'expires' parameter when setting a cookie --answers--\nIt specifies which pages can access the cookie --feedback--\nThink about what happens to a cookie after a certain time has passed It sets the maximum size of the cookie --feedback--\nThink about what happens to a cookie after a certain time has passed It tells the browser when to delete the cookie It encrypts the cookie data --feedback--\nThink about what happens to a cookie after a certain time has passed --video-solution--\n3\n--text--\nHow can you store a complex data structure like an object in a cookie --answers--\nObjects can be directly stored in cookies",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3390,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ffacd0ad1e49ec2af051.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "bad7d865c58aa43cb7ebe8b5852ea987",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ffacd0ad1e49ec2af051.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "passed It sets the maximum size of the cookie --feedback-- Think about what happens to a cookie after a certain time has passed It tells the browser when to delete the cookie It encrypts the cookie data --feedback-- Think about what happens to a cookie after a certain time has passed --video-solution-- 3 --text-- How can you store a complex data structure like an object in a cookie --answers-- Objects can be directly stored in cookies--feedback--\nConsider what format might be used to represent an object as a string By converting the object to a JSON string By using multiple cookies for each object property --feedback--\nConsider what format might be used to represent an object as a string Complex data structures cannot be stored in cookies --feedback--\nConsider what format might be used to represent an object as a string --video-solution--\n2\n--text--\nWhat is a potential drawback of storing large amounts of data in cookies --answers--\nIt can slow down your web application Cookies have unlimited storage capacity --feedback--\nThink about what happens when cookies are sent with every HTTP request It makes the website more secure --feedback--\nThink about what happens when cookies are sent with every HTTP request It improves server performance --feedback--\nThink about what happens when cookies are sent with every HTTP request --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3390,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ffacd0ad1e49ec2af051.md",
      "source_type": "git_repo"
    },
    "token_count": 261,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "cf709f95e0b3c3d17454766d6cb1f6cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff8d06376149474a0c0d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733ff8d06376149474a0c0d\ntitle: What Is the Cache API, and How Does It Work challengeType: 19\ndashedName: what-is-the-cache-api-and-how-does-that-work\n--description--\nThe Cache API is used to store network requests and responses, making web applications work more efficiently and even function offline It is part of the broader Service Worker API and is critical for creating Progressive Web Apps (PWAs) that can work under unreliable or slow network conditions Before we continue with the Cache API, we first need to understand how service workers, PWAs, and network requests work on a basic level A network request is a request made by a web browser or application to a server to retrieve data or resources over the internet For example, when you visit a website, your browser sends a network request to the web server to get the files (such as HTML, images, or videos) needed to display the page A service worker is a special type of JavaScript file that runs in the background of a web application, separate from the main browser thread It acts as a middleman between the web page and the network, allowing developers to intercept network requests, cache resources, and handle things like push notifications or background sync A PWA, or Progressive Web App, is a type of web application that uses modern web technologies to provide a native app-like experience on the web PWAs are designed to work reliably on any device, regardless of network conditions, and can be accessed through a browser or installed on a user's device like a traditional app Now that we have a better understanding of service workers, PWAs, and network requests, we can dive deeper into the Cache API The Cache API is a storage mechanism that stores Request and Response objects When a request is made to a server, the application can store the response and later retrieve it from the cache instead of making a new network request This reduces load times, saves bandwidth, and improves the overall user experience The browser provides a storage area known as CacheStorage, where developers can save key-value pairs of network requests and their corresponding responses With the Cache-Control header, developers can specify how long a cached resource should remain stored, as well as whether it should be revalidated or served directly from the cache By using the Cache API, developers can build offline-first web applications, allowing a PWA, for example, to serve cached assets when the user is disconnected from the network",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5056,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff8d06376149474a0c0d.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "290288fe1bd92bf93293920c499b37ce",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff8d06376149474a0c0d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a storage area known as CacheStorage, where developers can save key-value pairs of network requests and their corresponding responses With the Cache-Control header, developers can specify how long a cached resource should remain stored, as well as whether it should be revalidated or served directly from the cache By using the Cache API, developers can build offline-first web applications, allowing a PWA, for example, to serve cached assets when the user is disconnected from the network--questions--\n--text--\nWhat is the main purpose of the Cache API in web applications --answers--\nTo handle user authentication and sessions --feedback--\nThink about what the Cache API does in terms of web performance, offline functionality, and caching network requests To store and manage network requests and responses for offline access To enable push notifications and background sync --feedback--\nThink about what the Cache API does in terms of web performance, offline functionality, and caching network requests To create and manage service workers --feedback--\nThink about what the Cache API does in terms of web performance, offline functionality, and caching network requests --video-solution--\n2\n--text--\nWhich of the following best describes the role of a service worker in a web application --answers--\nA background script that handles UI rendering --feedback--\nConsider what service workers do to intercept network requests and enable offline behavior in web apps A tool for managing user authentication and sessions --feedback--\nConsider what service workers do to intercept network requests and enable offline behavior in web apps A special JavaScript file that runs in the background, managing network requests and caching resources A library for enabling offline data synchronization with a server --feedback--\nConsider what service workers do to intercept network requests and enable offline behavior in web apps --video-solution--\n3\n--text--\nWhat is a network request in the context of a web application --answers--\nA request made by a web browser to retrieve files from a local storage database --feedback--\nThink about what happens when a user visits a website and how resources like images, scripts, and data are loaded into the browser A request made by a web browser or application to a server to retrieve data or resources over the internet A request made by a web server to push updates to a user's device --feedback--\nThink about what happens when a user visits a website and how resources like images, scripts, and data are loaded into the browser A request made by the server to verify the authentication of a user",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5056,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff8d06376149474a0c0d.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "acfda7c68f71ba06ce50640a3a6cd573",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff8d06376149474a0c0d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "are loaded into the browser A request made by a web browser or application to a server to retrieve data or resources over the internet A request made by a web server to push updates to a user's device --feedback-- Think about what happens when a user visits a website and how resources like images, scripts, and data are loaded into the browser A request made by the server to verify the authentication of a user--feedback--\nThink about what happens when a user visits a website and how resources like images, scripts, and data are loaded into the browser --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5056,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff8d06376149474a0c0d.md",
      "source_type": "git_repo"
    },
    "token_count": 115,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8d4b227c9da8b8a1c3f6ca0a3063afb3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff6f02dde548ebe4a6d5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733ff6f02dde548ebe4a6d5\ntitle: What Are Cookies, and How Do They Work challengeType: 19\ndashedName: what-are-cookies-and-how-do-they-work\n--description--\nCookies, also known as web cookies or browser cookies, are small pieces of data that a server sends to a user's web browser These cookies are stored on the user's device and sent back to the server with subsequent requests Cookies are essential in helping web applications maintain state and remember user information, which is especially important since HTTP is a stateless protocol Cookies can store a variety of information such as user preferences, session data, or tracking information Cookies are always stored as name-value pairs This means each cookie has a name (key) and an associated value For example, a cookie might store a user's session ID like this: sessionId=abc123 The key is sessionId, and the value is abc123 Each time the browser communicates with the server, the browser sends these cookies in the form of name-value pairs When a user visits a website, the server can send one or more cookies to the user's browser by including a Set-Cookie header in the HTTP response A header is a key-value pair that provides additional information about the HTTP request or response You will learn more about HTTP requests and responses in future lectures Once the cookies are set, the browser stores them and automatically includes them in the Cookie header with every subsequent request to the same domain This allows the server to access the stored cookies and use them for things like maintaining user sessions or tracking preferences Here’s an example of how a cookie is set in an HTTP response:\nhttp\nSet-Cookie: sessionId=abc123; Expires=Wed, 21 Oct 2021 07:28:00 GMT; Secure; HttpOnly\nThe browser will store the cookie, and in future requests to the same server, it will include the cookie in the Cookie header:\nhttp\nCookie: sessionId=abc123\nThe server can then read the cookie and use the stored session ID to retrieve information about the user, such as whether they are logged in Here is a breakdown of the different types of cookies Session Cookies only last for the duration of the user's session on the website Once the user closes the browser or tab, the session cookie is deleted These cookies are typically used for tasks like keeping a user logged in during their visit",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5788,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff6f02dde548ebe4a6d5.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "621aa3fe92a331fdb3993d3c0c6186a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff6f02dde548ebe4a6d5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "then read the cookie and use the stored session ID to retrieve information about the user, such as whether they are logged in Here is a breakdown of the different types of cookies Session Cookies only last for the duration of the user's session on the website Once the user closes the browser or tab, the session cookie is deleted These cookies are typically used for tasks like keeping a user logged in during their visitPersistent Cookies have an expiration date and remain stored on the user's device until that date is reached Persistent cookies are often used for remembering user preferences or login details across sessions Secure Cookies are only sent over HTTPS, ensuring that they cannot be intercepted by an attacker in transit HttpOnly Cookies cannot be accessed or modified by JavaScript running in the browser, making them more secure against cross-site scripting (XSS) attacks Cross-site scripting (XSS) attacks happen when an attacker injects malicious scripts into a web page that is viewed by other users These scripts can then execute in the context of the victim's browser, potentially stealing cookies, session data, or performing other malicious actions without the user's knowledge or consent By marking cookies as HttpOnly, they are protected from being accessed via JavaScript, reducing the risk of such attacks You can create cookies via server responses using the Set-Cookie header or through JavaScript using document cookie Here's an example of setting a cookie using JavaScript:\njs\ndocument cookie = \"username=JohnDoe; expires=Fri, 31 Dec 2021 23:59:59 GMT; path=/\";\nThis command sets a cookie named username with the value \"JohnDoe\" that will expire at the end of 2021 You can update an existing cookie by simply setting it again with a new value To delete a cookie, you set its expiration date in the past:\njs\ndocument cookie = \"username=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/\";\nThis will remove the username cookie from the browser --questions--\n--text--\nWhat is the primary purpose of cookies in web applications --answers--\nTo store large amounts of data permanently --feedback--\nThink about how cookies help web applications remember user-specific data between requests To store data that helps maintain state and remembers user information across requests To replace server-side databases --feedback--\nThink about how cookies help web applications remember user-specific data between requests To enhance JavaScript performance in the browser --feedback--\nThink about how cookies help web applications remember user-specific data between requests",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5788,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff6f02dde548ebe4a6d5.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "482a20a187ed62526c4f1be5d1a234c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff6f02dde548ebe4a6d5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of cookies in web applications --answers-- To store large amounts of data permanently --feedback-- Think about how cookies help web applications remember user-specific data between requests To store data that helps maintain state and remembers user information across requests To replace server-side databases --feedback-- Think about how cookies help web applications remember user-specific data between requests To enhance JavaScript performance in the browser --feedback-- Think about how cookies help web applications remember user-specific data between requests--video-solution--\n2\n--text--\nWhich of the following attributes ensures that a cookie is only sent over HTTPS --answers--\nSecure\nHttpOnly\n--feedback--\nThis attribute protects cookies from being sent over unsecured HTTP connections SameSite\n--feedback--\nThis attribute protects cookies from being sent over unsecured HTTP connections Expires\n--feedback--\nThis attribute protects cookies from being sent over unsecured HTTP connections --video-solution--\n1\n--text--\nHow can you delete a cookie using JavaScript --answers--\nBy setting its value to null --feedback--\nThink about how setting an expiration date affects the lifespan of a cookie By setting its expiration date to a past date By using the document cookie remove() method --feedback--\nThink about how setting an expiration date affects the lifespan of a cookie By reloading the page --feedback--\nThink about how setting an expiration date affects the lifespan of a cookie --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5788,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ff6f02dde548ebe4a6d5.md",
      "source_type": "git_repo"
    },
    "token_count": 272,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a2fe108e547bdfbced25d922d9b5743c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ffc7353af34a61ed683a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733ffc7353af34a61ed683a\ntitle: What Are Cache and Service Workers, and How Do They Work challengeType: 19\ndashedName: what-are-cache-service-workers-and-how-do-they-work\n--description--\nCaching is the process of storing copies of files in a temporary storage location so they can be accessed more quickly When you visit a website, your browser can save certain files (such as images, CSS, and JavaScript) locally This means that the next time you visit the same site, it can load these files from your device instead of fetching them again from a server, making the site load faster A service worker is a script that runs in the background, separate from your web page It can intercept network requests, access the cache, and enable the web app to work offline It is a key component of Progressive Web Apps So, how do cache and service workers work together in Progressive Web Apps PWAs are web apps that can offer an app-like experience They can work offline, send push notifications, and even be installed on the home screen of a mobile device or computer When a user first visits a PWA, the service worker can cache important files Users can continue to use the app offline, and when they come back online, any upcoming changes can be synced with the server The combination of caching and service workers enables web apps to provide a fast and reliable experience even in poor network conditions --questions--\n--text--\nWhat is the primary purpose of a service worker in a Progressive Web App --answers--\nTo style web pages --feedback--\nThink about what allows PWAs to work offline To handle server-side logic --feedback--\nThink about what allows PWAs to work offline To intercept network requests and manage caching To create user interfaces --feedback--\nThink about what allows PWAs to work offline --video-solution--\n3\n--text--\nIn the context of PWAs, what does caching primarily help with --answers--\nIncreasing server capacity --feedback--\nConsider how caching affects the loading of web resources Improving application security --feedback--\nConsider how caching affects the loading of web resources Enhancing offline functionality and speed Creating backups of user data --feedback--\nConsider how caching affects the loading of web resources --video-solution--\n3\n--text--\nWhat is a key characteristic of Progressive Web Apps (PWAs) --answers--\nThey can only be accessed through app stores --feedback--\nThink about how PWAs blend features of web and native apps",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2992,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ffc7353af34a61ed683a.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fccd428767e81c9b415a7f95b4e8816f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ffc7353af34a61ed683a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Consider how caching affects the loading of web resources Improving application security --feedback-- Consider how caching affects the loading of web resources Enhancing offline functionality and speed Creating backups of user data --feedback-- Consider how caching affects the loading of web resources --video-solution-- 3 --text-- What is a key characteristic of Progressive Web Apps (PWAs) --answers-- They can only be accessed through app stores --feedback-- Think about how PWAs blend features of web and native appsThey require constant internet connection --feedback--\nThink about how PWAs blend features of web and native apps They can work offline and be installed on home screens They are only available on mobile devices --feedback--\nThink about how PWAs blend features of web and native apps --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2992,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ffc7353af34a61ed683a.md",
      "source_type": "git_repo"
    },
    "token_count": 155,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "472af0e8846c8b33ca547910822d02d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d45583fd75a504136fbbb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672d45583fd75a504136fbbb\ntitle: How to Install Visual Studio Code onto Your Computer\nchallengeType: 19\ndashedName: how-to-install-visual-studio-code-onto-your-computer\n--description--\nTo install VS Code, you'll want to visit their website to get the appropriate installer for your operating system Make sure you visit the VS Code website, and not the Visual Studio website For Windows, you can download an EXE installer Once you've downloaded it, run the file and the setup wizard will take you through the installation process For Mac, you can download a zip archive which contains a app that you can run You can also install VS Code via homebrew Open up the Terminal app on your Mac and run the following command:\nsh\nbrew install --cask visual-studio-code\nOn Linux, you can download a deb or rpm file directly Once you have it installed, you can use the appropriate executable, or CLI command (typically code), to launch the application And now you're ready to code --questions--\n--text--\nWhat's an important distinction to make when downloading Visual Studio Code --answers--\nEnsure you're downloading from the official Microsoft website --feedback--\nThe lecture mentions a potential source of confusion when searching for VS Code Make sure you're on the VS Code website, not the Visual Studio website Verify that you're downloading the latest version --feedback--\nThe lecture mentions a potential source of confusion when searching for VS Code Check that your operating system is compatible --feedback--\nThe lecture mentions a potential source of confusion when searching for VS Code --video-solution--\n2\n--text--\nWhich of the following is NOT mentioned as a method to install VS Code on macOS --answers--\nDownloading a zip archive --feedback--\nThe lecture describes several ways to install VS Code on Mac, but one common method for software installation isn't mentioned Using the Mac App Store Using Homebrew --feedback--\nThe lecture describes several ways to install VS Code on Mac, but one common method for software installation isn't mentioned Running a app file --feedback--\nThe lecture describes several ways to install VS Code on Mac, but one common method for software installation isn't mentioned --video-solution--\n2\n--text--\nWhat command would you use to install VS Code using Homebrew --answers--\nsudo brew -i code\n--feedback--\nThe lecture provides a specific command for Homebrew",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d45583fd75a504136fbbb.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6ebffece3e0c68eff52b93046c6915b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d45583fd75a504136fbbb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Using Homebrew --feedback-- The lecture describes several ways to install VS Code on Mac, but one common method for software installation isn't mentioned Running a app file --feedback-- The lecture describes several ways to install VS Code on Mac, but one common method for software installation isn't mentioned --video-solution-- 2 --text-- What command would you use to install VS Code using Homebrew --answers-- sudo brew -i code --feedback-- The lecture provides a specific command for Homebrewsudo yum install code\n--feedback--\nThe lecture provides a specific command for Homebrew brew install --cask visual-studio-code\nhomebrew install vscode\n--feedback--\nThe lecture provides a specific command for Homebrew --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 2874,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d45583fd75a504136fbbb.md",
      "source_type": "git_repo"
    },
    "token_count": 149,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "13332fe80f7ce62a743524b8dc162ce6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ffb59c62ee4a23522efe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733ffb59c62ee4a23522efe\ntitle: What Is IndexedDB, and How Does It Work challengeType: 19\ndashedName: what-is-indexeddb-and-how-does-it-work\n--description--\nIndexedDB is a tool for storing structured data in the browser This is built into modern web browsers, allowing web apps to store and fetch JavaScript objects efficiently Unlike other storage mechanisms like localStorage, which is limited to storing strings, IndexedDB can store JavaScript objects, files, and pretty much any other type of data This makes it easy for web applications that need to work with large and complex data structures Now, let's look at how IndexedDB works The first step is to open a database Here's an example:\n```js\nlet request = indexedDB open(\"Sample DB\", 1);\nrequest onerror = function(event) {\nconsole log(\"Error opening database\");\n};\nrequest onsuccess = function(event) {\nlet db = event target result;\nconsole log(\"Database opened successfully\");\n};\n```\nIn this code, we're opening a database named \"Sample DB\" with version 1 We provide two callback functions: one for handling errors, and another for when the database is successfully opened The db object we get in the success callback is what we'll use to interact with the database If you check the browser dev tools application interface, you will see your Sample DB in the IndexedDb section has been opened Once you have your database open, you can start working with object stores Object stores in IndexedDB are similar to tables in traditional databases They hold the actual data you want to store Here's how to create an object store:\njs\nrequest onupgradeneeded = function(event) {\nlet db = event target result;\nlet objectStore = db createObjectStore(\"customers\", { keyPath: \"id\" });\n};\nThis code creates an object store named \"customers\" with \"id\" as its key path The key path is like a primary key in a traditional database - it's used to uniquely identify each record To add data to our object store, we'd do something like this The db in this example represents the IndexedDB database instance ```js\nlet transaction = db transaction([\"customers\"], \"readwrite\");\nlet objectStore = transaction objectStore(\"customers\");\nlet request = objectStore add({ id: 1, name: \"John Doe\", email: \"john@example com\" });\nrequest onerror = function(event) {\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5635,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ffb59c62ee4a23522efe.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4b8a8b888b74bbaf4c20922b5dfa9899",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ffb59c62ee4a23522efe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "key path The key path is like a primary key in a traditional database - it's used to uniquely identify each record To add data to our object store, we'd do something like this The db in this example represents the IndexedDB database instance ```js let transaction = db transaction([\"customers\"], \"readwrite\"); let objectStore = transaction objectStore(\"customers\"); let request = objectStore add({ id: 1, name: \"John Doe\", email: \"john@example com\" }); request onerror = function(event) { consolelog(\"Error adding data\");\n};\nrequest onsuccess = function(event) {\nconsole log(\"Data added successfully\");\n};\n```\nThis code adds a new customer to our \"customers\" object store We start a transaction (which is how we group database operations), get a reference to our object store, and then add our data Retrieving data works in a similar way We start a transaction, get our object store, and then use methods like get to retrieve data:\n```js\nlet transaction = db transaction([\"customers\"]);\nlet objectStore = transaction objectStore(\"customers\");\nlet request = objectStore get(1);\nrequest onerror = function(event) {\nconsole log(\"Error retrieving data\");\n};\nrequest onsuccess = function(event) {\nconsole log(\"Customer:\", request result);\n};\n```\nThis code retrieves the customer with id of 1 from our \"customers\" object store One of the key features of IndexedDB is that it's asynchronous This means that when you interact with IndexedDB, operations don't block the main thread of the web application This ensures that your web application remains responsive even when dealing with large amounts of data While IndexedDB provides powerful capabilities, it has a steeper learning curve compared to other simpler storage API options which can be challenging for beginners However, for applications that need to handle large amounts of structured data on the client-side, IndexedDB offers unparalleled capabilities --questions--\n--text--\nWhat is a key characteristic of IndexedDB operations --answers--\nThey are always synchronous --feedback--\nConsider how IndexedDB operations interact with the main thread of a web application They are always asynchronous They only work with string data --feedback--\nConsider how IndexedDB operations interact with the main thread of a web application They require a constant internet connection --feedback--\nConsider how IndexedDB operations interact with the main thread of a web application --video-solution--\n2\n--text--\nWhat is the primary advantage of using IndexedDB over localStorage --answers--\nIndexedDB is easier to use",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5635,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ffb59c62ee4a23522efe.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e5a08bd326e5cb608802f93941f7833a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ffb59c62ee4a23522efe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Consider how IndexedDB operations interact with the main thread of a web application They are always asynchronous They only work with string data --feedback-- Consider how IndexedDB operations interact with the main thread of a web application They require a constant internet connection --feedback-- Consider how IndexedDB operations interact with the main thread of a web application --video-solution-- 2 --text-- What is the primary advantage of using IndexedDB over localStorage --answers-- IndexedDB is easier to use--feedback--\nConsider the types of data each storage method can handle and how this affects their use cases IndexedDB supports storing complex JavaScript objects directly IndexedDB is synchronous --feedback--\nConsider the types of data each storage method can handle and how this affects their use cases IndexedDB is supported in older browsers --feedback--\nConsider the types of data each storage method can handle and how this affects their use cases --video-solution--\n2\n--text--\nIn IndexedDB, what is an object store most similar to in traditional relational databases --answers--\nA database --feedback--\nConsider how data is organized in IndexedDB compared to a traditional SQL database A table A row --feedback--\nConsider how data is organized in IndexedDB compared to a traditional SQL database A column --feedback--\nConsider how data is organized in IndexedDB compared to a traditional SQL database --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5635,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-client-side-storage-and-crud-operations\\6733ffb59c62ee4a23522efe.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "99466034d8556abd78997af5c538c124",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d26269456511aa3db614d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672d26269456511aa3db614d\ntitle: What Is a Code Editor and IDE challengeType: 19\ndashedName: what-is-a-code-editor-and-ide\n--description--\nYou might think these are the same thing, but not quite A code editor is any application that allows you to edit code files An IDE, or Integrated Development Environment, is a full application that allows you to compile, run, and debug your code while you edit it Perhaps some examples might be helpful First, let's consider a few popular IDEs Visual Studio is an integrated development environment by Microsoft that provides a comprehensive suite of tools for building, debugging, and deploying applications across various platforms Another IDE is XCode Xcode is an integrated development environment by Apple designed for creating, coding, and debugging applications for macOS, iOS, watchOS, and tvOS And another IDE would be Android Studio Android Studio is an integrated development environment by Google specifically designed for building, debugging, and testing Android applications Those are just a few examples of IDEs Now, let's take a look at a few popular code editors Visual Studio Code is a lightweight, open-source code editor by Microsoft that supports a wide range of programming languages and provides features like debugging, syntax highlighting, and version control through extensions Another popular editor would be Sublime Text Sublime Text is a fast, versatile text editor known for its sleek interface, powerful features, and support for a wide range of programming languages through customizable syntax highlighting and plugins And another one is Notepad++ This is a free, open-source, text and source code editor for Windows that offers syntax highlighting, code folding, and a range of plugins to enhance productivity and customization You may have noticed how the code editors focus primarily on the text contents of the file, where the IDEs expose various tools to manage your code These examples are all local programs you can run on your computer, but there are also cloud-based editors that you can use A cloud-based editor is an online tool that allows users to write, edit, and manage code or text directly through a web browser without needing to install software locally Let's take a look at a few cloud-based editors Replit is an online platform that provides a collaborative environment for coding, allowing users to write, run, and share code in various programming languages directly from a web browser Another popular cloud-based editor is GitHub Codespaces",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5400,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d26269456511aa3db614d.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9baf04fab7430e4dd2896b58966086b5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d26269456511aa3db614d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "can use A cloud-based editor is an online tool that allows users to write, edit, and manage code or text directly through a web browser without needing to install software locally Let's take a look at a few cloud-based editors Replit is an online platform that provides a collaborative environment for coding, allowing users to write, run, and share code in various programming languages directly from a web browser Another popular cloud-based editor is GitHub CodespacesThis is a cloud-based development environment that provides instant access to a fully-configured code editor and development tools directly from GitHub, enabling seamless coding and collaboration And another one is Gitpod Gitpod is a cloud-based development environment that integrates with GitHub and GitLab, offering instant, customizable workspaces for coding, building, and debugging directly from your browser And there are many more options Some options, such as Visual Studio Code, are highly extensible and can work with multiple different project types and languages Other options might be specifically tailored to a small subset of languages or project types The application you use might be different for specific projects You should explore the options to see what will work best for your needs --questions--\n--text--\nWhat is the main difference between a code editor and an IDE --answers--\nCode editors are free, while IDEs are paid applications --feedback--\nThe lecture defines IDEs as having additional functionality beyond just editing code IDEs allow compilation, running, and debugging of code in addition to editing Code editors can only be used for web development --feedback--\nThe lecture defines IDEs as having additional functionality beyond just editing code IDEs are cloud-based, while code editors are local applications --feedback--\nThe lecture defines IDEs as having additional functionality beyond just editing code --video-solution--\n2\n--text--\nWhich of the following is NOT mentioned as an example of a cloud-based code editor --answers--\nReplit\n--feedback--\nThe lecture lists several cloud-based options, but one popular editor is primarily a local application GitHub Codespaces\n--feedback--\nThe lecture lists several cloud-based options, but one popular editor is primarily a local application Gitpod\n--feedback--\nThe lecture lists several cloud-based options, but one popular editor is primarily a local application Visual Studio Code\n--video-solution--\n4\n--text--\nAccording to the lecture, why might someone choose different coding applications for different projects --answers--\nBecause some applications are more expensive than others --feedback--\nThe lecture suggests exploring options based on specific needs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5400,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d26269456511aa3db614d.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b832ab1167d1f5e394ea70fa31bd394d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d26269456511aa3db614d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "local application GitHub Codespaces --feedback-- The lecture lists several cloud-based options, but one popular editor is primarily a local application Gitpod --feedback-- The lecture lists several cloud-based options, but one popular editor is primarily a local application Visual Studio Code --video-solution-- 4 --text-- According to the lecture, why might someone choose different coding applications for different projects --answers-- Because some applications are more expensive than others --feedback-- The lecture suggests exploring options based on specific needsBecause certain options might be tailored to specific languages or project types Because cloud-based options are always better than local applications --feedback--\nThe lecture suggests exploring options based on specific needs Because IDEs are always preferable to code editors --feedback--\nThe lecture suggests exploring options based on specific needs --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5400,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d26269456511aa3db614d.md",
      "source_type": "git_repo"
    },
    "token_count": 159,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "93346ce41ee180589c08f02eabf225cc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d45651d83b450801efb3a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672d45651d83b450801efb3a\ntitle: How to Create a Project and Run Your Code Locally in VS Code\nchallengeType: 19\ndashedName: how-to-create-a-project-and-run-your-code-locally-in-vs-code\n--description--\nTo get started, you should know that VS Code considers projects to be \"workspaces\" The workspace is whichever directory you opened in VS Code To begin, you will need to use a command line interface to create a new directory for your new project A directory is another name for the folder Command-line interfaces, or CLI for short, allow you to interact with your operating system through text-based commands You will learn more about these tools in future lectures If you are on Windows, you can use the Command Prompt or PowerShell If you are on a Mac, you can open up your Terminal app Once the command line is open, navigate to the home directory by typing in the cd ~ command and hitting enter on your keyboard Then type in the mkdir my-project command and hit enter mkdir, or \"make directory\" is the command used to create a new directory You should then open your new directory with VS Code There are also some other graphical ways to create a new directory Depending on your operating system, you might have a context menu (or right-click option) to open VS Code directly from your file explorer You could also choose to double-click on the VS Code application If you feel comfortable with the command line you can run the command code /path/to/folder Once it's open, you should see a new blank workspace To create a new file, click on the File menu at the top-left corner and select New File Then name your file index html and click on Save Now you should see your new file in the explorer tab Try adding some HTML to your index html file Now you might be tempted to open the HTML file in your browser directly While that can work, it can also lead to all sorts of unexpected bugs, such as CSS not loading properly Instead, you should put your HTML file behind a proper web server That can sound like an intimidating task if you are new to coding, but there's actually a way to do this right from VS Code You'll need to grab the Live Server extension first, which is available for free in the marketplace Click on the extensions tab in the left hand corner and type in Live Server in the search bar",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4699,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d45651d83b450801efb3a.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fcb79fb098c4ebd4aaaa012b2b6b1a9f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d45651d83b450801efb3a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "not loading properly Instead, you should put your HTML file behind a proper web server That can sound like an intimidating task if you are new to coding, but there's actually a way to do this right from VS Code You'll need to grab the Live Server extension first, which is available for free in the marketplace Click on the extensions tab in the left hand corner and type in Live Server in the search barOnce you have this installed, you should see a Go live button in your status bar Make sure you have your HTML file open, and then click it Your new page should open automatically in a new tab in the browser If it doesn't then you can go directly to http://localhost:5500/\nCongratulations You've now set up your very own project in VS Code, and can view your changes with live server --questions--\n--text--\nWhat does Visual Studio Code consider to be a \"workspace\" --answers--\nThe entire hard drive --feedback--\nThe lecture mentions how VS Code defines a workspace in relation to directories The directory you opened VS Code from All open files in VS Code --feedback--\nThe lecture mentions how VS Code defines a workspace in relation to directories The VS Code application folder --feedback--\nThe lecture mentions how VS Code defines a workspace in relation to directories --video-solution--\n2\n--text--\nWhy does the lecture recommend using a web server instead of opening an HTML file directly in a browser --answers--\nIt's faster to load and makes it easier to spot issues in your codebase --feedback--\nThe lecture mentions a specific issue that can occur when opening HTML files directly It provides better security for large software applications --feedback--\nThe lecture mentions a specific issue that can occur when opening HTML files directly It avoids unexpected bugs, such as CSS not loading properly It allows for real-time collaboration with other developers on a team --feedback--\nThe lecture mentions a specific issue that can occur when opening HTML files directly --video-solution--\n3\n--text--\nWhat VS Code extension is recommended for easily setting up a local web server --answers--\nWeb Server --feedback--\nThe lecture specifically mentions installing an extension from the marketplace to serve your HTML file Live Server Local Host --feedback--\nThe lecture specifically mentions installing an extension from the marketplace to serve your HTML file HTML Preview --feedback--\nThe lecture specifically mentions installing an extension from the marketplace to serve your HTML file --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4699,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d45651d83b450801efb3a.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "106a038b2100dbc8c7345ee3a9baf8e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d456f4ac35950b300e93f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672d456f4ac35950b300e93f\ntitle: What Are Several Useful Keyboard Shortcuts for Maximizing Productivity in VS Code challengeType: 19\ndashedName: what-are-several-useful-keyboard-shortcuts-for-maximizing-productivity-in-vs-code\n--description--\nYou're likely already familiar with some of the basic shortcuts, which are inherited from your operating system Shortcuts like Ctrl + S to save, Ctrl + C to copy, and Ctrl + V to paste all work in VS Code But there's a few that are application specific and can still level up your productivity It's worth noting that some of these shortcuts may differ by operating system For example, Shift + Alt + F will run your configured formatter (such as prettier, for a JavaScript project) on the currently opened file Or Ctrl + Shift + F (Windows), or Cmd + Shift + F (Mac), to search the text contents of all the files in your workspace Then Ctrl + Shift + H (Windows), or Cmd + Shift + H (Mac), if you want to run a find-and-replace If you need to remove a line, Ctrl + Shift + K (Windows), or Cmd + Shift + K (Mac), will delete it Need some extra room for all your code Ctrl + B (Windows), or Cmd + B (Mac), will hide the sidebar - which has the file list and extensions menu Or maybe you just can't see your code Ctrl + plus (Windows), or Cmd + plus (Mac), will increase the scaling of the editor, and Ctrl + minus (Windows), or Cmd + minus (Mac), will decrease it Finally, if you forget any of these shortcuts, you always have Ctrl + Shift + P (Windows), or Cmd + Shift + P (Mac), which opens the command palette for you to select whatever you may need With this knowledge, and maybe a little practice, you are well on your way to becoming a VS Code power user --questions--\n--text--\nWhich Windows keyboard shortcut is used to run the configured formatter on the currently opened file in VS Code --answers--\nCtrl + F\n--feedback--\nThe lecture mentions a specific shortcut for formatting the current file Shift + Alt + F\nCtrl + Shift + F\n--feedback--\nThe lecture mentions a specific shortcut for formatting the current file Alt + F4\n--feedback--\nThe lecture mentions a specific shortcut for formatting the current file",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3392,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d456f4ac35950b300e93f.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6a60fdeeb6ad7b75eb5a90c3ee309d43",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d456f4ac35950b300e93f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "power user --questions-- --text-- Which Windows keyboard shortcut is used to run the configured formatter on the currently opened file in VS Code --answers-- Ctrl + F --feedback-- The lecture mentions a specific shortcut for formatting the current file Shift + Alt + F Ctrl + Shift + F --feedback-- The lecture mentions a specific shortcut for formatting the current file Alt + F4 --feedback-- The lecture mentions a specific shortcut for formatting the current file--video-solution--\n2\n--text--\nWhat function does the keyboard shortcut Ctrl + Shift + K (Windows/Linux) or Cmd + Shift + K (macOS) perform in VS Code --answers--\nOpens the command palette --feedback--\nThe lecture describes a shortcut for removing a line of code Increases the editor's text size --feedback--\nThe lecture describes a shortcut for removing a line of code Deletes the current line Hides the sidebar --feedback--\nThe lecture describes a shortcut for removing a line of code --video-solution--\n3\n--text--\nWhich Windows keyboard shortcut opens the command palette in VS Code --answers--\nCtrl + P\n--feedback--\nThe lecture mentions this shortcut last as a way to access any command you might forget Ctrl + Shift + P\nAlt + F4\n--feedback--\nThe lecture mentions this shortcut last as a way to access any command you might forget Ctrl + Space\n--feedback--\nThe lecture mentions this shortcut last as a way to access any command you might forget --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3392,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d456f4ac35950b300e93f.md",
      "source_type": "git_repo"
    },
    "token_count": 297,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5052c5cf63eefe7255b6aa520c8d0a7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d457bcdd8b350ec2b6254.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672d457bcdd8b350ec2b6254\ntitle: What Are Some Good VS Code Extensions You Can Use in Your Editor challengeType: 19\ndashedName: what-are-some-good-vs-code-extensions-you-can-use-in-your-editor\n--description--\nBetter Comments is an extension that offers special highlighting for specific code comments For example, it will call out \"TODO\" comments, as well as syntax to indicate questions or warnings Code Spell Checker offers indication when you have spelled something incorrectly in your code Because it is designed for code files, it will account for things like camel case Error Lens will help you catch any highlighted errors in your code Rather than having to rely on the underline that VS Code shows by default, this extension highlights the entire line and displays the error message Indent Rainbow adds color to your different levels of indentation In combination with VS Code's native bracket pair colorization, this can dramatically help identify what scope your code is in Or maybe you're looking for something a bit more practical Consider an AI assistant, like GitHub Copilot or Tabnine, to offer you inline suggestions as you are writing your code An icon pack, such as VS Code Great Icons, can help make your file tree cleaner and easier to parse at a glance And an extension like Colorize can help you understand the values in your CSS properties You'll also want language-specific extensions for your projects If you are using JavaScript, you will likely want ESLint and Prettier to lint and format your code If you are using TypeScript, you might want Pretty Typescript Errors for easier to read messages Finally, you can also have a bit of fun with your editor VS Code Pets offers configurable virtual pets to keep you company while you squash some bugs Power Mode will create flashy effects when you achieve a high enough \"combo\" by writing more code Discord Presence will let you show off what you're working on to all of your friends And there are so many more extensions out there Feel free to explore the extension marketplace and see what works best for you --questions--\n--text--\nWhat feature does the \"Better Comments\" extension provide in VS Code --answers--\nAutomatic spell-checking for comments --feedback--\nThe lecture mentions how this extension affects certain types of comments Special highlighting for specific types of code comments Conversion of comments into documentation --feedback--\nThe lecture mentions how this extension affects certain types of comments Removal of unnecessary comments --feedback--\nThe lecture mentions how this extension affects certain types of comments",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4028,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d457bcdd8b350ec2b6254.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "3b4949174e463a7c8c3799c9d6daf243",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d457bcdd8b350ec2b6254.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "what works best for you --questions-- --text-- What feature does the \"Better Comments\" extension provide in VS Code --answers-- Automatic spell-checking for comments --feedback-- The lecture mentions how this extension affects certain types of comments Special highlighting for specific types of code comments Conversion of comments into documentation --feedback-- The lecture mentions how this extension affects certain types of comments Removal of unnecessary comments --feedback-- The lecture mentions how this extension affects certain types of comments--video-solution--\n2\n--text--\nWhich VS Code extension is described as helping to catch highlighted errors in your code by displaying the error message on the entire line --answers--\nCode Spell Checker\n--feedback--\nThe lecture mentions an extension that enhances error visibility beyond VS Code's default underline Indent Rainbow\n--feedback--\nThe lecture mentions an extension that enhances error visibility beyond VS Code's default underline Error Lens\nESLint\n--feedback--\nThe lecture mentions an extension that enhances error visibility beyond VS Code's default underline --video-solution--\n3\n--text--\nWhat unique feature does the \"VS Code Pets\" extension offer --answers--\nIt helps debug pet-related code --feedback--\nThe lecture mentions this extension in the context of having fun with your editor It provides virtual pets to keep you company while coding It adds animal-themed icons to your file tree --feedback--\nThe lecture mentions this extension in the context of having fun with your editor It generates code snippets related to pets --feedback--\nThe lecture mentions this extension in the context of having fun with your editor --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4028,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-editors-and-ides\\672d457bcdd8b350ec2b6254.md",
      "source_type": "git_repo"
    },
    "token_count": 311,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "d17afa5724ad7c10b6516ef2782a98fc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6c72d3738614e1230a2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732c6c72d3738614e1230a2\ntitle: What Are Linters and Formatters, and How Can They Help You with Code Consistency challengeType: 19\ndashedName: what-are-linters-and-formatters-and-how-can-they-help-you-with-code-consistency\n--description--\nIn the world of software development maintaining clean, consistent and error-free code is important This is where linters and formatters come into play These tools are essential for developers to ensure code quality and consistency across projects and teams Let's start with linters A linter is a static code analysis tool that flags programming errors, bugs, stylistic errors, and suspicious constructs The term lint comes from a Unix utility that examines C language source code Today linters exist for most programming languages including JavaScript Linters help in several ways First they catch potential errors before runtime For example, a linter might flag the use of undefined variable or a function being called with the wrong number of arguments They also enforce coding standards and best practices This might include rules about indentation, the use of semicolons, or the maximum allowed line length Lastly, they help maintain consistency across a codebase especially when multiple developers are working on the same project A popular linter for JavaScript is ESLint Here is a simple example of what ESLint might flag:\njs\nfunction doSomething(x) {\nreturn x + z\n}\nIn this code variable z is not declared, so ESLint would flag the error z is not defined Also, the last statement is missing a semicolon which ESLint might also flag in the code editor Formatters on the other hand are tools that automatically format your code to adhere to a specific style guide While linters can often autofix some issues, formatters are specifically designed to rewrite your code to match a predetermined style Formatters ensure a consistent code style across an entire project or team regardless of individual developer preferences They also save time and mental energy that would otherwise be spent on manual formatting Lastly, they can make code reviews more efficient by eliminating discussions about code style A popular formatter for JavaScript is Prettier Here is an example of how Prettier might format code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5281,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6c72d3738614e1230a2.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "571e2c84cf6cba4027ba5f704cd74578",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6c72d3738614e1230a2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "formatters are specifically designed to rewrite your code to match a predetermined style Formatters ensure a consistent code style across an entire project or team regardless of individual developer preferences They also save time and mental energy that would otherwise be spent on manual formatting Lastly, they can make code reviews more efficient by eliminating discussions about code style A popular formatter for JavaScript is Prettier Here is an example of how Prettier might format codeHere's a before formatting:\njs\nfunction longFunction(\nargument1,\nargument2,\nargument3\n) {return argument1 + argument2 + argument3;}\nAnd then after the prettier formatting:\njs\nfunction longFunction(argument1, argument2, argument3) {\nreturn argument1 + argument2 + argument3;\n}\nBoth linters and formatters can be integrated into your development workflow in various ways They can be included in your build process or added as plugins to your text editor or IDE providing real-time feedback as you code Using linters and formatters together can significantly improve code quality and consistency For example, you might use ESLint to catch potential errors and enforce certain coding practices, and then use Prettier to handle all formatting tasks Many development teams set up these tools as part of their project configuration often with pre-commit hooks that run the linter and formatter before allowing code to be committed This ensures that all code in the repository meets the teams standards for quality and style In summary, linters and formatters are powerful tools that help maintain code quality, catch potential errors early, and ensure consistency across codebases By automating these aspects of code review they allow developers to focus more on solving problems and less on debating code style --questions--\n--text--\nWhat is the primary purpose of a linter --answers--\nTo automatically format code --feedback--\nThink about what linters check in your code To compile code --feedback--\nThink about what linters check in your code To flag potential errors and style issues To run unit tests --feedback--\nThink about what linters check in your code --video-solution--\n3\n--text--\nWhich of the following is a benefit of using a code formatter --answers--\nIt catches runtime errors --feedback--\nConsider how formatters affect the appearance of code It ensures consistent code style across a project It improves the performance of the code --feedback--\nConsider how formatters affect the appearance of code It adds new features to the codebase --feedback--\nConsider how formatters affect the appearance of code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5281,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6c72d3738614e1230a2.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "97d1c212e7845bab9c167038d34bd441",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6c72d3738614e1230a2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "about what linters check in your code --video-solution-- 3 --text-- Which of the following is a benefit of using a code formatter --answers-- It catches runtime errors --feedback-- Consider how formatters affect the appearance of code It ensures consistent code style across a project It improves the performance of the code --feedback-- Consider how formatters affect the appearance of code It adds new features to the codebase --feedback-- Consider how formatters affect the appearance of code--video-solution--\n2\n--text--\nWhere in the development process might you integrate a linter --answers--\nOnly during the initial project setup --feedback--\nThink about when it would be most beneficial to catch potential issues Only during the final code review --feedback--\nThink about when it would be most beneficial to catch potential issues As part of the build process, a plugin for your text editor or IDE, a pre-commit hook before code can be committed to a codebase, and so on After the code has been deployed to production --feedback--\nThink about when it would be most beneficial to catch potential issues --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5281,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6c72d3738614e1230a2.md",
      "source_type": "git_repo"
    },
    "token_count": 224,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "eedb7f47b86bccbc711d0b4c1c680c86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6d4dec34c61850a1276.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732c6d4dec34c61850a1276\ntitle: What Is Memory Management, and How Does It Work in JavaScript challengeType: 19\ndashedName: what-is-memory-management-and-how-does-it-work-in-javascript\n--description--\nMemory management is an essential concept in programming, but it can be a bit confusing for beginners, let's break it down in simple terms When you run a program, including JavaScript code in a web browser, it needs memory to store all the information its working with This includes variables, functions, objects, basically everything your code creates and uses Memory management is the process of controlling this memory, allocating it when needed, and freeing it up when it's no longer needed In some programming languages, developers have to manually manage memory They need to explicitly tell the computer when to allocate memory for new things and when to free up memory that's no longer needed This can be powerful but also tricky as forgetting to free memory can lead to memory leaks JavaScript however uses automatic memory management This means that JavaScript (more specifically the JavaScript engine in your web browser) takes care of memory allocation and deallocation for you You don't have to explicitly free memory in your code This automatic process is often called garbage collection Here's how it works in simple terms First allocation happens when you create a variable, objects or functions in your JavaScript code, memory is automatically allocated to store them Then you use this allocated memory when you work with these variables, objects or functions in your code The JavaScript engine has clever ways to figure out when something in memory is no longer needed Generally if there is no way for your program to access or use a piece of data any more it's considered no longer needed Periodically the garbage collector runs, it finds a memory that's no longer needed and frees it up, making it available for future use This process happens automatically which is great because it means you don't have to worry about managing memory yourself However, it's still important to understand this concept because you can sometimes accidentally keep references to things you don't need anymore preventing the garbage collector from freeing that memory For example:\n```js\nfunction createLargeArray() {\nlet largeArray = new Array(1000000);\nreturn function() {\nconsole log(largeArray",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6d4dec34c61850a1276.md",
      "source_type": "git_repo"
    },
    "token_count": 458,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "540cd9e0380bccfbbcb8ec2ea889a322",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6d4dec34c61850a1276.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "longer needed and frees it up, making it available for future use This process happens automatically which is great because it means you don't have to worry about managing memory yourself However, it's still important to understand this concept because you can sometimes accidentally keep references to things you don't need anymore preventing the garbage collector from freeing that memory For example: ```js function createLargeArray() { let largeArray = new Array(1000000); return function() { console log(largeArraylength);\n};\n}\nlet printArrayLength = createLargeArray();\nprintArrayLength();\n```\nIn this code, even after createLargeArray finishes running, largeArray can't be garbage collected because the returned function still has access to it This is a closure, and while closures are useful they can sometimes lead to more memory usage than you might expect You will learn more about closures in future lectures As a beginner, you don't need to worry too much about the intricacies of memory management JavaScript's automatic garbage collection takes care of most things for you However, as you advance in your JavaScript journey, understanding these concepts can help you write more efficient code, especially for larger applications or when working with limited resources Remember, good coding practices, like avoiding global variables when possible and being mindful of what your functions are closing over, can help the JavaScript engine manage memory more efficiently --questions--\n--text--\nIn JavaScript, who is primarily responsible for managing memory --answers--\nThe developer --feedback--\nThink about who or what handles the allocation and deallocation of memory in JavaScript The JavaScript engine The operating system --feedback--\nThink about who or what handles the allocation and deallocation of memory in JavaScript The web browser --feedback--\nThink about who or what handles the allocation and deallocation of memory in JavaScript --video-solution--\n2\n--text--\nWhat is the process called when JavaScript automatically frees up memory that's no longer needed --answers--\nMemory allocation --feedback--\nThis process involves \"collecting\" memory that's no longer in use Garbage collection Memory fragmentation --feedback--\nThis process involves \"collecting\" memory that's no longer in use Stack overflow --feedback--\nThis process involves \"collecting\" memory that's no longer in use --video-solution--\n2\n--text--\nWhich of the following is a potential downside of JavaScript's automatic memory management --answers--\nIt requires more code to be written --feedback--\nThink about what might happen if the garbage collector can't identify all unused memory",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6d4dec34c61850a1276.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "608c8ac4cdb5d0f453368a00e3352a41",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6d4dec34c61850a1276.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "process involves \"collecting\" memory that's no longer in use Garbage collection Memory fragmentation --feedback-- This process involves \"collecting\" memory that's no longer in use Stack overflow --feedback-- This process involves \"collecting\" memory that's no longer in use --video-solution-- 2 --text-- Which of the following is a potential downside of JavaScript's automatic memory management --answers-- It requires more code to be written --feedback-- Think about what might happen if the garbage collector can't identify all unused memoryIt can sometimes keep memory allocated that's no longer needed It makes the program run slower --feedback--\nThink about what might happen if the garbage collector can't identify all unused memory It requires manual memory deallocation --feedback--\nThink about what might happen if the garbage collector can't identify all unused memory --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5161,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6d4dec34c61850a1276.md",
      "source_type": "git_repo"
    },
    "token_count": 171,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3ffe5d5a7183dc5ae485fc7b4d787485",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc4ff5e7a4bbdee8ba013.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bc4ff5e7a4bbdee8ba013\ntitle: What Are Named Colors in CSS, and When to Use Them challengeType: 19\ndashedName: what-are-named-colors-in-css\n--description--\nIn CSS, colors play a crucial role in designing web pages, enhancing readability, setting the mood, and improving user experience One of the simplest ways to define colors in CSS is by using named colors Named colors are predefined color names recognized by browsers Here is an example of using a named color for a paragraph element:\ncss\np {\ncolor: red;\n}\nIn this example, we're using the named color red to style the text in a paragraph Named colors in CSS are a collection of 140 standard color names like red, blue, yellow, aqua, fuchsia, black, and so on These names are simple to use and make your code more readable, and they are self-descriptive Named colors are useful for quick prototyping, simple designs, and improving code readability Here is an another example of using named colors for an h1 selector:\ncss\nh1 {\ncolor: navy;\nbackground-color: lightgray;\n}\nIn this example, the heading text will be styled in navy, with a light gray background The readability of the code improves since named colors provide an immediate visual understanding of the intended style Named colors in CSS are convenient but limited, with only 140 available options They may not offer the precise shade needed for more detailed designs Named colors in CSS are a great way to apply colors quickly and descriptively While they are useful for basic designs, prototyping, and improving code readability, their limited range makes them less suitable for complex designs requiring precise color control By understanding the strengths and limitations of named colors, you can determine when it’s best to use them over more detailed color models like RGB or HSL, which you will learn about in future lectures --questions--\n--text--\nWhat is a key benefit of using named colors in CSS --answers--\nNamed colors allow you to create gradients --feedback--\nThink about the simplicity and readability aspect of named colors Named colors are simpler to write and make code more readable Named colors provide a wider range of color options than hex codes --feedback--\nThink about the simplicity and readability aspect of named colors Named colors are the most precise way to define colors in web design --feedback--\nThink about the simplicity and readability aspect of named colors",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3612,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc4ff5e7a4bbdee8ba013.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "2db7acb8ab7f9a2e2019b5cb1fdab711",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc4ff5e7a4bbdee8ba013.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Named colors allow you to create gradients --feedback-- Think about the simplicity and readability aspect of named colors Named colors are simpler to write and make code more readable Named colors provide a wider range of color options than hex codes --feedback-- Think about the simplicity and readability aspect of named colors Named colors are the most precise way to define colors in web design --feedback-- Think about the simplicity and readability aspect of named colors--video-solution--\n2\n--text--\nIn what scenario might named colors not be the best choice --answers--\nWhen you need to quickly prototype a design --feedback--\nThink about the limitations of named colors in more complex designs When your design requires very specific or nuanced shades of color When your design involves only primary colors --feedback--\nThink about the limitations of named colors in more complex designs When collaborating with others on a simple project --feedback--\nThink about the limitations of named colors in more complex designs --video-solution--\n2\n--text--\nWhich of the following is an example of a named color in CSS --answers--\n#ff5733\n--feedback--\nNamed colors are descriptive words, not numerical codes rgb(255, 99, 71)\n--feedback--\nNamed colors are descriptive words, not numerical codes tomato\nhsl(120, 100%, 50%)\n--feedback--\nNamed colors are descriptive words, not numerical codes --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3612,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc4ff5e7a4bbdee8ba013.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "142ac64bb0a7bab9109d404f6a4a1e1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6e281c14a61c4858361.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732c6e281c14a61c4858361\ntitle: What Are Closures, and How Do They Work challengeType: 19\ndashedName: what-are-closures-and-how-do-they-work\n--description--\nClosures are one of the most powerful and often misunderstood features in JavaScript At its core, a closure is a function that has access to variables in its outer enclosing lexical scope, even after the outer function has returned This might sound complex but it's a fundamental concept that enables many advanced programming patterns in JavaScript To understand closures, let's start with an example:\n```js\nfunction outerFunction(x) {\nlet y = 10;\nfunction innerFunction(){\nconsole log(x + y);\n}\nreturn innerFunction;\n}\nlet closure = outerFunction(5);\nclosure(); // Output: 15\n```\nIn this example, outerFunction takes a parameter x and defines a local variable y It then defines an innerFunction that uses both x and y Finally it returns innerFunction When we call outerFunction(5) it returns innerFunction which we assign to the variable closure When we later call closure() it still has access to x and y from outerFunction even though outerFunction has already finished executing This is the essence of a closure The inner function maintains a reference to its outer lexical environment, preserving access to the variables in that environment even after the outer function has completed Closures are particularly useful for creating private variables and functions Consider this example:\n```js\nfunction createCounter() {\nlet count = 0;\nreturn function () {\ncount++;\nreturn count;\n};\n}\nlet counter = createCounter();\nconsole log(counter()); // Output: 1\nconsole log(counter()); // Output: 2\n```\nIn this case, createCounter returns a function that increments and returns a count variable The count variable is not directly accessible from outside createCounter, but the returned function (our closure) has access to it Each time we call counter(), it increments and returns the count Closures can also capture multiple variables from their outer scope For example:\n```js\nfunction multiply(x) {\nreturn function (y) {\nreturn x * y;\n};\n}\nlet double = multiply(2);\nconsole log(double(5)); // Output: 10\n```\nHere the inner function captures the x parameter from multiply When we create double by calling multiply(2) it returns a function that always multiplies its argument by 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5309,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6e281c14a61c4858361.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "1c517ad1f854365205597c31fb8bc77d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6e281c14a61c4858361.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "it Each time we call counter(), it increments and returns the count Closures can also capture multiple variables from their outer scope For example: ```js function multiply(x) { return function (y) { return x * y; }; } let double = multiply(2); console log(double(5)); // Output: 10 ``` Here the inner function captures the x parameter from multiply When we create double by calling multiply(2) it returns a function that always multiplies its argument by 2One important thing to note about closures is that they capture variables, by reference not by value This means if the value of a captured variable changes, the closure will see the new value For example:\n```js\nfunction createIncrementer() {\nlet count = 0;\nreturn function () {\ncount++;\nconsole log(count);\n};\n}\nlet increment = createIncrementer();\nincrement(); // Output: 1\nincrement(); // Output: 2\n```\nEach time we call increment its working with the same count variable, not a copy of it's initial value Closures are a powerful tool in JavaScript as you continue to work with JavaScript you'll find that understanding and using closures effectively can greatly enhance your ability to write clean, efficient and powerful code --questions--\n--text--\nWhat will be the output of the following code ```js\nfunction outer(x) {\nreturn function(y) {\nreturn x + y;\n};\n}\nlet add5 = outer(5);\nconsole log(add5(3));\n```\n--answers--\n5\n--feedback--\nConsider how the inner function in outer captures the x parameter 3\n--feedback--\nConsider how the inner function in outer captures the x parameter 8\nundefined\n--feedback--\nConsider how the inner function in outer captures the x parameter --video-solution--\n3\n--text--\nWhat concept does the following code demonstrate ```js\nfunction createGreeter(greeting) {\nreturn function(name) {\nconsole log(greeting + \", \" + name);\n};\n}\nlet sayHello = createGreeter(\"Hello\");\nsayHello(\"Alice\");\n```\n--answers--\nHoisting --feedback--\nThink about how the returned function retains access to the greeting parameter Closure Recursion --feedback--\nThink about how the returned function retains access to the greeting parameter Prototype inheritance --feedback--\nThink about how the returned function retains access to the greeting parameter --video-solution--\n2\n--text--\nWhat will be the output of the following code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5309,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6e281c14a61c4858361.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "6c4cf641f5afbbc38602c3f37d5d23e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6e281c14a61c4858361.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ return function(name) { console log(greeting + \", \" + name); }; } let sayHello = createGreeter(\"Hello\"); sayHello(\"Alice\"); ``` --answers-- Hoisting --feedback-- Think about how the returned function retains access to the greeting parameter Closure Recursion --feedback-- Think about how the returned function retains access to the greeting parameter Prototype inheritance --feedback-- Think about how the returned function retains access to the greeting parameter --video-solution-- 2 --text-- What will be the output of the following code```js\nfunction counter() {\nlet count = 0;\nreturn function() {\ncount++;\nreturn count;\n};\n}\nlet increment = counter();\nconsole log(increment());\nconsole log(increment());\nconsole log(increment());\n```\n--answers--\njs\n1\n1\n1\n--feedback--\nConsider how the inner function in counter maintains access to the count variable across multiple calls js\n1\n2\n3\njs\n0\n1\n2\n--feedback--\nConsider how the inner function in counter maintains access to the count variable across multiple calls js\nundefined\nundefined\nundefined\n--feedback--\nConsider how the inner function in counter maintains access to the count variable across multiple calls --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5309,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-code-quality-and-execution-concepts\\6732c6e281c14a61c4858361.md",
      "source_type": "git_repo"
    },
    "token_count": 252,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "47c9aa5334367933ef6213ec0702a970",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672aa7678e05e35d42e33522.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa7678e05e35d42e33522\ntitle: What Is Color Theory in Design challengeType: 19\ndashedName: what-is-color-theory-in-design\n--description--\nColor theory is the study of how colors interact with each other and how they affect our perception It covers color relationships, color harmony, and the psychological impact of color Let's start diving into this world Colors can be classified as either primary, secondary, or tertiary Primary colors, yellow, blue, and red, are the fundamental hues from which all other colors are derived Secondary colors result from mixing equal amounts of two primary colors Green, orange, and purple are examples of secondary colors For example, green is the result of combining yellow and blue Tertiary colors result from combining a primary color with a neighboring secondary color Yellow-Green, Blue-Green, and Blue-Violet, are examples of tertiary colors This is a fundamental classification in the world of color theory, but there are other ways to classify colors They can be classified as warm or cool, based on their temperature Warm colors, like reds, oranges, and yellows, evoke feelings of comfort, warmth, and coziness Cool colors, like blues, green, and purples, evoke feelings of calmness, serenity, and professionalism Colors can also be represented through color models They are essential for describing and reproducing colors in a standard way Frequently used color models include the RGB model, the HSV model, and the HSL model They represent colors based on different properties You will learn more about them in future lectures Great Now that you know more about this, let's talk about a fundamental tool that designers use to represent colors and their relationships The color wheel is a circular diagram that shows how colors relate to each other It's an essential tool for designers because it helps them to select color combinations This is very helpful for creating color palettes and color schemes A color scheme is the set of colors chosen for a specific design or project They are usually based on the principles of color theory By understanding the relationships between colors on the wheel, you can develop different types of color schemes Let's see some of them Analogous color schemes create cohesive and soothing experiences They have analogous colors, which are adjacent to each other in the color wheel Complementary color schemes create high contrast and visual impact Their colors are located on the opposite ends of the color wheel, relative to each other Color contrast is essential for web accessibility",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672aa7678e05e35d42e33522.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "053dcc7c724a9ef19f4ff7fd5bc6b2cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672aa7678e05e35d42e33522.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "By understanding the relationships between colors on the wheel, you can develop different types of color schemes Let's see some of them Analogous color schemes create cohesive and soothing experiences They have analogous colors, which are adjacent to each other in the color wheel Complementary color schemes create high contrast and visual impact Their colors are located on the opposite ends of the color wheel, relative to each other Color contrast is essential for web accessibilityIt ensures that text and other important elements are clearly distinguishable from their background This is especially important for people with visual disabilities In an RGB color wheel, complementary colors are located at the opposite ends of the wheel For example, magenta is complementary to green and blue is complementary to yellow and so on A triadic color scheme has vibrant colors They are made from colors that are approximately equidistant from each other If they are connected, they form an equilateral triangle on the color wheel And finally, we have the monochromatic color scheme In this color scheme, all the colors are derived from the same base color by adjusting its lightness, darkness, and saturation This evokes a feeling of unity and harmony while still creating contrast And finally, here are some tips for using color effectively in web development:\nCreate a color scheme that defines your website's branding Use colors to evoke the emotions and perceptions that align with your goals Choose colors with enough contrast to make your website accessible for everyone Use color to highlight important elements of your website, like buttons Use color consistently and use it to create a visual hierarchy Color theory is a core aspect of design By understanding color psychology, harmonies, and accessibility, you can create effective designs, evoke emotions, and enhance user experience --questions--\n--text--\nWhy is color theory important for web development --answers--\nIt's not important because it has no impact on user experience --feedback--\nThink about how color affects user perception and emotions It helps designers create visually appealing websites It's only important for print design --feedback--\nThink about how color affects user perception and emotions It's irrelevant to modern web design trends --feedback--\nThink about how color affects user perception and emotions --video-solution--\n2\n--text--\nWhich color scheme is most likely to create cohesive and soothing experiences --answers--\nAnalogous\nComplementary\n--feedback--\nThink about the emotional impact of colors placed adjacent to each other Monochromatic\n--feedback--\nThink about the emotional impact of colors placed adjacent to each other",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672aa7678e05e35d42e33522.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "bb05f03c4bbb6294a24d68302401a3cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672aa7678e05e35d42e33522.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "important for print design --feedback-- Think about how color affects user perception and emotions It's irrelevant to modern web design trends --feedback-- Think about how color affects user perception and emotions --video-solution-- 2 --text-- Which color scheme is most likely to create cohesive and soothing experiences --answers-- Analogous Complementary --feedback-- Think about the emotional impact of colors placed adjacent to each other Monochromatic --feedback-- Think about the emotional impact of colors placed adjacent to each otherTriadic\n--feedback--\nThink about the emotional impact of colors placed adjacent to each other --video-solution--\n1\n--text--\nThe concept of color harmony refers to:\n--answers--\nUsing only one color in a design --feedback--\nThink about how colors work together in a design Combining colors that clash with each other --feedback--\nThink about how colors work together in a design Creating visually effective color combinations The brightness or darkness of a color --feedback--\nThink about how colors work together in a design --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5623,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672aa7678e05e35d42e33522.md",
      "source_type": "git_repo"
    },
    "token_count": 206,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e1b38a1164159885f6e9e4feea9e0477",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc51370c789be459186b4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bc51370c789be459186b4\ntitle: What Is the RGB Color Model, and How Does the RGB Function Work in CSS challengeType: 19\ndashedName: what-is-the-rgb-color-model\n--description--\nWhen working with colors in CSS, understanding the RGB color model is essential RGB stands for Red, Green, and Blue — the primary colors of light These three colors are combined in different intensities to create a wide range of colors The RGB color model is an additive color model, which means colors are created by combining light at varying intensities The intensity of each color can range from 0 (which means no light) to 255 (which means full light) By mixing different levels of red, green, and blue, you can produce any color you see on your screen For example:\nBlack is represented by rgb(0, 0, 0), which means no light for any of the three colors White is represented by rgb(255, 255, 255), which means full light intensity for all three colors Red is represented by rgb(255, 0, 0), with full intensity for red and none for green or blue In CSS, the rgb() function allows you to define colors using the RGB color model The function takes three values, each representing the intensity of red, green, and blue light, respectively Here is the basic syntax:\ncss\nelement {\ncolor: rgb(red, green, blue);\n}\nThe values for red, green, and blue can range from 0 to 255, where 0 represents the absence of that color, and 255 represents full saturation Here is an example of how you might use the rgb() function in CSS:\ncss\np {\ncolor: rgb(255, 0, 0);\n}\nThis code would change the text color of the paragraph to red because the red value is set to 255, while green and blue are set to 0 CSS also provides the rgba() function, which adds a fourth value —alpha— that controls the transparency of the color The alpha value ranges from 0 (completely transparent) to 1 (completely opaque) Here is an example of using rgba():\ncss\ndiv {\nbackground-color: rgba(0, 0, 255, 0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4647,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc51370c789be459186b4.md",
      "source_type": "git_repo"
    },
    "token_count": 468,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b3f5efd77dfe3183452163e40d2e5170",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc51370c789be459186b4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "0); } This code would change the text color of the paragraph to red because the red value is set to 255, while green and blue are set to 0 CSS also provides the rgba() function, which adds a fourth value —alpha— that controls the transparency of the color The alpha value ranges from 0 (completely transparent) to 1 (completely opaque) Here is an example of using rgba(): css div { background-color: rgba(0, 0, 255, 05);\n}\nThis code would apply a semi-transparent blue background to a div element because the red and green values are set to 0, the blue value is set to 255, and the alpha value is set to 0 5 (50% transparency) The RGB color model is especially useful for digital media because it directly corresponds to how screens display colors Monitors and displays use tiny red, green, and blue pixels to create the colors you see By controlling the intensity of these pixels through RGB values, you can achieve a wide range of colors for your web design Additionally, the RGB model is ideal when working with dynamic designs For instance, if you want to create animations or color effects that require real-time changes, the flexibility of the RGB function allows you to modify colors programmatically By understanding the RGB color model and how to use the rgb() and rgba() functions in CSS, you'll have greater control over how colors are displayed on your web pages You can create vibrant designs, transparency, and even programmatically adjust colors for dynamic effects --questions--\n--text--\nWhat do the numbers in the rgb() function represent --answers--\nwidth, height, and depth of the element --feedback--\nThe RGB function is based on three colors used to create digital colors Amount of red, green, and blue light padding, margin, and border sizes --feedback--\nThe RGB function is based on three colors used to create digital colors Amount of hue, saturation, and lightness --feedback--\nThe RGB function is based on three colors used to create digital colors --video-solution--\n2\n--text--\nWhich CSS function would you use if you want to control the transparency of a color --answers--\nrgb()\n--feedback--\nThis function includes an additional parameter for transparency (alpha value) rgba()\nhsl()\n--feedback--\nThis function includes an additional parameter for transparency (alpha value) hex()\n--feedback--\nThis function includes an additional parameter for transparency (alpha value)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4647,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc51370c789be459186b4.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "36b462fa01fd6c6135b34d0c5de4360a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc51370c789be459186b4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of hue, saturation, and lightness --feedback-- The RGB function is based on three colors used to create digital colors --video-solution-- 2 --text-- Which CSS function would you use if you want to control the transparency of a color --answers-- rgb() --feedback-- This function includes an additional parameter for transparency (alpha value) rgba() hsl() --feedback-- This function includes an additional parameter for transparency (alpha value) hex() --feedback-- This function includes an additional parameter for transparency (alpha value)--video-solution--\n2\n--text--\nWhat is the maximum value for any individual color in the RGB model --answers--\n100\n--feedback--\nThis value indicates full intensity of that particular color 50\n--feedback--\nThis value indicates full intensity of that particular color 255\n360\n--feedback--\nThis value indicates full intensity of that particular color --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4647,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc51370c789be459186b4.md",
      "source_type": "git_repo"
    },
    "token_count": 184,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ec246ec27e47da048a367aed580ac1ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc523324694be91d90d96.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bc523324694be91d90d96\ntitle: What Is the HSL Color Model, and How Does the HSL Function Work in CSS challengeType: 19\ndashedName: what-is-the-hsl-color-model\n--description--\nWhen styling websites, one of the most versatile and intuitive ways to work with color is by using the HSL color model HSL stands for Hue, Saturation, and Lightness — three key components that define a color The HSL color model represents colors in a way that is more in line with how humans perceive color In this lecture, we will explore what the HSL color model is and how the hsl() function is used in CSS The hue is the color type, represented as an angle on the color wheel, which ranges from 0 to 360 degrees For example, 0 degrees represents red, 120 degrees is green, and 240 degrees is blue By adjusting the hue, you shift through different colors on the spectrum Saturation refers to the intensity or purity of the color It is measured as a percentage from 0% (a completely desaturated, grayscale color) to 100% (the most vibrant form of that color) A color with 100% saturation is fully vivid, while a color with 0% saturation appears as a shade of gray Lightness determines how light or dark the color is, again measured as a percentage A lightness value of 0% will produce black, 50% will give you the normal tone of the hue, and 100% will result in white In CSS, the hsl() function is used to define colors using the HSL color model Here is the basic syntax:\ncss\nelement {\ncolor: hsl(hue, saturation, lightness);\n}\nLet's break this down with an example:\ncss\np {\ncolor: hsl(120, 100%, 50%);\n}\nIn this case, the hue is 120 degrees, which corresponds to green The saturation is 100%, so the green will be fully vivid The lightness is 50%, so it's at its normal tone — neither too dark nor too light As a result, the text color of the paragraph will be a bright green One of the main advantages of the HSL color model is its intuitive nature",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5524,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc523324694be91d90d96.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8e0037ea85955baec7db482b74530e8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc523324694be91d90d96.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "css p { color: hsl(120, 100%, 50%); } In this case, the hue is 120 degrees, which corresponds to green The saturation is 100%, so the green will be fully vivid The lightness is 50%, so it's at its normal tone — neither too dark nor too light As a result, the text color of the paragraph will be a bright green One of the main advantages of the HSL color model is its intuitive natureIt makes it easy to adjust a color’s vibrancy or lightness by tweaking the saturation and lightness values without having to alter the core color (hue) For instance, if you want to create different shades or tints of the same color, you can simply adjust the lightness value ```css\ndiv light {\nbackground-color: hsl(240, 100%, 80%);\n}\ndiv dark {\nbackground-color: hsl(240, 100%, 20%);\n}\n```\nHere, both div elements are using the same hue (240 degrees, which is blue), but one has a lightness of 80% (a lighter shade of blue), and the other has a lightness of 20% (a darker shade of blue) Just like the RGB model has an rgba() function to include transparency, the HSL model has an hsla() function The fourth parameter in this function represents the alpha value, which controls the opacity of the color Here is the basic syntax:\ncss\nelement {\nbackground-color: hsla(hue, saturation, lightness, alpha);\n}\nLet's take a look at an example:\ncss\ndiv {\nbackground-color: hsla(0, 100%, 50%, 0 5);\n}\nThis code would give the div a semi-transparent red background, where the hue is set to 0 degrees (red), saturation is 100%, lightness is 50%, and alpha is 0 5 (50% opacity) The HSL color model is particularly useful when you need to create color schemes and adjust shades or tints easily Because HSL separates the hue from saturation and lightness, you can keep a consistent color theme while tweaking lightness for shadows or highlights This level of flexibility makes HSL a favorite for designers and developers alike Additionally, HSL makes color values more readable and understandable when compared to other methods like hex codes or RGB You can more clearly see the intent behind the color and adjust accordingly, especially when experimenting with different designs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5524,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc523324694be91d90d96.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "bf33790385c87a83dbd4dd0b516bed9b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc523324694be91d90d96.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "tints easily Because HSL separates the hue from saturation and lightness, you can keep a consistent color theme while tweaking lightness for shadows or highlights This level of flexibility makes HSL a favorite for designers and developers alike Additionally, HSL makes color values more readable and understandable when compared to other methods like hex codes or RGB You can more clearly see the intent behind the color and adjust accordingly, especially when experimenting with different designsWith the HSL color model, you gain more flexibility in controlling color tones, saturation, and lightness, making it a powerful tool for creating rich and dynamic designs in CSS --questions--\n--text--\nWhat does the first value in the hsl() function represent --answers--\nSaturation\n--feedback--\nThis value is measured in degrees and determines the type of color (e g , red, blue, green) Lightness\n--feedback--\nThis value is measured in degrees and determines the type of color (e g , red, blue, green) Hue\nOpacity\n--feedback--\nThis value is measured in degrees and determines the type of color (e g , red, blue, green) --video-solution--\n3\n--text--\nWhich percentage value for lightness would result in pure white when using the HSL model --answers--\n0%\n--feedback--\nLightness refers to how light or dark a color appears 50%\n--feedback--\nLightness refers to how light or dark a color appears 100%\n25%\n--feedback--\nLightness refers to how light or dark a color appears --video-solution--\n3\n--text--\nHow would you make a color semi-transparent using the HSL model --answers--\nBy using hsla() and adjusting the alpha value By lowering the lightness value in the hsl() function/\n--feedback--\nConsider how you control opacity in the HSL model By increasing the hue value above 360 degrees --feedback--\nConsider how you control opacity in the HSL model By setting the saturation value to 0% --feedback--\nConsider how you control opacity in the HSL model --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5524,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc523324694be91d90d96.md",
      "source_type": "git_repo"
    },
    "token_count": 420,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d4384ef8b4d2450c2348abe1a3d07eb7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc544196a17bf28594e64.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bc544196a17bf28594e64\ntitle: What Are Linear and Radial Gradients, and How Do They Work in CSS challengeType: 19\ndashedName: what-are-linear-and-radial-gradients\n--description--\nIn a previous lecture, you learned how to start working with linear and radial gradients In this lecture, we are going to dive deeper into how to work with the CSS properties to create more visually appealing and complex designs Gradients in CSS allow you to create smooth transitions between two or more specified colors They are often used to add depth, texture, and visual interest to web designs without the need for image files CSS supports two main types of gradients: linear gradients and radial gradients Linear gradients create a gradual blend between colors along a straight line You can control the direction of this line and the colors used Here's a basic example of a linear gradient:\ncss linear-gradient {\nbackground: linear-gradient(to right, red, blue);\nheight: 40vh;\n}\nThis creates a gradient that transitions from red on the left to blue on the right The to right parameter specifies the direction of the gradient You can use other directions like to left, to top, to bottom, or even specify angles like 45deg You can also use multiple color stops in a linear gradient:\ncss multi-color-gradient {\nbackground: linear-gradient(to right, red, yellow, blue);\nheight: 40vh;\n}\nThis creates a gradient that transitions from red to yellow to blue, evenly spaced across the element Radial gradients, on the other hand, create circular or elliptical gradients that radiate from a central point Here's an example:\ncss radial-gradient {\nbackground: radial-gradient(circle, red, blue);\nheight: 40vh;\n}\nThis creates a circular gradient that starts with red in the center and transitions to blue at the edges You can also specify the shape and size of radial gradients:\ncss custom-radial-gradient {\nbackground: radial-gradient(ellipse at top left, red, blue);\nheight: 40vh;\n}\nThis creates an elliptical gradient starting from the top left corner of the element Both linear and radial gradients allow you to specify color stops at precise positions For example:\ncss",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4725,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc544196a17bf28594e64.md",
      "source_type": "git_repo"
    },
    "token_count": 448,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bc359d31b4b84f982aaaac510bd05a2a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc544196a17bf28594e64.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "40vh; } This creates a circular gradient that starts with red in the center and transitions to blue at the edges You can also specify the shape and size of radial gradients: css custom-radial-gradient { background: radial-gradient(ellipse at top left, red, blue); height: 40vh; } This creates an elliptical gradient starting from the top left corner of the element Both linear and radial gradients allow you to specify color stops at precise positions For example: cssprecise-gradient {\nbackground: linear-gradient(to right, red 20%, yellow 40%, blue 80%);\nheight: 40vh;\n}\nThis creates a gradient where red takes up the first 20%, then transitions to yellow at 40%, and finally to blue at 80% Gradients can be used wherever you'd use an image in CSS This makes them versatile for creating backgrounds, buttons, or even text effects when combined with other CSS properties Remember, while gradients can enhance the visual appeal of your website, it's important to ensure sufficient contrast for accessibility, especially when using gradients behind text --questions--\n--text--\nWhat is the difference between linear and radial gradients in CSS --answers--\nLinear gradients use only two colors, while radial gradients use multiple colors --feedback--\nThink about the shape and direction of each type of gradient Linear gradients transition along a straight line, while radial gradients radiate from a central point Linear gradients are only horizontal, while radial gradients can be any shape --feedback--\nThink about the shape and direction of each type of gradient Linear gradients are smoother than radial gradients --feedback--\nThink about the shape and direction of each type of gradient --video-solution--\n2\n--text--\nIn the following CSS code, what does 45deg specify css\n{\nbackground: linear-gradient(45deg, red, blue);\n}\n--answers--\nThe angle of rotation for the entire element --feedback--\nConsider how this value might affect the direction of the color transition The direction of the gradient line The size of the gradient --feedback--\nConsider how this value might affect the direction of the color transition The distance between color stops --feedback--\nConsider how this value might affect the direction of the color transition --video-solution--\n2\n--text--\nWhich of the following is NOT a valid way to specify direction in a linear gradient --answers--\nto right\n--feedback--\nThink about the standard keywords and values used for specifying gradient directions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4725,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc544196a17bf28594e64.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5c60960656265ea053f0f4f6b3c5c19e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc544196a17bf28594e64.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "direction of the gradient line The size of the gradient --feedback-- Consider how this value might affect the direction of the color transition The distance between color stops --feedback-- Consider how this value might affect the direction of the color transition --video-solution-- 2 --text-- Which of the following is NOT a valid way to specify direction in a linear gradient --answers-- to right --feedback-- Think about the standard keywords and values used for specifying gradient directionsto bottom left\n--feedback--\nThink about the standard keywords and values used for specifying gradient directions 90deg\n--feedback--\nThink about the standard keywords and values used for specifying gradient directions diagonal\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4725,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc544196a17bf28594e64.md",
      "source_type": "git_repo"
    },
    "token_count": 137,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2597d8dd9067bd46038c452baf69507b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc5344330d7bee2f9c2ed.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bc5344330d7bee2f9c2ed\ntitle: What Are Hex Codes, and How Do They Work in CSS challengeType: 19\ndashedName: what-are-hex-codes\n--description--\nWhen working with CSS to style a webpage, one of the most common methods for defining colors is by using hex color values Hexadecimal color values, or hex codes, are a concise way to represent colors in the RGB color model In this lecture, we'll explore what hex codes are, how they work in CSS, and when to use them A hex code (short for hexadecimal code) is a six-character string used to represent colors in the RGB color model The \"hex\" refers to the base-16 numbering system, which uses digits 0 to 9 and letters A to F In the context of colors, hex codes specify the amounts of red, green, and blue (RGB) that make up a particular color Each hex code starts with a hash symbol (#), followed by six characters that define the intensity of red, green, and blue in the color For example, the hex code for black is #000000, and the hex code for white is #FFFFFF The first two characters represent the red value, the next two represent green, and the last two represent blue In CSS, you can apply colors to elements by using hex codes Here is the basic syntax:\ncss\nelement {\ncolor: #RRGGBB;\n}\nHere, #RRGGBB is a placeholder for the actual hex code The RR, GG, and BB pairs each represent the intensity of red, green, and blue, respectively These pairs can range from 00 (the lowest intensity) to FF (the highest intensity) The higher the number, the more of that color will be present in the final mix For example, let's apply some hex colors to a few elements:\ncss\nh1 {\ncolor: #FF5733; /* A reddish-orange color */\n}\np {\nbackground-color: #4CAF50; /* A shade of green */\n}\nIn the first case, #FF5733 is a reddish-orange color Here’s the breakdown:\nFF is the highest value for red (fully saturated) 57 is a moderate amount of green 33 is a small amount of blue In the second case, #4CAF50 is a shade of green:\n4C is a low value for red AF is a strong value for green",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5438,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc5344330d7bee2f9c2ed.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b1c3749851c7c0a2dbe4d4154aa35597",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc5344330d7bee2f9c2ed.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "/* A reddish-orange color */ } p { background-color: #4CAF50; /* A shade of green */ } In the first case, #FF5733 is a reddish-orange color Here’s the breakdown: FF is the highest value for red (fully saturated) 57 is a moderate amount of green 33 is a small amount of blue In the second case, #4CAF50 is a shade of green: 4C is a low value for red AF is a strong value for green50 is a moderate value for blue Hex codes are popular because they are precise and easy to use They allow you to fine-tune your colors, making them ideal for designs where consistency is important Most design software, such as Adobe Photoshop or Figma, provides hex codes for the colors you select, which makes it easy to copy and paste these values directly into your CSS files In web development, hex codes are often used for defining text colors, backgrounds, borders, and other visual elements For example:\ncss\nbody {\nbackground-color: #F0F0F0; /* Light gray background */\n}\nbutton {\nbackground-color: #007BFF; /* A shade of blue */\ncolor: #FFFFFF; /* White text */\n}\nThis ensures that your colors remain consistent across your entire website or application In some cases, you may notice hex codes written in shorthand format, using only three characters instead of six This is possible when both characters in each color pair are the same For instance, #FF5733 cannot be shortened, but #FFFFFF (white) can be written as #FFF css\nh2 {\ncolor: #FFF; /* White in shorthand */\n}\nThe shorthand #FFF is equivalent to #FFFFFF Similarly, #000 would represent black which is #000000 in full form Hex codes are popular for their precision and compatibility, allowing for over 16 million colors across all browsers They're ideal when you need specific branding colors, want to control exact shades that aren't easily defined by named colors or HSL, or when you're copying colors from design software that provides hex codes by default --questions--\n--text--\nWhat does each pair of characters in a hex code represent --answers--\nThe amount of opacity in the color --feedback--\nThink about how hex codes break down colors into the RGB color model The intensity of red, green, or blue in the color The amount of contrast between colors --feedback--\nThink about how hex codes break down colors into the RGB color model",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5438,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc5344330d7bee2f9c2ed.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c995b35a56da282be255f2fb70c29313",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc5344330d7bee2f9c2ed.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "copying colors from design software that provides hex codes by default --questions-- --text-- What does each pair of characters in a hex code represent --answers-- The amount of opacity in the color --feedback-- Think about how hex codes break down colors into the RGB color model The intensity of red, green, or blue in the color The amount of contrast between colors --feedback-- Think about how hex codes break down colors into the RGB color modelThe lightness and saturation of the color --feedback--\nThink about how hex codes break down colors into the RGB color model --video-solution--\n2\n--text--\nHow would you write the hex code for black using the shorthand format --answers--\n#000\n#000000\n--feedback--\nConsider how shorthand hex codes condense the full six-character code #FFF\n--feedback--\nConsider how shorthand hex codes condense the full six-character code #FFFFFF\n--feedback--\nConsider how shorthand hex codes condense the full six-character code --video-solution--\n1\n--text--\nWhy might a designer choose to use hex codes in their CSS over named colors --answers--\nHex codes allow for more precise color selection Hex codes are easier to remember than named colors --feedback--\nThink about the limitations of named colors and the flexibility offered by hex codes Hex codes automatically adjust for light and dark mode --feedback--\nThink about the limitations of named colors and the flexibility offered by hex codes Hex codes do not require any formatting in CSS --feedback--\nThink about the limitations of named colors and the flexibility offered by hex codes --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5438,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-colors-in-css\\672bc5344330d7bee2f9c2ed.md",
      "source_type": "git_repo"
    },
    "token_count": 317,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "357e14ef3380e97eaea6055f6527a9eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\67329f64e0ef5c5b7388158d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67329f64e0ef5c5b7388158d\ntitle: How Do You Get the Index for an Element in an Array Using the indexOf Method challengeType: 19\ndashedName: how-do-you-get-the-index-for-an-element-in-an-array-using-the-indexof-method\n--description--\nIn JavaScript, the indexOf() method is useful for finding the first index of a specific element within an array If the element cannot be found, then it will return -1 Here is the basic syntax:\njs\narray indexOf(element, fromIndex)\nelement represents the value you want to search for within the array, and the fromIndex parameter is the position from which the search should start The fromIndex parameter is optional If fromIndex is not provided, the search starts from the beginning of the array Let's look at an example:\njs\nlet fruits = [\"apple\", \"banana\", \"orange\", \"banana\"];\nlet index = fruits indexOf(\"banana\");\nconsole log(index); // 1\nIn this example, we have an array fruits containing various fruit names We use the indexOf() method to find the index of the string banana within the fruits array Since banana is present at index 1, the method returns 1, which is stored in the index variable and logged to the console If the element you're searching for is not found in the array, indexOf() returns -1 For example:\njs\nlet fruits = [\"apple\", \"banana\", \"orange\"];\nlet index = fruits indexOf(\"grape\");\nconsole log(index); // -1\nHere, we search for the string grape in the fruits array using indexOf() Since grape is not present in the array, the method returns -1, which is stored in the index variable and logged to the console If you want to start looking for an item after a specific index number, then you can pass a second argument like in this example:\njs\nlet colors = [\"red\", \"green\", \"blue\", \"yellow\", \"green\"];\nlet index = colors indexOf(\"green\", 3);\nconsole log(index); // 4\nIn this example, the search does not start from the start of an array, rather it starts from the index number 3 which is yellow and gets the output of 4 --questions--\n--text--\nWhat will be the output of the following code js\nlet numbers = [10, 20, 30, 20, 40];\nlet index = numbers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3927,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\67329f64e0ef5c5b7388158d.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "47953c7347e487cebb26e9c375253198",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\67329f64e0ef5c5b7388158d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "this example: js let colors = [\"red\", \"green\", \"blue\", \"yellow\", \"green\"]; let index = colors indexOf(\"green\", 3); console log(index); // 4 In this example, the search does not start from the start of an array, rather it starts from the index number 3 which is yellow and gets the output of 4 --questions-- --text-- What will be the output of the following code js let numbers = [10, 20, 30, 20, 40]; let index = numbersindexOf(20);\nconsole log(index);\n--answers--\n0\n--feedback--\nThe indexOf() method returns the index of the first occurrence of the given element in the array 1\n2\n--feedback--\nThe indexOf() method returns the index of the first occurrence of the given element in the array 3\n--feedback--\nThe indexOf() method returns the index of the first occurrence of the given element in the array --video-solution--\n2\n--text--\nWhat will be the output of the following code js\nlet fruits = [\"apple\", \"banana\", \"orange\", \"grape\"];\nlet index = fruits indexOf(\"kiwi\");\nconsole log(index);\n--answers--\n0\n--feedback--\nThe indexOf() method returns -1 if the given element is not found in the array -1\nundefined\n--feedback--\nThe indexOf() method returns -1 if the given element is not found in the array An error will occur --feedback--\nThe indexOf() method returns -1 if the given element is not found in the array --video-solution--\n2\n--text--\nWhat will be the output of the following code js\nlet colors = [\"red\", \"green\", \"blue\", \"yellow\", \"green\"];\nlet index = colors indexOf(\"green\", 2);\nconsole log(index);\n--answers--\n1\n--feedback--\nThe indexOf() method can take a second argument to specify the starting index for the search 2\n--feedback--\nThe indexOf() method can take a second argument to specify the starting index for the search 4\n-1\n--feedback--\nThe indexOf() method can take a second argument to specify the starting index for the search --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3927,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\67329f64e0ef5c5b7388158d.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "23b7a3f82411943c2fda631886d516a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b28eeadda1158cdbff7b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732b28eeadda1158cdbff7b\ntitle: How Can You Check if an Array Contains a Certain Value challengeType: 19\ndashedName: how-can-you-check-if-an-array-contains-a-certain-value\n--description--\nIn JavaScript, the includes() method is a simple and efficient way to check if an array contains a specific value This method returns a boolean value: true if the array contains the specified element, and false otherwise The includes() method is particularly useful when you need to quickly verify the presence of an element in an array without needing to know its exact position Let's start with an example of how to use the includes() method:\njs\nlet fruits = [\"apple\", \"banana\", \"orange\", \"mango\"];\nconsole log(fruits includes(\"banana\")); // true\nconsole log(fruits includes(\"grape\"));  // false\nIn this example, we have an array of fruits We use the includes() method to check if banana is in the array It returns true because banana is indeed present We then check for grape, which returns false because it's not in the array The includes() method is case-sensitive when dealing with strings This means that Banana with a capital B and banana with all lowercase letters are considered different values Here's an example that illustrates this:\njs\nlet fruits = [\"apple\", \"banana\", \"orange\"];\nconsole log(fruits includes(\"banana\")); // true\nconsole log(fruits includes(\"Banana\")); // false\nIn this case, banana (all in lowercase) is found in the array, but Banana (with the first letter capitalized) is not, so the second includes() call returns false The includes() method can also accept an optional second parameter that specifies the position in the array to start the search This is useful if you want to check for an element's presence in a specific part of the array Here's how you can use this feature:\njs\nlet numbers = [10, 20, 30, 40, 50, 30, 60];\nconsole log(numbers includes(30, 3)); // true\nconsole log(numbers includes(30, 4)); // true\nFor the first console log, we are looking for the number 30 starting at index 3 In this case, there is a number 30 that appears after index 3, so the includes() method returns true The same is true for the second console log",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b28eeadda1158cdbff7b.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "df9e559cd2e5e760a0236ba20d818563",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b28eeadda1158cdbff7b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the array Here's how you can use this feature: js let numbers = [10, 20, 30, 40, 50, 30, 60]; console log(numbers includes(30, 3)); // true console log(numbers includes(30, 4)); // true For the first console log, we are looking for the number 30 starting at index 3 In this case, there is a number 30 that appears after index 3, so the includes() method returns true The same is true for the second console logWe are looking for the number 30 starting at index 4 Since the number 30 does appear after that index, then it will return true It's worth noting that includes() uses the strict equality comparison (===), which means it can distinguish between different types For example:\njs\nlet mixedArray = [1, \"2\", 3, \"4\", 5];\nconsole log(mixedArray includes(2));  // false\nconsole log(mixedArray includes(\"2\")); // true\nIn this case, the number 2 and the string \"2\" are considered different data types So, the first console log will return false, while the second console log will return true The includes() method is a powerful tool for checking the presence of elements in arrays It's simple to use, efficient, and can save you from writing more complex loops or conditions to search through arrays Whether you're working with strings, numbers, or mixed data types, includes() provides a straightforward way to verify if a value exists in your array --questions--\n--text--\nWhat will be the output of the following code js\nlet arr = [1, 2, 3, 4, 5];\nconsole log(arr includes(3, 3));\n--answers--\ntrue\n--feedback--\nThe second parameter of includes() specifies the starting position for the search false\nundefined\n--feedback--\nThe second parameter of includes() specifies the starting position for the search This will throw an error --feedback--\nThe second parameter of includes() specifies the starting position for the search --video-solution--\n2\n--text--\nWhat will be the output of the following code js\nlet arr = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nconsole log(arr includes(\"C\"));\n--answers--\ntrue\n--feedback--\nRemember that includes() is case-sensitive when dealing with strings",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b28eeadda1158cdbff7b.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a66badaa75705e2001e55b15fcd1ec5c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b28eeadda1158cdbff7b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "specifies the starting position for the search false undefined --feedback-- The second parameter of includes() specifies the starting position for the search This will throw an error --feedback-- The second parameter of includes() specifies the starting position for the search --video-solution-- 2 --text-- What will be the output of the following code js let arr = [\"a\", \"b\", \"c\", \"d\", \"e\"]; console log(arr includes(\"C\")); --answers-- true --feedback-- Remember that includes() is case-sensitive when dealing with stringsfalse\nundefined\n--feedback--\nRemember that includes() is case-sensitive when dealing with strings This will throw an error --feedback--\nRemember that includes() is case-sensitive when dealing with strings --video-solution--\n2\n--text--\nWhat will be the output of the following code js\nlet arr = [1, \"2\", 3, \"4\", 5];\nconsole log(arr includes(\"3\"));\n--answers--\ntrue\n--feedback--\nThe includes() method uses strict equality (===) for comparison false\nundefined\n--feedback--\nThe includes() method uses strict equality (===) for comparison This will throw an error --feedback--\nThe includes() method uses strict equality (===) for comparison --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4905,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b28eeadda1158cdbff7b.md",
      "source_type": "git_repo"
    },
    "token_count": 258,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "43fb3f1c08f3427513f2d824f36515e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b284901f8c1539e20bcb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732b284901f8c1539e20bcb\ntitle: How Do You Add and Remove Elements from the Middle of an Array challengeType: 19\ndashedName: how-do-you-add-remove-elements-from-the-middle-of-an-array\n--description--\nThe splice() method in JavaScript is a powerful way for modifying arrays It allows you to add or remove elements from any position in an array, including the middle The return value for the splice() method will be an array of the items removed from the array If nothing was removed, then an empty array will be returned It is important to note that this method will mutate the original array, modifying it in place rather than creating a new array This is something to be aware of when working with splice() Here is the basic syntax:\njs\narray splice(startIndex, itemsToRemove, item1, item2)\nstartIndex specifies the index at which to begin modifying the array, while itemsToRemove is an optional parameter indicating how many elements to remove If itemsToRemove is omitted, splice() will remove all elements from startIndex to the end of the array The subsequent parameters (item1, item2, and so on) are the elements to be added to the array, beginning at the start index Let's start with an example of removing elements from the middle of an array:\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\", \"mango\", \"kiwi\"];\nlet removed = fruits splice(2, 2);\nconsole log(fruits);  // [\"apple\", \"banana\", \"kiwi\"]\nconsole log(removed); // [\"orange\", \"mango\"]\n```\nIn this example, splice(2, 2) starts at index 2 and removes 2 elements The modified array will now consist of only apple, banana, and kiwi Now, let's look at how to add elements to the middle of an array:\n```js\nlet colors = [\"red\", \"green\", \"blue\"];\ncolors splice(1, 0, \"yellow\", \"purple\");\nconsole log(colors); // [\"red\", \"yellow\", \"purple\", \"green\", \"blue\"]\n```\nHere, splice(1, 0, \"yellow\", \"purple\") starts at index 1, removes 0 elements, and inserts yellow and purple The second parameter (0) means no elements are removed before insertion",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b284901f8c1539e20bcb.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "af6128a8094f8dbb985c2d5acc2563c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b284901f8c1539e20bcb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "elements The modified array will now consist of only apple, banana, and kiwi Now, let's look at how to add elements to the middle of an array: ```js let colors = [\"red\", \"green\", \"blue\"]; colors splice(1, 0, \"yellow\", \"purple\"); console log(colors); // [\"red\", \"yellow\", \"purple\", \"green\", \"blue\"] ``` Here, splice(1, 0, \"yellow\", \"purple\") starts at index 1, removes 0 elements, and inserts yellow and purple The second parameter (0) means no elements are removed before insertionYou can also use splice() to simultaneously remove and add elements:\n```js\nlet numbers = [1, 2, 3, 4, 5];\nnumbers splice(1, 2, 6, 7, 8);\nconsole log(numbers); // [1, 6, 7, 8, 4, 5]\n```\nIn this case, splice(1, 2, 6, 7, 8) starts at index 1, removes 2 elements (2 and 3), and inserts 6, 7, and 8 If you need to keep the original array unchanged, you should create a copy before using splice():\n```js\nlet original = [1, 2, 3, 4, 5];\nlet copy = [ original];\ncopy splice(2, 1, 6);\nconsole log(original); // [1, 2, 3, 4, 5]\nconsole log(copy);     // [1, 2, 6, 4, 5]\n```\nIn this example, to create a copy of the original array without modifying it, we use the spread operator ( ) The spread operator will create a shallow copy of the elements of the original array into a new array You will learn more about this in future lectures When we use copy splice(2, 1, 6), it modifies the copy array by removing the element at index 2 (which is 3) and inserting the new element 6 at that position One common use case for splice() is to remove a single element from an array when you know its index:\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\", \"mango\"];\nlet indexToRemove = fruits indexOf(\"orange\");\nif (indexToRemove",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b284901f8c1539e20bcb.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4a4928e4d813625fcbe4d922940666ec",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b284901f8c1539e20bcb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "array You will learn more about this in future lectures When we use copy splice(2, 1, 6), it modifies the copy array by removing the element at index 2 (which is 3) and inserting the new element 6 at that position One common use case for splice() is to remove a single element from an array when you know its index: ```js let fruits = [\"apple\", \"banana\", \"orange\", \"mango\"]; let indexToRemove = fruits indexOf(\"orange\"); if (indexToRemove== -1) {\nfruits splice(indexToRemove, 1);\n}\nconsole log(fruits); // [\"apple\", \"banana\", \"mango\"]\n```\nIn this example, we first use the indexOf() method to find the index of the element orange in the fruits array The indexOf() method returns the index of the first occurrence of the given element or -1 if the element is not found in the array We then compare indexToRemove with -1 to ensure that the element exists in the array before attempting to remove it If indexToRemove is not equal to -1 (meaning the element is found), we use splice() to remove one element starting from the indexToRemove position You can also use splice() to clear an array by removing all elements:\n```js\nlet array = [1, 2, 3, 4, 5];\narray splice(0);\nconsole log(array); // []\n```\nWhile splice() is powerful, it's worth noting that for very large arrays, it can be less efficient than other methods, especially when modifying the beginning of the array This is because splice() may need to shift all subsequent elements In such cases, if you're only adding or removing elements at the end of the array, methods like push(), pop(), unshift(), and shift() might be more appropriate In conclusion, the splice() method is a versatile way for modifying arrays in JavaScript It allows for precise control over adding and removing elements from any position in an array Understanding how to use splice() effectively can greatly enhance your ability to manipulate arrays in your JavaScript code --questions--\n--text--\nWhat will be the output of the following code js\nlet arr = [1, 2, 3, 4, 5];\narr splice(2, 0, 6, 7);\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b284901f8c1539e20bcb.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "6b638715833f4d2be9b01eca06e981e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b284901f8c1539e20bcb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "more appropriate In conclusion, the splice() method is a versatile way for modifying arrays in JavaScript It allows for precise control over adding and removing elements from any position in an array Understanding how to use splice() effectively can greatly enhance your ability to manipulate arrays in your JavaScript code --questions-- --text-- What will be the output of the following code js let arr = [1, 2, 3, 4, 5]; arr splice(2, 0, 6, 7); consolelog(arr);\n--answers--\n[1, 2, 6, 7, 3, 4, 5]\n[1, 2, 3, 4, 5, 6, 7]\n--feedback--\nConsider what the second parameter (0) means in the splice() method [1, 2, 3, 6, 7, 4, 5]\n--feedback--\nConsider what the second parameter (0) means in the splice() method [1, 2, 6, 7, 4, 5]\n--feedback--\nConsider what the second parameter (0) means in the splice() method --video-solution--\n1\n--text--\nWhich of the following splice() calls would remove the number 3 from the array js\nlet arr = [1, 2, 3, 4, 5];\n--answers--\narr splice(3, 1)\n--feedback--\nRemember, array indices start from 0 arr splice(3, 0)\n--feedback--\nRemember, array indices start from 0 arr splice(2, 1)\narr splice(arr length - 2, 1)\n--feedback--\nRemember, array indices start from 0 --video-solution--\n3\n--text--\nWhat does the splice() method return --answers--\nThe modified array --feedback--\nConsider what information might be useful to have after removing elements from an array The number of elements removed --feedback--\nConsider what information might be useful to have after removing elements from an array An array containing the removed elements undefined\n--feedback--\nConsider what information might be useful to have after removing elements from an array --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b284901f8c1539e20bcb.md",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "2ebdd93c0008a3fb95285b3749d83c1f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b29b8b7d4f15b94d12ca.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732b29b8b7d4f15b94d12ca\ntitle: What Is a Shallow Copy of an Array, and What Are Some Ways to Create These Copies challengeType: 19\ndashedName: what-is-a-shallow-copy-of-an-array-and-what-are-some-ways-to-create-these-copies\n--description--\nA shallow copy of an array is a new array that contains references to the same elements as the original array Creating shallow copies of arrays is a common operation, especially when you want to manipulate an array without modifying the original There are several methods for creating shallow copies of arrays, and we'll explore some of the most common ones: concat(), slice(), and the spread operator Let's start with the concat() method This method creates a new array by merging two or more arrays When used with a single array, it effectively creates a shallow copy Here's an example:\n```js\nlet originalArray = [1, 2, 3];\nlet copyArray = [] concat(originalArray);\nconsole log(copyArray); // [1, 2, 3]\nconsole log(copyArray === originalArray); // false\n```\nIn this example, we are using the concat() method to concatenate an empty array to the originalArray This will create a new array that is a shallow copy of originalArray The copyArray contains the same elements as originalArray, but it is a different array object, which is why the strict equality check (===) returns false Another method to create a shallow copy is the slice() method When called without arguments, slice() returns a shallow copy of the entire array Here's how it works:\n```js\nlet originalArray = [1, 2, 3];\nlet copyArray = originalArray slice();\nconsole log(copyArray); // [1, 2, 3]\nconsole log(copyArray === originalArray); // false\n```\nIn this case, originalArray slice() creates a new array that is a shallow copy of originalArray Again, the copyArray contains the same elements but is a different array object The spread operator ( ), introduced in ES6, provides another concise way to create shallow copies of arrays Here's an example:\n```js\nlet originalArray = [1, 2, 3];\nlet copyArray = [ originalArray];\nconsole log(copyArray); // [1, 2, 3]\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b29b8b7d4f15b94d12ca.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "11887e75da2e1c607dd32e954ac62b77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b29b8b7d4f15b94d12ca.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "console log(copyArray === originalArray); // false ``` In this case, originalArray slice() creates a new array that is a shallow copy of originalArray Again, the copyArray contains the same elements but is a different array object The spread operator ( ), introduced in ES6, provides another concise way to create shallow copies of arrays Here's an example: ```js let originalArray = [1, 2, 3]; let copyArray = [ originalArray]; console log(copyArray); // [1, 2, 3] consolelog(copyArray === originalArray); // false\n```\nThe spread operator ( ) spreads the elements of originalArray into a new array, effectively creating a shallow copy It's important to note that all these methods create new array objects, which means you can modify the copy without affecting the original array For example:\n```js\nlet originalArray = [1, 2, 3];\nlet copyArray = [ originalArray];\ncopyArray push(4);\nconsole log(originalArray); // [1, 2, 3]\nconsole log(copyArray);     // [1, 2, 3, 4]\n```\nIn this example, adding an element to copyArray doesn't affect originalArray In summary, shallow copies of arrays can be easily created using methods like concat(), slice(), or the spread operator These methods are useful for creating new arrays that can be manipulated independently of the original array --questions--\n--text--\nWhat will be the output of the following code js\nlet arr1 = [1, 2, 3];\nlet arr2 = arr1 slice();\narr2 push(4);\nconsole log(arr1, arr2);\n--answers--\n[1, 2, 3] [1, 2, 3, 4]\n[1, 2, 3, 4] [1, 2, 3, 4]\n--feedback--\nThe slice() method creates a shallow copy of the array [1, 2, 3] [1, 2, 3]\n--feedback--\nThe slice() method creates a shallow copy of the array This will throw an error --feedback--\nThe slice() method creates a shallow copy of the array --video-solution--\n1\n--text--\nWhat will be the output of the following code js\nlet fruits = [\"apple\", \"banana\", \"orange\"];\nlet fruitsCopy = [ fruits];\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b29b8b7d4f15b94d12ca.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ed68ee2765688e7f7eb90582352eba82",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b29b8b7d4f15b94d12ca.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "2, 3, 4] [1, 2, 3, 4] --feedback-- The slice() method creates a shallow copy of the array [1, 2, 3] [1, 2, 3] --feedback-- The slice() method creates a shallow copy of the array This will throw an error --feedback-- The slice() method creates a shallow copy of the array --video-solution-- 1 --text-- What will be the output of the following code js let fruits = [\"apple\", \"banana\", \"orange\"]; let fruitsCopy = [ fruits]; consolelog(fruitsCopy length);\n--answers--\n0\n--feedback--\nThe spread operator ( ) creates a shallow copy of the entire array 2\n--feedback--\nThe spread operator ( ) creates a shallow copy of the entire array 3\nundefined\n--feedback--\nThe spread operator ( ) creates a shallow copy of the entire array --video-solution--\n3\n--text--\nWhat will be the output of the following code js\nlet arr1 = [1, 2, 3];\nlet arr2 = [] concat(arr1);\nconsole log(arr1 === arr2);\n--answers--\ntrue\n--feedback--\nThe concat() method creates a new array, even if it's concatenating with an empty array false\nundefined\n--feedback--\nThe concat() method creates a new array, even if it's concatenating with an empty array This will throw an error --feedback--\nThe concat() method creates a new array, even if it's concatenating with an empty array --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4689,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-array-methods\\6732b29b8b7d4f15b94d12ca.md",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "4471427dd7ad54bb3abae5387b014122",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6895d06b5968736797c408e4\ntitle: How Do Dynamic Arrays Differ From Static Arrays challengeType: 19\ndashedName: how-do-dynamic-arrays-differ-from-static-arrays\n--description--\nArrays are a fundamental data structure in computer science All arrays store ordered collections of data, but depending on their type, they may work differently behind the scenes Their underlying behavior can have an important effect in the program's efficiency, so let's learn about dynamic and static arrays and their differences, so you can choose the most efficient one for your program We'll start with static arrays Static arrays have a fixed size They store elements in adjacent memory locations The size of a static array is determined when the array is initialized Once that specific block of memory is allocated, it's fixed, and cannot be changed while the program is running This is a key characteristic of static arrays Storing elements in adjacent memory locations makes the data retrieval process more efficient because the program can store the location of the first element and then use indices to make simple calculations and find the other elements in memory Thanks to this, accessing the values of a static array takes constant time O(1), which is very efficient You can use a static array when you know the number of elements that will be stored in advance It's also helpful when the values will be accessed very frequently, since the access operation is very efficient However, this data structure cannot grow or shrink, so if the number of elements that will be stored can vary, you should use a dynamic array instead Trying to increase the size of a static array would involve creating a new array and copying all the elements from the old array to a new one, which is inefficient In that case, a dynamic array would be much better because it handles this process automatically Python does not include traditional static arrays as built-in data structures But other programming languages, like Java, do support them This is an example of a static array in Java that can store three integers:\njava\nint[] numbers = new int[3];\nArrays in Python are dynamic, so let's take a look at those Dynamic arrays are more flexible because they can grow or shrink automatically while the program is running They work through an automatic resizing mechanism that copies the elements into a new array when the original array is full The process is done efficiently because the size of the new array is chosen in an efficient way that makes these computationally expensive operations less frequent",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7406,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e4.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "c538b6e870ccf33f0ee5e595390f9dbe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Arrays in Python are dynamic, so let's take a look at those Dynamic arrays are more flexible because they can grow or shrink automatically while the program is running They work through an automatic resizing mechanism that copies the elements into a new array when the original array is full The process is done efficiently because the size of the new array is chosen in an efficient way that makes these computationally expensive operations less frequentAccessing the elements of a dynamic array takes constant time O(1), so this operation is very efficient Inserting an element in the middle of the array takes linear time O(n) because the elements after it need to be relocated Inserting an element at the end of the array takes constant time O(1) if there is still space available in the dynamic array, but if the array is full and needs resizing, this operation has a O(n) complexity You should use dynamic arrays when you don't know in advance the number of values that you will need to store in the array They are also helpful when you will be frequently inserting and deleting elements Python's built-in list data structure works as a dynamic array You can create a list by writing the elements within square brackets, separated by commas python\nnumbers = [3, 4, 5, 6]\nYou can access an element by writing the name of the variable that holds the list, followed by square brackets, and within the square brackets, the corresponding index Indices start from 0 for the first element and are incremented by 1 for each subsequent element:\npython\nnumbers[0]  # 3\nnumbers[1]  # 4\nnumbers[2]  # 5\nnumbers[3]  # 6\nTo update a value, you just need to reassign it:\npython\nnumbers[2] = 16\nYou can append elements to the list with the append() method:\npython\nnumbers append(7)\nYou can insert elements at a specific index with the insert() method, passing the index as the first argument and the element itself as the second argument python\nnumbers insert(3, 15)\nYou can remove an element at a specific index with the pop() method:\npython\nnumbers pop(2)\nIf you don't specify the index, pop() will remove the last element There are other built-in list methods that you can check in the documentation for adding and removing elements quite easily That's the power of dynamic arrays, or lists in this case",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7406,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e4.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "5bde62c588251cfb14ab888f1fc30d6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "index as the first argument and the element itself as the second argument python numbers insert(3, 15) You can remove an element at a specific index with the pop() method: python numbers pop(2) If you don't specify the index, pop() will remove the last element There are other built-in list methods that you can check in the documentation for adding and removing elements quite easily That's the power of dynamic arrays, or lists in this caseIn general, you should use static arrays when you know the number of elements in advance and you need to access them frequently, and use dynamic arrays when the number of elements is unknown or variable over time You should always consider the tradeoff between the simplicity of static arrays and the flexibility of dynamic arrays They are both helpful for specific use cases and scenarios Being able to choose the best one for a given problem is part of the problem-solving skills that you will gradually develop with practice --questions--\n--text--\nWhat is the main difference in size between a static array and a dynamic array --answers--\nStatic arrays can change their size after being created, while dynamic arrays cannot --feedback--\nThink about how much space each type of array will require Static arrays have a fixed size, while dynamic arrays can change size during runtime There is no practical difference in how their sizes are handled --feedback--\nThink about how much space each type of array will require Dynamic arrays are always larger than static arrays --feedback--\nThink about how much space each type of array will require --video-solution--\n2\n--text--\nIf you need to add more elements to a static array that is already full, what is the typical process involved --answers--\nThe static array automatically expands its memory to fit the new elements --feedback--\nThink about what is necessary when a container with a fixed capacity runs out of space You must create a new, larger array and copy all existing elements to it The array automatically converts itself into a dynamic array --feedback--\nThink about what is necessary when a container with a fixed capacity runs out of space New elements are simply discarded if the array is full --feedback--\nThink about what is necessary when a container with a fixed capacity runs out of space --video-solution--\n2\n--text--\nIn which scenario would a static array typically be a more suitable choice than a dynamic array --answers--\nWhen the exact number of elements is unknown and changes frequently --feedback--\nThink about the main advantage of a static array related to its size and resource usage",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7406,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e4.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "eafa15c2cbf06b943120ada269dc9eee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "New elements are simply discarded if the array is full --feedback-- Think about what is necessary when a container with a fixed capacity runs out of space --video-solution-- 2 --text-- In which scenario would a static array typically be a more suitable choice than a dynamic array --answers-- When the exact number of elements is unknown and changes frequently --feedback-- Think about the main advantage of a static array related to its size and resource usageWhen you need to store a very large dataset that might grow indefinitely --feedback--\nThink about the main advantage of a static array related to its size and resource usage When you require frequent insertions and deletions at arbitrary positions within the collection --feedback--\nThink about the main advantage of a static array related to its size and resource usage When the data size is fixed and known at the time the program is written --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7406,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e4.md",
      "source_type": "git_repo"
    },
    "token_count": 176,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "33d4decc1b003d4235e7188e12fd7ded",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6895d06b5968736797c408e3\ntitle: What Are Good Problem-Solving Techniques and Ways to Approach Algorithmic Challenges challengeType: 19\ndashedName: what-are-good-problem-solving-techniques-and-ways-to-approach-algorithmic-challenges\n--description--\nDuring your learning journey, you should work on developing strong problem-solving skills These core skills will be essential for tackling real-world problems in your daily work Solving algorithmic challenges is a great way to practice It requires an analytical way of thinking, being able to break the problem down into its core components, and finding a solution that generates the right output efficiently But where do you start There are several problem-solving techniques that you can use to start approaching these challenges As an example, we'll reverse a string in Python This is the challenge:\n\"Given a string, write an algorithm that returns a new string with the characters in reverse order \"\nThe first thing that you should do when you come across this type of problem is to read the description multiple times to make sure that you understand what it says You may miss critical information if you skip this step or read it too fast Then, once you are familiar with the problem, start breaking it down into its core components Ask yourself:\n\"What is the input \"\n\"What is the expected output \"\n\"How can I transform the input into the expected output \"\nIn this problem, you can determine that the input is a string because the challenge starts with \"Given a string…\"\nThe output is \"a new string with the characters in reverse order \"\nSo you need to take the original string and reverse it This initial analysis might seem a bit repetitive at first, but it's very helpful to make sure that you fully understand the requirements Then, you should start thinking about how the algorithm that you will develop will transform the input into the output During this planning and analysis phase, it's common to use pseudocode to map out the necessary steps Pseudocode is a high-level description of the algorithm's logic that is general in nature, and is not based on any specific programming language Pseudocode is not as formal as actual code, since it's only intended for humans to read It should be easy to understand at a glance Its main purpose is to give a clear idea of the sequence of steps that will be performed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e3.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "14782be277b40660cafde3bbb52b3fbc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "common to use pseudocode to map out the necessary steps Pseudocode is a high-level description of the algorithm's logic that is general in nature, and is not based on any specific programming language Pseudocode is not as formal as actual code, since it's only intended for humans to read It should be easy to understand at a glance Its main purpose is to give a clear idea of the sequence of steps that will be performedPseudocode is usually a mixture of a common written language, like English, with programming constructs, like IF, ELSE, FOR, and WHILE This is an example of pseudocode that you may write to solve the \"Reverse a String\" challenge ```md\nGET original_string\nSET reversed_string = \"\"\nFOR EACH character IN original_string:\nADD character TO THE BEGINNING OF reversed_string\nDISPLAY reversed_string\n```\nNote how the steps are outlined in a way that is easy to understand The words and constructs themselves might vary depending on the standards that you are following If you wanted to, you could implement these steps in multiple programming languages following the same logic, since the pseudocode is independent of the programming language By this point, you may have already realized that this problem can be solved in many different ways This isn't the only way to reverse a string But remember that choosing the right algorithm is important In a previous lecture, you learned about algorithmic complexity and why it is important to choose algorithms that are efficient in terms of time and space That's where you will play a vital role as a developer You will need to choose the most efficient algorithm to solve the challenge Thinking through different available algorithms is an important problem-solving skill that you should practice Take a moment to ask yourself if the solution that you are proposing in your pseudocode is the best one or not For example, there are many different algorithms for sorting elements, but some of them are more efficient than others Bubble sort, for example, is very inefficient for sorting large lists, while Quick Sort is usually more efficient For our \"Reverse a String\" challenge, we could use either one of these approaches, assuming that we are planning to implement our algorithm in Python:\nUsing the extended slice syntax [::-1] to get a new reversed string Looping over the characters from left to right and adding the new character to the beginning of the new string Calling the reversed() function to get an iterator with all the characters in reverse order, and then the ““ join() method to concatenate them back into a string",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e3.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4a4ccb1d1588c376df896f4c52bdef6c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "either one of these approaches, assuming that we are planning to implement our algorithm in Python: Using the extended slice syntax [::-1] to get a new reversed string Looping over the characters from left to right and adding the new character to the beginning of the new string Calling the reversed() function to get an iterator with all the characters in reverse order, and then the ““ join() method to concatenate them back into a stringWhich one should you use That's your choice Making these decisions based on your knowledge and experience can make a huge difference in the final performance of your application Consider different approaches, their efficiency, implications, and implementation Ask yourself:\n\"How will I approach this problem \"\n\"What data structures will I use \"\n\"Are the data structures that I chose the most efficient ones for the problem at hand \"\n\"Am I covering all possible edge cases \"\nEdge cases are specific, valid inputs or conditions that occur at the boundaries of what an algorithm should handle For example, in the \"Reverse a String\" challenge, an edge case would be taking an empty string as input Are you handling this correctly If not, consider the best way to handle this edge case and add it to your pseudocode Then, once you are happy with your plan, you can move on to the implementation phase At this phase, you will implement your algorithm in a programming language When structuring your program, you should write modular code that is easy to read and understand Use the tools of the programming language based on your current knowledge Some programming languages include built-in solutions for common problems and tasks Use them if possible To be consistent, follow the best practices of the programming language of your choice Test your code as you write it and make sure that you are handling edge cases appropriately Once your solution is implemented, check if it works correctly for all the examples and potentially refactor your code to make it clearer or simpler Going back to your solution is very important Development is not necessarily a linear, step-by-step process You can always go back to your code and use your critical thinking skills to improve it These are some common problem-solving techniques that you can follow to approach algorithmic challenges If you practice consistently, you will gradually develop your problem-solving skills --questions--\n--text--\nWhich of the following is the most important first step when approaching any problem-solving challenge --answers--\nUnderstand the problem statement, inputs, and constraints Search for existing solutions online --feedback--\nWhat should you do before you even think about solutions Immediately start writing code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e3.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "eafbeb6961e7938fd9a46548b32946a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "critical thinking skills to improve it These are some common problem-solving techniques that you can follow to approach algorithmic challenges If you practice consistently, you will gradually develop your problem-solving skills --questions-- --text-- Which of the following is the most important first step when approaching any problem-solving challenge --answers-- Understand the problem statement, inputs, and constraints Search for existing solutions online --feedback-- What should you do before you even think about solutions Immediately start writing code--feedback--\nWhat should you do before you even think about solutions Guess a solution and then try to make it work --feedback--\nWhat should you do before you even think about solutions --video-solution--\n1\n--text--\nWhat is the main purpose of writing pseudocode when solving an algorithmic challenge --answers--\nTo write the final, executable version of the code --feedback--\nThink about what pseudocode helps you do before you start writing code To test the algorithm's performance and find bugs --feedback--\nThink about what pseudocode helps you do before you start writing code To outline the algorithm's logic in a human-readable, language-agnostic way To automatically generate the actual code for the solution --feedback--\nThink about what pseudocode helps you do before you start writing code --video-solution--\n3\n--text--\nBefore writing the final code for an algorithmic challenge, why is it important to consider edge cases --answers--\nEdge cases are always the easiest parts of the problem to solve --feedback--\nThink about what kind of inputs might cause unexpected behavior if they are not specifically considered, even if they are valid They help ensure the algorithm works correctly for all valid inputs They are only relevant for very simple problems --feedback--\nThink about what kind of inputs might cause unexpected behavior if they are not specifically considered, even if they are valid They make the code shorter --feedback--\nThink about what kind of inputs might cause unexpected behavior if they are not specifically considered, even if they are valid --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8836,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e3.md",
      "source_type": "git_repo"
    },
    "token_count": 395,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "0976ffcdbe382779e26313ad026f6b2c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\68420c314cdf5c6863ca8330.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 68420c314cdf5c6863ca8330\ntitle: What Is an Algorithm and How Does Big O Notation Work challengeType: 19\ndashedName: what-is-an-algorithm-and-how-does-big-o-notation-work\n--description--\nEvery computer program that runs on your device has a specific set of instructions, which are executed in a specific order to complete a task The task could be sorting a set of numbers, modifying an image, tracking inventory, or even running your favorite video game This is where algorithms come into play An algorithm is a set of unambiguous instructions for solving a problem or carrying out a task You can think of algorithms as \"recipes\" When you cook, recipes list all the ingredients that you'll need, and provide step by step instructions on how to prepare a dish Equivalently, you can think of algorithms as \"recipes\" that tell computers exactly what should be done and how to do it Algorithms have two key characteristics:\nThey cannot continue indefinitely They must finish in a finite number of steps Each step must be precise and unambiguous They may have zero, one, or more inputs, and generate one or more outputs The steps of an algorithm are independent from any programming language But to actually make them run on a computer, you need to implement them in a programming language, like Python or JavaScript If an algorithm is correct, the output for any valid input should match the expected output In addition to being correct, algorithms should also be efficient Algorithm efficiency can be measured in terms of how long they take to run and how much space they require in memory to complete the task Knowing an algorithm's efficiency is very important because it gives you an idea of how well it will perform as the input size grows For example, sorting 15 integers is not the same as sorting 1 million integers As the process grows in size and complexity, if the algorithm is not efficient enough to handle it, you might end up with a very slow computer program that may even crash the entire system That's why it's very important to develop and choose the most efficient algorithms possible This is where Big O notation becomes very important Big O notation describes the worst-case performance, or growth rate, of an algorithm as the input size increases The growth rate of an algorithm refers to how the resources it requires increase as the input size grows",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10898,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\68420c314cdf5c6863ca8330.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "9da682b71e52cff93c80e5d86cdddac0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\68420c314cdf5c6863ca8330.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "might end up with a very slow computer program that may even crash the entire system That's why it's very important to develop and choose the most efficient algorithms possible This is where Big O notation becomes very important Big O notation describes the worst-case performance, or growth rate, of an algorithm as the input size increases The growth rate of an algorithm refers to how the resources it requires increase as the input size growsBig O notation focuses on the worst-case performance because this case is very important to understand how efficient the algorithm can be, even in the worst case scenario, regardless of the input Going back to our sorting example, sorting 1 million integers should intuitively take more time and resources than sorting 15 integers But how much more This really depends on the algorithm that you choose to sort them Big O notation will not give you an exact number to describe the algorithm's efficiency, but it will give you an idea of how it scales as the input size grows, based on the number of operations performed by the algorithm In Big O notation, we usually denote input size with the letter n For example, if the input is a list, n would denote the number of elements in that list Constant factors and lower-order terms are not taken into account to find the time complexity of an algorithm based on the number of operations That's because as the size of n grows, the impact of these smaller terms in the total number of operations performed will become smaller and smaller The term that will dominate the overall behavior of the algorithm will the term with n, the input size For example, if an algorithm performs 7n + 20 operations to be completed, the impact of the constant 20 on the final result will be smaller and smaller as n grows The term 7n will tend to dominate and this will define the overall behavior and efficiency of the algorithm Another example would be an algorithm that takes 20n² + 15n + 7 operations to be completed The term 20n² will tend to dominate as n grows, so this algorithm would have a quadratic time complexity because the dominant term has n² Quadratic time complexity is one of many different types of time complexities that you can find in the world of algorithms Let's learn about some of the most common ones O(1) is known as \"Constant Time Complexity\" When an algorithm has constant time complexity, it takes the same amount of time to run, regardless of input size",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10898,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\68420c314cdf5c6863ca8330.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "19edf68aa07f305e375b9961eb3b83c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\68420c314cdf5c6863ca8330.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "dominate as n grows, so this algorithm would have a quadratic time complexity because the dominant term has n² Quadratic time complexity is one of many different types of time complexities that you can find in the world of algorithms Let's learn about some of the most common ones O(1) is known as \"Constant Time Complexity\" When an algorithm has constant time complexity, it takes the same amount of time to run, regardless of input sizeFor example, checking if a number is even or odd will always take the same amount of time, regardless of the number itself python\ndef check_even_or_odd(number):\nif number % 2 == 0:\nreturn 'Even'\nelse:\nreturn 'Odd'\nO(log n) is known as \"Logarithmic Time Complexity\" This means that the time required by the algorithm increases slowly as the input size grows This is common in problems in which the size of the problem is repeatedly reduced by a constant fraction For example, a popular search algorithm called Binary Search has O(log n) worst-case time complexity This is because it eliminates half of the remaining elements in each comparison, which makes it more efficient overall O(n) is known as \"Linear Time Complexity\" The running time of algorithms with this time complexity increases proportionally to the input size For example, a for loop that iterates over all the elements of a list will perform more iterations as the number of list elements increases If the list is doubled in size, the number of operations will approximately double as well python\nfor grade in grades:  # grades is a list print(grade)\nO(n log n) is known as \"Log-Linear Time Complexity\" This is a common time complexity of efficient sorting algorithms, like Merge Sort and Quick Sort O(n²) is known as \"Quadratic Time Complexity\" The running time of these algorithms increases quadratically relative to the input size, which is generally not efficient for real-world problems Nested loops are a common example of quadratic time complexity The inner loop will perform n iterations for each one of the n iterations of the outer loop, resulting in n squared iterations python\nfor i in range(n):\nfor j in range(n):\nprint(\"Hello, World \")\nOther time complexities include \"Exponential Time Complexity\", denoted as O(2^n), and \"Factorial Time Complexity\", denoted as O(n ) Both are inefficient for real-world scenarios In this graph, you can compare the growth of the mathematical functions that represent the most common time complexities",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10898,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\68420c314cdf5c6863ca8330.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "fea0b445511d0305e70249d4e9160b2f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\68420c314cdf5c6863ca8330.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "loop will perform n iterations for each one of the n iterations of the outer loop, resulting in n squared iterations python for i in range(n): for j in range(n): print(\"Hello, World \") Other time complexities include \"Exponential Time Complexity\", denoted as O(2^n), and \"Factorial Time Complexity\", denoted as O(n ) Both are inefficient for real-world scenarios In this graph, you can compare the growth of the mathematical functions that represent the most common time complexitiesThink of the x-axis (horizontal) as the input size and the y-axis (vertical) as the running time of the algorithm You can see that the Quadratic Time Complexity (O(n²)) (yellow) grows much faster than the other ones, while the Constant Time Complexity (O(1)) (red) stays constant, even if the input gets larger Great So far, you've learned about Big O notation in terms of time requirements, but this notation can also be applied to the context of space requirements In this context, it describes how the memory space required by the algorithm grows as the input size grows Algorithms with \"Constant Space Complexity\" O(1) always require a constant amount of memory space, even as the input gets larger An example would be an algorithm that only creates and stores a few variables in memory In contrast, the space required by algorithms with \"Linear Space Complexity\" O(n) increases proportionally as the input size grows An example of this would be an algorithm that creates and stores a copy of a list of length n And finally, the space requirements of an algorithm with \"Quadratic Space Complexity\" O(n²) increase quadratically as the input size grows An example of this would be creating a 2D matrix, where the dimensions are determined by the input size, storing all possible pairs Algorithms are the building-blocks of computer programs, while Big O notation is a powerful framework for analyzing how efficient they are, based on how their time and space requirements in the worst-case scenario scale as the input size grows Understanding their efficiency is very important for developing software that works efficiently in real-world scenarios --questions--\n--text--\nWhich of the following best describes an algorithm --answers--\nA specific programming language used to write code --feedback--\nThink about what you follow when you're trying to achieve a specific task A set of step-by-step instructions designed to solve a problem or perform a task A type of computer hardware component",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10898,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\68420c314cdf5c6863ca8330.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "16590396fba5826dd93e7356ac6215b4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\68420c314cdf5c6863ca8330.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "worst-case scenario scale as the input size grows Understanding their efficiency is very important for developing software that works efficiently in real-world scenarios --questions-- --text-- Which of the following best describes an algorithm --answers-- A specific programming language used to write code --feedback-- Think about what you follow when you're trying to achieve a specific task A set of step-by-step instructions designed to solve a problem or perform a task A type of computer hardware component--feedback--\nThink about what you follow when you're trying to achieve a specific task A software application used for developing and playing games --feedback--\nThink about what you follow when you're trying to achieve a specific task --video-solution--\n2\n--text--\nWhat is the primary purpose of Big O notation in the context of algorithms --answers--\nTo measure the exact time an algorithm takes to run on a specific computer in seconds --feedback--\nThink about what Big O notation helps you understand an algorithm's performance when the amount of data it processes gets very large To count the total number of lines of code in an algorithm --feedback--\nThink about what Big O notation helps you understand an algorithm's performance when the amount of data it processes gets very large To describe how the resource usage of an algorithm grows as the input size increases To determine the best-case performance of an algorithm --feedback--\nThink about what Big O notation helps you understand an algorithm's performance when the amount of data it processes gets very large --video-solution--\n3\n--text--\nIf an algorithm has a time complexity of O(n), what does this mean about its performance --answers--\nThe algorithm's running time increases proportionally with the input size The algorithm's running time remains constant regardless of the input size --feedback--\nThink about what \"linear\" means in terms of a direct relationship or a straight line on a graph The algorithm's running time grows exponentially with the input size --feedback--\nThink about what \"linear\" means in terms of a direct relationship or a straight line on a graph The algorithm's running time decreases as the input size gets larger --feedback--\nThink about what \"linear\" means in terms of a direct relationship or a straight line on a graph --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10898,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\68420c314cdf5c6863ca8330.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "8238d53695137c7b105f0d2ff21d6b31",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6895d06b5968736797c408e5\ntitle: How Do Stacks and Queues Work challengeType: 19\ndashedName: how-do-stacks-and-queues-work\n--description--\nStacks and queues are data structures commonly used in computer science They're linear data structures that follow specific rules for adding and removing elements Stacks\nLet's start with Stacks A stack is a Last-in, First-out (LIFO) data structure This means that the last element that was added to the stack is the first one to be removed Stacks have two ends, which we know as top and bottom Elements are added and removed from the top of the stack You can think of a stack as a pile of dishes, where you can only place dishes at the top of the pile and take dishes from the top of the pile These operations of adding and removing elements have special names in this context Adding an element to a stack is known as a \"push\" operation We say that we \"push\" an element onto the stack when we add it to the top of the stack Removing an element from a stack is known as a \"pop\" operation We say that we \"pop\" an element from the stack when we remove it from the top of the stack You can see that we don't really perform any operations at the bottom of the stack but we keep it there as a reference The time complexity of the push and pop operations is typically O(1), a constant time complexity When you push an element onto the stack, the element is simply added to the top When you pop an element form the stack, the element at the top is removed Therefore, the time it takes to perform these operations remains constant regardless of the size of the stack The space complexity of the push and pop operations is usually constant O(1) This means that the amount of memory required to perform these operations remains constant regardless of the size of the stack Queues\nNow that you know more about stacks, let's learn about Queues A queue is a First-in First-out (FIFO) linear data structure This means that the first element added to the queue is the first one to be removed Queues have two ends: front and back Elements are added to the back of the queue and they are removed from the front of the queue You can think of a queue as a line of people waiting to pay for their groceries at the supermarket",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5872,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e5.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "32d084bf4d127dd6e0da31256c04b517",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "learn about Queues A queue is a First-in First-out (FIFO) linear data structure This means that the first element added to the queue is the first one to be removed Queues have two ends: front and back Elements are added to the back of the queue and they are removed from the front of the queue You can think of a queue as a line of people waiting to pay for their groceries at the supermarketThe first person in line is the first one to go to the cash register while new people join the line at the end The operations of adding and removing elements have special names in the context of a queue Adding an element to the back of a queue is known as an \"enqueue\" operation In an enqueue operation, the new element is added to the end of the queue, becoming the end of the line Removing an element from the front of the queue is known as a \"dequeue\" operation In the dequeue operation, the element at the front of the queue is removed, and the next element in line becomes the new front The time complexity of the enqueue and dequeue operations is O(1), constant time The time it takes to perform these operations remains constant, regardless of the size of the queue The space complexity of the enqueue and dequeue operations is usually constant O(1) This means that the amount of memory required to perform these operations remains constant regardless of the size of the queue Stacks and queues are data structures used in computer science for organizing and managing elements Understanding them is essential for building efficient algorithms in various programming applications --questions--\n--text--\nWhat is the primary difference between a stack and a queue --answers--\nStacks are LIFO, while queues are FIFO Stacks are FIFO, while queues are LIFO --feedback--\nThink about the order in which elements are added and removed from each data structure Stacks are used for storing data, while queues are used for processing data --feedback--\nThink about the order in which elements are added and removed from each data structure There is no difference between stacks and queues --feedback--\nThink about the order in which elements are added and removed from each data structure --video-solution--\n1\n--text--\nWhich operation is used to add an element to a stack --answers--\npush\npop\n--feedback--\nThink about the analogy of a stack of plates enqueue\n--feedback--\nThink about the analogy of a stack of plates dequeue\n--feedback--\nThink about the analogy of a stack of plates",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5872,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e5.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "0f0221d1387d49de77843f30ccb259cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "each data structure There is no difference between stacks and queues --feedback-- Think about the order in which elements are added and removed from each data structure --video-solution-- 1 --text-- Which operation is used to add an element to a stack --answers-- push pop --feedback-- Think about the analogy of a stack of plates enqueue --feedback-- Think about the analogy of a stack of plates dequeue --feedback-- Think about the analogy of a stack of plates--video-solution--\n1\n--text--\nWhich operation is used to remove an element from a queue --answers--\npush\n--feedback--\nThink about the analogy of a line of people waiting pop\n--feedback--\nThink about the analogy of a line of people waiting enqueue\n--feedback--\nThink about the analogy of a line of people waiting dequeue\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5872,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e5.md",
      "source_type": "git_repo"
    },
    "token_count": 170,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1c27cec5a926d5223d27b8ac1e88d4c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-comparison-and-boolean-operators\\673271c7581a27d9dd78f6d6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673271c7581a27d9dd78f6d6\ntitle: What Are Booleans, and How Do They Work with Equality and Inequality Operators challengeType: 19\ndashedName: what-are-booleans-and-how-do-they-work-with-equality-and-inequality-operators\n--description--\nIn an earlier lecture, you were first introduced to the concept of booleans, but in this lecture, we will dive deeper into how booleans work and how the equality and inequality operators work Booleans are a data type with only true and false values They're useful because they allow you to do something based on some conditions Booleans are essential when you want to evaluate whether something should happen or not, like deciding if someone can access a certain feature in your app Here is an example of setting the value true to a variable called isOldEnoughToDrive:\n```js\nlet isOldEnoughToDrive = true;\nconsole log(isOldEnoughToDrive); // true\n```\nYou can use this variable inside a conditional like this:\n```js\nlet isOldEnoughToDrive = true;\nif (isOldEnoughToDrive) {\nconsole log(\"You're old enough to drive\"); // You're old enough to drive\n} else {\nconsole log(\"Sorry, you are not old enough to drive\");\n}\n```\nA conditional helps you make decisions in your code based on a condition This example uses what is called an if/else statement If isOldEnoughToDrive is true, then the sentence You're old enough to drive will be logged to the console Otherwise, if the isOldEnoughToDrive is false, then the sentence Sorry, you are not old enough to drive will be logged to the console Since the isOldEnoughToDrive variable is set to true, the first sentence will be logged to the console You will learn more about if/else statements in a future lecture To compare two values, you can use either the equality or strict equality operator The result of the comparison will be a boolean of either true or false Here is an example of using the equality operator to compare a string and a number The equality operator is represented by a double equals sign (==) js\nconsole log(5 == \"5\"); // true\nIn this example, JavaScript converts the string \"5\" into the number 5 and then checks if they are equal Since both values are now the same, the result is true",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5909,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-comparison-and-boolean-operators\\673271c7581a27d9dd78f6d6.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "109a007942bc9e619f84f0e29472720a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-comparison-and-boolean-operators\\673271c7581a27d9dd78f6d6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of the comparison will be a boolean of either true or false Here is an example of using the equality operator to compare a string and a number The equality operator is represented by a double equals sign (==) js console log(5 == \"5\"); // true In this example, JavaScript converts the string \"5\" into the number 5 and then checks if they are equal Since both values are now the same, the result is trueThe equality operator uses type coercion before checking if each value is equal This differs from the strict equality operator, which does not perform type coercion The strict equality operator will check if the types are the same and if the values are the same Here is an example using the strict equality operator to compare a number and string This operator is represented by a triple equals sign (===) js\nconsole log(5 === '5'); // false\nThe following comparison will be false, because a string data type is not the same as a number data type If you need to check if something is not equal to another value, then you can use the inequality or strict inequality operators Here is an example of using the inequality operator ( =) to compare a number with a string js\nconsole log(5 = \"5\"); // false\nIn this example, the result would be false because the inequality operator first converts the string value to a number and then compares the values Since the values would be the same it will return false If you tried to use the strict inequality operator, then you would get a different result The strict inequality operator is represented by an exclamation mark followed by two equal signs ( ==) js\nconsole log(5 == \"5\"); // true\nThe result would be true because the strict inequality operator does not perform any type coercion Since the number 5 is not equal to the string \"5\", then the result is true It is considered best practice to use strict inequality and equality operators whenever possible, as they do not perform type coercion Most of the time in professional projects, you will see codebases that usually prefer these two operators over the inequality and equality operators --questions--\n--text--\nWhat is the primary use of booleans in JavaScript --answers--\nTo store numbers and strings --feedback--\nThink about values that help determine outcomes in code To perform arithmetic operations --feedback--\nThink about values that help determine outcomes in code To represent true or false values and make decisions based on conditions\nTo loop through arrays --feedback--\nThink about values that help determine outcomes in code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5909,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-comparison-and-boolean-operators\\673271c7581a27d9dd78f6d6.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "468bdca65e43eeb443f4125519171065",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-comparison-and-boolean-operators\\673271c7581a27d9dd78f6d6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "these two operators over the inequality and equality operators --questions-- --text-- What is the primary use of booleans in JavaScript --answers-- To store numbers and strings --feedback-- Think about values that help determine outcomes in code To perform arithmetic operations --feedback-- Think about values that help determine outcomes in code To represent true or false values and make decisions based on conditions To loop through arrays --feedback-- Think about values that help determine outcomes in code--video-solution--\n3\n--text--\nWhy is it a good idea to use strict equality (===) instead of regular equality (==) in JavaScript --answers--\nIt converts data types automatically --feedback--\nThink about how strict equality handles data types compared to regular equality It allows you to compare different types without issues --feedback--\nThink about how strict equality handles data types compared to regular equality It checks both value and type, providing more predictable results It is faster than regular equality --feedback--\nThink about how strict equality handles data types compared to regular equality --video-solution--\n3\n--text--\nWhat happens when you use regular equality (==) in JavaScript --answers--\nIt only compares the values without any type conversion --feedback--\nThink about how JavaScript handles different types with regular equality It performs type coercion, converting values to the same type before comparing them It checks both value and type, like strict equality (===) --feedback--\nThink about how JavaScript handles different types with regular equality It throws an error if the types don't match --feedback--\nThink about how JavaScript handles different types with regular equality --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5909,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-comparison-and-boolean-operators\\673271c7581a27d9dd78f6d6.md",
      "source_type": "git_repo"
    },
    "token_count": 316,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ef79d50ae0f8d990f52b0a98ff59b19f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6895d06b5968736797c408e6\ntitle: How Do Singly Linked Lists Work and How Do They Differ From Doubly Linked List challengeType: 19\ndashedName: how-do-singly-linked-lists-work-and-how-do-they-differ-from-doubly-linked-list\n--description--\nA linked list is a linear data structure in which each node is connected to the next node in the sequence These connections create a data structure that looks like a chain of nodes, where each node stores data and a reference to the next node in the linked list We use these references to go from the first node to the next node and so on Linked lists are commonly used for implementing other data structures, such as stacks, queues, and deques They can also be used to implement essential graph algorithms, such as depth-first search and breadth-first search Singly Linked Lists\nA singly linked list is a type of linked list in which each node is connected to the next node in the sequence Each node is connected to the next one by storing a reference to it This single reference per node allows you to traverse the linked list in one direction, from start to end The search can only move forward, not backwards In this example, you would start at the head node, node A The head node is the first node in the linked list In a singly linked list, the head node is usually the only node that is directly accessible This is where the search process will start when you're trying to find a specific node The process will start at node A, then it will continue to node B, then node C, and finally node D, the tail node It may also stop before that if you implement specific logic in your code The tail node is the last node It's used to determine when the process has reached the end of the linked list Inserting Nodes\nOne of the great things about linked lists is that they do not have a fixed size They can be expanded or shrunk as needed by simply updating the connections between the nodes You can insert a node at the start, middle, and end of a linked list Linked lists don't necessarily need to store the nodes in a specific order The order will be determined by the connections between the nodes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10717,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e6.md",
      "source_type": "git_repo"
    },
    "token_count": 456,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "4a7319c78f1fe7574b8006ed6a96c73e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "linked list Inserting Nodes One of the great things about linked lists is that they do not have a fixed size They can be expanded or shrunk as needed by simply updating the connections between the nodes You can insert a node at the start, middle, and end of a linked list Linked lists don't necessarily need to store the nodes in a specific order The order will be determined by the connections between the nodesHowever, if you do need to keep the nodes in a specific order for your particular use case, you can do so by implementing that logic in your code and the criteria you implement will determine if the node is inserted at the start, middle, or end To insert a node at the start of the linked list, you just need to create a connection between the new node and the node that used to be the head node and make the new node the head node instead This is an example, where we insert node E at the start and make this new node the head node of the linked list Inserting a node at the beginning of the linked list has a constant time complexity O(1) because it only requires updating the reference to the head node and the connection between the new head node and the next node in the sequence In this example, we are inserting node E at the start of the linked list This will work correctly But if we wanted to keep the linked list sorted in alphabetical order, node E would have to be inserted at the end of the linked list instead To insert a node at the end of the linked list, first you need to reach the end and then add a connection to the new node to make it the new tail node This operation has linear time complexity, O(n), where n is the number of nodes stored in the linked list, because first you need to reach the end of the linked list to make the insertion and this would require going from one node to the next and so on until the end is reached If the node has to be inserted somewhere in the middle of the linked list, the connections between the nodes will have to be updated too The previous node in the sequence should be connected to the new node and the new node should be connected to the next node, like in the following diagram The insertion operation has a constant space complexity O(1), since inserting a new node only requires creating it and updating the connections between the nodes This operation doesn't depend on the size of the linked list itself",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10717,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e6.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "38f60ea526adc0cbc526c6621e3ea371",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "connections between the nodes will have to be updated too The previous node in the sequence should be connected to the new node and the new node should be connected to the next node, like in the following diagram The insertion operation has a constant space complexity O(1), since inserting a new node only requires creating it and updating the connections between the nodes This operation doesn't depend on the size of the linked list itselfRemoving Nodes\nJust as you can insert nodes, you can also remove them from the start, middle, and end of the linked list To remove a node from the start, you need to update the reference to the head node, which should be the next node in the sequence This operation has a constant time complexity O(1), because it only requires updating the linked list's reference to the head node To remove a node from the middle of the linked list, you need to update the reference of the previous node to connect it to the next node in the sequence, forming a sort of \"bridge\" between them, as you can see in this diagram That will remove the node that you want to remove, in this case node B, from the sequence of connections, so it won't be reached the next time you traverse it To remove a node from the end of the linked list, you need to remove the connection of the previous node and make this node the new tail node Now the linked list will end at the new tail node This operation has a linear time complexity O(n), because first you have to reach the end of the linked list The deletion operation has a constant space complexity O(1), because no additional memory is required to delete a node Doubly Linked Lists\nNow that you know more about singly linked lists, let's talk about doubly linked lists In a doubly linked list, each node stores two references: a reference to the next node and a reference to the previous node in the sequence This means that doubly linked lists can be traversed in both directions In this type of linked list, it's also common to keep a reference to the tail node in the linked list itself to start the traversal from the end if necessary That sounds great, right They're more flexible than singly linked lists However, doubly linked lists do require more memory than singly linked lists because each node stores two references instead of one This is something that you should keep in mind when you're choosing the right data structure for your project There is a tradeoff The insertion and deletion operations work exactly the same",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10717,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e6.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "3416b5807a73630a1fad463a2b352816",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "linked list itself to start the traversal from the end if necessary That sounds great, right They're more flexible than singly linked lists However, doubly linked lists do require more memory than singly linked lists because each node stores two references instead of one This is something that you should keep in mind when you're choosing the right data structure for your project There is a tradeoff The insertion and deletion operations work exactly the sameThe only difference is that now you will need to update two references per node and keep track of the reference to the tail node to insert elements at the end of the doubly linked list very efficiently and start the traversal process from the back, if necessary Singly and doubly linked lists are essential data structures in computer science used for storing and manipulating elements in a sequential order Understanding their differences is essential for choosing the right one for your specific application --questions--\n--text--\nWhat is a linked list --answers--\nA data structure that stores elements in a contiguous block of memory --feedback--\nThink about how nodes are connected in a linked list A data structure where nodes are connected using references A data structure that is always sorted --feedback--\nThink about how nodes are connected in a linked list A data structure that has a fixed size --feedback--\nThink about how nodes are connected in a linked list --video-solution--\n2\n--text--\nWhat is the difference between a singly linked list and a doubly linked list --answers--\nSingly linked lists have a head and tail node, while doubly linked lists do not --feedback--\nThink about the references contained in each type of linked list Singly linked lists can only be traversed in one direction, while doubly linked lists can be traversed in both directions Singly linked lists are more efficient to insert elements at the end, while doubly linked lists are more efficient to insert elements at the beginning --feedback--\nThink about the references contained in each type of linked list Singly linked lists require more memory than doubly linked lists --feedback--\nThink about the references contained in each type of linked list --video-solution--\n2\n--text--\nWhat is the time complexity of inserting a node at the beginning of a singly linked list --answers--\nO(1)\nO(n)\n--feedback--\nThink about the number of operations required to insert a node at the beginning of the linked list O(n^2)\n--feedback--\nThink about the number of operations required to insert a node at the beginning of the linked list",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10717,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e6.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "6a636cd163092240fbe315feaaa6a952",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "linked lists --feedback-- Think about the references contained in each type of linked list --video-solution-- 2 --text-- What is the time complexity of inserting a node at the beginning of a singly linked list --answers-- O(1) O(n) --feedback-- Think about the number of operations required to insert a node at the beginning of the linked list O(n^2) --feedback-- Think about the number of operations required to insert a node at the beginning of the linked listO(log n)\n--feedback--\nThink about the number of operations required to insert a node at the beginning of the linked list --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10717,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e6.md",
      "source_type": "git_repo"
    },
    "token_count": 131,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "d32bdca77cd8b7ff313ca240646cf72b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-comparison-and-boolean-operators\\673271dffbc34fda31da9515.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673271dffbc34fda31da9515\ntitle: What Are Comparison Operators, and How Do They Work challengeType: 19\ndashedName: what-are-comparison-operators-and-how-do-they-work\n--description--\nComparison operators allow you to compare two values and return a true or false result You can then use the result to make a decision or control the flow of your program You use comparisons in if statements, loops, and many other situations where you need to make decisions based on certain conditions Let's dive into the most common comparison operators and see how they work The greater than operator, represented by a right-angle bracket (>), checks if the value on the left is greater than the one on the right:\n```js\nlet a = 6;\nlet b = 9;\nconsole log(a > b); // false\nconsole log(b > a); // true\n```\nThe greater than or equal operator, represented by a right-angle bracket and the equals sign (>=), checks if the value on the left is either greater than or equal to the one on the right:\n```js\nlet a = 6;\nlet b = 9;\nlet c = 6;\nconsole log(a >= b); // false\nconsole log(b >= a); // true\nconsole log(a >= c); // true\n```\nThe lesser than operator, represented by a left-angle bracket (<) works similarly to >, but in reverse It checks if the value on the left is smaller than the one on the right:\n```js\nlet a = 6;\nlet b = 9;\nconsole log(a < b); // true\nconsole log(b < a); // false\n```\nThe less than or equal operator, represented by a left-angle bracket and the equals sign (<=) checks if the value on the left is smaller than or equal to the one on the right:\n```js\nlet a = 6;\nlet b = 9;\nlet c = 6;\nconsole log(a <= b); // true\nconsole log(b <= a); // false\nconsole log(a <= c); // true\n```\n--questions--\n--text--\nWhat does the greater than or equals (>=) operator do in JavaScript --answers--\nIt checks if the value on the left is strictly greater than the one on the right --feedback--\nThink about how the greater than or equals operator combines two comparisons into one",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3472,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-comparison-and-boolean-operators\\673271dffbc34fda31da9515.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "59a7667be747f9d11c4e8345597984c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-comparison-and-boolean-operators\\673271dffbc34fda31da9515.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "= 6; let b = 9; let c = 6; console log(a <= b); // true console log(b <= a); // false console log(a <= c); // true ``` --questions-- --text-- What does the greater than or equals (>=) operator do in JavaScript --answers-- It checks if the value on the left is strictly greater than the one on the right --feedback-- Think about how the greater than or equals operator combines two comparisons into oneIt checks if the value on the left is either greater than or equal to the one on the right It checks if the value on the right is greater than the one on the left --feedback--\nThink about how the greater than or equals operator combines two comparisons into one It checks if both values are equal --feedback--\nThink about how the greater than or equals operator combines two comparisons into one --video-solution--\n2\n--text--\nWhere would you typically use comparison operators in JavaScript --answers--\nOnly in arithmetic operations --feedback--\nThink about when you need to check conditions in your code In if statements, loops, and other situations requiring decisions based on conditions Only when working with strings --feedback--\nThink about when you need to check conditions in your code When defining functions --feedback--\nThink about when you need to check conditions in your code --video-solution--\n2\n--text--\nWhich two operators in JavaScript avoid type coercion --answers--\n== and = --feedback--\nThink about the operators that compare both value and type === and == > and < --feedback--\nThink about the operators that compare both value and type <= and >= --feedback--\nThink about the operators that compare both value and type --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3472,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-comparison-and-boolean-operators\\673271dffbc34fda31da9515.md",
      "source_type": "git_repo"
    },
    "token_count": 343,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "e50fa24e39f2608ddb8e39fa3a35b5c8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6895d06b5968736797c408e7\ntitle: How Do Maps, Hash Maps and Sets Work challengeType: 19\ndashedName: how-do-maps-hash-maps-and-sets-work\n--description--\nIn this lecture, we'll go over maps, hash maps, and sets But before we do that, let's define Abstract Data Types An Abstract Data Type (ADT) is a conceptual representation of a data type, including what operations can be performed on the data and the properties of that data Abstract Data Types are like blueprints that describe what operations can be performed, not how they are performed They separate the interface from the actual implementation of the operations A map is an ADT that manages collections of key-value pairs and their operations in a very specific and efficient way In a map, every value is associated with a specific key One of the key characteristics of maps is that every key must be unique This uniqueness allows for direct lookups, which makes the process of retrieving information much more efficient Only keys must be unique, values can be repeated The map Abstract Data Type also defines important operations, such as inserting key-value pairs, getting the value associated with a key, updating the value associated with a key, removing a key-value pair, and checking if a key exists in the map It doesn't actually specify how these operations should be performed, it just lists them as part of the available operations of the data type A hash map, also known as a hash table, is a concrete implementation of the map Abstract Data Type Hash maps use a technique called \"hashing\" to perform common operations very efficiently Hashing essentially works by generating a hash value for each element using a hash function The hash value is generated based on the key of the key-value pair and it's used to calculate an index in an underlying array, the actual data structure where the key-value pairs are stored But you might be asking yourself: What happens if two keys result in the same index Hash maps solve these collisions with clever strategies One option is to use the \"chaining\" strategy, where each array index points to a linked list (another data structure), where all the elements with the same index are stored Another strategy is to use \"open addressing\", which involves searching for the next available index in the array based on a predefined search sequence The average case time complexity of hash maps is \"Constant Time\" O(1) for inserting, retrieving, and deleting key-value pairs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11097,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e7.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "debae6683b8fe77d1289c1b97da7647a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "with clever strategies One option is to use the \"chaining\" strategy, where each array index points to a linked list (another data structure), where all the elements with the same index are stored Another strategy is to use \"open addressing\", which involves searching for the next available index in the array based on a predefined search sequence The average case time complexity of hash maps is \"Constant Time\" O(1) for inserting, retrieving, and deleting key-value pairsThe worst case time complexity of these operations is Linear Time O(n), which occurs when there are many hash collisions, so the collision resolution strategy has to be applied multiple times The space complexity of inserting into a hash map is constant O(1) on the average case, a constant amount of memory to store the new pair However, in the worst case, it can have linear space complexity O(n) due to a resizing operation of the underlying array In general, removing an element has a constant space complexity O(1) This turns the hash table into something similar to a linear data structure where n elements have to be scanned to find the target key However, this is relatively rare if the hash map is implemented properly Python's dictionaries are implemented as hash maps behind the scenes To create a Python dictionary, you just need to write the key-value pairs within curly brackets and separate them with a comma Each key should be separated from its corresponding value with a colon python\nmy_dictionary = {\n\"A\": 1,\n\"B\": 2,\n\"C\": 3\n}\nIn this code, \"A\" is the key and 1 is the value:\npython\n\"A\": 1\nAlternatively, you can use dict():\npython\nmy_dictionary = dict(A=\"1\", B=\"2\", C=\"3\")\nYou can get the value through its corresponding key:\npython\nmy_dictionary[\"A\"]  # 1\nYou can also update the value associated with a key:\npython\nmy_dictionary[\"A\"] = 4\nAnd you can remove a key-value pair:\npython\ndel my_dictionary[\"A\"]\nYou can also check if a key is in the dictionary (or not):\npython\n\"C\" in my_dictionary\nAnd you can call these methods to get the keys, values, and items of the dictionary, respectively python\nmy_dictionary keys()\nmy_dictionary values()\nmy_dictionary items()\nGreat Now that you know more about maps and hash maps, let's talk about sets Sets are unordered collections of unique elements",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11097,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e7.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "5107be29a2fb239fc704bfb263754bc0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "my_dictionary[\"A\"] = 4 And you can remove a key-value pair: python del my_dictionary[\"A\"] You can also check if a key is in the dictionary (or not): python \"C\" in my_dictionary And you can call these methods to get the keys, values, and items of the dictionary, respectively python my_dictionary keys() my_dictionary values() my_dictionary items() Great Now that you know more about maps and hash maps, let's talk about sets Sets are unordered collections of unique elementsLet's break this concept down into its key components:\nSets are unordered The elements of a set are not stored in any specific order, so you cannot access them through indices Sets only contain unique elements If you try to add the same value twice, only one copy of the value will be kept They are analogous to sets in mathematics and they implement the same set operations, like intersection, union, and difference One of the main advantages of sets is that they guarantee that the elements will be unique (no duplicates) This is why they are often used to remove duplicates from lists and other data structures They are also dynamic They can adjust to the number of elements that are currently stored This makes them quite powerful The average case time complexity of adding, removing, getting the length of the set, and checking if an element is in the set is \"Constant Time\" O(1), which is very efficient Since sets are implemented as hash tables, the worst case time complexity of adding, removing, and checking membership is \"Linear Time\" O(n) This may occur when there are multiple hash collisions, transforming the hash table into something similar to a linear data structure, where n scans are required to find the key In terms of space complexity, in the average case, inserting an element would have constant complexity O(1), with a new unique element requiring a constant amount of memory However, in the worst case, there could be a resizing operation of the underlying array, which could take linear space complexity O(n) In general, removing an element would take constant space complexity O(1) Python has a built-in set data structure that you use to work with sets in your programs Behind the scenes, Python sets are implemented using a hash table where only the keys are stored, without any associated values Sets can only store objects of immutable data types because their hash values always remain the same In contrast, the hash values of mutable objects can change when they are mutated That's why they cannot be part of sets",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11097,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e7.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "80a36f4eb6da3e2215aac17e416be548",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "has a built-in set data structure that you use to work with sets in your programs Behind the scenes, Python sets are implemented using a hash table where only the keys are stored, without any associated values Sets can only store objects of immutable data types because their hash values always remain the same In contrast, the hash values of mutable objects can change when they are mutated That's why they cannot be part of setsIf the hash value of an object stored in the set changes, the program would not be able to find it anymore To define a set in Python, you just need to surround the elements with curly brackets and separate them with commas:\npython\nnumbers = {1, 2, 3, 4}\nTo create an empty set, you can call set():\npython\nnumbers = set()\nNote that if you use empty curly brackets, this will automatically create a Python dictionary, not a set, so you must call the set() function to create an empty set You can add an element to a set with the add() method:\npython\nnumbers add(5)\nYou can also remove elements from the set with the remove() method:\npython\nnumbers remove(5)\nThis will throw a KeyError if the element is not found But if you don't want to throw an error in that case, you can use the discard() method instead The pop() method returns an arbitrary element from the set, while the clear() method removes all elements from the set You can test if an element is in a set with the in operator:\npython\n5 in numbers\nPython also support set operations, including union, difference, symmetric difference, and intersection, which you can perform with these methods:\n```python\nset_a = {1, 2, 3, 4}\nset_b = {2, 3, 4, 5, 6}\nset_a union(set_b)\nset_a intersection(set_b)\nset_a symmetric_difference(set_b)\nset_a difference(set_b)\n```\nOr with their equivalent operators:\npython\nset_a | set_b\nset_a & set_b\nset_a ^ set_b\nset_a - set_b\nThe average case time complexity for adding, removing, and testing membership is \"Constant Time\" O(1) The worst case time complexity for these operations is \"Linear Time\" O(n) because of the hash map's worst case collision scenario",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11097,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e7.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "a0d4b07d81f8d531ff0336d50dfb6380",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "set_a = {1, 2, 3, 4} set_b = {2, 3, 4, 5, 6} set_a union(set_b) set_a intersection(set_b) set_a symmetric_difference(set_b) set_a difference(set_b) ``` Or with their equivalent operators: python set_a | set_b set_a & set_b set_a ^ set_b set_a - set_b The average case time complexity for adding, removing, and testing membership is \"Constant Time\" O(1) The worst case time complexity for these operations is \"Linear Time\" O(n) because of the hash map's worst case collision scenarioYou can also check if a set is a subset or superset of another one:\npython\nset_a issubset(set_b)\nset_a issuperset(set_b)\nIn general, you should use sets when you need to store a collection of unique items and frequently check for the presence of an item Maps, hash maps, and sets are powerful data structures designed for efficient data organization and retrieval Each one of them has its own unique characteristics and use cases As a developer, you will need to choose the best one for your project --questions--\n--text--\nWhat is the fundamental difference in the type of data stored by a hash map (or map) compared to a set --answers--\nHash maps store ordered collections, while Sets store unordered collections --feedback--\nThink about what each data structure is primarily designed to store Hash maps store unique key-value pairs, while Sets store unique individual elements Hash maps cannot store duplicate values, while Sets can --feedback--\nThink about what each data structure is primarily designed to store Sets are used for numerical data, while hash maps are for textual data --feedback--\nThink about what each data structure is primarily designed to store --video-solution--\n2\n--text--\nWhat is the main mechanism that allows hash maps and Sets to achieve average-case O(1) (constant time) performance for operations like insertion and lookup --answers--\nThey keep all elements sorted, enabling fast binary search --feedback--\nThink about the special function that converts an element into an index They store elements in a linked list, allowing quick traversal --feedback--\nThink about the special function that converts an element into an index They use a hash function to compute a direct memory location for elements They always store a very small number of elements, making all operations fast --feedback--\nThink about the special function that converts an element into an index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11097,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e7.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "2eb87f9ef62296c5e3a43a34c67e09b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "search --feedback-- Think about the special function that converts an element into an index They store elements in a linked list, allowing quick traversal --feedback-- Think about the special function that converts an element into an index They use a hash function to compute a direct memory location for elements They always store a very small number of elements, making all operations fast --feedback-- Think about the special function that converts an element into an index--video-solution--\n3\n--text--\nIn the context of hash maps and sets, what is a \"hash collision\" --answers--\nWhen an element is successfully found after a search --feedback--\nThink about the result when the hash function maps different inputs to the same output When an element is inserted at the very beginning of the collection --feedback--\nThink about the result when the hash function maps different inputs to the same output When the hash map runs out of memory and needs to resize --feedback--\nThink about the result when the hash function maps different inputs to the same output When two different keys or elements produce the same hash value --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11097,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-common-data-structures\\6895d06b5968736797c408e7.md",
      "source_type": "git_repo"
    },
    "token_count": 217,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "29b05d4a40f252477f38347caa50581e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\6732720e95f6a0db526a2e4d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732720e95f6a0db526a2e4d\ntitle: What Are Binary Logical Operators, and How Do They Work challengeType: 19\ndashedName: what-are-binary-logical-operators-and-how-do-they-work\n--description--\nBinary logical operators help you evaluate two expressions and return a result based on their truthiness Let's look at the three most common binary logical operators: logical AND, logical OR, and the nullish coalescing operator The logical AND operator is represented by a double ampersand (&&) It checks if both operands are true and returns a result If both operands are truthy, it returns the second value, that is, the one on the right:\n```js\nconst result = true && 'hello';\nconsole log(result); // hello\n```\nIn the example above, the text hello is logged to the console because both operands are true If either operand is falsy, it returns the falsy value:\n```js\nconst result = 0 && 3;\nconsole log(result); // 0\n```\nSince 0 is a falsy value, the number 0 is logged to the console And if both operands are falsy, it returns the first falsy value:\n```js\nconst result = false && 0;\nconsole log(result); // false\n```\nSince false is a falsy value, then false is logged to the console The logical AND operator is useful when you want to check multiple conditions and ensure that all are true before proceeding Here is an example:\njs\nif (2 < 3 && 3 < 4) {\nconsole log('The if block runs');\n} else {\nconsole log('The else block runs');\n}\nIn the condition, since 2 is less than 3 AND 3 is less than 4, then the sentence The if block runs will be logged to the console The logical OR operator checks if at least one of the operands is truthy If the first operand is truthy, it returns that value:\n```js\nconst result = 'This is truthy' || false;\nconsole log(result); // This is truthy\n```\nIf the first operand is falsy but the second is truthy, the second value will be logged to the console:\n```js\nconst result = 0 || 'This is truthy';\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\6732720e95f6a0db526a2e4d.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "00d23eeb861a19315c0a355b06000ac8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\6732720e95f6a0db526a2e4d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "will be logged to the console The logical OR operator checks if at least one of the operands is truthy If the first operand is truthy, it returns that value: ```js const result = 'This is truthy' || false; console log(result); // This is truthy ``` If the first operand is falsy but the second is truthy, the second value will be logged to the console: ```js const result = 0 || 'This is truthy'; consolelog(result); // This is truthy\n```\nIt is common to use the logical OR operator in if/else statements like this:\n```js\nlet userInput;\nif (userInput || 'Guest') {\nconsole log('A user is present');\n} else {\nconsole log('No user detected');\n}\n```\nSince we didn't assign a value to the userInput variable, it is currently undefined The condition in the if statement checks if either the userInput variable or the string Guest are truthy Since the string Guest is true in a boolean context like this, the string A user is present will be logged to the console The nullish coalescing operator is more sophisticated than logical OR and logical AND Represented by a double question mark ( ), it helps in scenarios where you want to return a value only if the first one is null or undefined Here is an example of working with the nullish coalescing operator:\n```js\nconst result = null 'default';\nconsole log(result); // default\n```\nSince null is a falsy value, the string default would be logged to the console The nullish coalescing operator is incredibly useful in situations where null or undefined are the only values that should trigger a fallback or default value Here is an example of dealing with a user's preference settings:\n```js\nconst userSettings = {\ntheme: null,\nvolume: 0,\nnotifications: false,\n};\nlet theme = userSettings theme 'light';\nconsole log(theme); // light\n```\nIn the example above, we have an object called userSettings that contains theme, volume and notifications properties We are accessing the theme using dot notation like userSettings theme You will learn more about how to work with objects in a future lecture Since the user's theme is currently set to null, then the string light will be logged to the console --questions--\n--text--\nHow does the logical AND (&&) operator work --answers--\nIt checks if both operands are false",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\6732720e95f6a0db526a2e4d.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5517ebf6f1a99308412e6851e27c2114",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\6732720e95f6a0db526a2e4d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "above, we have an object called userSettings that contains theme, volume and notifications properties We are accessing the theme using dot notation like userSettings theme You will learn more about how to work with objects in a future lecture Since the user's theme is currently set to null, then the string light will be logged to the console --questions-- --text-- How does the logical AND (&&) operator work --answers-- It checks if both operands are false--feedback--\nThink about when both conditions need to be true It checks if both operands are true and returns a result\nIt returns true if one operand is true --feedback--\nThink about when both conditions need to be true It ignores the second operand --feedback--\nThink about when both conditions need to be true --video-solution--\n2\n--text--\nWhat does the nullish coalescing ( ) operator do --answers--\nIt returns the first value, regardless of whether it is null or undefined --feedback--\nThink about when you want to provide a fallback value It returns the second value only if the first is null or undefined It checks if both values are equal --feedback--\nThink about when you want to provide a fallback value It compares two values for type coercion --feedback--\nThink about when you want to provide a fallback value --video-solution--\n2\n--text--\nHow does the logical OR (||) operator work in JavaScript --answers--\nIt checks if both operands are truthy --feedback--\nThink about when you need just one condition to be true It returns true only if both operands are false --feedback--\nThink about when you need just one condition to be true It checks if at least one of the operands is truthy It returns true only if both operands are truthy --feedback--\nThink about when you need just one condition to be true --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5501,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\6732720e95f6a0db526a2e4d.md",
      "source_type": "git_repo"
    },
    "token_count": 368,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f7839c99e14f5d3e26ae4649af8cd52a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\673271fd11d063daf0cf8d20.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673271fd11d063daf0cf8d20\ntitle: What Are Conditional Statements, and How Do If/Else If/Else Statements Work challengeType: 19\ndashedName: what-are-conditional-statements-and-how-do-if-else-if-else-statements-work\n--description--\nConditional statements let you make decisions in your JavaScript code They allow your program to flow in a particular way based on certain conditions Let's take a look at how if, else if, else, and the ternary operator work to let you control the flow of your code An if statement takes a condition and runs a block of code if that condition is truthy Truthy values are any values that result in true when evaluated in a Boolean context like an if statement Here are examples of truthy values:\nnon-empty strings, for example, hello\nany number other than 0 and -0, for example, 4, -5, and others\narrays\nobjects\nthe boolean true\nOn the other hand, falsy values are values that evaluate to false in a boolean context JavaScript has few falsy values, which makes them easy to remember Here are a few falsy values:\nboolean false\n0 (zero)\n\"\" (empty string)\nnull\nundefined\nNaN (Not a Number)\nNow, that we have a basic understanding of truthy and falsy values, let's see how it works with if statements In this first example, we are using a couple of if statements to check against truthy and falsy values:\n```js\nif (null) {\nconsole log(\"This will not run \");\n}\nif (\"freeCodeCamp\") {\nconsole log(\"This will run \");\n}\n```\nSince null is a falsy value, the message inside the block will never be logged to the console But for the second if statement, the string freeCodeCamp is a truthy value, and will be considered true in this boolean context of the if statement As a result, the message This will run will be logged to the console Let's take a look at a few more examples on how if statements work with different comparison operators Here is an example of using an if statement to check if the user is eligible to vote:\n```js\nconst age = 22;\nif (age >= 18) {\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\673271fd11d063daf0cf8d20.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a243707ca2016f3fccff45728ab2c394",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\673271fd11d063daf0cf8d20.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "truthy value, and will be considered true in this boolean context of the if statement As a result, the message This will run will be logged to the console Let's take a look at a few more examples on how if statements work with different comparison operators Here is an example of using an if statement to check if the user is eligible to vote: ```js const age = 22; if (age >= 18) { consolelog(\"You're eligible to vote\"); // You're eligible to vote\n}\n```\nIn this example, since age is currently 22, this means the condition will evaluate to true because 22 is greater than or equal to 18 So the message You're eligible to vote will be logged to the console If we change the example so age is now 15, then the condition will evaluate to false and the message will not be logged to the console:\n```js\nconst age = 15;\nif (age >= 18) {\nconsole log(\"You're eligible to vote\"); // Code not running because age is less than 18\n}\n```\nWhen a condition is false, then you can use an else clause:\n```js\nconst age = 15;\nif (age >= 18) {\nconsole log(\"You're eligible to vote\");\n} else {\nconsole log(\"You're not eligible to vote\"); // You're not eligible to vote\n}\n```\nIn this example, 15 is not greater than or equal to 18, so the condition would be false The code inside the else block will run in this case If you want to check multiple conditions, you can use an else if block This allows your program to choose between more than two paths ```js\nconst score = 87;\nif (score >= 90) {\nconsole log('You got an A');\n} else if (score >= 80) {\nconsole log('You got a B'); // You got a B\n} else if (score >= 70) {\nconsole log('You got a C');\n} else {\nconsole log('You failed You need to study more ');\n}\n```\nSince the score is currently 87, then the message of You got a B would be logged to the console The ternary operator is a compact way to write simple if/else statements It has three parts: a condition, a result if the condition is true, and a result if it is false Here's the basic syntax:\njs\ncondition",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\673271fd11d063daf0cf8d20.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d62bd073aecd382726aa8118e9f3b4d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\673271fd11d063daf0cf8d20.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "log('You got a C'); } else { console log('You failed You need to study more '); } ``` Since the score is currently 87, then the message of You got a B would be logged to the console The ternary operator is a compact way to write simple if/else statements It has three parts: a condition, a result if the condition is true, and a result if it is false Here's the basic syntax: js conditionexpressionIfTrue : expressionIfFalse;\nHere's an example dealing with weather temperatures in Celsius:\n```js\nconst weather = temperature > 25 'sunny' : 'cool';\nconsole log(It's a ${weather} day );\n```\nIf temperature is greater than 25, the code above logs It's a sunny day If temperature is ever less than 25, it logs It's a cool day So, which should you use between an if statement and a ternary Use a ternary while dealing with a single condition or single expressions, or when you want a compact syntax for simple logic Use if/else statements when you're dealing with complex conditions and multiple statements, as things become unreadable if you nest ternaries --questions--\n--text--\nWhat's a compact way to write simple if/else statements --answers--\nUsing the switch statement --feedback--\nThink of a one-liner for conditional logic Using a while loop --feedback--\nThink of a one-liner for conditional logic Using multiple if statements --feedback--\nThink of a one-liner for conditional logic Using the ternary operator --video-solution--\n4\n--text--\nHow can you check for multiple conditions in an if statement --answers--\nBy using a switch statement only --feedback--\nThink about how to handle more than two possible outcomes By using a while loop --feedback--\nThink about how to handle more than two possible outcomes By using an else if block to choose between more than two paths By using the ternary operator --feedback--\nThink about how to handle more than two possible outcomes --video-solution--\n3\n--text--\nWhat is the purpose of the else block in an if statement --answers--\nIt runs when the condition in the if statement is true --feedback--\nThink about what happens when the if condition is false It runs a block of code when the condition in the if statement is not true It checks if multiple conditions are true --feedback--\nThink about what happens when the if condition is false It always runs before the if block",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\673271fd11d063daf0cf8d20.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "8cab429f53a39bab58d4e851902e472a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\673271fd11d063daf0cf8d20.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "What is the purpose of the else block in an if statement --answers-- It runs when the condition in the if statement is true --feedback-- Think about what happens when the if condition is false It runs a block of code when the condition in the if statement is not true It checks if multiple conditions are true --feedback-- Think about what happens when the if condition is false It always runs before the if block--feedback--\nThink about what happens when the if condition is false --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6095,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\673271fd11d063daf0cf8d20.md",
      "source_type": "git_repo"
    },
    "token_count": 101,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "6269ad5e6517bfae638eeec1a50fa8c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-flexbox\\672aa7f7284b235f46f7d4e9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa7f7284b235f46f7d4e9\ntitle: What Is CSS Flexbox, and When Should You Use It challengeType: 19\ndashedName: what-is-css-flexbox\n--description--\nCSS flexbox is a one-dimensional layout model that allows you to arrange elements in rows and columns within a container You can also control their order and orientation Web developers use it to create responsive websites and web applications that adapt to different screen sizes and orientations We refer to flexbox as a one-dimensional layout model because it focuses on arranging elements along a single axis at a time The axis can be either horizontal or vertical There are two key concepts that you should know about before you start working with flexbox: flex container and flex item A flex container is an HTML element with a flex layout You can arrange and align elements in various ways within a flex container To make an HTML element a flex container, you need to add display: flex to its CSS styles Flex items are the direct children of a flex container These elements can be arranged and aligned within a flex container based on its properties They can also shrink or expand to fit the available space This is an example with a main container and three child div elements:\n```html\n```\nIf you set only the width, height, and background-color of these div elements in the CSS stylesheet, every child element will be placed on its own row because the container is not flex by default That is:\n```css\ndiv {\nwidth: 80px;\nheight: 50px;\n}\nfirst-div {\nbackground-color: #4d70b2;\n}\nsecond-div {\nbackground-color: #5c4db2;\n}\nthird-div {\nbackground-color: #4da3b2;\n}\n```\nBut if you add display: flex to the main container, the div elements will be rearranged to fit on the same row and they will shrink if necessary:\ncss\nmain {\ndisplay: flex;\n}\nBy default, a flex container will be a block-level element, so the container itself will be on its own row relative to other elements and containers Now that you know more about flex containers and flex items, you should also know about flex properties These properties determine how flex items will be arranged, resized, and distributed within the flex container Some of the most commonly used ones are flex-direction, justify-content, align-items, and flex-wrap Great Now let’s talk a little bit about the flex model",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6081,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-flexbox\\672aa7f7284b235f46f7d4e9.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f03de2b761377b7f730cd33a3e12649e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-flexbox\\672aa7f7284b235f46f7d4e9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "block-level element, so the container itself will be on its own row relative to other elements and containers Now that you know more about flex containers and flex items, you should also know about flex properties These properties determine how flex items will be arranged, resized, and distributed within the flex container Some of the most commonly used ones are flex-direction, justify-content, align-items, and flex-wrap Great Now let’s talk a little bit about the flex modelThis model defines how flex items are arranged within a flex container Every flex container has two axes:\nThe main axis The cross axis The orientation of these axes determines how different properties will affect the layout and distribution of the flex items By default, the main axis of a flex container is horizontal and the cross axis is vertical Flex items are arranged in the direction of the main axis The cross axis is perpendicular to the main axis The flex-direction property sets the direction of the main axis The default value of flex-direction is row, which places all the flex items on the same row, in the direction of your browser's default language (left to right or right to left):\ncss\nflex-direction: row; /* Default */\nTo reverse the items in the row, you can use flex-direction: row-reverse:\ncss\nflex-direction: row-reverse;\nThis will reverse the order of the flex items If you want to align the flex items vertically instead, you just need to set flex-direction to column in the flex container This will change the direction of the main axis:\ncss\nflex-direction: column;\nNow the div elements will be aligned vertically because the main axis will be vertical and the cross axis will be horizontal You can also reverse the order of the flex items vertically with flex-direction: column-reverse:\ncss\nflex-direction: column-reverse;\nCSS flexbox is a powerful layout model that provides a flexible and efficient way to arrange elements within a container By understanding the key concepts of flex containers, flex items, and the various flex properties, you can create dynamic and responsive websites that adapt to different screen sizes and orientations --questions--\n--text--\nWhat is the primary purpose of CSS Flexbox --answers--\nTo control the font size of text elements --feedback--\nThink about how flexbox is used to arrange and align elements To create responsive and dynamic layouts To define the color of elements --feedback--\nThink about how flexbox is used to arrange and align elements To adjust the spacing between elements --feedback--\nThink about how flexbox is used to arrange and align elements",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6081,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-flexbox\\672aa7f7284b235f46f7d4e9.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ce608e0944b3d2fd18cfa19e65ebef96",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-flexbox\\672aa7f7284b235f46f7d4e9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "sizes and orientations --questions-- --text-- What is the primary purpose of CSS Flexbox --answers-- To control the font size of text elements --feedback-- Think about how flexbox is used to arrange and align elements To create responsive and dynamic layouts To define the color of elements --feedback-- Think about how flexbox is used to arrange and align elements To adjust the spacing between elements --feedback-- Think about how flexbox is used to arrange and align elements--video-solution--\n2\n--text--\nWhich of the following CSS properties is used to control the direction in which child elements are arranged within a flex container --answers--\nflex-wrap\n--feedback--\nThink about how the arrangement of elements is determined within a flex container align-items\n--feedback--\nThink about how the arrangement of elements is determined within a flex container justify-content\n--feedback--\nThink about how the arrangement of elements is determined within a flex container flex-direction\n--video-solution--\n4\n--text--\nIn the flex model, what is the relationship between the main axis and the cross axis --answers--\nThe main axis is always horizontal, while the cross axis is always vertical --feedback--\nThink about the distribution of elements within a flex container The main axis is always vertical, while the cross axis is always horizontal --feedback--\nThink about the distribution of elements within a flex container The main axis and cross axis are always perpendicular to each other The main axis and cross axis are always parallel to each other --feedback--\nThink about the distribution of elements within a flex container --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6081,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-flexbox\\672aa7f7284b235f46f7d4e9.md",
      "source_type": "git_repo"
    },
    "token_count": 314,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "923595fb24b4e4c27f1b0ed25362db50",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\67327217e70ee0db7913b255.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67327217e70ee0db7913b255\ntitle: What Is the Math Object in JavaScript, and What Are Some Common Methods challengeType: 19\ndashedName: what-is-the-math-object-in-javascript-and-what-are-some-common-methods\n--description--\nWhen diving into JavaScript, you'll quickly discover that performing mathematical operations is a common task While basic arithmetic operators can handle simple calculations, JavaScript offers a built-in Math object to tackle more complex math challenges This handy tool provides a variety of methods that make it easier to perform advanced calculations and manipulate numbers Let's explore these methods and see how they can simplify your coding experience The Math random() method generates a random floating-point number between 0 (inclusive) and 1 (exclusive) This means the possible output can be 0, but it will never actually reach 1 Here is an example working with the Math random() method:\n```js\nconst randomNum = Math random();\nconsole log(randomNum);\n// any number between 0 and 1 – 0 inclusive and 1 exclusive\n```\nMath min() and Math max() both take a set of numbers and return the minimum and maximum value, respectively Here is an example of working both of those methods:\n```js\nconst smallest = Math min(1, 5, 3, 9);\nconsole log(smallest); // 1\nconst largest = Math max(1, 5, 3, 9);\nconsole log(largest); // 9\n```\nThe first console log() will log the number 1, since 1 is the smallest in that list of numbers And the second console log() will log the number 9, since 9 is the largest numbers in that list If you wanted to round numbers up or down to the nearest whole integer, you could use the Math ceil() and Math floor() methods Here is an example of working with Math ceil():\njs\nconsole log(Math ceil(4 3)); // 5\nMath ceil() will round 4 3 up to the nearest whole integer, which is 5 in this case Now, let's take a look at rounding a number down:\njs\nconsole log(Math floor(4 7)); // 4\nMath floor() will round 4 7 down to the nearest whole integer, which is 4 in this case Math round() is the hybrid of Math ceil() and Math floor()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6113,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\67327217e70ee0db7913b255.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "7277ce27d634f839466798c48ac38d26",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\67327217e70ee0db7913b255.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of working with Math ceil(): js console log(Math ceil(4 3)); // 5 Math ceil() will round 4 3 up to the nearest whole integer, which is 5 in this case Now, let's take a look at rounding a number down: js console log(Math floor(4 7)); // 4 Math floor() will round 4 7 down to the nearest whole integer, which is 4 in this case Math round() is the hybrid of Math ceil() and Math floor()It rounds a number to its nearest integer, taking the decimal point into account:\njs\nconsole log(Math round(2 3)); // 2\nconsole log(Math round(4 5)); // 5\nconsole log(Math round(4 8)); // 5\nSo, if the decimal point is less than 5, the number is rounded down And if the decimal point is 5 or greater, the number is rounded up A practical application of Math floor() and Math random() is to generate a random number between two whole numbers Here's the syntax for that:\njs\nMath floor(Math random() * (max - min)) + min;\nGenerating a random number between 20 and 1 would look like this:\njs\nconst randomNumBtw1And20 = Math floor(Math random() * 20) + 1;\nconsole log(randomNumBtw1And20);\nAnother helpful Math method would be the Math trunc() method Math trunc() removes the decimal part of a number, returning only the integer portion, without rounding:\njs\nconsole log(Math trunc(2 9)); // 2\nconsole log(Math trunc(9 1)); // 9\nIf you need to get the square root or cube root of a number, you can use the Math sqrt() and Math cbrt() methods, respectively:\njs\nconsole log(Math sqrt(81)); // 9\nconsole log(Math cbrt(27)); // 3\nThe first log statement, will log 9 because the square root of 81 is 9, while the second log statement will log 3 because the cube root of 27 is 3 If you need to get the absolute value of a number, you can use the Math abs() method:\njs\nconsole log(Math abs(-5)); // 5\nconsole log(Math abs(5)); // 5\nMath",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6113,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\67327217e70ee0db7913b255.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "0bd1b1a234dbe53ba1f3d51a864d0679",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\67327217e70ee0db7913b255.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Math cbrt() methods, respectively: js console log(Math sqrt(81)); // 9 console log(Math cbrt(27)); // 3 The first log statement, will log 9 because the square root of 81 is 9, while the second log statement will log 3 because the cube root of 27 is 3 If you need to get the absolute value of a number, you can use the Math abs() method: js console log(Math abs(-5)); // 5 console log(Math abs(5)); // 5 Mathabs() returns the absolute value of a number, turning negatives into positives The last method we will look at will be the Math pow() method:\njs\nconsole log(Math pow(2, 3)); // 8\nconsole log(Math pow(8, 2)); // 64\nMath pow() takes two numbers and raise the first to the power of the second There are many more methods that belong to the Math object, that you can explore on your own However, these are just a few of the more commonly used ones found in JavaScript codebases --questions--\n--text--\nWhat does the Math floor() function do --answers--\nRounds a number up to the nearest integer --feedback--\nThink about how this function always rounds towards the lower integer Rounds a number down, regardless of the decimal point Rounds a number to the nearest even integer --feedback--\nThink about how this function always rounds towards the lower integer Rounds a number based on the value of the decimal point --feedback--\nThink about how this function always rounds towards the lower integer --video-solution--\n2\n--text--\nWhy is Math round() considered a hybrid of Math ceil() and Math floor() --answers--\nIt only rounds numbers up like Math ceil() --feedback--\nThink about how it chooses to round up or down based on the decimal value It rounds numbers down like Math floor() --feedback--\nThink about how it chooses to round up or down based on the decimal value It rounds numbers to the nearest integer, using both rounding up and down depending on the decimal It ignores the decimal point --feedback--\nThink about how it chooses to round up or down based on the decimal value --video-solution--\n3\n--text--\nWhat's the difference between Math min() and Math max() --answers--\nMath min() returns the maximum value, and Math max() returns the minimum value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6113,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\67327217e70ee0db7913b255.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "aeea70a60f5d5e6497de16087bac41e8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\67327217e70ee0db7913b255.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "it chooses to round up or down based on the decimal value It rounds numbers to the nearest integer, using both rounding up and down depending on the decimal It ignores the decimal point --feedback-- Think about how it chooses to round up or down based on the decimal value --video-solution-- 3 --text-- What's the difference between Math min() and Math max() --answers-- Math min() returns the maximum value, and Math max() returns the minimum value--feedback--\nThink about how these functions work with a set of numbers Math min() returns the smallest number, and Math max() returns the largest number from a set Both return the same value --feedback--\nThink about how these functions work with a set of numbers Math min() rounds numbers down, and Math max() rounds numbers up --feedback--\nThink about how these functions work with a set of numbers --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6113,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-conditional-logic-and-math-methods\\67327217e70ee0db7913b255.md",
      "source_type": "git_repo"
    },
    "token_count": 180,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "1e76cf84a7d705eae8095ac6acc8f11f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd807c49548fc9be66aca.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bd807c49548fc9be66aca\ntitle: What Are Some Best Practices for Working with Typography in Your Designs challengeType: 19\ndashedName: what-are-some-best-practices-for-working-with-typography-in-your-designs\n--description--\nTypography is the art and technique of arranging type to communicate effectively It involves formatting text and selecting appropriate fonts In this lecture, you will learn best practices for using typography in a way that enhances readability, hierarchy, and accessibility Let's start with readability You should choose clear and simple fonts to make your designs easy to understand This is particularly important for the main text of your website Users are more likely to engage with your content if the font is easy to read Some frequently used fonts for web development are Roboto, Open Sans, Poppins, Lato, and Barlow But there are many to choose from and you will definitely find one that fits your needs Text should also be large enough for everyone to read it You should try to keep lines relatively short The specific number of characters per line really depends on your project But keeping lines short will make the content easier to read You can use font size to create a visual hierarchy for headings, subheadings, paragraphs, and other elements For example, the main heading on a webpage should have a larger font, followed by subheadings with smaller font sizes This will give every element in the hierarchy a specific font size that helps users navigate through the structure visually You should use two or three fonts at most to create a visual consistency Using too many fonts can make the text more difficult to read and weaken your branding's identity This can also impact the user experience by increasing the load time of the website Once you choose these two or three fonts, use them consistently across different pages and elements These fonts should be consistent with the overall design of your web application, product, or service You should also use whitespace to create a visual balance and enhance readability For accessibility purposes, you should follow the Web Content Accessibility Guidelines These guidelines set the recommended contrast ratio for text A higher contrast ratio makes text easier to read, especially for people with visual disabilities You should also provide options to adjust font size and avoid complex fonts as much as possible As a general rule, you should use simple fonts whenever possible If your content is easy to read, users are more likely to engage with it A final tip for working with typography is making sure that your fonts are displayed correctly on different screen sizes and devices",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4809,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd807c49548fc9be66aca.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5460277a7d2dc0c2b609946148346da6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd807c49548fc9be66aca.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "makes text easier to read, especially for people with visual disabilities You should also provide options to adjust font size and avoid complex fonts as much as possible As a general rule, you should use simple fonts whenever possible If your content is easy to read, users are more likely to engage with it A final tip for working with typography is making sure that your fonts are displayed correctly on different screen sizes and devicesTypography is a powerful tool for creating beautiful designs and engaging user experiences By understanding the fundamentals of typography and applying these best practices, you can create effective designs --questions--\n--text--\nWhich of the following is a very important factor for ensuring readability in web typography --answers--\nUsing a large variety of fonts --feedback--\nThink about how users perceive text on a screen and what they may find helpful Maximizing font size for all text elements --feedback--\nThink about how users perceive text on a screen and what they may find helpful Achieving optimal contrast between text and background Aligning text to the left margin --feedback--\nThink about how users perceive text on a screen and what they may find helpful --video-solution--\n3\n--text--\nWhen choosing fonts for a website, it's generally recommended to:\n--answers--\nUse as many different fonts as possible for visual interest --feedback--\nThink about how font choices impact the overall look and feel of a website Limit the number of font families to improve consistency Prioritize decorative fonts over readability --feedback--\nThink about how font choices impact the overall look and feel of a website Use only serif fonts for body text --feedback--\nThink about how font choices impact the overall look and feel of a website --video-solution--\n2\n--text--\nWhich of the following best describes the concept of visual hierarchy in typography --answers--\nUsing only one font style throughout a design --feedback--\nThink about how typography can guide users' attention Prioritizing the most important information through font size and style Maintaining consistent spacing between letters --feedback--\nThink about how typography can guide users' attention Ensuring all text is centered on the page --feedback--\nThink about how typography can guide users' attention --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4809,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd807c49548fc9be66aca.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2bcbbe33eac55479e655bac65122a5b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-flexbox\\672bd658c0e190f674a5e057.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bd658c0e190f674a5e057\ntitle: What Are Some Common Flex Properties, and How Do They Work challengeType: 19\ndashedName: what-are-some-common-flex-properties\n--description--\nFlex properties are properties that you can apply to flex containers to determine the distribution of child elements We'll cover some of the most commonly used ones: flex-wrap, justify-content, and align-items Let's start with flex-wrap This property determines how flex items are wrapped within a flex container to fit the available space flex-wrap can take three possible values: nowrap, wrap, and wrap-reverse nowrap is the default value—flex items won't be wrapped onto a new line, even if their width exceeds the container's width In the code below, we have three div elements Let's focus on the width The main container bordered in red has a width of 200px, while its three child div elements combined have a width of 240px (80px each):\n```css\nmain {\nwidth: 200px;\ndisplay: flex;\nborder: 2px solid red;\n}\ndiv {\nwidth: 80px;\nheight: 50px;\n}\nfirst-div {\nbackground-color: #4d70b2;\n}\nsecond-div {\nbackground-color: #5c4db2;\n}\nthird-div {\nbackground-color: #4da3b2;\n}\n```\nThe width of the div elements exceeds the width of their container, but by default they will be shrunk to fit the available space If you do want to wrap them when they exceed the width of their container, you can set flex-wrap: wrap on the flex container:\ncss\nflex-wrap: wrap;\nThe div elements will be rearranged in rows when they exceed the width of their container You can wrap flex items in reverse order with flex-wrap: wrap-reverse The flex-flow property is a shorthand property for flex-direction and flex-wrap In this example, we set flex-direction to column and flex-wrap to wrap-reverse:\ncss\nflex-flow: column wrap-reverse;\nGreat Now let's talk about justify-content justify-content aligns the child elements along the main axis of the flex container If you assign the value flex-start to justify-content, the flex items will be aligned to the start of the main axis",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6654,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-flexbox\\672bd658c0e190f674a5e057.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "870eee5d4c57271b7fa0515c22802832",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-flexbox\\672bd658c0e190f674a5e057.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "wrap flex items in reverse order with flex-wrap: wrap-reverse The flex-flow property is a shorthand property for flex-direction and flex-wrap In this example, we set flex-direction to column and flex-wrap to wrap-reverse: css flex-flow: column wrap-reverse; Great Now let's talk about justify-content justify-content aligns the child elements along the main axis of the flex container If you assign the value flex-start to justify-content, the flex items will be aligned to the start of the main axisThis could be horizontal or vertical:\ncss\njustify-content: flex-start;\nWith justify-content: flex-end, flex items are aligned to the end of the main axis, horizontally or vertically To center the flex items along the main axis, you can use justify-content: center To distribute the elements evenly along the main axis, you can use justify-content: space-between This will add some space between the flex items if needed justify-content: space-around distributes flex items evenly within the main axis, adding a space before the first item and after the last item This additional space is half of the space between each pair of adjacent items If there's only one item to distribute, it will be centered And last but not least, we have justify-content: space-evenly, which distributes the items evenly along the main axis The space between the items and the space before and after the first and last elements, are exactly the same:\ncss\njustify-content: space-evenly;\nGreat Now you know how to distribute flex items along the main axis But you may also want to distribute them along the cross axis Remember that the cross axis is perpendicular to the main axis You can do this with the align-items property To center the items along the cross axis, you just need to add align-items: center to the flex container:\ncss\nalign-items: center;\nIn this example, the flex items are centered along the cross axis, which is vertical by default If the cross axis is horizontal, they will be centered horizontally instead In contrast, align-items: flex-start aligns the items to the start of the cross axis:\ncss\nalign-items: flex-start;\nThe opposite is align-items: flex-end This will align flex items to the end of the cross axis, vertically or horizontally To stretch the flex items along the cross axis, you can use align-items: stretch This also works with elements that are automatically sized, such as those without set width or height, or with only a minimum width or height",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6654,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-flexbox\\672bd658c0e190f674a5e057.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4fc2f822a9e51e714d21071783266d2f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-flexbox\\672bd658c0e190f674a5e057.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "In contrast, align-items: flex-start aligns the items to the start of the cross axis: css align-items: flex-start; The opposite is align-items: flex-end This will align flex items to the end of the cross axis, vertically or horizontally To stretch the flex items along the cross axis, you can use align-items: stretch This also works with elements that are automatically sized, such as those without set width or height, or with only a minimum width or heightThe flex items will stretch to fill the container in the direction of the cross axis And finally, you can use the align-self property to assign a different alignment on the cross axis to an individual flex item For example, you can stretch it with align-self: stretch You can center it with align-self: center You can align it to the start of the cross axis with align-self: flex-start Or you can align it to the end of the cross axis with align-self: flex-end There are other flex properties and values that you can choose from to create the responsive layout that you envision, but these are the most commonly-used ones With these CSS flex properties and your new knowledge of the CSS flex model, you can start creating responsive layouts to create a smooth and inclusive user experience across devices --questions--\n--text--\nWhich CSS property is used to align child elements horizontally (by default) within a flex container --answers--\nflex-direction\n--feedback--\nThink about how elements are aligned horizontally within a flex container justify-content\nalign-items\n--feedback--\nThink about how elements are aligned horizontally within a flex container flex-wrap\n--feedback--\nThink about how elements are aligned horizontally within a flex container --video-solution--\n2\n--text--\nWhich CSS property is used to align child elements vertically (by default) within a flex container --answers--\nflex-direction\n--feedback--\nThink about how elements are aligned vertically within a flex container justify-content\n--feedback--\nThink about how elements are aligned vertically within a flex container align-items\nflex-wrap\n--feedback--\nThink about how elements are aligned vertically within a flex container --video-solution--\n3\n--text--\nWhich of the following properties can be combined into the flex-flow property --answers--\nflex-direction and justify-content --feedback--\nThink about the two main aspects of how flex items are laid out flex-direction and align-items --feedback--\nThink about the two main aspects of how flex items are laid out flex-direction and align-content",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6654,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-flexbox\\672bd658c0e190f674a5e057.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "6e12c85b9eff68c5dfe57fd9954a9fda",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-flexbox\\672bd658c0e190f674a5e057.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "how elements are aligned vertically within a flex container align-items flex-wrap --feedback-- Think about how elements are aligned vertically within a flex container --video-solution-- 3 --text-- Which of the following properties can be combined into the flex-flow property --answers-- flex-direction and justify-content --feedback-- Think about the two main aspects of how flex items are laid out flex-direction and align-items --feedback-- Think about the two main aspects of how flex items are laid out flex-direction and align-content--feedback--\nThink about the two main aspects of how flex items are laid out flex-direction and flex-wrap --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6654,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-flexbox\\672bd658c0e190f674a5e057.md",
      "source_type": "git_repo"
    },
    "token_count": 127,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "880a578a9f6225c26d80678d166e5812",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672aa80bc17f355fabd2e9e8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa80bc17f355fabd2e9e8\ntitle: What Are the Fundamentals of Typography challengeType: 19\ndashedName: what-are-the-fundamentals-of-typography\n--description--\nTypography is the art of choosing the right fonts and format to make text visually appealing and easy to read \"Type\" refers to how the individual characters are designed and arranged By choosing the right fonts for your project, you can evoke emotions, establish hierarchy, and reinforce your brand's identity We'll start by talking about typefaces and fonts A typeface is the overall design and style of a set of characters, numbers, and symbols It's like a blueprint for a family of fonts A font is a specific variation of a typeface with specific characteristics, such as size, weight, style, and width Two very important examples of typefaces are Serif and Sans Serif The Serif typeface has a classical style with small lines at the end of characters Serif typefaces are commonly used for printed materials, like books Some examples are Times New Roman, Georgia, and Garamond In contrast, the Sans Serif typeface has a more modern look, without the small lines at the end of characters Sans Serif typefaces are commonly used in digital design because they are easy to read on screen Some examples include Helvetica, Arial, and Roboto There are other typeface classifications, like Script, Blackletter, Monospaced, and Decorative We mentioned that typefaces are like blueprints for fonts, right Well, fonts can also be grouped if they share a similar design Different weights and styles can be combined For example, Times New Roman includes variations like Times New Roman Bold, Times New Roman Italic, and Times New Roman Bold Italic These variations within the same font family typically include:\nWeight: The thickness of the characters, including light, regular, bold, and black Style: The slant and orientation of the characters, like italic and oblique Width: The horizontal space occupied by characters, condensed and expanded Great Now let's explore the fundamental elements of typography:\nThe baseline is the imaginary line on which most characters rest The cap height is the height of uppercase letters, measured from the baseline to the top The x-height is the average height of lowercase letters, excluding ascenders and descenders Ascenders are the parts of lowercase letters that extend above the x-height, such as the tops of the letters h, b, d, and f",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6028,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672aa80bc17f355fabd2e9e8.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "64e75f21a7e28fd52fa89326e76f7263",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672aa80bc17f355fabd2e9e8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "condensed and expanded Great Now let's explore the fundamental elements of typography: The baseline is the imaginary line on which most characters rest The cap height is the height of uppercase letters, measured from the baseline to the top The x-height is the average height of lowercase letters, excluding ascenders and descenders Ascenders are the parts of lowercase letters that extend above the x-height, such as the tops of the letters h, b, d, and fDescenders are the parts of lowercase letters that extend below the baseline, such as the tails of y, g, p, and q There are more advanced concepts too, like kerning, tracking, and leading Kerning is how space is adjusted between specific pairs of characters to improve their readability and aesthetics For example, reducing the space between the letters A and V Tracking is how space is adjusted between all characters in a block of text It's essentially the distance between the characters It affects how dense and open the text will be Leading is the vertical space between lines of text It's measured from the baseline of one line to the baseline of the next line Being familiar with these concepts is essential for choosing the right font for your project Line length can also have a significant impact on readability If the text is too narrow, readers will need to refocus too often If the text is too wide, they may experience fatigue You should find the optimal line length for comfortable reading With typography, you can also create a visual hierarchy, helping readers understand what parts of the text or user interface are most important Larger fonts usually indicate that text is more important Making the text bold is also helpful for emphasizing it Underlining text or presenting it in italics is helpful for highlighting key points Providing accurate spacing around the text can highlight its importance And color contrast can bring readers' attention to specific parts of the text Having basic knowledge of typography is essential for designing visually engaging applications By understanding fonts, spacing, and hierarchy, you can create visual experiences that enhance the readability of your content and reinforce your brand's identity\n--questions--\n--text--\nWhich of the following refers to how the individual characters are designed and arranged --answers--\nGlyph\n--feedback--\nReview the beginning of the lecture for the answer Type\nBeak\n--feedback--\nReview the beginning of the lecture for the answer Shoulder\n--feedback--\nReview the beginning of the lecture for the answer --video-solution--\n2\n--text--\nWhat is the difference between a typeface and a font",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6028,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672aa80bc17f355fabd2e9e8.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "930348fa4b4c067e72ab0dca071a8d42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672aa80bc17f355fabd2e9e8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "that enhance the readability of your content and reinforce your brand's identity --questions-- --text-- Which of the following refers to how the individual characters are designed and arranged --answers-- Glyph --feedback-- Review the beginning of the lecture for the answer Type Beak --feedback-- Review the beginning of the lecture for the answer Shoulder --feedback-- Review the beginning of the lecture for the answer --video-solution-- 2 --text-- What is the difference between a typeface and a font--answers--\nA typeface is a specific style of a font, while a font is the overall design --feedback--\nThink about the relationship between a car model and a specific car A font is a specific style of a typeface, while a typeface is the overall design There is no difference between a typeface and a font --feedback--\nThink about the relationship between a car model and a specific car A typeface is a collection of fonts, while a font is a single character --feedback--\nThink about the relationship between a car model and a specific car --video-solution--\n2\n--text--\nWhat is the main difference between serif and sans-serif fonts --answers--\nSerif fonts are handwritten, while sans-serif fonts are printed --feedback--\nFocus on the visual characteristics of the fonts Serif fonts have small lines at the end of characters, while sans-serif fonts do not Serif fonts are used for headlines, while sans-serif fonts are used for body text --feedback--\nFocus on the visual characteristics of the fonts Serif fonts are older than sans-serif fonts --feedback--\nFocus on the visual characteristics of the fonts --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6028,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672aa80bc17f355fabd2e9e8.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "630714234ede3f204282b07fb5addf8f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd81ee07c43fd2070f0fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bd81ee07c43fd2070f0fe\ntitle: What Are Web Safe Fonts challengeType: 19\ndashedName: what-are-web-safe-fonts\n--description--\nWeb-safe fonts are a subset of fonts that are very likely to be installed on a computer or device They are widely supported across different operating systems and web browsers, so it's very likely that they will be rendered and displayed consistently Let's see how this works Browsers are responsible for interpreting and displaying fonts on a website When the browser has to render a font, it tries to find the font file on the user's system But if the font is not found, it will usually fall back to a default system font This ensures that the content is still readable, even if the specific font that should be rendered on the website is missing However, the fallback font selected by the browser may look very different from the font that was originally supposed to be rendered This can have a critical impact on the overall design and user experience To avoid this, you should use web-safe fonts whenever possible You have two options You can either use them as your primary fonts or you can use custom fonts with a web-safe font as a fallback option This way, you can control how the website will look in case the custom font is not found Let's check out some examples of web-safe fonts In a previous lecture, you learned that sans-serif fonts are commonly used for web development because they don't have small \"feet\" or lines at the end of the characters, so they're easy to read on screen Some examples of web-safe sans-serif fonts are:\nArial\nVerdana\nTrebuchet MS\nIn contrast, serif fonts do have small \"feet\" at the end of the characters, so they're commonly used for traditional print But if you ever need to use them for web development purposes, web-safe serif fonts include:\nTimes New Roman\nGeorgia\nBy using web-safe fonts, you can make sure that your design looks consistent across devices and platforms They can also enhance accessibility for users with visual disabilities, since they are simple and easy to read And finally, web-safe fonts can reduce page load time, since they don't have to be downloaded if they're already installed Now that you know what web-safe fonts are, you can start using them and assigning them as fallbacks to create reliable user experiences across browsers and platforms",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3854,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd81ee07c43fd2070f0fe.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "27310f76c1a148b16037b3390f94b517",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd81ee07c43fd2070f0fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "make sure that your design looks consistent across devices and platforms They can also enhance accessibility for users with visual disabilities, since they are simple and easy to read And finally, web-safe fonts can reduce page load time, since they don't have to be downloaded if they're already installed Now that you know what web-safe fonts are, you can start using them and assigning them as fallbacks to create reliable user experiences across browsers and platforms--questions--\n--text--\nWhich of the following is a key characteristic of web-safe fonts --answers--\nThey are difficult to read --feedback--\nThink about the primary advantage of using web-safe fonts They are designed for specific types of content --feedback--\nThink about the primary advantage of using web-safe fonts They are widely supported across different platforms and browsers They are only available in serif styles --feedback--\nThink about the primary advantage of using web-safe fonts --video-solution--\n3\n--text--\nWhich of the following is not a web-safe font --answers--\nArial\nVerdana\nGeorgia\nDancing Script\n--feedback--\nThink about the most common fonts used on the web --video-solution--\n4\n--text--\nWhen are web-safe fonts particularly useful --answers--\nFor complex and visually demanding web designs --feedback--\nThink about the situations where a reliable and universally supported font is needed When a specific custom font is essential for branding purposes --feedback--\nThink about the situations where a reliable and universally supported font is needed For basic web design and when consistent rendering is a priority For creating custom fonts --feedback--\nThink about the situations where a reliable and universally supported font is needed --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3854,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd81ee07c43fd2070f0fe.md",
      "source_type": "git_repo"
    },
    "token_count": 326,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "927b5f661f41a014f3d18e89ddbc9c22",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd834cedccefd5939a913.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bd834cedccefd5939a913\ntitle: What Is the @font-face At-Rule, and How Does It Work challengeType: 19\ndashedName: what-is-the-font-face-at-rule\n--description--\nBefore we dive in, you should know what an at-rule is in CSS At-rules are statements that provide instructions to the browser You can use them to define various aspects of the stylesheet, such as media queries, keyframes, font faces, and more You'll learn more about concepts like media queries and keyframes in future lectures This time, you'll learn about the @font-face at-rule With @font-face, you can define a custom font by specifying the font file, format, and other important properties, like weight and style This is the basic syntax You can see @font-face followed by a block enclosed by curly brackets:\ncss\n@font-face {\n/* Descriptors */\n}\nWithin the curly brackets, you will need to include descriptors to customize your font face Let's see some of the most commonly used ones The font-family descriptor specifies the name that you will use throughout the stylesheet to refer to that font For example, let's say that you define this @font-face rule It has the font-family descriptor defined and its value is MyCustomFont:\ncss\n@font-face {\nfont-family: \"MyCustomFont\";\n}\nIn that case, you would need to use that name in your stylesheet wherever you want to assign that custom font family to all the elements matched by a CSS selector For example, you would use it as the value of font-family:\ncss\nbody {\nfont-family: \"MyCustomFont\";\n}\nBut for the @font-face at-rule to be valid, you also need to specify the src This contains references to the font resources It's basically a list of external references or locally-installed font face names separated by commas It can also include hints about the format and technology of the font resources In the code below, the src is defined The value is a list of URLs separated by commas and placed on separate lines to improve readability:\ncss\n@font-face {\nfont-family: \"MyCustomFont\";\nsrc: url(\"path/to/font woff2\"),\nurl(\"path/to/font woff\"),\nurl(\"path/to/font otf\");\n}\nYou can call the url() function to include a file in your stylesheet In this case, we are including the font files",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5842,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd834cedccefd5939a913.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0a7c075f0d831922b91de3052fdb8f72",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd834cedccefd5939a913.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "commas It can also include hints about the format and technology of the font resources In the code below, the src is defined The value is a list of URLs separated by commas and placed on separate lines to improve readability: css @font-face { font-family: \"MyCustomFont\"; src: url(\"path/to/font woff2\"), url(\"path/to/font woff\"), url(\"path/to/font otf\"); } You can call the url() function to include a file in your stylesheet In this case, we are including the font filesYou'll need to write the file path within parentheses and quotation marks, including the file extension To improve readability, you can write each resource on a different line, but the last one should end with a semicolon For each font resource, you can also specify the format This is optional It's a hint for the browser on the font format If the format is omitted, the resource will be downloaded and the format will be detected after it's downloaded If the format is invalid, the resource will not be downloaded Possible font formats include collection, embedded-opentype, opentype, svg, truetype, woff, and woff2 Here's an example with font formats Notice how we write the specific format within parentheses and quotes:\ncss\n@font-face {\nfont-family: \"MyCustomFont\";\nsrc: url(\"path/to/font woff2\") format(\"woff2\"),\nurl(\"path/to/font otf\") format(\"opentype\"),\nurl(\"path/to/font woff\") format(\"woff\");\n}\nIn this example, you can see that we're specifying the WOFF2 format, the OpenType format, and the WOFF format woff stands for \"Web Open Font Format \" The difference between WOFF and WOFF2 is the algorithm used to compress the data OpenType is a format for scalable computer fonts developed by Microsoft and Adobe that allows users to access additional features in a font It's widely used across major operating systems In addition to specifying the format, you can also specify the technology of the font resource This is optional too Here's an example where we specify the technology of the second font resource css\n@font-face {\nfont-family: \"MyCustomFont\";\nsrc: url(\"path/to/font woff2\") format(\"woff2\"),\nurl(\"path/to/font otf\") format(\"opentype\") tech(color-COLRv1),\nurl(\"path/to/font",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5842,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd834cedccefd5939a913.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "1147a36c838b14e823418bb7a70e1e72",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd834cedccefd5939a913.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is a format for scalable computer fonts developed by Microsoft and Adobe that allows users to access additional features in a font It's widely used across major operating systems In addition to specifying the format, you can also specify the technology of the font resource This is optional too Here's an example where we specify the technology of the second font resource css @font-face { font-family: \"MyCustomFont\"; src: url(\"path/to/font woff2\") format(\"woff2\"), url(\"path/to/font otf\") format(\"opentype\") tech(color-COLRv1), url(\"path/to/fontwoff\") format(\"woff\");\n}\nThese are the fundamentals of the @font-face rule With this at-rule, you can specify the font file to define custom fonts for your unique designs --questions--\n--text--\nWhat is the primary purpose of the @font-face at-rule in CSS --answers--\nTo define the color of text --feedback--\nThink about how to incorporate non-standard fonts into your designs To control the font size of text --feedback--\nThink about how to incorporate non-standard fonts into your designs To define custom fonts To adjust the line spacing of text --feedback--\nThink about how to incorporate non-standard fonts into your designs --video-solution--\n3\n--text--\nWhich of the following properties is required within the @font-face rule to specify the font file --answers--\nfont-name\n--feedback--\nThink about how to specify the font file within your stylesheet src\nfont-weight\n--feedback--\nThink about how to specify the font file within your stylesheet font-style\n--feedback--\nThink about how to specify the font file within your stylesheet --video-solution--\n2\n--text--\nWhat is the primary advantage of using custom fonts defined with @font-face compared to relying solely on web-safe fonts --answers--\nIncreased browser compatibility --feedback--\nThink about how custom fonts can make your design unique Enhanced customization and branding options Faster page loading times --feedback--\nThink about how custom fonts can make your design unique Simplified font management --feedback--\nThink about how custom fonts can make your design unique --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5842,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd834cedccefd5939a913.md",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "90543df9bab2c8f4dafe6f9b62e70d08",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd814105a0ffcf36f9233.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bd814105a0ffcf36f9233\ntitle: What Are Font Families and How Do They Work challengeType: 19\ndashedName: what-are-font-families\n--description--\nA font family is a group of fonts that share a common design All the fonts that belong to the same family are based on the same core typeface, but they also have variations in their style, weight, and width You can think of them as siblings who share similar characteristics but also have some differences For example, Arial is a font family that includes variations like Arial Bold and Arial Italic In CSS, you can set the font family with the font-family property That is, you write the property followed by a colon, a space, and the font family that will be assigned:\ncss\nfont-family: Arial;\nBut what if the font family is not found You can specify multiple font families in order of priority, from highest to lowest, by separating them with commas These alternative fonts will act as fallback options In this example, Arial is a primary font and Lato is an alternative font:\ncss\nfont-family: Arial, Lato;\nThe browser will render the first font (Arial) if it's found on the device If not, the second font (Lato) will be rendered You should also know how this process works behind the scenes The selection process doesn't stop if the first font is available The font family is chosen one character at a time, so if a font lacks a specific character, the browser looks for it in the lower-priority fonts Interesting, right In the context of web development, you'll also find generic font families They're very important A generic font family is a default font that web browsers will render when the higher priority fonts are not available To ensure that the content is still readable, the browser replaces the original font with the most appropriate font found, based on the generic font family specified Some of the most commonly used ones are:\nserif\nsans-serif\nmonospace\ncursive\nfantasy\nBut there are more options to choose from In the code below, we have three alternative font families:\ncss\nfont-family: Arial, Lato, sans-serif;\nArial has the highest priority If Arial is not found, then the browser will try to render Lato If neither is found, the browser will use the generic sans-serif font family, selecting a font with these characteristics from those installed on the user's system",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4609,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd814105a0ffcf36f9233.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6eee821110bc5ba2998c792f0ec9c47b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd814105a0ffcf36f9233.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "commonly used ones are: serif sans-serif monospace cursive fantasy But there are more options to choose from In the code below, we have three alternative font families: css font-family: Arial, Lato, sans-serif; Arial has the highest priority If Arial is not found, then the browser will try to render Lato If neither is found, the browser will use the generic sans-serif font family, selecting a font with these characteristics from those installed on the user's systemYou should always include a generic font family at the end of the font-family list Keep in mind that the generic font may look different from the font that you originally envisioned in your design, so it's always helpful to check how these fallback fonts look on different browsers To make the user experience as consistent as possible, it's also recommended to use web-safe fonts These font families are usually installed on most devices, so they're very likely to be found and rendered correctly for most users You'll learn more about them in the next lectures Font families are essential in the world of web design By using the font-family property, you can instantly transform the look and feel of your text --questions--\n--text--\nWhat is the primary purpose of the font-family CSS property --answers--\nTo set the color of the text --feedback--\nThink about the visual appearance of the text To control the font size of the text --feedback--\nThink about the visual appearance of the text To define the typeface used for the text To adjust the line spacing of the text --feedback--\nThink about the visual appearance of the text --video-solution--\n3\n--text--\nWhich of the following is a common generic font family --answers--\nHelvetica\n--feedback--\nThink about the broad categories of fonts Times New Roman\n--feedback--\nThink about the broad categories of fonts Sans-Serif\nArial\n--feedback--\nThink about the broad categories of fonts --video-solution--\n3\n--text--\nHow can you specify multiple font families as a fallback in CSS --answers--\nBy separating them with commas By using nested font-family declarations --feedback--\nThink about how to provide alternative fonts in case the primary font is not available By using the & character --feedback--\nThink about how to provide alternative fonts in case the primary font is not available By using the | character --feedback--\nThink about how to provide alternative fonts in case the primary font is not available --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4609,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd814105a0ffcf36f9233.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0412bf3f09b17c8d53d03c912cfaaed5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd853c985cdfdeb32f4f9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bd853c985cdfdeb32f4f9\ntitle: What Is the text-shadow Property, and How Does It Work challengeType: 19\ndashedName: what-is-the-text-shadow-property\n--description--\nCSS doesn't apply any shadows to the text by default This is an example of a paragraph without any shadows But if you do need to add shadows, you can use the text-shadow property css\ntext-shadow: /* Values */\nIn CSS, you can describe a shadow through a combination of its X offset, Y offset, blur radius, and color First, you need to specify the X and Y offset, which represent the horizontal and vertical distance of the shadow from the text, respectively These values are required Here's an example of how to apply an X and Y offset on a shadow We apply the text-shadow property with an x-offset of 3px and a y-offset of 2px:\n```html\nHello, World ```\ncss\np {\ntext-shadow: 3px 2px;\n}\nIn the browser, the text and the shadow will look similar but we can also customize the color of the shadow by specifying the value before or after the offset Let's set the shadow color We will use a hexadecimal color here but you can use any valid color format css\np {\ntext-shadow: 3px 2px #00ffc3;\n}\nWe are writing the color after the offset but you can also write the color before the offset if you prefer It's equivalent:\ncss\np {\ntext-shadow: #00ffc3 3px 2px;\n}\nIn the browser, the shadow will have a specific color, so we can distinguish it very easily from the text Now that we can differentiate the shadow from the text, it's also important to see how positive and negative values affect the shadow offset Positive values of the X offset and Y offset will move the shadow right and down, respectively, while negative values will move the shadow left and up Here's an example that uses negative values instead:\ncss\np {\ntext-shadow: -3px -2px #00ffc3;\n}\nNow the shadow will move left and up in relation to the text Great But the shadow is not looking very nice, because it looks exactly like the original text but placed behind it To make it look nicer, we need to add a third value, the blur radius This value is optional but makes the shadow look a lot smoother and more subtle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5267,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd853c985cdfdeb32f4f9.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "712791ba67528db0ff8410ad10122d30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd853c985cdfdeb32f4f9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "uses negative values instead: css p { text-shadow: -3px -2px #00ffc3; } Now the shadow will move left and up in relation to the text Great But the shadow is not looking very nice, because it looks exactly like the original text but placed behind it To make it look nicer, we need to add a third value, the blur radius This value is optional but makes the shadow look a lot smoother and more subtleThe default value of the radius blur is zero The higher the value, the bigger the blur, which means that the shadow becomes lighter Here, we are setting the blur radius to 3px and we're back to positive values for the offset:\ncss\np {\ntext-shadow: 3px 2px 3px #00ffc3;\n}\nNow it's starting to look like a shadow It's more blurry and subtle, so we can focus on the main text while the shadow adds some style in the background From here, we can tweak the values a little bit until we find a combination of offset, color, and blur radius that fits our needs It's also helpful to know that the text can have more than one shadow You just need to write them in the same text-shadow property separated by commas They will be applied in layers, from front to back, with the first shadow at the top Here's an example of a paragraph with three shadows applied in layers Notice that all these shadows are defined in the same text-shadow property and separated by commas:\ncss\np {\ntext-shadow:\n3px 2px 3px #00ffc3,\n-3px -2px 3px #0077ff,\n5px 4px 3px #dee7e5;\n}\ntext-shadow is a powerful CSS property for making your text stand out It can also enhance the overall design of your web application By choosing the offset, blur, and color, you can create a wide range of shadow effects --questions--\n--text--\nWhat is the primary purpose of the text-shadow CSS property --answers--\nTo adjust the font size of text --feedback--\nThink about how the text-shadow property affects the visual appearance of text To change the color of text --feedback--\nThink about how the text-shadow property affects the visual appearance of text To create a shadow effect for text To control the spacing between lines of text --feedback--\nThink about how the text-shadow property affects the visual appearance of text",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5267,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd853c985cdfdeb32f4f9.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "54a48895a32362b77297fbcee9db0a6f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd853c985cdfdeb32f4f9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the primary purpose of the text-shadow CSS property --answers-- To adjust the font size of text --feedback-- Think about how the text-shadow property affects the visual appearance of text To change the color of text --feedback-- Think about how the text-shadow property affects the visual appearance of text To create a shadow effect for text To control the spacing between lines of text --feedback-- Think about how the text-shadow property affects the visual appearance of text--video-solution--\n3\n--text--\nHow can you create a black text shadow with a horizontal offset to the right and a blur radius of 5 pixels --answers--\ntext-shadow: 5px 0px 0px black;\n--feedback--\nThink about the order of the values in the text-shadow property text-shadow: 5px 0px 5px black;\ntext-shadow: 5px 5px 0px black;\n--feedback--\nThink about the order of the values in the text-shadow property text-shadow: 0px 5px 0px black;\n--feedback--\nThink about the order of the values in the text-shadow property --video-solution--\n2\n--text--\nHow can you create a multiple-layered text shadow effect --answers--\nBy defining multiple shadows in the text-shadow property By nesting elements within each other --feedback--\nThink about how to combine multiple shadow effects By using the filter property --feedback--\nThink about how to combine multiple shadow effects By applying a background image --feedback--\nThink about how to combine multiple shadow effects --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5267,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd853c985cdfdeb32f4f9.md",
      "source_type": "git_repo"
    },
    "token_count": 313,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2a81a99184f4d3d64e7010002e4a6ae6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\672aa8ac4631d1623ec5cd86.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa8ac4631d1623ec5cd86\ntitle: What Is CSS Grid, and How Does It Differ from Flexbox challengeType: 19\ndashedName: what-is-css-grid\n--description--\nCSS Grid is a powerful layout system that allows web developers to create complex and responsive web page layouts with ease Imagine you're arranging furniture in a room – CSS Grid is like having an invisible grid on your floor that helps you position everything precisely where you want it When we build websites, we often need to arrange different elements on the page Before CSS Grid, this was sometimes tricky, especially for complex layouts CSS Grid simplifies this process by dividing your web page into rows and columns, creating a grid-like structure Let's imagine you were working with a container div with several items nested inside like this:\n```html\nItem 1\nItem 2\nItem 3\nItem 4\nItem 5\nItem 6\n```\nIf you wanted to style those elements in a grid format, you can set the display to grid and apply columns like this:\n```css container {\ndisplay: grid;\ngrid-template-columns: 1fr 1fr 1fr;\ngrid-gap: 20px;\n} item {\nbackground-color: lightgray;\npadding: 20px;\ntext-align: center;\nborder: 1px solid #ccc;\n}\n```\nIn this code, we're telling the browser to create a grid with three equal-width columns, that's what the 1fr 1fr 1fr means, and we're adding a 20-pixel gap between each grid item Now, you might be wondering: \"What about Flexbox Isn't that also used for layouts \"\nYou're right Flexbox is another CSS layout model, and it's quite useful too But there are some key differences Flexbox is one-dimensional, while Grid is two-dimensional This means Flexbox works great for laying things out in a single row or column, while Grid excels at creating layouts with both rows and columns Flexbox is content-first, meaning it adjusts the layout based on the content Grid, on the other hand, is layout-first, allowing you to create the layout and then place items into it Grid gives you more precise control over placement You can tell an item exactly which row and column to occupy Here's a Flexbox example for comparison:\ncss",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4792,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\672aa8ac4631d1623ec5cd86.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "143a45ba30e42b41acf053a0bdb963a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\672aa8ac4631d1623ec5cd86.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "out in a single row or column, while Grid excels at creating layouts with both rows and columns Flexbox is content-first, meaning it adjusts the layout based on the content Grid, on the other hand, is layout-first, allowing you to create the layout and then place items into it Grid gives you more precise control over placement You can tell an item exactly which row and column to occupy Here's a Flexbox example for comparison: csscontainer {\ndisplay: flex;\njustify-content: space-between;\n}\nThis creates a flex container where the items are spaced evenly along the main axis Both Grid and Flexbox have their strengths, and often, the best layouts use a combination of both You might use Grid for the overall page layout, and then use Flexbox for aligning items within each grid area In summary, CSS Grid is a powerful tool that allows for precise, two-dimensional layouts While it might seem complex at first, with practice, it becomes an invaluable tool for creating responsive and complex web layouts --questions--\n--text--\nWhat is the main difference between CSS Grid and Flexbox --answers--\nGrid is newer than Flexbox --feedback--\nThink about how many directions each layout system primarily works with Grid is two-dimensional, while Flexbox is one-dimensional Grid only works with columns, Flexbox only with rows --feedback--\nThink about how many directions each layout system primarily works with Grid is only for desktop layouts, Flexbox for mobile --feedback--\nThink about how many directions each layout system primarily works with --video-solution--\n2\n--text--\nIn the CSS Grid example provided, what does 1fr 1fr 1fr mean in the grid-template-columns property --answers--\nCreate 3 columns, each 1 pixel wide --feedback--\nfr stands for fraction, and it's about dividing available space Create 3 columns, each taking up one-third of the available space Create 1 column that's 3 times as wide as the others --feedback--\nfr stands for fraction, and it's about dividing available space Create a single column divided into 3 equal parts --feedback--\nfr stands for fraction, and it's about dividing available space --video-solution--\n2\n--text--\nWhich statement about CSS Grid is true --answers--\nIt can only be used for desktop layouts --feedback--\nThink about the level of control Grid gives you over item placement It requires JavaScript to function properly --feedback--\nThink about the level of control Grid gives you over item placement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4792,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\672aa8ac4631d1623ec5cd86.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d133efa79a8aba49930178eac3b24607",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\672aa8ac4631d1623ec5cd86.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "it's about dividing available space Create a single column divided into 3 equal parts --feedback-- fr stands for fraction, and it's about dividing available space --video-solution-- 2 --text-- Which statement about CSS Grid is true --answers-- It can only be used for desktop layouts --feedback-- Think about the level of control Grid gives you over item placement It requires JavaScript to function properly --feedback-- Think about the level of control Grid gives you over item placementIt allows for precise placement of items in both rows and columns It automatically adjusts layout based on content size --feedback--\nThink about the level of control Grid gives you over item placement --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4792,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\672aa8ac4631d1623ec5cd86.md",
      "source_type": "git_repo"
    },
    "token_count": 136,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ab45c7b0a15c4d1bc58ae6e8fc4d69f1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd8453d1371fdb1510fe5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bd8453d1371fdb1510fe5\ntitle: How Do You Work with External Fonts Like Font Squirrel and Google Fonts challengeType: 19\ndashedName: how-do-you-work-with-external-fonts-like-font-squirrel-and-google-fonts\n--description--\nAn external font is a font file that is not included directly within your project files They're usually hosted on a separate server A server is a computer that provides data or services to other computers over a network You will learn more about servers in future lectures External fonts give you more flexibility because you can use custom fonts that may not be installed on the user's device Google Fonts and Font Squirrel are popular online resources for finding and using free fonts for web development purposes You can incorporate them into your projects very easily Let's start with Google Fonts This is a Google service that offers a collection of fonts, many of which are designed specifically for web development On the Google Fonts user interface, you can see many different elements Let's go through them one by one On the left sidebar, you will find:\nA section to see, find, and filter fonts A special section on Noto, a collection of high-quality fonts with various weights, widths, and styles that are perfect for communicating in more than 1,000 languages and over 150 writing systems A section where you can find and download icons for your web projects A section where you can learn more about fonts and their best practices, followed by frequently asked questions To add a Google Font to your website, you should go to the first section (Fonts) You can customize the preview text on the left sidebar, where it says \"Preview \" Just write the text that you would like to see and it will be updated automatically This is helpful to preview the font with the text that you already have in mind for your website You can also adjust the font size and filter the fonts based on their characteristics To see more information about a font, just click on it and you will see important information about the font, like who designed it, preview text, and different styles, like light, regular, medium, bold, and black If you click on the options at the top, you can go to the type tester, see individual glyphs, and learn more about the font and its license You can customize the font size of the preview text with the blue slider located next to the field where you can enter the preview text",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd8453d1371fdb1510fe5.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "e8f7cf136ed82658a89753d177547d62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd8453d1371fdb1510fe5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "see important information about the font, like who designed it, preview text, and different styles, like light, regular, medium, bold, and black If you click on the options at the top, you can go to the type tester, see individual glyphs, and learn more about the font and its license You can customize the font size of the preview text with the blue slider located next to the field where you can enter the preview textOnce you're ready to add the font to your project, click on the blue \"Get font\" button at the top You'll be taken to a summary page where you'll see the fonts that you currently have selected You can have multiple fonts selected simultaneously Next, you have to choose if you would like to download the font files to add them to your project as local files or if you would like to use them as external fonts and download them from Google's servers when a user enters your website Click on \"Download all\" if you want to download them but if you prefer to use them as external fonts on Google's servers, click on \"Get embed code \" If you click on \"Get embed code,\" you'll see the instructions that you should follow to add these external fonts to your project For web development projects, you have two options You can either use a link element or @import If you choose the link element option, you can copy and paste the HTML snippet and the CSS rules to add them to your project You should embed the code in the head element of your HTML file and add the CSS rules that fit your needs For example, this is what you would add to your HTML file to add all Roboto styles:\nhtml\n<link rel=\"preconnect\" href=\"https://fonts googleapis com\">\n<link rel=\"preconnect\" href=\"https://fonts gstatic com\" crossorigin>\n<link href=\"https://fonts googleapis com/css2 family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap\" rel=\"stylesheet\">\nAnd this is the CSS:\n```css roboto-thin {\nfont-family: \"Roboto\", sans-serif;\nfont-weight: 100;\nfont-style: normal;\n} roboto-light {\nfont-family: \"Roboto\", sans-serif;\nfont-weight: 300;\nfont-style: normal;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd8453d1371fdb1510fe5.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "d68414dfb50f9eee153f37951e998322",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd8453d1371fdb1510fe5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "head element of your HTML file and add the CSS rules that fit your needs For example, this is what you would add to your HTML file to add all Roboto styles: html <link rel=\"preconnect\" href=\"https://fonts googleapis com\"> <link rel=\"preconnect\" href=\"https://fonts gstatic com\" crossorigin> <link href=\"https://fonts googleapis com/css2 family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap\" rel=\"stylesheet\"> And this is the CSS: ```css roboto-thin { font-family: \"Roboto\", sans-serif; font-weight: 100; font-style: normal; } roboto-light { font-family: \"Roboto\", sans-serif; font-weight: 300; font-style: normal; }roboto-regular {\nfont-family: \"Roboto\", sans-serif;\nfont-weight: 400;\nfont-style: normal;\n} roboto-medium {\nfont-family: \"Roboto\", sans-serif;\nfont-weight: 500;\nfont-style: normal;\n} roboto-bold {\nfont-family: \"Roboto\", sans-serif;\nfont-weight: 700;\nfont-style: normal;\n} roboto-black {\nfont-family: \"Roboto\", sans-serif;\nfont-weight: 900;\nfont-style: normal;\n} roboto-thin-italic {\nfont-family: \"Roboto\", sans-serif;\nfont-weight: 100;\nfont-style: italic;\n} roboto-light-italic {\nfont-family: \"Roboto\", sans-serif;\nfont-weight: 300;\nfont-style: italic;\n} roboto-regular-italic {\nfont-family: \"Roboto\", sans-serif;\nfont-weight: 400;\nfont-style: italic;\n} roboto-medium-italic {\nfont-family: \"Roboto\", sans-serif;\nfont-weight: 500;\nfont-style: italic;\n} roboto-bold-italic {\nfont-family: \"Roboto\", sans-serif;\nfont-weight: 700;\nfont-style: italic;\n} roboto-black-italic {\nfont-family: \"Roboto\", sans-serif;\nfont-weight: 900;\nfont-style: italic;\n}\n```\nThere's a CSS rule for each font style Each rule assigns the custom fonts with fallback fonts in case the custom fonts are not loaded properly",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd8453d1371fdb1510fe5.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "4b5b9cd478b40b4c1d9dbfcbcbb4fa8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd8453d1371fdb1510fe5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ font-family: \"Roboto\", sans-serif; font-weight: 300; font-style: italic; } roboto-regular-italic { font-family: \"Roboto\", sans-serif; font-weight: 400; font-style: italic; } roboto-medium-italic { font-family: \"Roboto\", sans-serif; font-weight: 500; font-style: italic; } roboto-bold-italic { font-family: \"Roboto\", sans-serif; font-weight: 700; font-style: italic; } roboto-black-italic { font-family: \"Roboto\", sans-serif; font-weight: 900; font-style: italic; } ``` There's a CSS rule for each font style Each rule assigns the custom fonts with fallback fonts in case the custom fonts are not loaded properlyIf you choose the @import option instead, you will need to add that rule to your CSS file Here is an example:\ncss\n@import url('https://fonts googleapis com/css2 family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');\nThe CSS rules are exactly the same If you only want to include specific font styles, you also have the option to remove them from these snippets The HTML and CSS snippets will be updated automatically And this is Google Fonts It's one of the most popular options for finding free and open source fonts for web development projects Another great option is Font Squirrel, where you can find and download the custom fonts that you envision for your design If you search for a font and click on a result, you'll see more details about the font, including specimens, test drive, glyphs, and Webfont kit You can also see samples of the different styles and variations of the font, like thin, light, medium, bold, and black Once you've decided on a font that you want to use in your project, go to the \"Webfont Kit\" tab Here, you can check if the font's license allows you to use it in @font-face CSS embeddings You can also choose the subset and format Clicking on the \"Download @font-face Kit\" button will download a compressed (zip) file",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd8453d1371fdb1510fe5.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "08ff3c286a18add9986271e3a1748dae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd8453d1371fdb1510fe5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "see samples of the different styles and variations of the font, like thin, light, medium, bold, and black Once you've decided on a font that you want to use in your project, go to the \"Webfont Kit\" tab Here, you can check if the font's license allows you to use it in @font-face CSS embeddings You can also choose the subset and format Clicking on the \"Download @font-face Kit\" button will download a compressed (zip) fileIf you unzip it, you'll find a \"web fonts\" folder, the license as a text file, and an HTML file with instructions on how to use web fonts The web fonts folder will have all the font files that you need for your project You will find them grouped into specific folders for the different fonts styles If you open the HTML file on a browser, it has instructions on how to add the fonts to your project, how to include them in the stylesheet with the @font-face declaration, and how to use them in the CSS rules This is how you can add custom Font Squirrel fonts to your project You can also host them on a separate server and use them as external fonts External fonts are very helpful for customizing the overall look and design of your website They can make your website truly unique However, you should also keep in mind that using multiple external fonts can increase the load time of the website, affecting its overall performance You should always strive to find a balance between style and efficiency --questions--\n--text--\nWhat is the primary advantage of using external fonts from services like Font Squirrel or Google Fonts --answers--\nReduced font file size --feedback--\nThink about how external font services can benefit your web design Increased font rendering speed --feedback--\nThink about how external font services can benefit your web design Expanded font selection and variety Improved browser compatibility --feedback--\nThink about how external font services can benefit your web design --video-solution--\n3\n--text--\nWhat is a potential drawback of using multiple external fonts --answers--\nIncreased website load time Increased likelihood of bugs --feedback--\nThink about the challenges that might arise when relying on multiple external resources Limited customization options --feedback--\nThink about the challenges that might arise when relying on multiple external resources Increased browser compatibility --feedback--\nThink about the challenges that might arise when relying on multiple external resources --video-solution--\n1\n--text--\nWhat is the importance of providing fallback fonts when using external fonts --answers--\nTo create a more visually appealing design",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd8453d1371fdb1510fe5.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "5b97d4c226b534d88033e0031f52d936",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd8453d1371fdb1510fe5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "time Increased likelihood of bugs --feedback-- Think about the challenges that might arise when relying on multiple external resources Limited customization options --feedback-- Think about the challenges that might arise when relying on multiple external resources Increased browser compatibility --feedback-- Think about the challenges that might arise when relying on multiple external resources --video-solution-- 1 --text-- What is the importance of providing fallback fonts when using external fonts --answers-- To create a more visually appealing design--feedback--\nConsider what happens if the external font is not available To improve font rendering performance --feedback--\nConsider what happens if the external font is not available To display the text correctly, even if the external font is not loaded properly To reduce file size --feedback--\nConsider what happens if the external font is not available --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9483,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-fonts\\672bd8453d1371fdb1510fe5.md",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "3ff8f878e0faaefd9f86064d1ebd9e22",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226732b19aa1cacd0a75c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673226732b19aa1cacd0a75c\ntitle: How Can You Create Flexible Grids with the fr Unit challengeType: 19\ndashedName: how-can-you-create-flexible-grids-with-the-fr-unit\n--description--\nIn the previous lecture, you were introduced to CSS grid which can be used to create complex and fluid layouts in your web pages In this lecture, we will explore how to create flexible grid layouts using the fr unit Let's start with this HTML markup which is going to represent our grid container:\n```html\n```\nInside the CSS, we set the display property to grid for the container ```css\nhtml,\nbody {\nwidth: 100%;\nheight: 100%;\n} grid-container {\ndisplay: grid;\ngrid-template-columns: 25% 25% 25% 25%;\ngap: 15px;\nbackground-color: darkgray;\nheight: 100%;\n} col {\nbackground-color: darkslateblue;\n}\n```\ngrid-template-columns is used to set the size for each column In this case, each column size will be 25% of the container Then the gap property is used to create space around each column So far we have been using percentages for the column size but we can also use the fr unit The fr unit is a fractional unit which represents a fraction of the space for the grid container Here is what the code will look like when it is refactored to use fr units instead of percentages ```css\nhtml,\nbody {\nwidth: 100%;\nheight: 100%;\n} grid-container {\ndisplay: grid;\ngrid-template-columns: 1fr 1fr 1fr 1fr;\ngap: 15px;\nbackground-color: darkgray;\nheight: 100%;\n} col {\nbackground-color: darkslateblue;\n}\n```\nEach column will take up one fraction of the available space Since there are four columns, each column will have an equal share of the space available in the grid container As you start to build your grid layouts, you will find yourself wanting to use fr units more often because they provide a flexible, proportional way to distribute space, allowing you to create responsive layouts that adapt to varying screen sizes without needing to manually adjust pixel values --questions--\n--text--\nWhat is the purpose of the grid-template-columns property in a CSS grid container --answers--\nIt sets the color for the columns",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4221,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226732b19aa1cacd0a75c.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f28813c03b37a2bbad53d6cef58e11a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226732b19aa1cacd0a75c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "available in the grid container As you start to build your grid layouts, you will find yourself wanting to use fr units more often because they provide a flexible, proportional way to distribute space, allowing you to create responsive layouts that adapt to varying screen sizes without needing to manually adjust pixel values --questions-- --text-- What is the purpose of the grid-template-columns property in a CSS grid container --answers-- It sets the color for the columns--feedback--\nThink about how sizes are determined for columns\nIt sets the names and track sizing for columns It sets the gap between the columns --feedback--\nThink about how sizes are determined for columns\nIt specifies the number of rows in the grid --feedback--\nThink about how sizes are determined for columns\n--video-solution--\n2\n--text--\nHow does the fr unit in CSS grid differ from using percentages --answers--\nfr units create overflow in containers whereas percentages do not --feedback--\nRemember that fr units allow for proportional distribution of space fr units allocate space based on the available space in the container, whereas percentages take up a percentage of the available space fr units are used for creating flexible layouts whereas percentages are not --feedback--\nRemember that fr units allow for proportional distribution of space There is no difference between fr units and percentages --feedback--\nRemember that fr units allow for proportional distribution of space --video-solution--\n2\n--text--\nWhat happens when you use grid-template-columns: 1fr 1fr 1fr 1fr; in a CSS grid layout --answers--\nThe container will have four columns, each taking up 10% of the container's width --feedback--\nThink about how the space is distributed when using the fr unit The columns will stack vertically --feedback--\nThink about how the space is distributed when using the fr unit The columns will be evenly spaced, but their sizes will remain fixed --feedback--\nThink about how the space is distributed when using the fr unit The columns will take up equal fractions of the available space, with the size adjusting automatically when the container resizes --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4221,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226732b19aa1cacd0a75c.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5c1f9fe87cf3abde60068079887eebad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732268d05c3661d32a0fee8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732268d05c3661d32a0fee8\ntitle: How Can You Repeat Track Listings in a Grid Layout challengeType: 19\ndashedName: how-can-you-repeat-track-listings-in-a-grid-layout\n--description--\nIn the previous lectures, we have been working with the grid-template-columns property and setting the value to a few fractional units css grid-container {\ndisplay: grid;\ngrid-template-columns: 1fr 1fr 1fr 1fr;\ncolumn-gap: 10px;\n}\nWhile the following code is completely valid, there is an easier way to repeat a section or all of your track listings The repeat() function is used to repeat a section or all of the tracks for columns or rows This function takes in a repeat count and the tracks you wish to repeat Here is a revised version of the earlier example using the repeat function:\ncss grid-container {\ndisplay: grid;\ngrid-template-columns: repeat(4, 1fr);\ncolumn-gap: 10px;\n}\nThere won't be a change for the styles in the browser, but this is a more concise way to write repeated values for the columns The repeat() function will accept any valid pattern that you can use for rows or columns In this example, we have HTML markup for a grid container:\n```html\n```\nThen we are using the repeat() function to set the first and third columns to 20 pixels and the second and fourth columns to one fractional unit ```css grid-container {\ndisplay: grid;\ngrid-template-columns: repeat(2, 20px 1fr);\ncolumn-gap: 10px;\n} grid-container div {\nheight: 100px;\nbackground-color: darkblue;\n}\n```\nSometimes, you might opt to write out each individual value instead of using the repeat() function But there are times when this function comes in handy, especially when you want to repeat a particular pattern for a track listing --questions--\n--text--\nWhich of the following is the correct syntax for repeating track listings --answers--\ncss grid-container {\ndisplay: grid;\ngrid-template-columns: repeat(1fr times 4);\ncolumn-gap: 10px;\n}\n--feedback--\nReview the beginning of the lecture where this was discussed css grid-container {\ndisplay: grid;\ngrid-template-columns: repeat(4, 1fr);\ncolumn-gap: 10px;\n}\ncss",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4041,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732268d05c3661d32a0fee8.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fb1db8003fd55d883dc061871d43de5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732268d05c3661d32a0fee8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the repeat() function But there are times when this function comes in handy, especially when you want to repeat a particular pattern for a track listing --questions-- --text-- Which of the following is the correct syntax for repeating track listings --answers-- css grid-container { display: grid; grid-template-columns: repeat(1fr times 4); column-gap: 10px; } --feedback-- Review the beginning of the lecture where this was discussed css grid-container { display: grid; grid-template-columns: repeat(4, 1fr); column-gap: 10px; } cssgrid-container {\ndisplay: grid;\ngrid-template-columns: multiply(4, 1fr);\ncolumn-gap: 10px;\n}\n--feedback--\nReview the beginning of the lecture where this was discussed css grid-container {\ndisplay: grid;\ngrid-template-columns: repeatSections(4, 1fr);\ncolumn-gap: 10px;\n}\n--feedback--\nReview the beginning of the lecture where this was discussed --video-solution--\n2\n--text--\nWhat is the primary benefit of using the repeat() function in the grid-template-columns property --answers--\nIt allows repeating column definitions more concisely and reduces redundancy It makes the code run faster --feedback--\nThink about how this property reduces repetition It leads to error free code --feedback--\nThink about how this property reduces repetition It makes the web page more responsive --feedback--\nThink about how this property reduces repetition --video-solution--\n1\n--text--\nWhat is the result of setting grid-template-columns to repeat(2, 20px 1fr); --answers--\nIt creates four columns all set to 1fr wide --feedback--\nReview the end of the lecture where this was discussed It creates two columns where each is set to 20px wide --feedback--\nReview the end of the lecture where this was discussed It creates four columns where the first and third are 20px wide, and the second and fourth are 1fr wide It creates three columns where the first and second are 20px wide, and the third is fr wide --feedback--\nReview the end of the lecture where this was discussed --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4041,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732268d05c3661d32a0fee8.md",
      "source_type": "git_repo"
    },
    "token_count": 441,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "6440edda99c8aa3c198693cd13bdc6d0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732267ecab2151ced471cd4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732267ecab2151ced471cd4\ntitle: How Can You Create Gaps Between Tracks in a Grid challengeType: 19\ndashedName: how-can-you-create-gaps-between-tracks-in-a-grid\n--description--\nIn the previous lectures, we talked a little bit about how to create space between grid items But in this lecture, we will dive into more detail about how to use the row-gap, column-gap and gap properties in a grid layout But first we need to review what a track is in CSS grid A track is the space between two neighboring grid lines These lines are automatically created when you use CSS Grid In this context, tracks generally refer to the rows and columns that make up the grid layout To create gaps between columns in a CSS Grid, you can use the column-gap property Acceptable values for this property include pixels, the em unit, percentages, or the normal keyword If you use the normal value for the column-gap property, then the result will be 0 for grid layouts and 1em for multi-column layouts Here is an example of the markup for a four column grid layout:\n```html\n```\nFor the CSS, we set the display to grid and the column-gap property to 10 pixels:\n```css grid-container {\ndisplay: grid;\nheight: 100px;\ngrid-template-columns: 1fr 1fr 1fr 1fr;\ncolumn-gap: 10px;\n} grid-container div {\nbackground-color: darkblue;\n}\n```\nIf we wanted to change the example to have two rows of blue boxes and create more space between the rows, we can use the row-gap property:\n```css grid-container {\ndisplay: grid;\ngrid-template-columns: 1fr 1fr;\ncolumn-gap: 10px;\nrow-gap: 30px;\n} grid-container div {\nheight: 100px;\nbackground-color: darkblue;\n}\n```\nIn this revised example, we are setting the row-gap property to 30 pixels and changing the grid-template-columns to use just two 1fr units instead of four to create two rows of boxes Just like the column-gap property, acceptable values for the row-gap property can include percentages, em, and pixels If you want to use a shorthand for creating gaps between rows and columns, you can use the gap property",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4699,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732267ecab2151ced471cd4.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "2324399d2487c6a6ec3732a68cacb214",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732267ecab2151ced471cd4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ height: 100px; background-color: darkblue; } ``` In this revised example, we are setting the row-gap property to 30 pixels and changing the grid-template-columns to use just two 1fr units instead of four to create two rows of boxes Just like the column-gap property, acceptable values for the row-gap property can include percentages, em, and pixels If you want to use a shorthand for creating gaps between rows and columns, you can use the gap propertyHere is the basic syntax:\ncss\ngap: row-value optional-column-value;\nIf you specify one value for the gap property, then that value will be applied to both rows and columns If you specify two values, then the first value will go to the row and the second will be applied to the column:\n```css grid-container {\ndisplay: grid;\ngrid-template-columns: 1fr 1fr;\ngap: 30px 10px;\n} grid-container div {\nheight: 100px;\nbackground-color: darkblue;\n}\n```\nAcceptable values for the gap shorthand property include percentages, pixels, em and even calc() values But you cannot use fr units here The row-gap, column-gap, and gap properties provide flexible ways to control spacing between items in a CSS Grid layout By using these properties, you can easily create visually appealing grids with consistent and adjustable gaps between rows and columns --questions--\n--text--\nWhat is the purpose of the column-gap property in a CSS Grid layout --answers--\nIt sets the space between grid columns\nIt defines the size of the grid items\n--feedback--\nThink about the spacing for columns here It defines the number of columns in the grid --feedback--\nThink about the spacing for columns here It sets the space between grid rows --feedback--\nThink about the spacing for columns here --video-solution--\n1\n--text--\nWhat happens if you use the normal value for the column-gap property --answers--\nThe gap between columns is set to 10\n--feedback--\nReview the beginning of the lecture where this was discussed The gap between columns is set to -1\n--feedback--\nReview the beginning of the lecture where this was discussed The gap between columns is set to 14\n--feedback--\nReview the beginning of the lecture where this was discussed The gap between columns is set to 0\n--video-solution--\n4\n--text--\nWhich of the following is the correct property used as a shorthand for creating gaps between rows and columns",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4699,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732267ecab2151ced471cd4.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b75985ab4dcf0b427188f7f15215a8a4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732267ecab2151ced471cd4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "beginning of the lecture where this was discussed The gap between columns is set to -1 --feedback-- Review the beginning of the lecture where this was discussed The gap between columns is set to 14 --feedback-- Review the beginning of the lecture where this was discussed The gap between columns is set to 0 --video-solution-- 4 --text-- Which of the following is the correct property used as a shorthand for creating gaps between rows and columns--answers--\ngapsAndSpaces property\n--feedback--\nReview the end of the lecture where the correct property is discussed space property\n--feedback--\nReview the end of the lecture where the correct property is discussed rowGapColumnGap property\n--feedback--\nReview the end of the lecture where the correct property is discussed gap property\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4699,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732267ecab2151ced471cd4.md",
      "source_type": "git_repo"
    },
    "token_count": 163,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a9ba61c745a065e64a3966e68bac6ae2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732269a7aa2ca1d6b6574fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732269a7aa2ca1d6b6574fe\ntitle: What Is the Difference Between an Implicit and Explicit Grid challengeType: 19\ndashedName: what-is-the-difference-between-an-implicit-and-explicit-grid\n--description--\nImplicit grid refers to the rows and columns automatically created by the browser when placing items in a grid layout – those not explicitly defined using grid-template-rows or grid-template-columns The properties that control the columns and rows created implicitly by the browser are grid-auto-columns and grid-auto-rows Implicit grid also refers to the additional rows and columns the browser automatically generates when you place an item outside the explicitly defined rows and columns For instance, let's say you define only two explicit columns in a grid layout this way:\n```css grid-container {\ndisplay: grid;\ngrid-template-columns: 100px 100px; / Only 2 explicit columns /\n} grid-item {\nbackground-color: burlywood;\nborder: 1px solid orangered;\npadding: 0 5rem;\nmargin: 0 5rem;\n}\n```\nBut you have six items in the grid container:\n```html\nItem 1\nItem 2\nItem 3\nItem 4\nItem 5\nItem 6\n```\nWhat happened Two items filled the first row using the two explicit columns – Item 1 in the first column and Item 2 in the second column The next items start a new row with Item 3 going in the first column of the second row and Item 4 in the second column of the second row, and so on As you've already seen, explicit grids are the areas of the grid you intentionally set up That is, the rows and columns you explicitly define for a grid layout using the grid-template-rows and grid-template-columns properties Here is a table summarizing the differences between implicit and explicit grids:\n| Feature          | Explicit Grid                                                                  | Implicit Grid                                                                          |\n|----------------------|------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------|\n| Size control     | Fully customizable using  grid-template-rows  and  grid-template-columns | Controlled by  grid-auto-rows  and  grid-auto-columns , or defaults to  auto |\n| Default Behavior | Does not change unless explicitly defined | Automatically adapts to items placed outside the explicit grid |\n| Complexity       | Requires more planning for layout structure | Easier to implement for unstructured or variable content",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5522,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732269a7aa2ca1d6b6574fe.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8708beea414dd408e1361d5f8deff561",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732269a7aa2ca1d6b6574fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "between implicit and explicit grids: | Feature | Explicit Grid | Implicit Grid | |----------------------|------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------| | Size control | Fully customizable using grid-template-rows and grid-template-columns | Controlled by grid-auto-rows and grid-auto-columns , or defaults to auto | | Default Behavior | Does not change unless explicitly defined | Automatically adapts to items placed outside the explicit grid | | Complexity | Requires more planning for layout structure | Easier to implement for unstructured or variable content|\n| Flexibility      | Rigid structure with defined rows and columns | Flexible and adapts to dynamically placed content |\n| Performance      | Potentially more performant as the layout is predefined | May require additional browser computations for implicit grid generation |\n| Use case         | Useful when the grid structure is predictable and defined upfront | Useful for dynamic layouts where content is unknown or changes frequently |\n--questions--\n--text--\nWhich properties control the columns and rows created implicitly by the browser in a CSS grid layout --answers--\ncols and rows\n--feedback--\nThink about properties that define implicit grid tracks col and row\n--feedback--\nThink about properties that define implicit grid tracks implicit-columns and implicit-rows\n--feedback--\nThink about properties that define implicit grid tracks grid-auto-columns and grid-auto-rows\n--video-solution--\n4\n--text--\nWhich properties are used to define explicit rows and columns in a CSS grid layout --answers--\nrow and fr\n--feedback--\nReview the beginning of the lecture where this was discussed grid-explicit-rows and grid-explicit-columns\n--feedback--\nReview the beginning of the lecture where this was discussed grid-template-rows and grid-template-columns\ngrid-gap and grid-flow\n--feedback--\nReview the beginning of the lecture where this was discussed --video-solution--\n3\n--text--\nWhich of the following code examples is the correct way to set two explicit columns --answers--\ncss grid-container {\ndisplay: grid;\ngrid-template-columns: 100px 100px;\n}\ncss grid-container {\ndisplay: grid;\ngrid-template-columns: 100px 100px 100px 100px;\n}\n--feedback--\nPay close attention to the property name and correct number of values in the examples css grid-container {\ndisplay: grid;\ngrid-template-rows: 100px 100px;\n}\n--feedback--\nPay close attention to the property name and correct number of values in the examples css",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5522,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732269a7aa2ca1d6b6574fe.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "18c99daaed00cc40123269b4a5e24a45",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732269a7aa2ca1d6b6574fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the following code examples is the correct way to set two explicit columns --answers-- css grid-container { display: grid; grid-template-columns: 100px 100px; } css grid-container { display: grid; grid-template-columns: 100px 100px 100px 100px; } --feedback-- Pay close attention to the property name and correct number of values in the examples css grid-container { display: grid; grid-template-rows: 100px 100px; } --feedback-- Pay close attention to the property name and correct number of values in the examples cssgrid-container {\ndisplay: grid;\ngrid-column-start: 100px 100px;\n}\n--feedback--\nPay close attention to the property name and correct number of values in the examples --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5522,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\6732269a7aa2ca1d6b6574fe.md",
      "source_type": "git_repo"
    },
    "token_count": 163,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "e744b180201886c388a4dee8f2a8ac1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226a62eb2121da41a3d68.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673226a62eb2121da41a3d68\ntitle: What Is the minmax() Function and How Does It Work challengeType: 19\ndashedName: what-is-the-minmax-function-and-how-does-it-work\n--description--\nThe minmax() function defines the range for the size of a grid track, specifying how much space a row or column can occupy Remember that you can set the track size with units like px (pixels), rem, or even em, and with fractional units (fr) The minmax() function takes things a bit further by allowing you to set a minimum size and a maximum size for the grid track Here's the syntax of the minmax() function:\ncss\nminmax(min, max)\nmin is the minimum size of the grid track, which can be set using pixels, percentage, or auto And max is the maximum size of the grid track which you can set with the same units The two values work together this way:\nThe min value ensures the grid track will never shrink below a set size The max value limits how large the grid track can grow The grid track size adjusts dynamically between the min and max values based on content and container size Let's look at a practical example with this HTML:\n```html\nItem 1\nItem 2\n```\nAnd the grid CSS:\n```css grid-container {\ndisplay: grid;\ngrid-template-columns: minmax(150px, 300px) 1fr;\ngap: 20px;\n} grid-container > div {\nbackground: crimson;\npadding: 20px;\ntext-align: center;\n}\n```\nWhat's happening here The first column, minmax(150px, 300px), will always be at least 150px and at most 300px, depending on the available space On the other other hand, the second column, 1fr, will take up any available remaining space in the grid container since there are no additional columns to share the space with The advantage of the minmax() function over fixed sizes and even fr units is that it is more flexible, making it ideal for adaptability and responsiveness --questions--\n--text--\nWhich function can you use to define the range for the size of a grid track --answers--\nclamp()\n--feedback--\nThis function is for clamping a value between a minimum and maximum but doesn't define grid track ranges",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4120,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226a62eb2121da41a3d68.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "956a4287fcc631c351061a6f270a38e4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226a62eb2121da41a3d68.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "since there are no additional columns to share the space with The advantage of the minmax() function over fixed sizes and even fr units is that it is more flexible, making it ideal for adaptability and responsiveness --questions-- --text-- Which function can you use to define the range for the size of a grid track --answers-- clamp() --feedback-- This function is for clamping a value between a minimum and maximum but doesn't define grid track rangesminmax()\nmax-width()\n--feedback--\nThis property sets the maximum width of an element, not a grid track range calc()\n--feedback--\nThis function performs calculations but doesn't define grid track ranges --video-solution--\n2\n--text--\nWhich of the following best describes how the grid track size behaves when using the minmax() function --answers--\nThe grid track size is fixed between the minimum and maximum values --feedback--\nThe grid track size adjusts dynamically, not fixed, between the given min and max values The grid track size adjusts dynamically between the min and max values based on content and container size The grid track size will always be set to the maximum value, regardless of content --feedback--\nThe grid track size adjusts based on both the min and max values, not just the maximum The grid track size only responds to content, not container size --feedback--\nThe size adjusts dynamically based on both content and container size --video-solution--\n2\n--text--\nWhat does the min and max value in the minmax() function control --answers--\nThe min value allows shrinking, and the max value sets a fixed size --feedback--\nThe min value prevents shrinking below the specified size, and the max value limits growth The min value ensures the grid track won't shrink below a set size, and the max value limits how large it can grow The min value limits growth, and the max value determines the smallest size --feedback--\nThe max value limits growth, and the min value ensures a minimum size, not the other way around Both values set fixed sizes for the grid track --feedback--\nThe min and max values define a range, not fixed sizes --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4120,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226a62eb2121da41a3d68.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c1f620b0bfa22383050ce1de97b0d213",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226b97d4a731e0577ae93.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673226b97d4a731e0577ae93\ntitle: How Can You Position Items on the Grid Using the grid-template-areas Property challengeType: 19\ndashedName: how-can-you-position-items-on-the-grid-using-the-grid-template-areas-property\n--description--\nThe grid-template-areas property lets you design a visual grid layout by using named labels You then assign the labels to specific grid items using the grid-area property So, in other words, those named labels are also called \"grid area names\" Here's the basic syntax of the grid-template-areas property:\ncss\ngrid-template-areas:\n'header header header'\n'left-sidebar main right-sidebar'\n'footer footer footer';\nHere are the points to take away from the basic syntax:\nValues like header and main are the names of the grid areas Each space-separated value within a string corresponds to a column Each string represents a row in the grid So, in the syntax, we have a 3 by 3 grid container After defining the template, you then have to use the grid-area property and the named labels (or areas) as values to tell CSS that a specific element belongs in that area of the grid The grid-area property connects the grid item to the named region you define in the grid-template-areas A popular way to demonstrate the capabilities of the grid-template-areas property is by creating the classic Holy Grail layout If you don't know what it is, the Holy Grail layout is a web design pattern with a header, footer, two sidebars, and a main content area It ensures the main content takes priority, while sidebars and other sections adjust responsively within the layout Many solutions exist to implement the holy grail layout, but using grid-template-areas and the grid-area property is the most straightforward way to create it Here's the HTML for the holy grail layout:\n```html\nHeader\nLeft Sidebar\nMain Content\nRight Sidebar\nFooter\n```\nPlease note that both the grid-template-areas and grid-area properties can be used independently of each other The grid-template-areas property is specifically used to define a visual layout by mapping out named grid areas within the grid container On the other hand, the grid-area property is used to position individual grid items, either by specifying their row and column positions or by referencing the named areas defined with the grid-template-areas property",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4690,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226b97d4a731e0577ae93.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "37a78e112cba3cf35c39669675200521",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226b97d4a731e0577ae93.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Main Content Right Sidebar Footer ``` Please note that both the grid-template-areas and grid-area properties can be used independently of each other The grid-template-areas property is specifically used to define a visual layout by mapping out named grid areas within the grid container On the other hand, the grid-area property is used to position individual grid items, either by specifying their row and column positions or by referencing the named areas defined with the grid-template-areas property--questions--\n--text--\nHow do you design a grid layout with the grid-template-areas property --answers--\nWith comma separated values like 1 / 4 to represent the different rows and columns of the layout --feedback--\nRecall that this property uses separate strings, each with separate values, to represent the different rows and columns of the layout, respectively With comma separated values like header and footer --feedback--\nRecall that this property uses separate strings, each with separate values, to represent the different rows and columns of the layout, respectively With strings of space-separated values to represent the different rows and columns of the layout With space-separated values like 2fr 1fr 1fr --feedback--\nRecall that this property uses separate strings, each with separate values, to represent the different rows and columns of the layout, respectively --video-solution--\n3\n--text--\nWhich property do you use the grid-template-areas property in combination with --answers--\ngrid-column\n--feedback--\nIt's the property that assigns grid items to named labels grid-row\n--feedback--\nIt's the property that assigns grid items to named labels grid-gap\n--feedback--\nIt's the property that assigns grid items to named labels grid-area\n--video-solution--\n4\n--text--\nWhat is the specific use case of the grid-area property --answers--\nTo specify an area of the grid to exclude --feedback--\nThis property places individual grid items within specific positions To specify the size of grid items --feedback--\nThis property places individual grid items within specific positions To place individual grid items by specifying row and column positions To create a visual representation of the grid --feedback--\nThis property places individual grid items within specific positions --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4690,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226b97d4a731e0577ae93.md",
      "source_type": "git_repo"
    },
    "token_count": 439,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3e5eca4641763ec9f1177107e92c3d42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226afcd33991dd751937a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673226afcd33991dd751937a\ntitle: How Do the grid-column and grid-row Properties Work challengeType: 19\ndashedName: how-do-the-grid-column-and-grid-row-properties-work\n--description--\nThe grid-column and grid-row properties let you specify the horizontal and vertical placement of grid items within a grid layout In other words, they both allow you to control where a grid item begins and ends by referencing grid lines These grid lines are the boundaries that separate rows and columns you have already defined using the grid-template-rows and grid-template-columns properties Let's take a look at the syntaxes of both grid-row and grid-column, and also a practical example Here's the syntax of the grid-row property:\ncss\ngrid-row: <start-line> / <end-line>;\nAnd of grid-column:\ncss\ngrid-column: <start-line> / <end-line>;\n<start-line> is the grid line where the item starts and <end-line> is the grid line where the item ends Both are 1-indexed, that is, you start counting them from 1, not 0 Remember, grid lines for rows are generated based on the number of rows specified in the grid-template-rows property The same applies to columns with the grid-template-columns property For the practical example, let's start with the lines generated by the browser when you use both the grid-template-rows and the grid-template-columns properties This is the HTML for that example:\n```html\n1\n2\n3\n4\n```\nHere's the CSS with four equal columns and three equal rows:\n```css grid {\ndisplay: grid;\ngrid-template-columns: repeat(4, 1fr); / 4 equal columns /\ngrid-template-rows: repeat(3, 100px); / 3 equal rows /\ngap: 10px;\n} grid > div {\ndisplay: grid;\nplace-items: center;\nbackground: crimson;\ncolor: white;\nfont-size: 4rem;\n}\n```\nInspecting the grid container (the class grid) shows that each row and column is bounded by two lines – a start line at the beginning of the row or column, and an end line at the end of the row or column You can target these lines to start using the grid-row and grid-column properties to determine where you should place an item Here's how you can make the first grid item occupy the first two columns:\ncss",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226afcd33991dd751937a.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b7121bf2ac8fe5bb4feb021604611f9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226afcd33991dd751937a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "grid container (the class grid) shows that each row and column is bounded by two lines – a start line at the beginning of the row or column, and an end line at the end of the row or column You can target these lines to start using the grid-row and grid-column properties to determine where you should place an item Here's how you can make the first grid item occupy the first two columns: cssitem1 {\ngrid-column: 1 / 3;\n}\nWith this, you're saying the first grid item should start at column 1 and end just before column 3 The first item will now occupy two columns, and the fourth item gets pushed to the second row Cool If you also want the first item to occupy two rows, you can specify a grid-row of 1 / 3:\ncss item1 {\ngrid-column: 1 / 3;\ngrid-row: 1 / 3;\n}\nYou can also use the span keyword to tell the grid item which row and column to span across For example, 1 / 3 is the same as 1 / span 2:\ncss item1 {\ngrid-column: 1 / span 2;\ngrid-row: 1 / span 2;\n}\nYou can continue to apply this technique to any item on the grid and place them wherever you want Continuing the process, here's how we made a masonry layout with the items This is the new HTML with three additional items:\n```html\n1\n2\n3\n4\n5\n6\n7\n```\nThe new CSS:\n```css grid {\ndisplay: grid;\ngrid-template-columns: repeat(4, 1fr); / 4 equal columns /\ngrid-template-rows: repeat(4, 100px); / 4 equal rows /\ngap: 10px;\n} grid > div {\ndisplay: grid;\nplace-items: center;\nbackground: crimson;\ncolor: white;\nfont-size: 4rem;\n} item1 {\ngrid-column: 1 / span 2;\n} item4 {\ngrid-column: 1 / span 3;\n} item6 {\ngrid-column: 1 / span 2;\n} item7 {\ngrid-column: 3 / span 2;\n}\n```\n--questions--\n--text--\nWhat do the grid-column and grid-row properties specify in a grid layout --answers--\nThe size of the grid container",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226afcd33991dd751937a.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f551919cbd7e754d75457632af19b054",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226afcd33991dd751937a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "4 equal rows / gap: 10px; } grid > div { display: grid; place-items: center; background: crimson; color: white; font-size: 4rem; } item1 { grid-column: 1 / span 2; } item4 { grid-column: 1 / span 3; } item6 { grid-column: 1 / span 2; } item7 { grid-column: 3 / span 2; } ``` --questions-- --text-- What do the grid-column and grid-row properties specify in a grid layout --answers-- The size of the grid container--feedback--\nThink about the properties that determine where grid items are placed within the rows and columns The alignment of the entire grid --feedback--\nThink about the properties that determine where grid items are placed within the rows and columns The horizontal and vertical placement of grid items The size of grid tracks --feedback--\nThink about the properties that determine where grid items are placed within the rows and columns --video-solution--\n3\n--text--\nWhat determines the number of grid lines generated for rows and columns in a grid layout --answers--\nThe grid-gap property --feedback--\nLook out for the properties that explicitly define the rows and columns The grid-template-rows and grid-template-columns properties The grid-auto-rows and grid-auto-columns properties --feedback--\nLook out for the properties that explicitly define the rows and columns The grid-area property --feedback--\nLook out for the properties that explicitly define the rows and columns --video-solution--\n2\n--text--\nHow can you specify the way grid items span across rows or columns in a grid layout --answers--\nBy using the grid-template property --feedback--\nThink about what allows you to control how many rows or columns the item will cover, often using a range or keyword By specifying auto in grid-column or grid-row --feedback--\nThink about what allows you to control how many rows or columns the item will cover, often using a range or keyword By using the span keyword or range like 1 / 3 By defining the grid-gap size --feedback--\nThink about what allows you to control how many rows or columns the item will cover, often using a range or keyword --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5960,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-grid\\673226afcd33991dd751937a.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "558dfd592a62a51e208ca05832401a5e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672aa7e03c2e365e906e5733.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa7e03c2e365e906e5733\ntitle: What Is Overflow in CSS, and How Does It Work challengeType: 19\ndashedName: what-is-overflow-in-css\n--description--\nOverflow refers to the way elements handle content that exceeds or overflows the size of the containing element For example, the text content of a div element can overflow out of its borders Overflow is two-dimensional, the x-axis determines horizontal overflow, and the y-axis determines vertical overflow Let's fix the overflow on our example using the overflow-y CSS property First we can hide the overflow entirely with hidden like this:\ncss\ndiv {\noverflow-y: hidden;\n}\nTThis resolves the overflow problem but now the extra content becomes completely unreachable Instead we can use scroll to force the element to become scrollable:\ncss\ndiv {\noverflow-y: scroll;\n}\nNow this turns the container into a scrollable element, allowing all the content to be viewed by scrolling the element independently of the page scroll We could also let the browser handle it on its own with auto value It's worth noting that vertical scrolling is generally considered okay while horizontal scrolling might be questioned as it's generally not a common design decision With this knowledge, you can now control how your content overflows giving you more power over the layout of your pages --questions--\n--text--\nWhat does overflow refer to in CSS --answers--\nWhen an element is positioned outside its parent container --feedback--\nThe lecture defines overflow in relation to content and container size When content exceeds the size of its containing element When there are too many elements on a page --feedback--\nThe lecture defines overflow in relation to content and container size When CSS styles conflict with each other --feedback--\nThe lecture defines overflow in relation to content and container size --video-solution--\n2\n--text--\nWhich CSS property is used to control vertical overflow specifically --answers--\noverflow\n--feedback--\nThe lecture mentions a specific property for controlling vertical overflow overflow-x\n--feedback--\nThe lecture mentions a specific property for controlling vertical overflow overflow-y\nvertical-overflow\n--feedback--\nThe lecture mentions a specific property for controlling vertical overflow --video-solution--\n3\n--text--\nAccording to the lecture, which type of overflow is generally considered more acceptable in web design --answers--\nHorizontal overflow --feedback--\nThe lecture notes a difference in how horizontal and vertical overflow are perceived Vertical overflow Both are equally acceptable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3069,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672aa7e03c2e365e906e5733.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "1f440dde556fa5e6cfb6012b015ecd10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672aa7e03c2e365e906e5733.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "lecture mentions a specific property for controlling vertical overflow overflow-x --feedback-- The lecture mentions a specific property for controlling vertical overflow overflow-y vertical-overflow --feedback-- The lecture mentions a specific property for controlling vertical overflow --video-solution-- 3 --text-- According to the lecture, which type of overflow is generally considered more acceptable in web design --answers-- Horizontal overflow --feedback-- The lecture notes a difference in how horizontal and vertical overflow are perceived Vertical overflow Both are equally acceptable--feedback--\nThe lecture notes a difference in how horizontal and vertical overflow are perceived Neither is acceptable --feedback--\nThe lecture notes a difference in how horizontal and vertical overflow are perceived --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3069,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672aa7e03c2e365e906e5733.md",
      "source_type": "git_repo"
    },
    "token_count": 137,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b496ce797a8e984b3f17979bb6984cb2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-libraries-and-frameworks\\67d1d74780981f521b8ac090.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d1d74780981f521b8ac090\ntitle: What Is a CSS Framework, and What Are Some Advantages and Disadvantages of Using It challengeType: 19\ndashedName: what-is-a-css-framework-and-what-are-some-advantages-and-disadvantages-of-using-it\n--description--\nAs you work CSS, you may experience certain challenges, such as keeping the styles consistent and compatible across browsers, avoiding repetition, and handling the growing complexity and number of CSS files across your project CSS frameworks are very helpful to prevent these issues from the start A CSS framework consists of pre-written CSS code that you can use to style your HTML elements By using a CSS framework, you can speed up your workflow, create a uniform visual style across the website, make your design look consistent across multiple browsers, and overall keep your CSS code more organized You can think of a CSS framework as toolbox, where you can quickly find a style or component that fits your needs and use it right away, without having to specify it yourself using CSS properties These frameworks often include pre-defined styles and components that you can use very easily, including styles for creating responsive layouts Some of the most popular CSS frameworks are Tailwind CSS, Bootstrap, Materialize, and Foundation Let's talk a little bit about the two types of CSS frameworks: utility-first CSS frameworks, and component-based CSS frameworks Tailwind CSS is a utility-first CSS framework This means that it has small classes with very specific purposes, like setting the margin, padding, or background color You can usually assign these small classes directly to the HTML elements For example:\nhtml\n<button class=\"bg-blue-500 text-white font-bold py-2 px-4 rounded-full hover:bg-blue-700\">\nButton\n</button>\nThis button will have a blue background with white and bold text, a vertical padding of 2 rem, a horizontal padding of 4 rem, and rounded borders The class hover:bg-blue-700 will turn the background dark blue when the user hovers over it with the mouse As you can see, Tailwind CSS classes are very granular, so they can be applied to individual HTML elements as needed In contrast, Bootstrap is a component-based CSS framework It has pre-built components with pre-defined styles that you can easily add to your website These components are usually available in the official documentation of the CSS framework, where you can copy and paste them quickly into your project",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6502,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-libraries-and-frameworks\\67d1d74780981f521b8ac090.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a44bea1ea5bf0b6a4ae024e0cb2e2c1b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-libraries-and-frameworks\\67d1d74780981f521b8ac090.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the user hovers over it with the mouse As you can see, Tailwind CSS classes are very granular, so they can be applied to individual HTML elements as needed In contrast, Bootstrap is a component-based CSS framework It has pre-built components with pre-defined styles that you can easily add to your website These components are usually available in the official documentation of the CSS framework, where you can copy and paste them quickly into your projectFor example, if you want to create a list group in Bootstrap, you would write something like this in HTML:\n```html\nHTML\nCSS\nJavaScript\n```\nThese pre-defined classes will automatically apply standard styles to the card, list group, and list group items Notice that here, instead of adding small and general classes, we are adding the entire component, including the HTML structure This is why Bootstrap is component-based ```html\nHTML\nCSS\nJavaScript\n```\nWhile CSS frameworks have many advantages, they also have certain disadvantages It's important that you know both of them to make an informed decision Since CSS frameworks rely on pre-defined styles, if you try to add custom CSS on top them, specificity issues may arise The selectors used by the framework may have a higher specificity than the selectors that you use in your custom CSS, so the correct style may not be displayed To solve this, you will need to use a more specific CSS selector, so this may bring some additional challenges They can also limit uniqueness to a certain extent because their standard styles are used widely across many websites However, this can be addressed by customizing the CSS with your unique styles And finally, you should consider potential performance issues that CSS frameworks might introduce Some frameworks are quite large, and may take some time to load As a developer, you will decide if using a CSS framework is helpful for your project, if using entirely custom CSS is better, or perhaps a mix of both --questions--\n--text--\nWhich of the following is NOT a common benefit of using a CSS framework --answers--\nFaster development due to pre-styled components --feedback--\nThink about the impact that a CSS framework can have on file size and processing Improved website performance due to optimized CSS Consistent styling across browsers --feedback--\nThink about the impact that a CSS framework can have on file size and processing Simplified responsive web design implementation --feedback--\nThink about the impact that a CSS framework can have on file size and processing",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6502,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-libraries-and-frameworks\\67d1d74780981f521b8ac090.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "bee5fe54e67246a3cca44157e4124df3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-libraries-and-frameworks\\67d1d74780981f521b8ac090.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of using a CSS framework --answers-- Faster development due to pre-styled components --feedback-- Think about the impact that a CSS framework can have on file size and processing Improved website performance due to optimized CSS Consistent styling across browsers --feedback-- Think about the impact that a CSS framework can have on file size and processing Simplified responsive web design implementation --feedback-- Think about the impact that a CSS framework can have on file size and processing--video-solution--\n2\n--text--\nWhich of the following best describes a utility-first CSS framework --answers--\nIt provides pre-built components like buttons and forms --feedback--\nThink about the types of styles that you apply to HTML elements with CSS frameworks like Tailwind CSS It provides a complete system to implement responsive designs --feedback--\nThink about the types of styles that you apply to HTML elements with CSS frameworks like Tailwind CSS It automatically generates CSS based on the HTML structure --feedback--\nThink about the types of styles that you apply to HTML elements with CSS frameworks like Tailwind CSS It includes a collection of small, single-purpose CSS classes --video-solution--\n4\n--text--\nWhich of the following best describes a component-based CSS framework --answers--\nIt provides a set of utility classes that are assigned to HTML elements --feedback--\nThink about the fundamental components of Bootstrap It provides a highly customizable design system based on complex CSS selectors --feedback--\nThink about the fundamental components of Bootstrap It includes set of pre-designed and reusable elements It automatically generates the CSS styles based on the HTML structure --feedback--\nThink about the fundamental components of Bootstrap --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6502,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-libraries-and-frameworks\\67d1d74780981f521b8ac090.md",
      "source_type": "git_repo"
    },
    "token_count": 321,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c6be8a376f1f27addadfb36cfb8bfe81",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bcc8ccc976fd791610f43.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bcc8ccc976fd791610f43\ntitle: What Is the CSS Transform Property, and How Does It Work challengeType: 19\ndashedName: what-is-the-css-transform-property\n--description--\nThe CSS transform property is a powerful tool that allows you to modify the visual presentation of elements on your webpage without affecting the layout of other elements It enables you to apply various transformations to elements such as rotating, scaling, skewing, or translating (moving) them in 2D or 3D space The transform property works by applying a mathematical transformation to an element's coordinate system This means you can manipulate an element's shape and position while keeping it's original place and document flow intact Let's explore some common transform functions Here's an example of a box element:\n```css\nbody {\nborder: 2px solid black;\n} box {\nwidth: 200px;\nheight: 200px;\nbackground-color: red;\n}\n```\nWe have set the body to have a solid black border so that you can see the box element nested inside the body element The translate function moves an element from its current position Here's an updated example using the translate function:\n```css\nbody {\nborder: 2px solid black;\n} box {\nwidth: 200px;\nheight: 200px;\nbackground-color: red;\ntransform: translate(50px, 100px);\n}\n```\nThis CSS rule will move the element with the class box 50 pixels to the right and 100 pixels down from its original position The rotate function rotates an element around a fixed point and this is an example of using the rotate function for the box element from earlier:\ncss box {\nmargin: 100px;\nwidth: 200px;\nheight: 200px;\nbackground-color: red;\ntransform: rotate(45deg);\n}\nThis will rotate the element forty five degrees clockwise The scale function allows you to change the size of an element Here's an example:\ncss box {\nmargin: 100px;\nwidth: 200px;\nheight: 200px;\nbackground-color: red;\ntransform: scale(1 5, 2);\n}\nThis will make the element one and a half times wider and twice as tall as its original size You can combine multiple transformations in a single declaration:\ncss",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6930,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bcc8ccc976fd791610f43.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "615fdd1dd596886b9a963491cb3236c0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bcc8ccc976fd791610f43.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "height: 200px; background-color: red; transform: rotate(45deg); } This will rotate the element forty five degrees clockwise The scale function allows you to change the size of an element Here's an example: css box { margin: 100px; width: 200px; height: 200px; background-color: red; transform: scale(1 5, 2); } This will make the element one and a half times wider and twice as tall as its original size You can combine multiple transformations in a single declaration: cssbox {\nmargin: 100px;\nwidth: 200px;\nheight: 200px;\nbackground-color: red;\ntransform: translate(50px, 50px) rotate(45deg) scale(1 5);\n}\nThis will move the element 50 pixels to the right and down, rotate it 45 degrees, and scale it to be one and a half times its original size While the transform property is powerful for creating visually appealing designs, it's important to consider accessibility when using it Here are some important accessibility concerns to keep in mind Screen readers may not accurately convey transformed content For example, if you use transform to rearrange the visual order of elements, screen readers will still read the content in the original DOM order This can lead to confusion for users relying on screen readers When using scale to resize text be cautious not to make it too small or too large Extremely small text can be difficult to read while overly large text might overflow its container and become unreadable It's generally better to use proper font styling techniques for text resizing If you are using transform for animations effects, be mindful of users who are sensitive to motion Excessive or rapid animations can cause discomfort or even trigger seizures for some people Consider providing a way for users to reduce or turn off animations When using 3D transforms, remember that not all users perceive depth in the same way Ensure any critical information conveyed through 3D effects is also available in a 2D format or through text If you are using transform to hide or reveal content, make sure the content is still accessible to screen readers and keyboard navigation Hidden content should be truly hidden such as by using display: none; or visibility: hidden;, rather than just being visually moved offscreen When applying transform to interactive elements like buttons or links, ensure that the clickable area remains intuitive and easily targetable A drastically transformed button might be visually confusing or difficult to click especially for users with motor impairments",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6930,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bcc8ccc976fd791610f43.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "f05c9a4c7cd2957068c70a924c1c3a3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bcc8ccc976fd791610f43.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "or reveal content, make sure the content is still accessible to screen readers and keyboard navigation Hidden content should be truly hidden such as by using display: none; or visibility: hidden;, rather than just being visually moved offscreen When applying transform to interactive elements like buttons or links, ensure that the clickable area remains intuitive and easily targetable A drastically transformed button might be visually confusing or difficult to click especially for users with motor impairmentsIn conclusion, while the CSS transform property is a powerful for creating visually dynamic web designs, it's essential to use it responsibly with accessibility in mind Always test your transformed elements with various assisted technologies and consider providing alternative ways to access information or functionality that might be affected by transforms --questions--\n--text--\nWhich of the following is NOT a concern when using CSS transforms in terms of accessibility --answers--\nScreen readers may not accurately convey the visual order of transformed elements --feedback--\nThink about how transforms affect different types of users, including those using assistive technologies Transformed text might become too small or too large to read comfortably --feedback--\nThink about how transforms affect different types of users, including those using assistive technologies Transforms always improve the accessibility of a website Excessive use of transform for animations can cause discomfort for some users --feedback--\nThink about how transforms affect different types of users, including those using assistive technologies --video-solution--\n3\n--text--\nWhat potential issue should you be aware of when using 3D transforms --answers--\n3D transforms always cause websites to load slower --feedback--\nConsider how different users might perceive and interact with 3D-transformed content Not all users perceive depth in the same way, which may affect comprehension 3D transforms are not supported by most modern browsers --feedback--\nConsider how different users might perceive and interact with 3D-transformed content 3D transforms automatically make text unreadable --feedback--\nConsider how different users might perceive and interact with 3D-transformed content --video-solution--\n2\n--text--\nWhen using transform to hide content, what should you ensure for accessibility --answers--\nAlways use bright colors to make the transformed content stand out --feedback--\nThink about how hidden content should behave for users who can't see the visual transformation Use only 2D transforms for hiding content --feedback--\nThink about how hidden content should behave for users who can't see the visual transformation Make sure the content is still accessible to screen readers and keyboard navigation Never hide content using transforms",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6930,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bcc8ccc976fd791610f43.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "19efc0ca79a771f42861e58c50cfe7e1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bcc8ccc976fd791610f43.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "content, what should you ensure for accessibility --answers-- Always use bright colors to make the transformed content stand out --feedback-- Think about how hidden content should behave for users who can't see the visual transformation Use only 2D transforms for hiding content --feedback-- Think about how hidden content should behave for users who can't see the visual transformation Make sure the content is still accessible to screen readers and keyboard navigation Never hide content using transforms--feedback--\nThink about how hidden content should behave for users who can't see the visual transformation --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6930,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bcc8ccc976fd791610f43.md",
      "source_type": "git_repo"
    },
    "token_count": 112,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "a3394bda096ad74c70a18e563fa1064b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bcc9c4a6dd6d7dd3e6357.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bcc9c4a6dd6d7dd3e6357\ntitle: What Is the CSS Box Model, and How Does It Work challengeType: 19\ndashedName: what-is-the-css-box-model\n--description--\nThe CSS box model is a fundamental concept for web development It defines how HTML elements are structured and positioned If you understand this model you will be able to control the size, spacing and appearance of the elements on your website In the CSS box model, every element is surrounded by a box This box consists of four elements: the content area, the padding, the border, and the margin The content area is the innermost part of the box It's the space that contains the actual content of an element like text or images The padding is the area immediately after the content area It's the space between the content area and the border of an element With the padding you can add space around the content to improve it's readability You can set different values for the top, right, bottom and left padding with the padding property This is an example with the padding shorthand property, where we set the top padding to fifteen pixels, the right padding to five pixels, the bottom padding to two pixels and the left padding to eight pixels:\ncss\npadding: 15px 5px 2px 8px;\nThe border is the outer edge or outline of an element in the CSS box model It's the visual boundary of the element You can customize the border style, width, color and other properties using the border property Here's an example where we set the border to a width of five pixels, a solid state and a color of blue:\ncss\nborder: 5px solid blue;\nIf you omit a value the default property of that value will be used That's medium for the width, none for the style and the current color for the color You can set this three properties directly in the shorthand border property if you want all sides to be exactly the same But if you want to assign a different style to each side you can use the border-width, border-style and border-color properties css\nborder-width: 2px 4px 7px 12px;\nborder-style: dashed solid solid dashed;\nborder-color: blue red green black;\nYou can write up the four values for each one of these properties They will be applied in a clockwise sequence starting from the top",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4533,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bcc9c4a6dd6d7dd3e6357.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5eab9ad1a57e9b8967b549b4711363e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bcc9c4a6dd6d7dd3e6357.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the shorthand border property if you want all sides to be exactly the same But if you want to assign a different style to each side you can use the border-width, border-style and border-color properties css border-width: 2px 4px 7px 12px; border-style: dashed solid solid dashed; border-color: blue red green black; You can write up the four values for each one of these properties They will be applied in a clockwise sequence starting from the topIf you only write one value it will be applied to all four sides Finally, the margin is the space outside the border of an element It determines the distance between an element and other elements around it You can set different margin values for the top, right, bottom and left sides of the element using the margin property So in this example the top margin is three pixels, the right margin is twelve pixels, the bottom margin is nine pixels and the left margin is seven pixels:\ncss\nmargin: 3px 12px 9px 7px;\nThese four components are essential for calculating the total width and height of an element In the next few lectures, you will learn more about how this is handled by the browser and how you can customize it The CSS box model is a fundamental concept for web development Understanding how this component interact and contribute to an element's dimensions is essential for implementing web designs --questions--\n--text--\nWhich component of the CSS box model defines the space between the content area and the border --answers--\nmargin\n--feedback--\nThink about the area surrounding the content padding\ncontent\n--feedback--\nThink about the area surrounding the content border\n--feedback--\nThink about the area surrounding the content --video-solution--\n2\n--text--\nWhich component of the CSS box model specifies the space outside the border of an element --answers--\nmargin\npadding\n--feedback--\nThink about the space between an element and its neighboring elements content\n--feedback--\nThink about the space between an element and its neighboring elements border\n--feedback--\nThink about the space between an element and its neighboring elements --video-solution--\n1\n--text--\nWhich component of the CSS box model creates a visible outline around an element --answers--\nmargin\n--feedback--\nThink about the visible edge of an element padding\n--feedback--\nThink about the visible edge of an element content\n--feedback--\nThink about the visible edge of an element border\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4533,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bcc9c4a6dd6d7dd3e6357.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a635e68f15fc0cc6b7c9fe404facf612",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccae6e556cd81cef6af2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bccae6e556cd81cef6af2\ntitle: What Is Margin Collapsing, and How Does It Work challengeType: 19\ndashedName: what-is-margin-collapsing\n--description--\nMargin collapsing is a fundamental concept in CSS that often confuses newcomers to web development This behavior occurs when the vertical margins of adjacent elements overlap, resulting in a single margin equal to the larger of the two Understanding margin collapsing is important for precise control over spacing and layout in web design So, let's get into how margin collapsing works and explore some common scenarios where it occurs In CSS when two vertical margins come into contact with each other they'll collapse, this means that instead of adding together the larger margin wins and determines the space between the elements This behavior applies only to vertical margins top and bottom and not horizontal margins, not the left and right So, here's an example to illustrate this concept:\n```html\nBox 1\nBox 2\n```\nIn this example, you might expect the total space between box1 and box2 to be 50 pixels (20 pixels plus 30 pixels) However, due to margin collapsing the actual space will be 30 pixels, which is the larger of the two margins As we saw in the previous examples, margins of the adjacent sibling elements will collapse This is the most straight forward case of margin collapsing Let's explore more cases where margin collapsing can occur Margins can also collapse between a parent element and its first or last child If there's no border, padding, inline content, or clearance to separate the parent's margin from the child's, they will collapse ```html\nChild element\n```\nIn this case you might expect the child to be 70 pixels from the top (40 pixels plus 30 pixels) However, the margins collapse and the larger margin 40 pixels is used If an element has no content, padding, or border, its top and bottom margins can collapse into a single margin ```html\nNext block\n```\nIn this example the empty-blocks top and bottom margins collapse into a single 30 pixels margin, the larger of the two Here's another example of preventing collapse using padding:\n```html\nChild element\n```\nIn this case the one pixel padding on the parent prevents the margin from collapsing resulting in a total space of 71 pixels from the top of the parent to the top of the child content",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5340,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccae6e556cd81cef6af2.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "e928baf7af9137b83f1c21fb56e0a457",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccae6e556cd81cef6af2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a single margin ```html Next block ``` In this example the empty-blocks top and bottom margins collapse into a single 30 pixels margin, the larger of the two Here's another example of preventing collapse using padding: ```html Child element ``` In this case the one pixel padding on the parent prevents the margin from collapsing resulting in a total space of 71 pixels from the top of the parent to the top of the child contentUnderstanding margin collapsing is important for precise control over layout and spacing in CSS While it can sometimes lead to unexpected results, it's a feature designed to create more aesthetic and consistent spacing in documents By knowing when margin collapsing occurs and how to prevent it when necessary, you can create more predictable and maintainable layouts in your web designs --questions--\n--text--\nIn which direction does margin collapsing occur --answers--\nHorizontal margins only --feedback--\nThink about which margins (top, bottom, left, right) are affected by this behavior Vertical margins only Both horizontal and vertical margins --feedback--\nThink about which margins (top, bottom, left, right) are affected by this behavior Diagonal margins --feedback--\nThink about which margins (top, bottom, left, right) are affected by this behavior --video-solution--\n2\n--text--\nWhat happens when two adjacent elements have different margin values --answers--\nThe margins add up --feedback--\nConsider which margin \"wins\" when collapsing occurs The smaller margin is used --feedback--\nConsider which margin \"wins\" when collapsing occurs The larger margin is used The average of the two margins is used --feedback--\nConsider which margin \"wins\" when collapsing occurs --video-solution--\n3\n--text--\nWhich of the following will NOT prevent margin collapsing between a parent and its first child --answers--\nAdding a border to the parent --feedback--\nThink about which properties create a separation between the parent and child margins Setting padding-top: 1px; on the parent --feedback--\nThink about which properties create a separation between the parent and child margins Using display: inline-block; on the child --feedback--\nThink about which properties create a separation between the parent and child margins Setting margin-top: 0; on the child --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5340,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccae6e556cd81cef6af2.md",
      "source_type": "git_repo"
    },
    "token_count": 442,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0c5a688bba985728e99d7ded43947af8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-libraries-and-frameworks\\67d2fe63c8b0049ad7481021.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2fe63c8b0049ad7481021\ntitle: What Is the Value of Using a CSS Preprocessor, and What Are Some Disadvantages challengeType: 19\ndashedName: what-is-the-value-of-using-a-css-preprocessor-and-what-are-some-disadvantages\n--description--\nA CSS preprocessor is a tool that extends standard CSS with powerful features like variables, mixins, nesting, and selector inheritance Some of these features, like variables and nesting, are now supported or are getting more support in native CSS, and this trend is very likely to continue However, earlier versions of native CSS did not support these features That is why CSS preprocessors became so widely used in the first place They take the CSS rules and styles you write, along with their extended syntax, and compile them into a native CSS file that browsers can understand By using a CSS preprocessor, you can structure your CSS code in a more reusable and logical way You will also have access to powerful features, like mixins, that are not directly supported by CSS Some of the most popular CSS preprocessors are Sass, Less, and Stylus Let's talk about Sass Sass stands for \"Syntactically Awesome Style Sheets \" It's compatible with all versions of CSS and maintained by a large community of developers Sass supports features like:\nVariables, so you can store and reuse values throughout the spreadsheet Nested CSS rules, so you can create a visual hierarchy in your file Modules, so you can split your styles into multiple stylesheets Mixins, so you can reuse CSS declarations throughout your site Inheritance, so multiple CSS selectors can share properties And operators, for basic mathematical operations Sass also supports two syntaxes The SCSS syntax stands for Sassy CSS, which is a superset of CSS This means that SCSS expands the basic syntax of CSS SCSS is the most common syntax that you'll use and find when working with Sass It requires the use of curly braces ({ and }) around CSS properties and semicolons (;) at the end of CSS declarations, just like native CSS These files have a scss extension Here is an example:\n```scss\n$primary-color: #3498eb;\nheader {\nbackground-color: $primary-color;\n}\n```\nWhat you see here, at the top, is a variable defined in SCSS This variable is used in the CSS rule below",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8226,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-libraries-and-frameworks\\67d2fe63c8b0049ad7481021.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "7d4835819abdce51875d9738bb953644",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-libraries-and-frameworks\\67d2fe63c8b0049ad7481021.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "that you'll use and find when working with Sass It requires the use of curly braces ({ and }) around CSS properties and semicolons (;) at the end of CSS declarations, just like native CSS These files have a scss extension Here is an example: ```scss $primary-color: #3498eb; header { background-color: $primary-color; } ``` What you see here, at the top, is a variable defined in SCSS This variable is used in the CSS rule belowLet's compare SCSS with a less-frequently used syntax, the indented syntax This is also known as the \"Sass syntax\" since it was Sass's original syntax This syntax relies on indentation to define the rules Here is an example:\n```scss\n$primary-color: #3498eb\nheader\nbackground-color: $primary-color\n```\nNotice that there are no curly braces around the CSS rule, or semi-colons at the end of CSS declarations At the top, you can also see a variable Notice that its name starts with a dollar sign ($) in this syntax, which is different than native CSS variables, but works very similarly Sass also supports a powerful feature, called mixins Mixins allow you to group multiple CSS properties and their values under the name and reuse that block of CSS code throughout your stylesheet This makes your CSS code less repetitive and easier to maintain because, if you change something in that block, the change is applied everywhere you use the mixin Since mixins can have custom and descriptive names, they can be helpful to understand what each block of CSS code does, which can make your stylesheets easier to understand And mixins also promote consistency in stylesheets by applying uniform styles This is an example of a mixin in SCSS syntax:\nscss\n@mixin center-flex {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}\nTo define a mixin, you start by writing the @mixin at-rule, followed by the name of the mixin In this case, the mixin is called center-flex It has three CSS properties to center elements using Flexbox Then, once you have your mixin defined, you would use the @include at-rule to include those properties in a CSS rule You just need to write @include followed by the name of the mixin",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8226,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-libraries-and-frameworks\\67d2fe63c8b0049ad7481021.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "7ada5ba0d57156fa8c39ce9581ccbfab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-libraries-and-frameworks\\67d2fe63c8b0049ad7481021.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "flex; justify-content: center; align-items: center; } To define a mixin, you start by writing the @mixin at-rule, followed by the name of the mixin In this case, the mixin is called center-flex It has three CSS properties to center elements using Flexbox Then, once you have your mixin defined, you would use the @include at-rule to include those properties in a CSS rule You just need to write @include followed by the name of the mixinIn this case, the name is center-flex:\nscss\nsection {\n@include center-flex;\nheight: 500px;\nbackground-color: #3289a8;\n}\nThis is the full code with the mixin and the CSS rule:\n```scss\n@mixin center-flex {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}\nsection {\n@include center-flex;\nheight: 500px;\nbackground-color: #3289a8;\n}\n```\nYou can include the mixin in as many CSS rules as needed If you need to make any changes, you would only need to change the mixin itself and the changes would be applied everywhere automatically This example is in SCSS syntax Notice that it has the curly braces and the semicolons Here is the equivalent in indented syntax, also known as Sass syntax, without the curly braces or semicolons:\n```scss\n@mixin center-flex\ndisplay: flex\njustify-content: center\nalign-items: center\nsection\n@include center-flex\nheight: 500px\nbackground-color: #3289a8\n```\nAnd this is the compiled CSS code, what the browser will actually interpret after the file is compiled into native CSS:\ncss\nsection {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nheight: 500px;\nbackground-color: #3289a8;\n}\nNotice that it includes the three mixin properties at the top: display, justify-content, and align-items This is only a simple example of what CSS preprocessors are capable of They have many powerful features that are worth learning and applying in your daily workflow However, they do have potential disadvantages that you should be aware of First, CSS preprocessors have to compile the CSS rules into standard CSS While the potential overhead of this compilation process is often minimal in terms of time and resources, it is something that you should consider for real-world projects Next, they can create debugging challenges, since browsers use the compiled CSS directly",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8226,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-libraries-and-frameworks\\67d2fe63c8b0049ad7481021.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "50a9958650d3e86920ff1a4f24b5ae3b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-libraries-and-frameworks\\67d2fe63c8b0049ad7481021.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "powerful features that are worth learning and applying in your daily workflow However, they do have potential disadvantages that you should be aware of First, CSS preprocessors have to compile the CSS rules into standard CSS While the potential overhead of this compilation process is often minimal in terms of time and resources, it is something that you should consider for real-world projects Next, they can create debugging challenges, since browsers use the compiled CSS directlyFinding out what is generating a problematic style from the extended syntax can take a few extra steps when compared to standard CSS However, the advantages of CSS preprocessors usually outweigh their disadvantages, especially for complex projects They can be very helpful for writing cleaner, reusable, less repetitive, and scalable CSS --questions--\n--text--\nWhich of the following is NOT a common feature of CSS preprocessors --answers--\nVariables for storing and reusing values --feedback--\nThink about the extended syntax of CSS preprocessors Nested CSS rules for reflecting HTML structure --feedback--\nThink about the extended syntax of CSS preprocessors Automatic optimization of CSS for improved performance Mixins for creating reusable blocks of CSS styles --feedback--\nThink about the extended syntax of CSS preprocessors --video-solution--\n3\n--text--\nWhat is the main purpose of a CSS preprocessor --answers--\nTo allow developers to write CSS that is directly understood by browsers --feedback--\nThink about how CSS preprocessors extend the capabilities of CSS To extend the capabilities of CSS with more powerful features To replace CSS entirely with a modern styling language --feedback--\nThink about how CSS preprocessors extend the capabilities of CSS To design web pages without writing code --feedback--\nThink about how CSS preprocessors extend the capabilities of CSS --video-solution--\n2\n--text--\nWhat is the relationship between Sass and SCSS --answers--\nThey are entirely different CSS preprocessors with very distinct syntax --feedback--\nThink about the two different syntaxes available for working with Sass SCSS is a newer version of Sass that has completely replaced the original syntax --feedback--\nThink about the two different syntaxes available for working with Sass SCSS is a syntax for Sass that is closer to standard CSS Sass is a library that can be used with SCSS to add more features --feedback--\nThink about the two different syntaxes available for working with Sass --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8226,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-libraries-and-frameworks\\67d2fe63c8b0049ad7481021.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "b1c7dd5b47a4da4cbc2f3978eddf4cdb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccdb8f1823d8c60f914c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bccdb8f1823d8c60f914c\ntitle: What Is a CSS Reset, and What Are Some Common Examples challengeType: 19\ndashedName: what-is-a-css-reset\n--description--\nA CSS reset is a stylesheet that removes all or some of the default formatting that web browsers apply to HTML elements For example, you might have noticed that certain elements, like paragraphs and headings, already have margins by default even if you don't define them explicitly in your custom stylesheets You will also see this with various properties in a wide range of HTML elements Different browsers may also apply different default styles to HTML elements The default styles in Google Chrome may not be exactly the same as in Mozilla Firefox or Microsoft Edge This can result in inconsistent styles across browsers which you should avoid as much as possible To handle this, a CSS reset removes the default styles By removing all or some of the default styles, you can get a consistent baseline for your design and minimize the potential inconsistencies across browsers and devices Removing default styles can also make the styling process easier because you will only see the styles that you have applied explicitly in your custom stylesheets There are two main approaches to CSS resets: you can either define custom CSS resets or use third-party CSS resets Custom CSS resets are stylesheets that you create from scratch to fit the need of your project This way you can control the specific styles that will be reset with a lot of room for flexibility However, you also need to invest time to develop and maintain the stylesheets Here's an example of a very common CSS rule for resetting the margin and padding of all HTML elements:\ncss\n* {\nmargin: 0;\npadding: 0;\n}\nIt's usually written at the top of the CSS stylesheet The asterisk star selector is a wildcard selector that matches all HTML elements, so they will have a default margin of zero and a default padding of zero on all four sides This will give you a starting point and then you can customize them in more specific CSS selectors further down in the stylesheet You can use this approach to select any HTML element and reset its default styles, just create a custom stylesheet and use the appropriate CSS selectors to match the elements and set the styles But this can be a time intensive process if you want to save time you can also use a third-party CSS reset These stylesheets are already pre-built so you can just download them and add them to your project directly",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5545,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccdb8f1823d8c60f914c.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "fd5be62c0afd9315874f102e071aed2b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccdb8f1823d8c60f914c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the stylesheet You can use this approach to select any HTML element and reset its default styles, just create a custom stylesheet and use the appropriate CSS selectors to match the elements and set the styles But this can be a time intensive process if you want to save time you can also use a third-party CSS reset These stylesheets are already pre-built so you can just download them and add them to your project directlyA great example of a third-party CSS reset is Normalize css This stylesheet normalizes styles for a wide range of HTML elements  while still keeping some useful default styles especially those that are important for accessibility It also corrects bugs and style inconsistencies Another option is sanitize css This is a CSS library that you can use to ensure that default styles will be consistent across all major modern browsers This library is developed alongside Normalize css so they evolve together It also has individual stylesheets that you can download for specific purposes like normalizing forms and typography There are many options available but you should choose the ones that best fit the needs of your project You can also combine both approaches using third-party CSS resets with custom resets When working with CSS resets, it's also important to take accessibility into account Your web application should be accessible to everyone So, you shouldn't reset styles that might be helpful for screen readers or other assistive technologies You should also consider the impact that these additional stylesheets may have on your applications performance, because they have to be downloaded before the custom styles are applied By removing the default styles, CSS resets give you a blank starting point to implement your design This results in a more uniform and consistent user experience across browsers and across devices --questions--\n--text--\nWhat is the primary purpose of a CSS reset --answers--\nTo add default styles to HTML elements --feedback--\nThink about how a CSS reset affects the starting point of your styles To establish a consistent baseline for styling, reducing browser-specific variations To create responsive designs --feedback--\nThink about how a CSS reset affects the starting point of your styles To enhance website performance --feedback--\nThink about how a CSS reset affects the starting point of your styles --video-solution--\n2\n--text--\nWhich of the following is a popular third-party browser reset --answers--\nNormalize css\nReset css\n--feedback--\nThink about the third-party CSS resets that you learned Skeleton\n--feedback--\nThink about the third-party CSS resets that you learned Foundation\n--feedback--\nThink about the third-party CSS resets that you learned",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5545,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccdb8f1823d8c60f914c.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d6023e6b136d5643647f22e3b00d6f8c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccdb8f1823d8c60f914c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "reset affects the starting point of your styles To enhance website performance --feedback-- Think about how a CSS reset affects the starting point of your styles --video-solution-- 2 --text-- Which of the following is a popular third-party browser reset --answers-- Normalize css Reset css --feedback-- Think about the third-party CSS resets that you learned Skeleton --feedback-- Think about the third-party CSS resets that you learned Foundation --feedback-- Think about the third-party CSS resets that you learned--video-solution--\n1\n--text--\nWhat is the main advantage of using a custom CSS reset over a third-party CSS reset --answers--\nMore flexibility and control over the styles Improved browser compatibility --feedback--\nThink about the level of customization that custom CSS resets Simpler implementation --feedback--\nThink about the level of customization that custom CSS resets Faster loading times --feedback--\nThink about the level of customization that custom CSS resets --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5545,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccdb8f1823d8c60f914c.md",
      "source_type": "git_repo"
    },
    "token_count": 188,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "42c8d43853db8e93546ee91cd13cddaf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccebe1fc82d911c3f078.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bccebe1fc82d911c3f078\ntitle: What Is the CSS Filter Property, and What Are Common Examples challengeType: 19\ndashedName: what-is-the-css-filter-property\n--description--\nThe CSS filter property is a powerful tool that allows you to apply  graphical effects to elements on a web page It's particularly useful for adjusting the visual presentation of images, backgrounds and even text without modifying the original asset The filter property can be used to create various effects, such as blurring, color shifting, and contrast adjustments Let's discuss how the filter property works and explore some common examples The basic syntax for a filter property is straightforward:\ncss\nselector {\nfilter: function(amount);\n}\nHere function represents the specific filter effect you want to apply, and amount is typically a value that determines the intensity of the effect Now let's look at some common filter functions and their uses css\nimg {\nfilter: blur(5px);\n}\nThe blur function applies a gaussian blur to the element, the amount is specified in pixels and represents the radius of the blur This CSS rule will apply a 5 pixel blur to all images on the page The blur effect can be useful for creating depth in your design or for obscuring parts of an image The brightness function adjusts the brightness of the element A value of 0% will make the element completely black, while values over 100% will increase the brightness css bright-image {\nfilter: brightness(150%);\n}\nThis CSS rule increases the brightness of elements with the class bright-image by 50% Brightness adjustments can be used to make images pop or create a washed-out effect The grayscale function converts the element to grayscale The amount is defined as a percentage, where 100% is completely grayscale and 0% leaves the image unchanged css gray-image {\nfilter: grayscale(100%);\n}\nThis rule will convert elements with the class gray-image to complete grayscale grayscale can be used to create a vintage look or de-emphasize certain elements on a page The sepia function applies a sepia tone to the element Like grayscale, it uses a percentage value:\ncss old-photo {\nfilter: sepia(80%);\n}\nThis rule applies an 80% sepia effect to elements with the class old-photo The sepia effect is great for creating a vintage or old-timey look The hue-rotate function applies the hue rotation to the element The value is defined in degrees, and represents a rotation around the color circle",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccebe1fc82d911c3f078.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "0282456a1b472e8e866243afd0bdfd60",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccebe1fc82d911c3f078.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "elements on a page The sepia function applies a sepia tone to the element Like grayscale, it uses a percentage value: css old-photo { filter: sepia(80%); } This rule applies an 80% sepia effect to elements with the class old-photo The sepia effect is great for creating a vintage or old-timey look The hue-rotate function applies the hue rotation to the element The value is defined in degrees, and represents a rotation around the color circlecss color-shift {\nfilter: hue-rotate(90deg);\n}\nThis rule rotates the hue of elements with the class color-shift by 90 degrees Hue rotation can be used to create psychedelic effects or to adjust the overall color scheme of an image One of the most powerful aspects of the filter property is the ability to combine multiple effects You can apply several filters to the same element by separating them with spaces:\ncss multi-filter {\nfilter: contrast(150%) brightness(110%) sepia(30%);\n}\nThis rule applies increased contrast, slightly increased brightness, and a subtle sepia effect to elements with the class multi-filter By combining filters you can create complex and unique visual effects tailored to your design needs The CSS filter property is a versatile tool that allows for creative visual manipulation of web elements While we have covered some of the most common filter functions, there are others available, such as contrast, invert, and saturate As with any powerful feature, it's important to kind of be careful with how you use the filters to enhance your design without overwhelming your users or compromising accessibility --questions--\n--text--\nWhich of the following CSS rules would make an image completely grayscale --answers--\nfilter: grayscale(100%);\nfilter: gray(100%);\n--feedback--\nRemember that grayscale uses a percentage value, and there are multiple ways to represent 100% filter: gray(100);\n--feedback--\nRemember that grayscale uses a percentage value, and there are multiple ways to represent 100% filter: black-and-white(true);\n--feedback--\nRemember that grayscale uses a percentage value, and there are multiple ways to represent 100% --video-solution--\n1\n--text--\nWhat would be the effect of applying filter: brightness(0%); to an element --answers--\nIt would make the element completely white --feedback--\nThink about what 0% brightness means in terms of light It would make the element completely black It would have no effect on the element",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccebe1fc82d911c3f078.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "99759cf3fe51cac294bfacfb80502c73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccebe1fc82d911c3f078.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "value, and there are multiple ways to represent 100% filter: black-and-white(true); --feedback-- Remember that grayscale uses a percentage value, and there are multiple ways to represent 100% --video-solution-- 1 --text-- What would be the effect of applying filter: brightness(0%); to an element --answers-- It would make the element completely white --feedback-- Think about what 0% brightness means in terms of light It would make the element completely black It would have no effect on the element--feedback--\nThink about what 0% brightness means in terms of light It would invert the colors of the element --feedback--\nThink about what 0% brightness means in terms of light --video-solution--\n2\n--text--\nHow would you combine a blur effect of 5 pixels with a sepia effect of 50% --answers--\nfilter: blur(5px) + sepia(50%);\n--feedback--\nRemember how multiple filter functions are combined in a single filter property filter: blur(5px), sepia(50%);\n--feedback--\nRemember how multiple filter functions are combined in a single filter property filter: blur(5px) sepia(50%);\nfilter: blur(5px) && sepia(50%);\n--feedback--\nRemember how multiple filter functions are combined in a single filter property --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccebe1fc82d911c3f078.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "50d977b8621814e47bd919c2353f99bc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccc8ea33bad87abb3c56.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bccc8ea33bad87abb3c56\ntitle: What Is the Difference Between content-box and border-box challengeType: 19\ndashedName: what-is-the-difference-between-content-box-and-border-box\n--description--\nThe box-sizing property can be set to either content-box or border-box to control how the width and height of elements are calculated Here you can see the box-sizing property and the two possible values:\ncss\nbox-sizing: content-box;\ncss\nbox-sizing: border-box;\nThis property can be set on the universal selector (*) to apply to all the elements in the document:\ncss\n* {\nbox-sizing: border-box;\n}\nThe value of the box-sizing property is content-box by default, but you can choose border-box if you need to We will explore content-box first and then we will go into border-box To understand how this models work, you need to be familiar with the four core concepts from the CSS box model Let's review them quickly The content area is the space occupied by the element's content The padding is the space between the content area and the border The border is the outline that surrounds the content area and the padding The margin is the space outside the border that separates the element from other elements In the content-box model, the width and height that you set for an element determines the dimensions of the content area but they don't include the padding, border or margin You should use content-box when you need to have precise control over the dimensions of the content area So, when you set the width and height of an element with width and height properties, you are only setting the dimensions of the content area width is the width of the content, height is the height of the content To find the total width of the element, what you will really see on the screen, you will still need to add the left and right padding, and the left and right borders So, the total width equals the total width plus the padding left, plus padding right, plus border left, plus border right Likewise, the total height of an element can be found by adding the content height, the top and bottom border padding, and the top and bottom borders So, the total height equals the content height plus padding top, plus padding bottom, plus border top, plus border bottom For example, here we have a CSS type selector for all the div elements",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccc8ea33bad87abb3c56.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "b99ebbca1c7879e27f10fd320e2123cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccc8ea33bad87abb3c56.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "total width plus the padding left, plus padding right, plus border left, plus border right Likewise, the total height of an element can be found by adding the content height, the top and bottom border padding, and the top and bottom borders So, the total height equals the content height plus padding top, plus padding bottom, plus border top, plus border bottom For example, here we have a CSS type selector for all the div elementscss\ndiv {\nwidth: 300px;\nheight: 200px;\npadding: 20px;\nborder: 4px solid black;\n}\nIn this case, if content-box is used the content area will have a width of 300 pixels and a height of 200 pixels However, the total width, what you will see on the screen, will be the result of adding the width of the content area, which is 300 pixels, plus the padding on both sides (40 pixels), and the borders on both sides (8 pixels) Likewise, the total height will be the result of adding the height of the content area (200 pixels), plus the top and bottom padding (40 pixels), plus the top and bottom borders (8 pixels) Great Now let's explore border-box They are a bit different, with border-box the width and height of an element include the content area, the padding, and the border, but they don't include the margin You should use border-box when you need to keep a fixed element size regardless of changes in padding or borders It's also helpful for responsive web design since the content area will adjust automatically to fit the dimensions The padding and border are inside the box, so when you set the width and height properties of an element, you're really setting the width and height of the inner part of the box Here's our div example with the same properties and values that we had before:\ncss\ndiv {\nwidth: 300px;\nheight: 200px;\npadding: 20px;\nborder: 4px solid black;\n}\nWith border-box the value of the width property will be the result of adding the width of the content area, the left and right padding, and the left and right border So, the width equals the width of the content, plus the left padding, plus the right padding, plus the left border, plus the right border",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccc8ea33bad87abb3c56.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "a898892bccf0744f9a37e2e281165149",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccc8ea33bad87abb3c56.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and values that we had before: css div { width: 300px; height: 200px; padding: 20px; border: 4px solid black; } With border-box the value of the width property will be the result of adding the width of the content area, the left and right padding, and the left and right border So, the width equals the width of the content, plus the left padding, plus the right padding, plus the left border, plus the right borderLikewise, the value of the height property is the result of adding the height of the content area, the top and bottom padding, and the top and bottom border Height equals the height of the content, plus top padding, plus bottom padding, plus top border, plus bottom border The margin is not included in the width or height If you check the size of the div in the browser using the content-box and border-box you will notice that there's a very important difference These are the two divs in HTML:\n```html\n```\nWe assign them ids to select them individually in CSS These are the CSS rules for the #red-div and the #blue-div:\n```css\nred-div {\nbox-sizing: content-box;\nwidth: 300px;\nheight: 200px;\npadding: 20px;\nborder: 4px solid black;\nmargin: 10px;\nbackground-color: red;\n}\nblue-div {\nbox-sizing: border-box;\nwidth: 300px;\nheight: 200px;\npadding: 20px;\nborder: 4px solid black;\nmargin: 10px;\nbackground-color: blue;\n}\n```\nYou can see that they both have the same width, height, padding, border and margin The only differences are the colors and the value of the box-sizing property This small difference has a very important impact on the final dimensions Choosing between content-box and border-box really depends on the specific needs of your project While border-box is becoming increasingly popular for its simplicity and flexibility, understanding both models is important for implementing effective CSS layouts --questions--\n--text--\nWhich of the following is the default value for the box-sizing property in most browsers --answers--\ncontent-box\nborder-box\n--feedback--\nThink about the default behavior for element sizing padding-box\n--feedback--\nThink about the default behavior for element sizing margin-box\n--feedback--\nThink about the default behavior for element sizing",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccc8ea33bad87abb3c56.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "b2a6b5d642b1894468fb4739d1bc8cae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccc8ea33bad87abb3c56.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the specific needs of your project While border-box is becoming increasingly popular for its simplicity and flexibility, understanding both models is important for implementing effective CSS layouts --questions-- --text-- Which of the following is the default value for the box-sizing property in most browsers --answers-- content-box border-box --feedback-- Think about the default behavior for element sizing padding-box --feedback-- Think about the default behavior for element sizing margin-box --feedback-- Think about the default behavior for element sizing--video-solution--\n1\n--text--\nWhat is the primary advantage of using border-box for creating responsive layouts --answers--\nIt makes the calculations more complicated --feedback--\nThink about how the border-box model handles padding and border within the specified width and height It allows for more precise control over element dimensions --feedback--\nThink about how the border-box model handles padding and border within the specified width and height It ensures that elements maintain their specified dimensions regardless of changes in padding or border It improves browser compatibility --feedback--\nThink about how the border-box model handles padding and border within the specified width and height --video-solution--\n3\n--text--\nIn the content-box model, what does the specified width of an element represent --answers--\nThe total width of the element, including padding, border, and margin --feedback--\nThink about the relationship between the content area and the overall element dimensions in the content-box model The width of the content area only The width of the border --feedback--\nThink about the relationship between the content area and the overall element dimensions in the content-box model The width of the padding --feedback--\nThink about the relationship between the content area and the overall element dimensions in the content-box model --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-transforms-overflow-and-filters\\672bccc8ea33bad87abb3c56.md",
      "source_type": "git_repo"
    },
    "token_count": 343,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "1d09c882780b71f99b433befc12ccdf1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-variables\\672aa8985acb7361e656f94c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa8985acb7361e656f94c\ntitle: What Are CSS Custom Properties, and How Do They Work challengeType: 19\ndashedName: what-are-css-custom-properties\n--description--\nCSS custom properties, also known as CSS variables, are entities defined by CSS authors that contain specific values to be reused throughout a document They are a powerful feature that allows for more efficient, maintainable, and flexible stylesheets The syntax for declaring a custom property is straightforward It begins with two dashes (--) followed by the property name:\ncss\n:root {\n--main-color: #3498db;\n}\nIn this example, we're declaring a custom property named --main-color with a value of #3498db The :root pseudo-class is commonly used to declare global custom properties, as it represents the highest-level parent in the DOM tree To use a custom property, you employ the var() function:\ncss button {\nbackground-color: var(--main-color);\n}\nThis sets the background color of elements with the class button to the value stored in --main-color One of the key features of custom properties is that they follow the CSS cascade This means that you can redefine them for specific elements or contexts:\ncss alert {\n--main-color: #e74c3c;\nbackground-color: var(--main-color);\n}\nIn this case, elements with the class alert will use a different --main-color value, overriding the global definition Custom properties also support fallback values If a custom property is not defined or is invalid, you can provide a fallback value:\ncss text {\ncolor: var(--text-color, black);\n}\nHere, if --text-color is not defined, the color will default to black Custom properties are particularly useful in creating themeable designs You can define a set of properties for different themes:\n```css\n:root {\n--bg-color: white;\n--text-color: black;\n} dark-theme {\n--bg-color: #333;\n--text-color: white;\n}\nbody {\nbackground-color: var(--bg-color);\ncolor: var(--text-color);\n}\n```\nSwitching themes becomes as simple as adding or removing a class from the body element Custom properties can also be used with media queries to create responsive designs:\n```css\n:root {\n--container-width: 100%;\n}\n@media (min-width: 768px) {\n:root {\n--container-width: 750px;\n}\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5388,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-variables\\672aa8985acb7361e656f94c.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8a4ebcb6622780ba5d8eb29b61a886a0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-variables\\672aa8985acb7361e656f94c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "can define a set of properties for different themes: ```css :root { --bg-color: white; --text-color: black; } dark-theme { --bg-color: #333; --text-color: white; } body { background-color: var(--bg-color); color: var(--text-color); } ``` Switching themes becomes as simple as adding or removing a class from the body element Custom properties can also be used with media queries to create responsive designs: ```css :root { --container-width: 100%; } @media (min-width: 768px) { :root { --container-width: 750px; } }container {\nwidth: var(--container-width);\n}\n```\nThis approach allows for more maintainable responsive layouts, as you can change values in one place rather than throughout your stylesheet This can significantly reduce repetition in your stylesheets, especially for frequently used, complex values Custom properties can also reference other custom properties:\ncss\n:root {\n--primary-color: #3498db;\n--button-bg: var(--primary-color);\n}\nThis allows for creating relationships between different style aspects, making it easier to maintain consistent themes across your site While custom properties offer many advantages, it's important to be aware of their browser support They are well-supported in modern browsers, but older browsers may not recognize them Always have a fallback plan when using cutting-edge features In conclusion, CSS custom properties provide a powerful way to create more dynamic, flexible, and maintainable stylesheets They allow for the creation of themeable designs, simplify responsive layouts, and enable runtime manipulation of styles As web development continues to evolve, custom properties are becoming an increasingly important tool in a developer's toolkit, offering new possibilities for creating adaptable and efficient CSS --questions--\n--text--\nWhat is the correct syntax for declaring a CSS custom property --answers--\n$main-color: #3498db;\n--feedback--\nRemember that custom properties have a unique prefix in their declaration @main-color: #3498db;\n--feedback--\nRemember that custom properties have a unique prefix in their declaration --main-color: #3498db;\nmain-color: #3498db;\n--feedback--\nRemember that custom properties have a unique prefix in their declaration --video-solution--\n3\n--text--\nHow do you use a CSS custom property in a style declaration --answers--\nuse(--main-color)\n--feedback--\nThink about the function used to reference custom properties in CSS",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5388,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-variables\\672aa8985acb7361e656f94c.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "971d50ba0a066d82f6093a18ba1ab06d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-variables\\672aa8985acb7361e656f94c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "custom property --answers-- $main-color: #3498db; --feedback-- Remember that custom properties have a unique prefix in their declaration @main-color: #3498db; --feedback-- Remember that custom properties have a unique prefix in their declaration --main-color: #3498db; main-color: #3498db; --feedback-- Remember that custom properties have a unique prefix in their declaration --video-solution-- 3 --text-- How do you use a CSS custom property in a style declaration --answers-- use(--main-color) --feedback-- Think about the function used to reference custom properties in CSSvar(--main-color)\n@main-color\n--feedback--\nThink about the function used to reference custom properties in CSS $(--main-color)\n--feedback--\nThink about the function used to reference custom properties in CSS --video-solution--\n2\n--text--\nWhat is something you should be aware of when using CSS custom properties --answers--\nThey can be used with older versions of CSS --feedback--\nConsider how recently CSS custom properties were introduced, and how that might cause issues for people with older devices They might not be supported by older browsers They can lead to faster page speeds --feedback--\nConsider how recently CSS custom properties were introduced, and how that might cause issues for people with older devices They increase repetition in your stylesheets --feedback--\nConsider how recently CSS custom properties were introduced, and how that might cause issues for people with older devices --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5388,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-variables\\672aa8985acb7361e656f94c.md",
      "source_type": "git_repo"
    },
    "token_count": 300,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "46c33068bd8d1535c4b3bfe067b06b63",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-variables\\672cf3ca326da9f63683e236.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672cf3ca326da9f63683e236\ntitle: What Is the @property Rule, and How Does It Work with Fallbacks challengeType: 19\ndashedName: what-is-the-at-property-rule\n--description--\nThe @property rule is a powerful CSS feature that allows developers to define custom properties with greater control over their behavior, including how they animate and their initial values This rule provides a way to enhance the functionality of CSS custom properties and offers more flexibility in their application The basic syntax of the @property rule is as follows:\ncss\n@property --property-name {\nsyntax: '<type>';\ninherits: true | false;\ninitial-value: <value>;\n}\nThe --property-name is the name of the custom property you're defining Like all custom properties, it must start with two dashes --property-name can be things like <color>, <length>, <number>, <percentage>, or more complex types syntax defines the type of the property inherits specifies whether the property should inherit its value from its parent element initial-value sets the default value of the property Here's a practical example of using the @property rule:\n```css\n@property --main-color {\nsyntax: '';\ninherits: false;\ninitial-value: #3498db;\n} button {\nbackground-color: var(--main-color);\n}\n```\nIn this example, we're defining a custom property --main-color as a color value, setting it to not inherit, and giving it an initial value of #3498db One of the key benefits of the @property rule is that it allows for animation of custom properties, which wasn't possible before:\n```css\n@property --gradient-angle {\nsyntax: '';\ninherits: false;\ninitial-value: 0deg;\n} gradient-box {\nwidth: 100px;\nheight: 100px;\nbackground: linear-gradient(var(--gradient-angle), red, blue);\ntransition: --gradient-angle 0 5s;\n} gradient-box:hover {\n--gradient-angle: 90deg;\n}\n```\nThe code above creates a gradient that smoothly animates when the element is hovered over, something that wasn't achievable with standard custom properties Now, let's discuss how the @property rule works with fallbacks Fallbacks are crucial in CSS to ensure that styles degrade gracefully in browsers that don't support certain features With the @property, fallbacks work on two levels: for the rule itself and for the use of the custom property",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-variables\\672cf3ca326da9f63683e236.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4cd3014c0a19d2d1ec87cc90ffe0fa2c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-variables\\672cf3ca326da9f63683e236.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ --gradient-angle: 90deg; } ``` The code above creates a gradient that smoothly animates when the element is hovered over, something that wasn't achievable with standard custom properties Now, let's discuss how the @property rule works with fallbacks Fallbacks are crucial in CSS to ensure that styles degrade gracefully in browsers that don't support certain features With the @property, fallbacks work on two levels: for the rule itself and for the use of the custom propertyFor browsers that don't support the @property rule, you can provide a fallback by declaring the custom property in the traditional way:\n```css\n:root {\n--main-color: #3498db;\n}\n@property --main-color {\nsyntax: '';\ninherits: false;\ninitial-value: #3498db;\n}\n```\nIn this case, browsers that support @property will use the more strictly defined version, while others will fall back to the standard custom property declaration When using the custom property, you can provide a fallback value using the var() function, just as you would with standard custom properties:\ncss button {\nbackground-color: var(--main-color, #3498db);\n}\nThis ensures that even if the --main-color property is not defined or is invalid, the button will still have a background color The @property rule also allows for more complex fallback scenarios For instance, you can use it to provide type-safe fallbacks:\n```css\n@property --padding {\nsyntax: '';\ninherits: false;\ninitial-value: 10px;\n} box {\npadding: var(--padding);\n}\n```\nIn this case, if someone tries to set --padding to an invalid value, like a color, the browser will fall back to the initial value of 10px, maintaining type safety It's worth noting that the @property rule itself is not yet universally supported As of mid-2023, it's supported in Chrome, Edge, and Opera, with Firefox support behind a flag For broader browser support, it's important to provide fallbacks and use feature detection In conclusion, the @property rule represents a significant advancement in how we work with custom properties in CSS It provides more control and enables new possibilities like animation of custom properties However, it's important to use it judiciously and always provide appropriate fallbacks to ensure a good experience across all browsers As with any cutting-edge web technology, the key is to enhance the experience for browsers that support it while ensuring basic functionality for those that don't",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-variables\\672cf3ca326da9f63683e236.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "5092c16efd7046ba59f9c27ef50117c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-variables\\672cf3ca326da9f63683e236.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "conclusion, the @property rule represents a significant advancement in how we work with custom properties in CSS It provides more control and enables new possibilities like animation of custom properties However, it's important to use it judiciously and always provide appropriate fallbacks to ensure a good experience across all browsers As with any cutting-edge web technology, the key is to enhance the experience for browsers that support it while ensuring basic functionality for those that don't--questions--\n--text--\nWhat is the primary purpose of the @property rule in CSS --answers--\nTo create new CSS properties --feedback--\nThink about how @property relates to custom CSS properties To define and control the behavior of custom properties To replace standard CSS properties --feedback--\nThink about how @property relates to custom CSS properties To create animations --feedback--\nThink about how @property relates to custom CSS properties --video-solution--\n2\n--text--\nWhich of the following is NOT a valid descriptor in the @property rule --answers--\nsyntax\n--feedback--\nConsider the basic structure of an @property rule declaration inherits\n--feedback--\nConsider the basic structure of an @property rule declaration initial-value\n--feedback--\nConsider the basic structure of an @property rule declaration animation\n--video-solution--\n4\n--text--\nHow can you provide a fallback for browsers that don't support the @property rule --answers--\nUse a polyfill --feedback--\nThink about how you would typically declare a custom property without @property Declare the custom property using the standard method Use the @supports rule --feedback--\nThink about how you would typically declare a custom property without @property It's not possible to provide a fallback --feedback--\nThink about how you would typically declare a custom property without @property --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6013,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-css-variables\\672cf3ca326da9f63683e236.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1076f2e3a65320d76745b11446b30b70",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d2f4ddb4a4306fdf5bbaee.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f4ddb4a4306fdf5bbaee\ntitle: What Is Memoization, and How Does the useMemo Hook Work challengeType: 19\ndashedName: what-is-memoization-and-how-does-the-usememo-hook-work\n--description--\nAs your React app gets larger, unnecessary re-renders and expensive calculations can slow down performance, leading to slow UI updates and increased resource usage This can be especially problematic in apps with complex state management, large lists, functions that require heavy computations, and many components with a single parent This gives rise to the need to optimize your React app for better performance by minimizing redundant computations and ensuring smoother interactions React solves this problem with a process called memoization, a technique which caches values and functions to prevent unnecessary recalculations, so your app can be faster and more responsive By definition, memoization is an optimization technique in which the result of expensive function calls are cached (remembered) based on specific arguments When the same arguments are provided again, the cached result is returned instead of re-computing the function The memoization process happens this way:\nStore the results of function calls along with their input arguments Before executing the function, check if the result for the current arguments already exists in the cache If it exists, return the cached result instead of running the computation again If it doesn't exist, compute the result, store it in the cache, and then return it To improve developer experience with memoization, React provides three tools – React memo (or memo), useMemo and useCallback As you might guess, both useMemo and useCallback are hooks, but React memo is a component wrapper, a higher-order component (HOC) In the next lecture, we will take a look at how the useCallback hook and React memo work useMemo lets you memoize computed values while useCallback does the same for function references If you're wondering what computed values and function references are, computed values refer to the result of executing a function, while function references are the pointers to functions – the function object in memory Let's see how to use the useMemo hook first Here's the basic syntax of the useMemo hook:\njs\nconst memoizedValue = useMemo(\nfunction () {\nreturn computeExpensiveValue(a, b);\n},\n[a, b]\n);\nYou can see all that's needed is to wrap the useMemo hook around the function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6748,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d2f4ddb4a4306fdf5bbaee.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d1cc74c3a98fa80273380f333c31cf84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d2f4ddb4a4306fdf5bbaee.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "values and function references are, computed values refer to the result of executing a function, while function references are the pointers to functions – the function object in memory Let's see how to use the useMemo hook first Here's the basic syntax of the useMemo hook: js const memoizedValue = useMemo( function () { return computeExpensiveValue(a, b); }, [a, b] ); You can see all that's needed is to wrap the useMemo hook around the functionThis ExpensiveSquare component will receive a num prop which it will use to calculate the square:\n```jsx\nfunction ExpensiveSquare({ num }) {\nfunction calculateSquare(n) {\nconsole log(\"Calculating square \");\nreturn n * n;\n}\nconst squared = calculateSquare(num);\nreturn (\nSquare of {num}: {squared}\n);\n}\nexport default ExpensiveSquare;\n```\nHere's the App component where the ExpensiveSquare is being used:\n```jsx\nimport { useState, useEffect } from \"react\";\nimport ExpensiveSquare from \" /components/ExpensiveSquare\";\nfunction App() {\nconst [timer, setTimer] = useState(0);\nconst [num, setNum] = useState(0);\nuseEffect(() => {\nconst interval = setInterval(() => setTimer((c) => c + 1), 1000);\nreturn () => clearInterval(interval);\n}, []);\nreturn (\nTimer: {timer} seconds gone\nsetNum((n) => n + 1)}>Increase Number\n);\n}\nexport default App;\n```\nThe timer in the useEffect, running every second, will make the calculateSquare function runs any time it runs, even when you don't increase the num state variable To solve this problem, we can use the useMemo hook by wrapping the function call in it and specifying the num variable as the dependency:\n```jsx\n// import the useMemo hook\nimport { useMemo } from \"react\";\nfunction ExpensiveSquare({ num }) {\nfunction calculateSquare(n) {\nconsole log(\"Calculating square \");\nreturn n * n;\n}\n// const squared = calculateSquare(num);\n// Wrap the function call in useMemo instead\nconst squared = useMemo(() => calculateSquare(num), [num]);\nreturn (\nSquare of {num}: {squared}\n);\n}\nexport default ExpensiveSquare;\n```\nThis will make sure the function is memoized by caching the result, so calculation happens only when the num variable changes, not when anything changes in the component it's being used in",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6748,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d2f4ddb4a4306fdf5bbaee.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a7e11f2de85eb60ce6bf8208c4728234",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d2f4ddb4a4306fdf5bbaee.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "function calculateSquare(n) { console log(\"Calculating square \"); return n * n; } // const squared = calculateSquare(num); // Wrap the function call in useMemo instead const squared = useMemo(() => calculateSquare(num), [num]); return ( Square of {num}: {squared} ); } export default ExpensiveSquare; ``` This will make sure the function is memoized by caching the result, so calculation happens only when the num variable changes, not when anything changes in the component it's being used inThe calculateSquare function call is not running any time timer changes anymore but on the initial render and when num changes --questions--\n--text--\nWhat is memoization in React --answers--\nA technique that caches values and functions to prevent unnecessary recalculations A technique that lets you manage component state updates to prevent unnecessary recalculations --feedback--\nIt helps optimize performance by storing previously computed results A process of reconciling the Virtual DOM with the actual DOM --feedback--\nIt helps optimize performance by storing previously computed results A way to handle side effects in functional components --feedback--\nIt helps optimize performance by storing previously computed results --video-solution--\n1\n--text--\nWhat is the difference between computed values and function references --answers--\nComputed values are function objects, while function references are execution results --feedback--\nOne is the output of a function, while the other is just a pointer to it Computed values are the result of executing a function, while function references are the function objects in memory Computed values and function references are the same thing --feedback--\nOne is the output of a function, while the other is just a pointer to it Function references store computed values --feedback--\nOne is the output of a function, while the other is just a pointer to it --video-solution--\n2\n--text--\nWhich of these is NOT one of the tools React provides for memoization --answers--\nReact memo\n--feedback--\nMemoization tools focus on caching values and functions, while this option handles side effects useMemo\n--feedback--\nMemoization tools focus on caching values and functions, while this option handles side effects useCallback\n--feedback--\nMemoization tools focus on caching values and functions, while this option handles side effects useEffect\n--feedback--\nMemoization tools focus on caching values and functions, while this option handles side effects --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6748,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d2f4ddb4a4306fdf5bbaee.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "7a2783ce6dbe39b4ce27fd0a960cb99b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d1a99d10fd509c88faf3bf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d1a99d10fd509c88faf3bf\ntitle: How Does Data Fetching Work in React challengeType: 19\ndashedName: how-does-data-fetching-work-in-react\n--description--\nReact apps often rely on external APIs and databases for dynamic content To access the data from those APIs and databases, you need to use some data fetching techniques Let's take a look at how data fetching works in React and the different options available to you for fetching data React is not opinionated about how you fetch your data, this means on a basic level, you can use the built-in Fetch API, which all modern browsers support You can also use Axios and SWR Axios is promise-based HTTP request library built on top of the XMLHttpRequest object, and SWR is a React hook for data fetching created by the Vercel team Let's start with an example You first need to import the useState and useEffect hooks:\njs\nimport { useState, useEffect } from \"react\";\nThen you will need to create three state variables called loading, data, and error:\njs\nconst [data, setData] = useState(null);\nconst [loading, setLoading] = useState(true);\nconst [error, setError] = useState(null);\nThe loading variable will track whether the data is still being fetched The data variable represents the data itself, and the error variable will capture any errors that might occur during the data fetching process Since data fetching is a side effect, it's best to use the Fetch API inside of a useEffect hook Here's an example of that:\njs\nuseEffect(() => {\nfetch(\"https://jsonplaceholder typicode com/posts\") then((res) => res json()) then((data) => {\nsetData(data);\nsetLoading(false);\n}) catch((err) => {\nsetError(err);\nsetLoading(false);\n});\n}, []);\nThis useEffect fetches the data with the Fetch API and sets all the states You can make things better by using async/await instead of the then() syntax That means you have to have a separate function inside the useEffect because you cannot prefix useEffect with the async keyword:\n```js\nuseEffect(() => {\nconst fetchData = async () => {\ntry {\nconst res = await fetch(\"https://jsonplaceholder typicode com/posts\");\nif ( res ok) {\nthrow new Error(\"Network response was not ok\");\n}\nconst data = await res",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9051,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d1a99d10fd509c88faf3bf.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "3d459f908b9e4f7b3bde646983d8773e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d1a99d10fd509c88faf3bf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "sets all the states You can make things better by using async/await instead of the then() syntax That means you have to have a separate function inside the useEffect because you cannot prefix useEffect with the async keyword: ```js useEffect(() => { const fetchData = async () => { try { const res = await fetch(\"https://jsonplaceholder typicode com/posts\"); if ( res ok) { throw new Error(\"Network response was not ok\"); } const data = await resjson();\nsetData(data);\n} catch (err) {\nsetError(err);\n} finally {\nsetLoading(false);\n}\n};\nfetchData();\n}, []);\n```\nYou can then go ahead and use all of those states to render the data from the API Here's the full code:\n```jsx\nimport { useState, useEffect } from \"react\";\nconst FetchPosts = () => {\nconst [data, setData] = useState(null);\nconst [loading, setLoading] = useState(true);\nconst [error, setError] = useState(null);\nuseEffect(() => {\nconst fetchData = async () => {\ntry {\nconst res = await fetch(\"https://jsonplaceholder typicode com/posts\");\nif ( res ok) {\nthrow new Error(\"Network response was not ok\");\n}\nconst data = await res json();\nsetData(data);\n} catch (err) {\nsetError(err);\n} finally {\nsetLoading(false);\n}\n};\nfetchData();\n}, []);\nif (loading) {\nreturn Loading ;\n}\nif (error) {\nreturn {error message};\n}\nreturn (\n{data map((post) => (\n{post title}\n))}\n);\n};\nexport default FetchPosts;\n```\nIn the UI, you would see Loading on the screen when the data is being fetched, and then the data or error would show depending on if the data fetch was successful Remember we talked about data fetching with Axios and SWR too Let's take a look at an example using Axios You will first need to install Axios from the command line like this:\nsh\nnpm i axios\nThen you will need to import Axios like this:\njs\nimport axios from \"axios\";\nThen you can use the same state variables from earlier and fetch data from the API using axios get:\n```js\nconst [data, setData] = useState(null);\nconst [loading, setLoading] = useState(true);\nconst [error, setError] = useState(null);\nuseEffect(() => {\nconst fetchData = async () => {\ntry {\nconst res = await axios get(\n\"https://jsonplaceholder typicode",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9051,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d1a99d10fd509c88faf3bf.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "dcba9c37a181362664a9deb5388bc58f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d1a99d10fd509c88faf3bf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "line like this: sh npm i axios Then you will need to import Axios like this: js import axios from \"axios\"; Then you can use the same state variables from earlier and fetch data from the API using axios get: ```js const [data, setData] = useState(null); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); useEffect(() => { const fetchData = async () => { try { const res = await axios get( \"https://jsonplaceholder typicodecom/users\"\n);\nsetData(res data);\n} catch (err) {\nsetError(err);\n} finally {\nsetLoading(false);\n}\n};\nfetchData();\n}, []);\n```\nYou might have noticed that there is no await res json() line in this example That's because Axios automatically parses JSON, so there's no need for that The last example we will look at is to use the useSWR hook to fetch data Just like with Axios, you will need to install SWR like this:\nsh\nnpm install swr\nThen you will need to import the useSWR hook into the file like this:\njs\nimport useSWR from \"swr\";\nIn comparison to the previous examples, the SWR syntax is way shorter What you need to do is to create a fetcher function and pass it into the useSWR hook as its second parameter (the endpoint is the first parameter) You also get to destructure both the data and error states from the useSWR hook, so you don't need the useState hook Here is the syntax:\njs\nconst fetcher = (url) => fetch(url) then((res) => res json());\nconst { data, error } = useSWR(endpoint, fetcher);\nNote that the \"fetcher\" name here is only a convention, so you're free to name the variable whatever you want Here's a component fetching todos from the JSON Placeholder API:\n```jsx\nimport useSWR from \"swr\";\nconst fetcher = (url) => fetch(url) then((res) => res json());\nconst FetchTodos = () => {\nconst { data, error } = useSWR(\n\"https://jsonplaceholder typicode com/todos\",\nfetcher\n);\nif ( data) {\nreturn Loading ;\n}\nif (error) {\nreturn Error: {error message};\n}\nreturn (\n<>\nTodos\n{data map((todo) => (\n{todo",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9051,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d1a99d10fd509c88faf3bf.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "bd2375a332095e80b5af8a88bed27f48",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d1a99d10fd509c88faf3bf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "free to name the variable whatever you want Here's a component fetching todos from the JSON Placeholder API: ```jsx import useSWR from \"swr\"; const fetcher = (url) => fetch(url) then((res) => res json()); const FetchTodos = () => { const { data, error } = useSWR( \"https://jsonplaceholder typicode com/todos\", fetcher ); if ( data) { return Loading ; } if (error) { return Error: {error message}; } return ( <> Todos {data map((todo) => ( {todotitle}\n))}\n</>\n);\n};\nexport default FetchTodos;\n```\nAs you learned in a previous lecture on custom hooks, data fetching is a logic you can extract into a custom hook So, if you're fetching data in multiple components and pages, it is best to create a useFetch hook Here's a useFetch hook that uses SWR for data fetching:\n```jsx\nimport useSWR from \"swr\";\nconst fetcher = (url) => fetch(url) then((res) => res json());\nconst useFetch = (url) => {\nconst { data, error } = useSWR(url, fetcher);\nreturn {\ndata,\nloading: data && error,\nerror,\n};\n};\nexport default useFetch;\n```\nAnd here's how to use the useFetch hook to rewrite the first example that fetches posts from the JSON Placeholder API:\n```jsx\nimport useFetch from \" /useFetch\";\nconst FetchPosts = () => {\nconst { data, loading, error } = useFetch(\n\"https://jsonplaceholder typicode com/posts\"\n);\nif (loading) {\nreturn Loading ;\n}\nif (error) {\nreturn {error message};\n}\nreturn (\n<>\nPosts\n{data map((post) => (\n{post title}\n))}\n</>\n);\n};\nexport default FetchPosts;\n```\n--questions--\n--text--\nWhat are the two parameters of the useSWR hook in the given example --answers--\nURL and cache policy --feedback--\nThe first parameter represents the data source and the second handles data retrieval API route and fetcher function --feedback--\nThe first parameter represents the data source and the second handles data retrieval Endpoint and fetcher function Key and configuration object --feedback--\nThe first parameter represents the data source and the second handles data retrieval --video-solution--\n3\n--text--\nWhy do you have to handle data fetching logic inside a useEffect",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9051,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d1a99d10fd509c88faf3bf.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "7615f8283a5bc19ebb2d4c14b1b96e68",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d1a99d10fd509c88faf3bf.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "example --answers-- URL and cache policy --feedback-- The first parameter represents the data source and the second handles data retrieval API route and fetcher function --feedback-- The first parameter represents the data source and the second handles data retrieval Endpoint and fetcher function Key and configuration object --feedback-- The first parameter represents the data source and the second handles data retrieval --video-solution-- 3 --text-- Why do you have to handle data fetching logic inside a useEffect--answers--\nBecause data fetching should only run once --feedback--\nFetching data affects things outside the component and should not block rendering Because data fetching should not be part of the rendering process Because useEffect executes before the component renders --feedback--\nFetching data affects things outside the component and should not block rendering Because useEffect runs synchronously with the render cycle --feedback--\nFetching data affects things outside the component and should not block rendering --video-solution--\n2\n--text--\nWhat is Axios built upon --answers--\nThe Fetch API --feedback--\nIt's an older API used for making HTTP requests before Fetch The XMLHttpRequest object The WebSocket API --feedback--\nIt's an older API used for making HTTP requests before Fetch The DOM API --feedback--\nIt's an older API used for making HTTP requests before Fetch --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9051,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d1a99d10fd509c88faf3bf.md",
      "source_type": "git_repo"
    },
    "token_count": 256,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "88276ad71184c82ba316d024b3b4bb36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d2f51ff2c927713caa24fa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d2f51ff2c927713caa24fa\ntitle: How Do the useCallback Hook and React memo Work challengeType: 19\ndashedName: how-do-the-usecallback-hook-and-react-memo-work\n--description--\nIn the last lecture, you learned about memoization and how the useMemo hook works In this lecture, you'll learn how the useCallback hook and React memo work In the last lecture, we also mentioned that useCallback is for memoizing function references For React memo, it lets you memoize a component to prevent it from unnecessary re-renders when its prop has not changed Here's the basic syntax of the useCallback hook:\njs\nconst handleClick = useCallback(() => {\n// code goes here\n}, [dependency]);\nAnd here's the basic syntax of React memo:\njsx\nconst MemoizedComponent = React memo(({ prop }) => {\nreturn (\n<>\n{/* Presentation */}\n</>\n)\n});\nLet's look at an example of the useCallback hook:\n```jsx\nimport { useState, useEffect } from \"react\";\nfunction Counter() {\nconst [count, setCount] = useState(0);\nconst handleClick = () => {\nsetCount((prevCount) => prevCount + 1);\n};\nuseEffect(() => {\nconsole log(\"useEffect runs\");\n}, [handleClick]);\nreturn (\nCount: {count}\nIncrement\n);\n}\nexport default Counter;\n```\nIn the component, the effect runs any time handleClick changes because the handleClick function is being recreated on every render To fix this, you need to tell React to treat the handleClick function as the same thing across renders by memoizing it with the useCallback hook, so it doesn't get recreated:\n```jsx\nimport { useState, useEffect, useCallback } from \"react\";\nfunction Counter() {\nconst [count, setCount] = useState(0);\n// Memoize the handleClick function with useCallback\nconst handleClick = useCallback(() => {\nsetCount((prevCount) => prevCount + 1);\n}, []);\nuseEffect(() => {\nconsole log(\"useEffect runs\");\n}, [handleClick]);\nreturn (\nCount: {count}\nIncrement\n);\n}\nexport default Counter;\n```\nNow the handleClick function is not being recreated on every render To show you how the React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d2f51ff2c927713caa24fa.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5c2b57d20057406ac482de168d5cdde2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d2f51ff2c927713caa24fa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "doesn't get recreated: ```jsx import { useState, useEffect, useCallback } from \"react\"; function Counter() { const [count, setCount] = useState(0); // Memoize the handleClick function with useCallback const handleClick = useCallback(() => { setCount((prevCount) => prevCount + 1); }, []); useEffect(() => { console log(\"useEffect runs\"); }, [handleClick]); return ( Count: {count} Increment ); } export default Counter; ``` Now the handleClick function is not being recreated on every render To show you how the Reactmemo (or memo) higher-order function works and the useCallback hook work in tandem, here's a Counter component with a handleClick function that needs useCallback but is currently not using it:\n```jsx\nimport { useState, useEffect, useCallback } from \"react\";\nimport CounterChild from \" /CounterChild\";\nfunction Counter() {\nconst [count, setCount] = useState(0);\nconst [timer, setTimer] = useState(new Date() toLocaleTimeString());\nconst handleClick = () => {\nsetCount(count + 1);\n};\nuseEffect(() => {\nconst interval = setInterval(() => {\nsetTimer(new Date() toLocaleTimeString());\n}, 1000);\nreturn () => clearInterval(interval);\n}, []);\nreturn (\nTime: {timer}\nCount: {count}\nIncrement\n);\n}\nexport default Counter;\n```\nThis function also has a timer in state that updates every second This makes the component re-render every time the timer changes, making the handleClick function get recreated on every render That's why the handleClick needs to be memoized with useCallback Here's the CounterChild component:\n```jsx\nconst CounterChild = ({ onClick }) => {\nconsole log(\"CounterChild component rendered\");\nreturn Increment from Child;\n};\nexport default CounterChild;\n```\nThis CounterChild component takes an onClick prop, giving you the ability to also increment the counter from it Since the CounterChild component is a child of the Counter component, it will also render any time the Counter re-renders due to the changing timer So, the CounterChild also needs to be memoized Without memoization, because as the component re-renders due to the timer updating every second, the CounterChild component is also re-rendered To prevent this, you need to memoize the CounterChild component with React memo:\n```jsx\nimport React from \"react\";\nconst CounterChild = React memo(({ onClick }) => {\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d2f51ff2c927713caa24fa.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b46dd2b0c09304f0804d950ece4daa5a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d2f51ff2c927713caa24fa.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a child of the Counter component, it will also render any time the Counter re-renders due to the changing timer So, the CounterChild also needs to be memoized Without memoization, because as the component re-renders due to the timer updating every second, the CounterChild component is also re-rendered To prevent this, you need to memoize the CounterChild component with React memo: ```jsx import React from \"react\"; const CounterChild = React memo(({ onClick }) => { consolelog(\"CounterChild component rendered\");\nreturn Increment from Child;\n});\nexport default CounterChild;\n```\nThings do not work optimally yet even after memoizing the CounterChild with React memo This happens because the handleClick function is being recreated on every render, so it also needs to be memoized with useCallback, in order to tell React that you need the function to stay the same across renders:\njs\nconst handleClick = useCallback(() => {\nsetCount((prevCount) => prevCount + 1);\n}, [count]);\nNow, the component only re-renders when the count state changes --questions--\n--text--\nWhat does the useCallback hook memoize --answers--\nComputed values --feedback--\nIt helps prevent a new function instance from being created on every render Function references Component renders --feedback--\nIt helps prevent a new function instance from being created on every render State updates --feedback--\nIt helps prevent a new function instance from being created on every render --video-solution--\n2\n--text--\nWhich of these is the correct syntax for the useCallback hook --answers--\njs\nconst handleClick = useCallback(() => { /* code */ });\n--feedback--\nThe second argument should be an array of dependencies js\nconst handleClick = useCallback(() => { /* code */ }, dependency);\n--feedback--\nThe second argument should be an array of dependencies jsx\nconst handleClick = useCallback(() => { /* code */ }, [dependency]);\njs\nconst handleClick = useCallback(() => { dependency }, {});\n--feedback--\nThe second argument should be an array of dependencies --video-solution--\n3\n--text--\nWhat does React memo memoize --answers--\nFunction references --feedback--\nIt prevents re-renders when props remain the same Component state --feedback--\nIt prevents re-renders when props remain the same Component renders based on unchanged props DOM elements --feedback--\nIt prevents re-renders when props remain the same --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6567,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67d2f51ff2c927713caa24fa.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8d5edca03d6d77ae08519a05ddd41042",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\6734e3ceee2da4b0301719b7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6734e3ceee2da4b0301719b7\ntitle: How Do You Pass Props from a Parent Component to a Child Component in React challengeType: 19\ndashedName: how-do-you-pass-props-from-a-parent-component-to-a-child-component-in-react\n--description--\nIn the previous lectures, we learned how to build small components in React like this:\njsx\nfunction Greeting() {\nconst developerName = \"Jessica\";\nreturn <h1>Hi {developerName} </h1>;\n}\nWe can choose to nest this component inside another parent component or the root component like this:\n```jsx\nfunction App() {\nreturn ;\n}\nfunction Greeting() {\nconst developerName = \"Jessica\";\nreturn Hi {developerName} ;\n}\n```\nWhile this code will run fine and display the result of Hi Jessica on the screen, it is not that flexible of a component What if we wanted to display a different name like Naomi, Tom, or Oliver This is where React props comes in Props, which is short for properties, is the way for parent components to pass data down to the child component Props can be of any type: strings, numbers, booleans, objects, or arrays Let's update our example from earlier to now accept a name prop:\n```jsx\nfunction App() {\nreturn ;\n}\nexport default App;\nfunction Greeting(props) {\nconsole log(props);\nreturn Hi {props name} ;\n}\n```\nFor the child component called Greeting we are now using props name instead of hardcoding the name \"Jessica\" We are also logging props to the console which is showing as an object Then, inside of the parent App component, we are passing the value to the name prop so it can be passed down to the child The result will be the same on the screen like earlier, but now we have created a more flexible component Now we have the ability to reuse the child component several times and pass in different names each time:\njsx\nfunction App() {\nreturn (\n<>\n<Greeting name=\"Naomi\" />\n<Greeting name=\"Tom\" />\n<Greeting name=\"Jessica\" />\n<Greeting name=\"Oliver\" />\n</>\n);\n}\nYou can also choose to use object destructuring in the props to make it more readable Here's how you could rewrite the Greeting component:\njsx\nfunction Greeting({ name }) {\nreturn <h1>Hi {name}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5794,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\6734e3ceee2da4b0301719b7.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "54b4baa2efc8df1029d9f32c3d2167fe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\6734e3ceee2da4b0301719b7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "flexible component Now we have the ability to reuse the child component several times and pass in different names each time: jsx function App() { return ( <> <Greeting name=\"Naomi\" /> <Greeting name=\"Tom\" /> <Greeting name=\"Jessica\" /> <Greeting name=\"Oliver\" /> </> ); } You can also choose to use object destructuring in the props to make it more readable Here's how you could rewrite the Greeting component: jsx function Greeting({ name }) { return <h1>Hi {name}</h1>;\n}\nThis code achieves the same result but makes it clearer which props the component is expecting to receive Sometimes, you can have a lot of properties that you have to pass as props Instead of passing them one by one, you can use the spread operator ( ), after converting them to an object Here is an example of a new child component called DeveloperCard:\njsx\nfunction DeveloperCard({ name, age, country }) {\nreturn (\n<div className=\"developer-card\">\n<h1>Developer: {name}</h1>\n<p>Age: {age}</p>\n<p>Country: {country}</p>\n</div>\n);\n}\nThis DeveloperCard component accepts three props: name, age, and country In the parent App component, we can use the spread syntax to pass all the properties from an object as individual props to the child component:\n```jsx\nfunction App() {\nconst developerObj = {\nname: \"Alice\",\nage: 30,\ncountry: \"USA\",\n};\nreturn (\n);\n}\n```\nThis is particularly useful when working with arrays of objects and passing multiple sets of properties to child components For example, you might have a list of developers where each object in the array has the same structure but represents a different person You will learn more about how to render lists in arrays in future lectures Using props in React makes your components more flexible and reusable, allowing you to build more complex UIs However, it's important to note that props are immutable, meaning they cannot be changed once passed to a component If you need to handle user input and modify data, you should use state instead You'll learn more about managing state in future lectures --questions--\n--text--\nIn React, how do you pass a prop named message with the string Hello to a child component --answers--\n<ChildComponent message=\"Hello\" />\n<ChildComponent props",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5794,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\6734e3ceee2da4b0301719b7.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f9049cd3cadc0252e7ab970b828587ee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\6734e3ceee2da4b0301719b7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "allowing you to build more complex UIs However, it's important to note that props are immutable, meaning they cannot be changed once passed to a component If you need to handle user input and modify data, you should use state instead You'll learn more about managing state in future lectures --questions-- --text-- In React, how do you pass a prop named message with the string Hello to a child component --answers-- <ChildComponent message=\"Hello\" /> <ChildComponent propsmessage=\"Hello\" />\n--feedback--\nThink about how attributes are added to JSX elements <ChildComponent>message=\"Hello\"</ChildComponent>\n--feedback--\nThink about how attributes are added to JSX elements <ChildComponent {message: \"Hello\"} />\n--feedback--\nThink about how attributes are added to JSX elements --video-solution--\n1\n--text--\nHow would you access a prop named userName inside a functional child component, assuming the props are passed as a props object --answers--\nthis props userName\n--feedback--\nConsider how props are passed to functional components in React props userName\nthis userName\n--feedback--\nConsider how props are passed to functional components in React children userName\n--feedback--\nConsider how props are passed to functional components in React --video-solution--\n2\n--text--\nWhat is the correct way to pass all properties of an object as individual props to a child component --answers--\n<ChildComponent props={objectName} />\n--feedback--\nRemember the special syntax used to spread object properties as individual props <ChildComponent { objectName} />\n<ChildComponent objectName />\n--feedback--\nRemember the special syntax used to spread object properties as individual props <ChildComponent>{objectName}</ChildComponent>\n--feedback--\nRemember the special syntax used to spread object properties as individual props --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5794,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\6734e3ceee2da4b0301719b7.md",
      "source_type": "git_repo"
    },
    "token_count": 363,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f086fe6f7f3bfedcca674851b7860d80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500abfe36cd015b67b1b7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673500abfe36cd015b67b1b7\ntitle: How Does Conditional Rendering Work in React Components challengeType: 19\ndashedName: how-does-conditional-rendering-work-in-react-components\n--description--\nConditional rendering in React allows you to create dynamic user interfaces It is used to show different content based on certain conditions or states within your application The most common approaches of using conditional rendering includes using if statements, the ternary ( :) operator, and logical AND (&&) operator The simplest form of conditional rendering uses an if statement Here's an example:\njsx\nfunction Greeting({ isLoggedIn }) {\nif (isLoggedIn) {\nreturn <h1>Welcome back </h1>;\n}\nreturn <h1>Please sign in</h1>;\n}\nIn this example, the Greeting component checks the isLoggedIn prop If it's true, it returns a welcome message, otherwise, it prompts the user to sign in Here is an example using the Greeting component inside of the parent App component:\njsx\nfunction App() {\nreturn (\n<div className=\"App\">\n<Greeting isLoggedIn={false} />\n</div>\n);\n}\nFor simpler conditions, the ternary operator ( :) is often used directly within JSX It allows for inline conditional rendering, which can make your code more concise:\njsx\nfunction Greeting({ isLoggedIn }) {\nreturn <h1>{isLoggedIn \"Welcome back \" : \"Please sign in \"}</h1>;\n}\nThis code achieves the same result as the previous example but in a more compact form The ternary operator checks isLoggedIn and renders the appropriate message Another common pattern for conditional rendering is using the logical AND (&&) operator This is particularly useful when you want to render something, or nothing, based on a condition:\njsx\nfunction Notification({ message }) {\nreturn (\n<div>\n{message && <p>{message}</p>}\n</div>\n);\n}\nIn this example, the paragraph element with the message is only rendered if the message prop is truthy If message is falsy - meaning it is an empty string, null, or undefined, nothing is rendered to the screen By mastering these techniques of conditional rendering, you can build more interactive and user-friendly applications that adapt to changing data and user interactions --questions--\n--text--\nWhich of the following is NOT a common method for conditional rendering in React --answers--\nUsing if statements --feedback--\nThink about the methods discussed in the lecture for handling conditional rendering in React Using the ternary operator",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4212,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500abfe36cd015b67b1b7.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9de55fa88a08ba49835fbfeb19c3c279",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500abfe36cd015b67b1b7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "it is an empty string, null, or undefined, nothing is rendered to the screen By mastering these techniques of conditional rendering, you can build more interactive and user-friendly applications that adapt to changing data and user interactions --questions-- --text-- Which of the following is NOT a common method for conditional rendering in React --answers-- Using if statements --feedback-- Think about the methods discussed in the lecture for handling conditional rendering in React Using the ternary operator--feedback--\nThink about the methods discussed in the lecture for handling conditional rendering in React Using the logical AND (&&) operator\n--feedback--\nThink about the methods discussed in the lecture for handling conditional rendering in React Using the switch statement --video-solution--\n4\n--text--\nWhat will be rendered by the following code if message is an empty string jsx\nfunction Alert({ message }) {\nreturn (\n<div>\n{message && <p>{message}</p>}\n</div>\n);\n}\n--answers--\n<div><p></p></div>\n--feedback--\nConsider how the logical AND (&&) operator works with falsy values in JSX <div></div>\n<div>false</div>\n--feedback--\nConsider how the logical AND (&&) operator works with falsy values in JSX This will throw an error --feedback--\nConsider how the logical AND (&&) operator works with falsy values in JSX --video-solution--\n2\n--text--\nIn the following code, what type of conditional rendering is being used jsx\nfunction Greeting({ name }) {\nreturn <h1>{name `Hello, ${name} ` : 'Hello, Guest '}</h1>;\n}\n--answers--\nif statement --feedback--\nLook at the syntax used within the JSX to conditionally render different content switch statement --feedback--\nLook at the syntax used within the JSX to conditionally render different content Ternary operator Logical AND (&&) operator --feedback--\nLook at the syntax used within the JSX to conditionally render different content --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4212,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500abfe36cd015b67b1b7.md",
      "source_type": "git_repo"
    },
    "token_count": 401,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "25113e0b8bc8027a78546a9f1595b823",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67e2a513dbffdc8dcf1700af.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67e2a513dbffdc8dcf1700af\ntitle: What Is the useOptimistic Hook, and How Does It Work challengeType: 19\ndashedName: what-is-the-useoptimistic-hook-and-how-does-it-work\n--description--\nRecent versions of React introduced server components and server actions to shift some of the rendering and logic responsibilities to the server Along with those updates, React added a new hook called useOptimistic to keep UIs responsive while waiting for an async action to complete in the background While this is often used for fetching data from a server, it's not limited to that The hook is generally useful for handling async operations, ensuring the UI remains smooth and interactive while the action runs Let's take a look at what the useOptimistic hook is and how it contributes to making snappy and responsive UIs The useOptimistic hook helps manage \"optimistic updates\" in the UI, a strategy in which you provide immediate updates to the UI based on the expected outcome of an action, like waiting for a server response Here's the basic syntax of the useOptimistic hook:\njs\nconst [optimisticState, addOptimistic] = useOptimistic(actualState, updateFunction);\noptimisticState is the temporary state that updates right away for a better user experience addOptimistic is the function that applies the optimistic update before the actual state changes actualState is the real state value that comes from the result of an action, like fetching data from a server updateFunction is the function that determines how the optimistic state should update when called At first glance, it might seem like the useOptimistic hook is just another way to handle loading states in React But it's more than that A loading state controls whether you see a spinner, message, or some other indicator in the UI while something happens in the background However, the useOptimistic hook updates the UI instantaneously based on an expected outcome, even before you, say, make a call to an API This hook gives you a chance to show a loading indicator or message, handle potential errors gracefully, and show instant feedback to make the UI feel snappy This will become clearer as we go through some examples showing how the useOptimistic hook works Here's an action that simulates saving a task to a server",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67e2a513dbffdc8dcf1700af.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "3f2fc3e62ec8698c87e76ee83089ee59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67e2a513dbffdc8dcf1700af.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the useOptimistic hook updates the UI instantaneously based on an expected outcome, even before you, say, make a call to an API This hook gives you a chance to show a loading indicator or message, handle potential errors gracefully, and show instant feedback to make the UI feel snappy This will become clearer as we go through some examples showing how the useOptimistic hook works Here's an action that simulates saving a task to a serverIt returns the task after a 1 second delay, as it could happen with a real-world API request:\n```js\nexport async function saveTask(task) {\nawait new Promise((res) => setTimeout(res, 1000));\nreturn task;\n}\n```\nHere's the code that sets up the useOptimistic hook by importing and initializing it, with an handleSubmit function that sends an input to the action:\n```jsx\n\"use client\";\nimport { useOptimistic } from \"react\";\nexport default function TaskList({ tasks, addTask }) {\nconst [optimisticTasks, addOptimisticTask] = useOptimistic(\ntasks,\n(state, newTask) => [ state, { text: newTask, pending: true }]\n);\nasync function handleSubmit(e) {\ne preventDefault();\nconst formData = new FormData(e target);\naddOptimisticTask(formData get(\"task\"));\naddTask(formData);\ne target reset();\n}\nreturn <>{/ UI /}</>;\n}\n```\nIn the code, the useOptimistic hook keeps a temporary list of tasks that updates immediately when you add a new task The line, (state, newTask) => [ state, { text: newTask, pending: true }] ensures that a new task appears with a pending status even before the server confirms something is coming from the form When the form is submitted, the handleSubmit function extracts the task and adds it \"optimistically\" with the addOptimisticTask parameter Then addTask is passed as a prop which sends the task to the server Finally, the form is reset by calling e target reset() Here's the TaskList component:\n```jsx\n\"use client\";\nimport { useOptimistic, startTransition } from \"react\";\nexport default function TaskList({ tasks, addTask }) {\nconst [optimisticTasks, addOptimisticTask] = useOptimistic(\ntasks,\n(state, newTask) => [",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67e2a513dbffdc8dcf1700af.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "ab953ab6d26c7da1e24daf3076898c71",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67e2a513dbffdc8dcf1700af.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "form When the form is submitted, the handleSubmit function extracts the task and adds it \"optimistically\" with the addOptimisticTask parameter Then addTask is passed as a prop which sends the task to the server Finally, the form is reset by calling e target reset() Here's the TaskList component: ```jsx \"use client\"; import { useOptimistic, startTransition } from \"react\"; export default function TaskList({ tasks, addTask }) { const [optimisticTasks, addOptimisticTask] = useOptimistic( tasks, (state, newTask) => [state, { text: newTask, pending: true }]\n);\nasync function handleSubmit(e) {\ne preventDefault();\nconst formData = new FormData(e target);\nstartTransition(() => {\naddOptimisticTask(formData get(\"task\"));\n});\naddTask(formData);\ne target reset();\n}\nreturn (\nTasks\n<ul className=\"space-y-2 mb-4\">\n{optimisticTasks map((task, index) => (\n<li key={index} className=\"p-2 border-b\">\n{task text}\n{task pending && (\n<small className=\"ml-2 text-gray-500 text-sm\">\nAdding Task </small>\n)}\n</li>\n))}\n</ul>\n<form onSubmit={handleSubmit} className=\"flex gap-2\">\n<input\ntype=\"text\"\nname=\"task\"\nplaceholder=\"Type in a task \"\nclassName=\"flex-1 p-2 border\"\n/>\n<button type=\"submit\" className=\"bg-gray-200 px-3 py-2 cursor-pointer\">\nSubmit\n</button>\n</form>\n</div>\n);\n}\n```\nHere, we are looping through the optimisticTask parameter to display the task When task pending is true, the text Adding Task is displayed next to the task, confirming that the task has been added optimistically before the server confirms it Here's the Task component that manages the state for the form It calls the saveTask function from the action so it can add the task, and appends the new task once it is received by the server:\n```jsx\n\"use client\";\nimport { useState } from \"react\";\nimport TaskList from \" /TaskList\";\nimport { saveTask } from \" /actions\";\nexport default function Tasks() {\nconst [tasks, setTasks] = useState([]);\nasync function addTask(formData) {\nconst newTaskText = formData get(\"task\");\nconst savedTask = await saveTask(newTaskText);\nsetTasks((prev) => [",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67e2a513dbffdc8dcf1700af.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "1e483bf6bfbed4ae2aa97fadc20260bd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67e2a513dbffdc8dcf1700af.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the form It calls the saveTask function from the action so it can add the task, and appends the new task once it is received by the server: ```jsx \"use client\"; import { useState } from \"react\"; import TaskList from \" /TaskList\"; import { saveTask } from \" /actions\"; export default function Tasks() { const [tasks, setTasks] = useState([]); async function addTask(formData) { const newTaskText = formData get(\"task\"); const savedTask = await saveTask(newTaskText); setTasks((prev) => [prev, { text: savedTask, pending: false }]);\n}\nreturn ;\n}\n```\nThis ensures snappy UI updates by showing instant feedback instead of waiting for a response Once the task is saved, the pending property is removed, and the final task list updates accordingly In the UI, there are two things happening that are not supposed to happen First, you can't see the Adding Task text since it appears and disappears too quickly Next, there's an error occurring after adding the task There are two things we need to do to address those issues First, we need to import startTransition from React and use it to wrap the line addOptimisticTask(formData get('task')):\njs\nstartTransition(() => {\naddOptimisticTask(formData get(\"task\"));\n});\nSecond, we need to make the Adding Task text visible for some time before it goes away To do this, we can modify the addTask function with a pending state and simulate a delay of a few seconds before marking the task as completed setTimeout() is ideal for this:\n```js\nasync function addTask(formData) {\nconst newTaskText = formData get(\"task\");\n// Add an optimistic task with a pending state\nconst tempTask = { id: Date now(), text: newTaskText, pending: true };\nsetTasks((prev) => [ prev, tempTask]);\n// Simulate a 3 seconds delay before marking the task as completed\nsetTimeout(async () => {\nconst savedTask = await saveTask(newTaskText);\nsetTasks((prev) =>\nprev map((task) =>\ntask id === tempTask id { task, text: savedTask, pending: false }\n: task\n)\n);\n}, 3000);\n}\n```\nAnd once you do that, everything works fine --questions--\n--text--\nWhat is the purpose of the useOptimistic hook",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67e2a513dbffdc8dcf1700af.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "d97b7c5e1ed6f82cf6caee1e2f92dc75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67e2a513dbffdc8dcf1700af.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Date now(), text: newTaskText, pending: true }; setTasks((prev) => [ prev, tempTask]); // Simulate a 3 seconds delay before marking the task as completed setTimeout(async () => { const savedTask = await saveTask(newTaskText); setTasks((prev) => prev map((task) => task id === tempTask id { task, text: savedTask, pending: false } : task ) ); }, 3000); } ``` And once you do that, everything works fine --questions-- --text-- What is the purpose of the useOptimistic hook--answers--\nIt allows components to fetch data from the server before rendering the UI --feedback--\nThis hook ensures the UI reflects expected changes before an async operation completes It helps manage optimistic updates by updating the UI immediately while waiting for an async operation, like a server response It enables automatic error handling and rollback for failed API requests in React applications --feedback--\nThis hook ensures the UI reflects expected changes before an async operation completes It optimizes state updates by batching them together to improve performance --feedback--\nThis hook ensures the UI reflects expected changes before an async operation completes --video-solution--\n2\n--text--\nHow is the useOptimistic hook different from a loading state --answers--\nA loading state shows UI feedback while waiting for a response, whereas useOptimistic updates the UI immediately based on an expected outcome A loading state modifies server data instantly while useOptimistic only updates the client UI --feedback--\nOne updates the UI before the server even knows about the request The useOptimistic hook is used for handling errors, whereas a loading state is only for showing spinners --feedback--\nOne updates the UI before the server even knows about the request Both are the same, but useOptimistic provides automatic retries for failed requests --feedback--\nOne updates the UI before the server even knows about the request --video-solution--\n1\n--text--\nWhat does addOptimistic do in the useOptimistic hook syntax below js\nconst [optimisticState, addOptimistic] = useOptimistic(actualState, updateFunction);\n--answers--\nIt applies the optimistic update before the actual state changes, providing a smoother user experience It fetches the real state from the server and updates the UI accordingly --feedback--\nThis function updates the UI before the actual state changes It replaces the actual state with a temporary state after receiving a server response",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67e2a513dbffdc8dcf1700af.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "d56c5c9d291c2dcd0daf7d144aa0379b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67e2a513dbffdc8dcf1700af.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the request --video-solution-- 1 --text-- What does addOptimistic do in the useOptimistic hook syntax below js const [optimisticState, addOptimistic] = useOptimistic(actualState, updateFunction); --answers-- It applies the optimistic update before the actual state changes, providing a smoother user experience It fetches the real state from the server and updates the UI accordingly --feedback-- This function updates the UI before the actual state changes It replaces the actual state with a temporary state after receiving a server response--feedback--\nThis function updates the UI before the actual state changes It validates server data before applying the optimistic update to the UI --feedback--\nThis function updates the UI before the actual state changes --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 10256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-fetching-and-memoization-in-react\\67e2a513dbffdc8dcf1700af.md",
      "source_type": "git_repo"
    },
    "token_count": 155,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "b90d9345dcf59779250e8cbe54da6f23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500bfe1f41601c1ddb1a2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673500bfe1f41601c1ddb1a2\ntitle: How Do Inline Styles Work in React challengeType: 19\ndashedName: how-do-inline-styles-work-in-react\n--description--\nIn React, inline styles are used to apply CSS styles directly to React elements within your JSX code instead of defining them in separate CSS files React's approach to inline styles involves using JavaScript objects to define styles, rather than traditional CSS strings This means that instead of writing styles as you would in a CSS file, you create a JavaScript object where the keys are camel cased versions of CSS property names, and the values are the strings of CSS values Here is an example of how you can use inline styles for a Button component:\n```jsx\nfunction Button({ buttonText }) {\nconst defaultStyles = {\nbackgroundColor: \"#007BFF\",\ncolor: \"white\",\nborder: \"none\",\nborderRadius: \"4px\",\npadding: \"10px 20px\",\nfontSize: \"16px\",\nfontWeight: \"bold\",\ncursor: \"pointer\",\ntransition: \"background-color 0 3s ease\",\n};\nreturn {buttonText};\n}\n```\nIn this example, we define a style object called defaultStyles We then apply these styles to a button element using the style attribute React takes care of applying these styles to the element when it renders You can also choose to pass in an object directly to the style attribute Here is what a revised example would look like:\njsx\nfunction Button({ buttonText }) {\nreturn (\n<button\nstyle={{\nbackgroundColor: \"#007BFF\",\ncolor: \"white\",\n}}\n>\n{buttonText}\n</button>\n);\n}\nSometimes you might want to pass in an object directly if there are only a few properties like shown here Otherwise, passing in a name to an object would be better like in the first example It's important to note that while CSS property names are typically written in kebab case, like font-size, in React's inline styles, we use camel case, like fontSize This is because the style object is a JavaScript object, and kebab case names are not valid as object keys in JavaScript without using quotes A great advantage of inline styles in React is that they support dynamic styling based on a component state or props For example:\n```jsx\nfunction DynamicButton({ isActive }) {\nconst buttonStyles = {\nbackgroundColor: isActive",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4929,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500bfe1f41601c1ddb1a2.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3bcbf6d4b9364b42ed64a13964e3c075",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500bfe1f41601c1ddb1a2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "written in kebab case, like font-size, in React's inline styles, we use camel case, like fontSize This is because the style object is a JavaScript object, and kebab case names are not valid as object keys in JavaScript without using quotes A great advantage of inline styles in React is that they support dynamic styling based on a component state or props For example: ```jsx function DynamicButton({ isActive }) { const buttonStyles = { backgroundColor: isActive\"green\" : \"red\",\ncolor: \"white\",\npadding: \"10px 15px\",\nborder: \"none\",\ncursor: \"pointer\",\n};\nreturn Login;\n}\n```\nIn this example, the button's background color changes based on the isActive prop This kind of dynamic styling can be powerful for creating interactive and responsive user interfaces In summary, inline styles in React provide a powerful way to apply and manipulate styles directly within your components They use JavaScript objects instead of CSS strings, require camel cased property names, and can easily incorporate dynamic values They're an essential tool in a React developer's toolkit, especially for creating highly customized and interactive user interfaces --questions--\n--text--\nIn React inline styles, how should the CSS property background-color be written --answers--\nbackground-color\n--feedback--\nRemember what we said about the naming convention for CSS properties in React inline styles backgroundColor\n\"background-color\"\n--feedback--\nRemember what we said about the naming convention for CSS properties in React inline styles background_color\n--feedback--\nRemember what we said about the naming convention for CSS properties in React inline styles --video-solution--\n2\n--text--\nWhat is an advantage of using inline styles in React --answers--\nThey support all CSS features including media queries --feedback--\nThink about what we discussed regarding dynamic styling in React components They are always more performant than external CSS --feedback--\nThink about what we discussed regarding dynamic styling in React components They allow for easy dynamic styling based on component state or props They are the only way to style React components --feedback--\nThink about what we discussed regarding dynamic styling in React components --video-solution--\n3\n--text--\nHow are inline styles applied to a React element --answers--\nUsing the class attribute --feedback--\nRecall the syntax we used in our examples for applying styles to React elements Using the style attribute with a JavaScript object Using a separate CSS file\n--feedback--\nRecall the syntax we used in our examples for applying styles to React elements",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4929,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500bfe1f41601c1ddb1a2.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "06b816264e8f9a709a863503a8ec963a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500bfe1f41601c1ddb1a2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to style React components --feedback-- Think about what we discussed regarding dynamic styling in React components --video-solution-- 3 --text-- How are inline styles applied to a React element --answers-- Using the class attribute --feedback-- Recall the syntax we used in our examples for applying styles to React elements Using the style attribute with a JavaScript object Using a separate CSS file --feedback-- Recall the syntax we used in our examples for applying styles to React elementsUsing the css attribute\n--feedback--\nRecall the syntax we used in our examples for applying styles to React elements --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4929,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500bfe1f41601c1ddb1a2.md",
      "source_type": "git_repo"
    },
    "token_count": 120,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "80265bbcb7be2c3622fe668eee050051",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-types\\672d264645e289208e562f10.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672d264645e289208e562f10\ntitle: What Is Dynamic Typing in JavaScript, and How Does It Differ from Statically Typed Languages challengeType: 19\ndashedName: what-is-dynamic-typing-in-javascript-and-how-does-it-differ-from-statically-typed-languages\n--description--\nJavaScript is a dynamically typed language, meaning you don't need to specify the data type of a variable when you declare it Instead, the type is determined based on the value assigned to the variable while the program is running This allows you to change the type of a variable throughout the program Let's look at an example:\njs\nlet example = \"Hello\";\nexample = 42;\nIn this example, we have a variable called example with the data type of string But then we update value to be a number instead The flexibility of dynamic typing makes JavaScript more forgiving and easy to work with for quick scripting, but it can also introduce bugs that may be harder to catch, especially as your program grows larger In statically typed languages like Java or C++, you must declare the data type of a variable when you create it, and that type cannot change For instance, if you declare a variable as integer, you can only assign it integer values If you try to assign it a different type, the program will throw an error Here's an example in Java language:\njs\nint value = 42; // value must always be an integer\nvalue = \"Hello\"; // This would cause an error in Java\nThe difference between dynamic typing and static typing lies in the flexibility vs the safety of your code Dynamically typed languages offer flexibility but at the cost of potential runtime errors Statically typed languages enforce stricter rules that can prevent certain errors, but they require more upfront declaration and offer less flexibility in changing types Here is another example of creating a variable with a type set to number then changing it to later be of type string:\njs\nlet data = 100;  // Initially a number\ndata = \"New data\";  // Dynamically changes to a string\nIn a statically typed language, this kind of change would not be allowed, as the data type would be fixed In conclusion, JavaScript's dynamic typing allows variables to change types freely, which offers flexibility but can lead to unexpected errors during execution Statically typed languages like Java require you to specify variable types upfront, which helps catch errors before the program runs but offers less flexibility",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4485,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-types\\672d264645e289208e562f10.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6422aace419de0c24d81c5b31b649044",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-types\\672d264645e289208e562f10.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "data = \"New data\"; // Dynamically changes to a string In a statically typed language, this kind of change would not be allowed, as the data type would be fixed In conclusion, JavaScript's dynamic typing allows variables to change types freely, which offers flexibility but can lead to unexpected errors during execution Statically typed languages like Java require you to specify variable types upfront, which helps catch errors before the program runs but offers less flexibility--questions--\n--text--\nWhich of the following best describes dynamic typing in JavaScript --answers--\nYou must declare the type of the variable before assigning a value --feedback--\nThink about how JavaScript allows changing data types at runtime The data type of a variable is determined when it is assigned a value Variables can only hold one type of data --feedback--\nThink about how JavaScript allows changing data types at runtime JavaScript does not allow changing variable types after they are declared --feedback--\nThink about how JavaScript allows changing data types at runtime --video-solution--\n2\n--text--\nWhat is a key difference between dynamically typed languages and statically typed languages --answers--\nDynamically typed languages require you to declare variable types before assigning values --feedback--\nConsider how variable types behave in languages like JavaScript compared to Java Statically typed languages allow changing variable types at runtime --feedback--\nConsider how variable types behave in languages like JavaScript compared to Java Statically typed languages enforce a fixed variable type Dynamically typed languages do not allow variable reassignment --feedback--\nConsider how variable types behave in languages like JavaScript compared to Java --video-solution--\n3\n--text--\nIn JavaScript, what happens if you declare a variable and later assign it a value of a different type --answers--\nJavaScript will throw a compile-time error --feedback--\nRemember, JavaScript is dynamically typed The variable will change to the new type without error The variable will retain its original type and ignore the new value --feedback--\nRemember, JavaScript is dynamically typed The program will crash --feedback--\nRemember, JavaScript is dynamically typed --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4485,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-types\\672d264645e289208e562f10.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "244c56d17de030f5ed8cf629a03bb1f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-types\\6732518a8627876f4fcd18a4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732518a8627876f4fcd18a4\ntitle: How Does the typeof Operator Work, and What Is the typeof null Bug in JavaScript challengeType: 19\ndashedName: how-does-the-typeof-operator-work-and-what-is-the-typeof-null-bug-in-javascript\n--description--\nThe typeof operator in JavaScript is a simple yet powerful tool that lets you see the data type of a variable or value It always returns a string indicating the type Let's take a look at a few examples:\njs\nlet num = 42;\nconsole log(typeof num); // \"number\"\nIn this first example, we have created a variable called num and assigned it the number 42 When you use the typeof operator on the variable named num, it will return the string number Here is another example of using the typeof operator on variable called isUserLoggedIn:\njs\nlet isUserLoggedIn = true;\nconsole log(typeof isUserLoggedIn); // \"boolean\"\nWhen you use the typeof operator on the isUserLoggedIn variable, it will return a string boolean because the boolean true was assigned to the variable Using the typeof operator can be especially useful when you're debugging or trying to understand what kind of data you're working with in your code However, there's a well-known quirk in JavaScript when it comes to null Let's take a look at an example:\njs\nlet exampleVariable = null;\nconsole log(typeof exampleVariable); // \"object\"\nIn this example, we have a variable called exampleVariable and have assigned it the value of null But when we use the typeof operator, it returns the string object This is widely considered a bug in JavaScript, dating back to its early days The reason for this behavior is rooted in the way JavaScript was originally designed When the language was first implemented, values like null were represented as a special type of object, leading to this unexpected result Unfortunately, this has become a part of the language, and while it's confusing, it's something you'll need to be aware of --questions--\n--text--\nWhat does the typeof operator return when used on a string in JavaScript --answers--\n\"string\"\n\"text\"\n--feedback--\nThink about the output when you check the type of \"Hello\" \"character\"\n--feedback--\nThink about the output when you check the type of \"Hello\" \"object\"\n--feedback--\nThink about the output when you check the type of \"Hello\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-types\\6732518a8627876f4fcd18a4.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d997811fae35a5910471e214f97197fb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-types\\6732518a8627876f4fcd18a4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "this has become a part of the language, and while it's confusing, it's something you'll need to be aware of --questions-- --text-- What does the typeof operator return when used on a string in JavaScript --answers-- \"string\" \"text\" --feedback-- Think about the output when you check the type of \"Hello\" \"character\" --feedback-- Think about the output when you check the type of \"Hello\" \"object\" --feedback-- Think about the output when you check the type of \"Hello\"--video-solution--\n1\n--text--\nWhy is typeof null considered a bug in JavaScript --answers--\nIt returns \"null\" instead of \"undefined\" --feedback--\nRecall the unexpected behavior when checking the type of null It returns \"object\" instead of \"null\" It doesn't work on null --feedback--\nRecall the unexpected behavior when checking the type of null It returns an error --feedback--\nRecall the unexpected behavior when checking the type of null --video-solution--\n2\n--text--\nWhat does the typeof operator return when used on a number in JavaScript --answers--\n\"number\"\n\"integer\"\n--feedback--\nConsider the type typeof returns for both integers and floats \"numeric\"\n--feedback--\nConsider the type typeof returns for both integers and floats \"float\"\n--feedback--\nConsider the type typeof returns for both integers and floats --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3439,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-types\\6732518a8627876f4fcd18a4.md",
      "source_type": "git_repo"
    },
    "token_count": 283,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "eaa866c7d6b221e3654f03b3d03aa441",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500b41af8500191febedc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673500b41af8500191febedc\ntitle: How Do You Render Lists in React challengeType: 19\ndashedName: how-do-you-render-lists-in-react\n--description--\nRendering lists is a fundamental task in React web apps, and is used for displaying data to users In React, the map method is used to transform an array of data into an array of JSX elements that can be rendered in the UI Here is an example of a component called FruitList that displays a list of fruits:\njsx\nfunction FruitList() {\nconst fruits = ['Apple', 'Banana', 'Cherry', 'Date'];\nreturn (\n<ul>\n{fruits map(fruit => <li>{fruit}</li>)}\n</ul>\n);\n}\nIn this example, the map function iterates over each item in the fruits array For each fruit, it creates a new li element containing the fruit's name The newly created array of li elements is then displayed inside the ul parent tags However, when rendering lists in React, it is important not to forget the key prop for each element in the list The key must always be unique and it helps React identify which items have changed, been added, or been removed, which is essential for efficient rendering and updating the list Let's modify our example to include keys:\njsx\nfunction FruitList() {\nconst fruits = [\"Apple\", \"Banana\", \"Cherry\", \"Date\"];\nreturn (\n<ul>\n{fruits map((fruit, index) => (\n<li key={`${fruit}-${index}`}>{fruit}</li>\n))}\n</ul>\n);\n}\nIn this refactored example, we are creating a unique key for each list item by concatenating the fruit name with its index This ensures that each list item has a distinct key, which helps React efficiently manage and update the list when items are added, removed, or reordered React also allows you to render more complex structures For instance, you might have an array of objects representing users, each with multiple properties that you want to display:\njsx\nfunction UserList() {\nconst users = [\n{ id: \"user-001-employee\", name: \"Alice\", email: \"alice@example com\" },\n{ id: \"user-002-employee\", name: \"Bob\", email: \"bob@example com\" },\n{ id: \"user-003-employee\", name: \"John\", email: \"john@example com\" },\n];\nreturn (\n<div>\n{users",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4430,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500b41af8500191febedc.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "95a2ee38d5eb8ba6f5e2dac5cbd09f8f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500b41af8500191febedc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "when items are added, removed, or reordered React also allows you to render more complex structures For instance, you might have an array of objects representing users, each with multiple properties that you want to display: jsx function UserList() { const users = [ { id: \"user-001-employee\", name: \"Alice\", email: \"alice@example com\" }, { id: \"user-002-employee\", name: \"Bob\", email: \"bob@example com\" }, { id: \"user-003-employee\", name: \"John\", email: \"john@example com\" }, ]; return ( <div> {usersmap((user) => (\n<div key={user id}>\n<h3>{user name}</h3>\n<p>{user email}</p>\n</div>\n))}\n</div>\n);\n}\nIn this example, we're creating a more complex JSX structure for each user, displaying both their name and email address We're using the user's id as the key, which is a good practice In conclusion, rendering lists in React involves converting arrays of data into JSX elements, typically using the map function --questions--\n--text--\nWhat is the primary purpose of using the key prop when rendering lists in React --answers--\nTo style list items --feedback--\nThink about what we said regarding React's rendering optimization To help React identify changes in the list efficiently To sort the list items --feedback--\nThink about what we said regarding React's rendering optimization To filter the list items --feedback--\nThink about what we said regarding React's rendering optimization --video-solution--\n2\n--text--\nWhich JavaScript method is typically used to transform an array of data into an array of JSX elements in React --answers--\nforEach()\n--feedback--\nRecall the method we consistently used in our examples for creating JSX elements from array items reduce()\n--feedback--\nRecall the method we consistently used in our examples for creating JSX elements from array items map()\nfilter()\n--feedback--\nRecall the method we consistently used in our examples for creating JSX elements from array items --video-solution--\n3\n--text--\nWhen rendering a list of items that have unique IDs, what is considered the best practice for the key prop --answers--\nUse the index of the item in the array --feedback--\nRemember what we said about using stable and unique identifiers for keys Use a random number --feedback--\nRemember what we said about using stable and unique identifiers for keys Use the item's unique ID",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4430,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500b41af8500191febedc.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "712ecbc58a7f9a15a3141b8b8753b97f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500b41af8500191febedc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "examples for creating JSX elements from array items --video-solution-- 3 --text-- When rendering a list of items that have unique IDs, what is considered the best practice for the key prop --answers-- Use the index of the item in the array --feedback-- Remember what we said about using stable and unique identifiers for keys Use a random number --feedback-- Remember what we said about using stable and unique identifiers for keys Use the item's unique IDUse the item's name or title --feedback--\nRemember what we said about using stable and unique identifiers for keys --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4430,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-data-in-react\\673500b41af8500191febedc.md",
      "source_type": "git_repo"
    },
    "token_count": 119,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "fa3e375b60714d49528a484f5a038f4b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dates\\6733d608654c17868e01c0a2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733d608654c17868e01c0a2\ntitle: What Are the Different Ways to Format Dates challengeType: 19\ndashedName: what-are-the-different-ways-to-format-dates\n--description--\nIn the previous lecture, you learned how to work with the Date object in JavaScript But there are a few different ways to format dates in JavaScript In this lecture, we'll take a look at how to work with the toISOString(), toString(), and toLocaleDateString() methods to format dates in JavaScript Before we look at the different methods, let's first review what the Date object looks like:\njs\nconst date = new Date();\nconsole log(date);\nWhen you log the date object to the console, you will see the current date and time based on the user's system settings Here is an example of the output you might see:\njs\nSun Sep 29 2024 19:45:37 GMT-0700 (Pacific Daylight Time)\nIf you were to use the toString() method on the date object, you would see the same output as above To format the date in an extended ISO format (ISO 8601), you can use the toISOString() method like this:\njs\nconst date = new Date();\nconsole log(date toISOString());\nISO 8601 is an international standard for representing dates and times The format is YYYY-MM-DDTHH:mm:ss sssZ The following example will log the current date and time in the ISO 8601 format like this:\njs\n2024-09-30T02:47:20 292Z\nAnother way to format the date, would be to use the toLocaleDateString() method This method allows you to format the date based on the user's locale Here is the basic syntax for using the toLocaleDateString() method:\njs\nconst date = new Date();\nconsole log(date toLocaleDateString());\nThe example output would show the user's locale date format like this:\njs\n9/29/2024\nThe toLocaleDateString() method accepts two optional parameters: locales and options The locales parameter is a string representing the locale to use For example, you can pass in en-US for English (United States) or fr-FR for French (France) If you don't pass in a locales parameter, the default locale is used Here is an example of how to use the locales parameter:\njs\nconst date = new Date();\nconsole log(date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4572,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dates\\6733d608654c17868e01c0a2.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "077644195ad881ac45ffc028a53c0109",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dates\\6733d608654c17868e01c0a2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "locale date format like this: js 9/29/2024 The toLocaleDateString() method accepts two optional parameters: locales and options The locales parameter is a string representing the locale to use For example, you can pass in en-US for English (United States) or fr-FR for French (France) If you don't pass in a locales parameter, the default locale is used Here is an example of how to use the locales parameter: js const date = new Date(); console log(datetoLocaleDateString(\"fr-FR\"));\nThe second optional parameter is the options parameter This parameter is an object that allows you to specify the format of the date string Here is an example of how to use the options parameter:\njs\nconst date = new Date();\nconst options = {\nweekday: \"long\",\nyear: \"numeric\",\nmonth: \"long\",\nday: \"numeric\",\n};\nconsole log(date toLocaleDateString(\"en-GB\", options));\nIn the above example, we specified the options to be in English (Great Britain) and to include the full weekday, year, month, and day Here is an example of what the output would look like:\njs\nSunday, September 29, 2024\nIn this lecture, we have only covered a few of the ways to format dates in JavaScript There are many other methods and libraries available to help you format dates in JavaScript But the toISOString(), and toLocaleDateString() methods are a good starting point for formatting dates in JavaScript --questions--\n--text--\nWhat method would you use to format a date in the ISO 8601 format --answers--\ntoString()\n--feedback--\nThis method returns a standardized string representation of the date toLocaleDateString()\n--feedback--\nThis method returns a standardized string representation of the date toISOString()\ngetDate()\n--feedback--\nThis method returns a standardized string representation of the date --video-solution--\n3\n--text--\nWhich method formats the date based on the user's locale --answers--\ntoUTCString()\n--feedback--\nThis method allows for localized formatting of the date toLocaleDateString()\ntoISOString()\n--feedback--\nThis method allows for localized formatting of the date getTime()\n--feedback--\nThis method allows for localized formatting of the date --video-solution--\n2\n--text--\nWhat optional parameters can you provide to the toLocaleDateString() method --answers--\nlocales and options format and timezone --feedback--\nThese parameters help customize the output format day and month --feedback--\nThese parameters help customize the output format style and language",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4572,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dates\\6733d608654c17868e01c0a2.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "51f240c5af124f11bbf35cb18af1b67d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dates\\6733d608654c17868e01c0a2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "toUTCString() --feedback-- This method allows for localized formatting of the date toLocaleDateString() toISOString() --feedback-- This method allows for localized formatting of the date getTime() --feedback-- This method allows for localized formatting of the date --video-solution-- 2 --text-- What optional parameters can you provide to the toLocaleDateString() method --answers-- locales and options format and timezone --feedback-- These parameters help customize the output format day and month --feedback-- These parameters help customize the output format style and language--feedback--\nThese parameters help customize the output format --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4572,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dates\\6733d608654c17868e01c0a2.md",
      "source_type": "git_repo"
    },
    "token_count": 123,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "957f68d40b8839ccc949d318047650a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dates\\6733aafb9c0802f66cc1e056.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733aafb9c0802f66cc1e056\ntitle: How Does the JavaScript Date Object Work, and What Are Some Common Methods challengeType: 19\ndashedName: how-does-the-javascript-data-object-work-and-what-are-some-common-methods\n--description--\nDates and times in JavaScript have not always been easy to work with In a professional codebase, you will probably be using a library that has solved a lot of those issues for you But there will be times where you will need to work JavaScript's built-in Date object In this lecture, we will go over the basics of the Date object and some of the most common methods that you will use when working with dates and times in JavaScript The Date object is a built-in object in JavaScript that allows you to work with dates and times Here is the basic syntax for creating a new Date object:\njs\nconst now = new Date();\nThe new keyword is used to create a new instance of the Date object, and the Date object is then assigned to the variable now If you were to log the value of now to the console, you would see the current date and time based on the system clock of the computer running the code Here is an example response you would see if you logged the value of now to the console:\njs\nconst now = new Date();\nconsole log(now);\n// Mon Mar 15 2021 14:30:00 GMT-0700 (Pacific Daylight Time)\nFor the time, it is using the military time format, so 14:30 is 2:30 PM GMT-0700 is the timezone offset, and Pacific Daylight Time is the timezone name You can also pass in a specific date and time to the Date object by providing the year, month, day, hour, minute, second, and millisecond values as arguments Here is an example of creating a new Date object with a specific date and time:\n```js\nconst specificDate = new Date(\"July 4, 1776 12:00:00\");\nconsole log(specificDate);\n// Wed Jul 04 1776 12:00:00 GMT-0700 (Pacific Daylight Time)\n```\nThis is useful when you need to work with a specific date and time rather than the current date and time The input always needs to be a string, and the format should be recognizable by the Date object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5808,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dates\\6733aafb9c0802f66cc1e056.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "8103f249d4b9abddfbabad0cf17553a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dates\\6733aafb9c0802f66cc1e056.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is an example of creating a new Date object with a specific date and time: ```js const specificDate = new Date(\"July 4, 1776 12:00:00\"); console log(specificDate); // Wed Jul 04 1776 12:00:00 GMT-0700 (Pacific Daylight Time) ``` This is useful when you need to work with a specific date and time rather than the current date and time The input always needs to be a string, and the format should be recognizable by the Date objectTo get the current date and time, you can use the Date now() method, which returns the number of milliseconds since January 1, 1970, 00:00:00 UTC This is known as the Unix epoch time Unix epoch time is a common way to represent dates and times in computer systems because it is an integer that can be easily stored and manipulated UTC stands for Universal Time Coordinated, which is the primary time standard by which the world regulates clocks and time If you need to get a day of the month based on the current date, you can use the getDate method Here is an example of using the getDate method:\njs\nconst now = new Date();\nconst date = now getDate();\nconsole log(date); // 15\nIn this example, we create a new date instance using the Date object and assign it to the variable now We then call the getDate method on the now object to get the day of the month and assign it to the variable date Finally, we log the value of date to the console, which will output the current day of the month getDate will return an integer value between 1 and 31, depending on the day of the month If the date is invalid, it will return NaN (Not a Number) To get the month, you can use the getMonth method like this:\njs\nconst now = new Date();\nconst month = now getMonth();\nconsole log(month);\n// 2\nThe month is zero-based, so January is 0, February is 1, and so on In this example, the output is 2, which corresponds to March If the month is invalid, it will return NaN If you need to get the full year, then you can use the getFullYear method like this:\njs\nconst now = new Date();\nconst year = now getFullYear();\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5808,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dates\\6733aafb9c0802f66cc1e056.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "12d3af8831fbb5efe72a4fb08936c32d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dates\\6733aafb9c0802f66cc1e056.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "now = new Date(); const month = now getMonth(); console log(month); // 2 The month is zero-based, so January is 0, February is 1, and so on In this example, the output is 2, which corresponds to March If the month is invalid, it will return NaN If you need to get the full year, then you can use the getFullYear method like this: js const now = new Date(); const year = now getFullYear(); consolelog(year);\n// Output: 2024\nIn this example, the output is 2024, which is the current year If the year is invalid, it will return NaN There are many more methods available on the Date object including getHours, getMinutes, getSeconds, and so on I encourage you to explore some more on your own through Mozilla's documentation or other resources --questions--\n--text--\nWhat does the Date now() method return --answers--\nThe current date in string format --feedback--\nThis method provides a way to get the current time in a format that's often used in computing The number of milliseconds since January 1, 1970, 00:00:00 UTC The current day of the month --feedback--\nThis method provides a way to get the current time in a format that's often used in computing The full year of the current date --feedback--\nThis method provides a way to get the current time in a format that's often used in computing --video-solution--\n2\n--text--\nIf you use the getMonth method and it returns 4, which month is being represented --answers--\nMay\nApril\n--feedback--\nRemember that months are zero-based in JavaScript June\n--feedback--\nRemember that months are zero-based in JavaScript March\n--feedback--\nRemember that months are zero-based in JavaScript --video-solution--\n1\n--text--\nHow would you create a Date object for July 4, 1776, at 12:00:00 PM --answers--\nconst specificDate = new Date(1776, 6, 4, 12, 0, 0);\n--feedback--\nYou can provide the date and time in a string format or as separate numeric values",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5808,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dates\\6733aafb9c0802f66cc1e056.md",
      "source_type": "git_repo"
    },
    "token_count": 449,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7e8d7b0decb13cf6495d9d1a0c91843a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dates\\6733aafb9c0802f66cc1e056.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "being represented --answers-- May April --feedback-- Remember that months are zero-based in JavaScript June --feedback-- Remember that months are zero-based in JavaScript March --feedback-- Remember that months are zero-based in JavaScript --video-solution-- 1 --text-- How would you create a Date object for July 4, 1776, at 12:00:00 PM --answers-- const specificDate = new Date(1776, 6, 4, 12, 0, 0); --feedback-- You can provide the date and time in a string format or as separate numeric valuesconst specificDate = new Date(\"July 4, 1776 12:00:00\")\nconst specificDate = new Date(1776, 7, 4, 12, 0, 0);\n--feedback--\nYou can provide the date and time in a string format or as separate numeric values const specificDate = new Date(1776, 6, 4);\n--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5808,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dates\\6733aafb9c0802f66cc1e056.md",
      "source_type": "git_repo"
    },
    "token_count": 210,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "af738f84a03c1488e71904239bdd1dea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec7a722bc7b67c1132bd3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 683ec7a722bc7b67c1132bd3\ntitle: What Are Dictionaries, and How Do They Work challengeType: 19\ndashedName: what-are-dictionaries-and-how-do-they-work\n--description--\nIn Python, dictionaries are built-in data structures that store collections of key-value pairs They work very similarly to real dictionaries, where you search for a word to find its corresponding meaning With Python dictionaries, you use a key to find its corresponding value You should use dictionaries when you need to associate values to unique keys This is helpful when you need to find a value fast based on the key, and when you need to represent structured data This is the general syntax of a Python dictionary:\npython\ndictionary = {\nkey1: value1,\nkey2: value2\n}\nFirst, we find the variable that holds the dictionary You don't necessarily need to assign the dictionary to a variable, but it's very common to do this to keep it in memory and use it later in the code Then that's followed by curly braces, which are sometimes called curly brackets And within the curly braces, there are key-value pairs Each key is associated with a value, so you can use the key to access that value After each value, except the last one, there's a comma to separate the different key-value pairs Keys must be unique in the dictionary, and they must be an immutable data type However, the values can be repeated, and they can be of any data type Here we have an example of a dictionary that stores information about a Margherita pizza recipe:\npython\npizza = {\n'name': 'Margherita Pizza',\n'price': 8 9,\n'calories_per_slice': 250,\n'toppings': ['mozzarella', 'basil']\n}\nThe dictionary is assigned to the pizza variable It has four key-value pairs: name, price, calories_per_slice, and toppings Another alternative would be using the dict() constructor, which builds the dictionary from a sequence of key-value pairs This would be the equivalent syntax for our pizza example We pass a list of tuples as argument to the dict() constructor These tuples contain the key as the first element and the value as the second element python\npizza = dict([('name', 'Margherita Pizza'), ('price', 8",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8159,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec7a722bc7b67c1132bd3.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "16275ba3b3050c7e8ad5641be984d5d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec7a722bc7b67c1132bd3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "pizza variable It has four key-value pairs: name, price, calories_per_slice, and toppings Another alternative would be using the dict() constructor, which builds the dictionary from a sequence of key-value pairs This would be the equivalent syntax for our pizza example We pass a list of tuples as argument to the dict() constructor These tuples contain the key as the first element and the value as the second element python pizza = dict([('name', 'Margherita Pizza'), ('price', 89), ('calories_per_slice', 250), ('toppings', ['mozzarella', 'basil'])])\nTo access the value of a key-value pair, you can use this syntax, known as bracket notation It's the name of the variable that holds the dictionary, followed by square brackets, and the key you want to access within the square brackets:\npython\ndictionary[key]\nIn our pizza example, if you want to access the value of name, you would write the name of the variable, pizza, followed by square brackets, and the key, name, within quotes:\npython\npizza['name']\nThis will evaluate to:\npython\n'Margherita Pizza'\nTo update a value, you just need to add the assignment operator, followed by the new value If the key doesn't exist in the dictionary, a new key-value pair will be created In recent versions of Python, dictionaries preserve the order of insertion This is helpful when you need to iterate over the dictionary:\npython\npizza['name'] = 'Margherita'\nNow the value of the key name is 'Margherita':\npython\nprint(pizza['name']) # 'Margherita'\nDictionaries also have helpful methods to perform common operations The get() method retrieves the value associated with a key It's similar to the bracket notation that we just used, but its advantage is that you can set a default value, so you won't get an error is the key doesn't exist:\npython\ndictionary get(key, default)\nIn this example, if the toppings key doesn't exist, it will return an empty list, which is the default value that we are passing here as the second argument But if toppings does exist, it will return that value:\npython\npizza get('toppings', []) # ['mozzarella', 'basil']\nThe keys() and values() methods return a view object with all the keys and values in the dictionary, respectively:\n```python\npizza",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8159,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec7a722bc7b67c1132bd3.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "416a07b997e4233fda2e3a48b5a4d6d1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec7a722bc7b67c1132bd3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is the key doesn't exist: python dictionary get(key, default) In this example, if the toppings key doesn't exist, it will return an empty list, which is the default value that we are passing here as the second argument But if toppings does exist, it will return that value: python pizza get('toppings', []) # ['mozzarella', 'basil'] The keys() and values() methods return a view object with all the keys and values in the dictionary, respectively: ```python pizzakeys()\ndict_keys(['name', 'price', 'calories_per_slice'])\npizza values()\ndict_values(['Margherita Pizza', 8 9, 250])\n```\nA view object is just a way to see the content of a dictionary without creating a separate copy of the data The items() method returns a view object with all the key-value pairs in the dictionary, including both the keys and the values:\n```python\npizza items()\ndict_items([('name', 'Margherita Pizza'), ('price', 8 9), ('calories_per_slice', 250)])\n```\nThe clear() method removes all the key-value pairs from the dictionary:\npython\npizza clear()\nThe pop() method removes the key-value pair with the key that you specify as the first argument and returns its value If the key doesn't exist, it returns the default value that you specify as the second argument If the key doesn't exist and you don't pass a default value, a KeyError is raised:\npython\npizza pop('price', 10)\npizza pop('total_price') # KeyError\nIn Python 3 7 and more recent versions, the popitem() method removes the last inserted item:\npython\npizza popitem()\nAnd finally, the update() method updates the key-value pairs with the key-value pairs of another dictionary If they have keys in common, their values are overwritten In this example, we are updating the pizza dictionary The price key exists in both of them, so its value will be replaced with 15 But total_time is new, so it will be added to the pizza dictionary as a new key-value pair:\npython\npizza update({ 'price': 15, 'total_time': 25 })\nThis is the new dictionary with the updated price and the new total_time",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8159,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec7a722bc7b67c1132bd3.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "f74faffa692b29972a6f906270ae16f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec7a722bc7b67c1132bd3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "another dictionary If they have keys in common, their values are overwritten In this example, we are updating the pizza dictionary The price key exists in both of them, so its value will be replaced with 15 But total_time is new, so it will be added to the pizza dictionary as a new key-value pair: python pizza update({ 'price': 15, 'total_time': 25 }) This is the new dictionary with the updated price and the new total_timeNotice how the price is now 15 and total_time is a new key-value pair:\npython\n{\n'name': 'Margherita Pizza',\n'price': 15,\n'calories_per_slice': 250,\n'toppings': ['mozzarella', 'basil'],\n'total_time': 25\n}\nThese are some of the most commonly used dictionary methods, but there are many more Choosing the right one can be helpful for performing complex operations efficiently --questions--\n--text--\nHow are elements primarily organized and accessed in a Python dictionary --answers--\nUsing sequential indices, like a list --feedback--\nThink about the core characteristic that distinguishes dictionaries from lists and tuples Using key-value pairs, where keys are unique Using a tree-like structure, similar to file systems --feedback--\nThink about the core characteristic that distinguishes dictionaries from lists and tuples Using a linked list, where elements point to the next --feedback--\nThink about the core characteristic that distinguishes dictionaries from lists and tuples --video-solution--\n2\n--text--\nWhat is the primary characteristic of a Python dictionary that makes it different from a list or tuple --answers--\nDictionaries create duplicates of all key-value pairs --feedback--\nThink about the feature that makes dictionaries particularly helpful for data retrieval based on names or labels Dictionaries are mutable --feedback--\nThink about the feature that makes dictionaries particularly helpful for data retrieval based on names or labels Dictionaries allow fast lookups using keys Dictionaries can store duplicate values --feedback--\nThink about the feature that makes dictionaries particularly helpful for data retrieval based on names or labels --video-solution--\n3\n--text--\nWhich dictionary method is used to retrieve a value associated with a key, and provide a default value if the key is not found --answers-- keys()\n--feedback--\nThink about which method is designed for safe retrieval of values without throwing an error values()\n--feedback--\nThink about which method is designed for safe retrieval of values without throwing an error",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8159,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec7a722bc7b67c1132bd3.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "6c7c159144525782668d7646a31d7e51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec7a722bc7b67c1132bd3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "feature that makes dictionaries particularly helpful for data retrieval based on names or labels --video-solution-- 3 --text-- Which dictionary method is used to retrieve a value associated with a key, and provide a default value if the key is not found --answers-- keys() --feedback-- Think about which method is designed for safe retrieval of values without throwing an error values() --feedback-- Think about which method is designed for safe retrieval of values without throwing an errorpop()\n--feedback--\nThink about which method is designed for safe retrieval of values without throwing an error get()\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8159,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec7a722bc7b67c1132bd3.md",
      "source_type": "git_repo"
    },
    "token_count": 120,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "b470cf2f8d3fa27157a00d3b2d03fe84",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672aa58c389eb9565978495d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa58c389eb9565978495d\ntitle: How Can You Use File Management Applications on Your Computer challengeType: 19\ndashedName: how-can-you-use-file-management-applications-on-your-computer\n--description--\nA file management application is a way to easily store, organize, and edit your files on your computer Whether you use a Mac or Windows computer, there are built-in applications you can use to organize your files If you have a Windows computer, the default file manager is the File Explorer This is used to browse, search, and manage files and folders, as well as perform file operations like copying, moving, and deleting To find the File Explorer, you can go to the Start menu or press the Windows logo key on your keyboard To pin a folder, you can right click with your mouse and select \"Pin\" To move a file or folder, you first need to select it, then select \"Cut\" and then navigate to the new location to paste it If you have a Mac computer, the default file manager is the Finder This provides access to local and remote files, supports file previews, and offers a variety of organizational features like tags and Smart Folders To access the Finder on your Mac, go to the Dock at the bottom and click on the Finder icon You will notice a sidebar on the left-hand side where your favorite folders are located One way to organize your files, is to use tags To tag a file or folder, you can select the item in the Finder and then right click with your mouse You will see the \"Tags \" option in the dropdown and you can apply a custom colored tag To search for tagged items, you can scroll to the bottom of the sidebar and click on the corresponding colored tag, or you can search for the tag by color name in the search field Another way to organize your files is to use smart folders Smart folders are collections of files that are automatically organized based on criteria you set, such as file type, date, or keywords Whether you're using File Explorer on Windows or Finder on Mac, these applications provide flexibility to manage your files with features like tags, search, and Smart Folders --questions--\n--text--\nWhat is the default file management application on a Windows computer --answers--\nFinder\n--feedback--\nIt's the application used to browse, search, and manage files on Windows Smart Folders\n--feedback--\nIt's the application used to browse, search, and manage files on Windows",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3648,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672aa58c389eb9565978495d.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "496952578756cc7ec8831eb0f7b66963",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672aa58c389eb9565978495d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "as file type, date, or keywords Whether you're using File Explorer on Windows or Finder on Mac, these applications provide flexibility to manage your files with features like tags, search, and Smart Folders --questions-- --text-- What is the default file management application on a Windows computer --answers-- Finder --feedback-- It's the application used to browse, search, and manage files on Windows Smart Folders --feedback-- It's the application used to browse, search, and manage files on WindowsFile Explorer\nSpotlight\n--feedback--\nIt's the application used to browse, search, and manage files on Windows --video-solution--\n3\n--text--\nHow can you pin a folder in File Explorer on a Windows computer --answers--\nRight-click the folder and select \"Pin to Start\" Press \"Ctrl + Pin\" --feedback--\nYou'll right-click the folder and select an option to keep it handy There is no option to pin a folder --feedback--\nYou'll right-click the folder and select an option to keep it handy Drag the folder to the taskbar --feedback--\nYou'll right-click the folder and select an option to keep it handy --video-solution--\n1\n--text--\nOn a Mac, how do you access the Finder --answers--\nClick on the Finder icon in the Dock Press \"Command + Find\" --feedback--\nIt's an icon located at the bottom of the screen, in the Dock Go to the Start menu --feedback--\nIt's an icon located at the bottom of the screen, in the Dock Open the Spotlight search --feedback--\nIt's an icon located at the bottom of the screen, in the Dock --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3648,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672aa58c389eb9565978495d.md",
      "source_type": "git_repo"
    },
    "token_count": 339,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "87cfe0b89491f4fb59b9048fa37b6238",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8fd8b21827317388a45.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 683ec8fd8b21827317388a45\ntitle: What Are Sets, and How Do They Work challengeType: 19\ndashedName: what-are-sets-and-how-do-they-work\n--description--\nSets are one of Python's built-in data structures One of the core characteristics of sets is that they don't store duplicate values If you try to add a duplicate value to a set, only one of them will be stored Sets are mutable and unordered, which means that their elements are not stored in any specific order, so you cannot use indices or keys to access them They can only contain values of immutable data types like numbers, strings, and tuples And they support mathematical set operations, including union, intersection, difference, and symmetric difference To define a set, you just need to write its elements within curly braces and separate them with commas This is an example of a set of numbers:\npython\nmy_set = {1, 2, 3, 4, 5}\nOne quirk of working with sets is that, if you ever need to define an empty set, you must use the set() function If you just write empty curly braces, like {}, Python will automatically create a dictionary python\nset() # Set\n{}    # Dictionary\nYou can add an element to a set with the add() method, and pass in the new element as argument:\npython\nmy_set add(6)\nIn our example, the new set would be:\npython\n{1, 2, 3, 4, 5, 6}\nIf you try to add an element that is already in the set, only one will be kept In this case, we already have the number 5 in the set:\npython\nmy_set add(5)\nSo the set will not change:\npython\n{1, 2, 3, 4, 5, 6}\nTo remove an element from the set, you have two options You can either use the remove() method or the discard() method, and pass in the element that you want to remove as argument The remove() method will raise a KeyError if the element is not found, while the discard() method will not:\npython\nmy_set remove(4)\nmy_set discard(4)\nThe clear() method removes all the elements from the set:\npython\nmy_set clear()\nPython sets also have powerful methods that perform common mathematical set operations The",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6293,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8fd8b21827317388a45.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "aa150cf812fe06392d1c47afc0877f30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8fd8b21827317388a45.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "have two options You can either use the remove() method or the discard() method, and pass in the element that you want to remove as argument The remove() method will raise a KeyError if the element is not found, while the discard() method will not: python my_set remove(4) my_set discard(4) The clear() method removes all the elements from the set: python my_set clear() Python sets also have powerful methods that perform common mathematical set operations Theissubset() and the issuperset() methods check if a set is a subset or superset of another set, respectively Here, we are checking if your_set is a subset of my_set, which is False because not all the elements of your_set are in my_set We are also checking if my_set is a superset of your_set This is also False because my_set does not have all the elements of your_set:\n```python\nmy_set = {1, 2, 3, 4, 5}\nyour_set = {2, 3, 4, 6}\nprint(your_set issubset(my_set)) # False\nprint(my_set issuperset(your_set)) # False\n```\nThe isdisjoint() method checks if two sets are disjoint, which means they don't have any elements in common In this case, that's False because my_set and your_set do have common elements – 2, 3, and 4:\npython\nprint(my_set isdisjoint(your_set)) # False\nThe union operator | returns a new set with all the elements from both sets:\npython\nmy_set | your_set # {1, 2, 3, 4, 5, 6}\nThe intersection operator & returns a new set with only the elements that the sets have in common:\npython\nmy_set & your_set # {2, 3, 4}\nThe difference operator - returns a new set with the elements of the first set that are not in the other sets In this example, the numbers 1 and 5 are in my_set but NOT in your_set:\npython\nmy_set - your_set # {1, 5}\nThe symmetric difference operator ^ returns a new set with the elements that are either on the first or the second set, but not both In this case, 1 and 5 are in my_set but not in your_set, so they are included",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6293,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8fd8b21827317388a45.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "e97d460e1d7467dbf788b6a018215e30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8fd8b21827317388a45.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "elements of the first set that are not in the other sets In this example, the numbers 1 and 5 are in my_set but NOT in your_set: python my_set - your_set # {1, 5} The symmetric difference operator ^ returns a new set with the elements that are either on the first or the second set, but not both In this case, 1 and 5 are in my_set but not in your_set, so they are includedAnd the number 6 is in your_set but not in my_set, so it's included as well:\npython\nmy_set ^ your_set # {1, 5, 6}\nEach one of these operators also has its corresponding compound assignment operator if you add the equal sign next to it These operators automatically assign the resulting set to the first set in the expression:\npython\n|= &= -= ^=\nFor example, the -= operator finds the difference between the sets and updates the first set with that result:\npython\nmy_set -= your_set\nAfter this, my_set will be updated to {1, 5}:\npython\nprint(my_set) # {1, 5}\nYou can check if an element is in a set or not with the in operator Here, we are checking if 5 is in my_set The result will be a boolean value True or False:\npython\nprint(5 in my_set)\nAnd those are the fundamentals of sets They are very helpful when you don't need to store the values in any specific order, and when you only need to store unique values --questions--\n--text--\nWhich of the following is a core characteristic of Python sets --answers--\nElements are ordered and accessed by index --feedback--\nThink about how sets are different from lists, tuples, and dictionaries Elements are stored as key-value pairs --feedback--\nThink about how sets are different from lists, tuples, and dictionaries Elements are unique and unordered Elements can be of any data type, including lists and dictionaries --feedback--\nThink about how sets are different from lists, tuples, and dictionaries --video-solution--\n3\n--text--\nWhat operator is used to check if an element is present in a set --answers--\n==\n--feedback--\nThink about the operator that tests for membership within a collection in\nget()\n--feedback--\nThink about the operator that tests for membership within a collection find()\n--feedback--\nThink about the operator that tests for membership within a collection",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6293,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8fd8b21827317388a45.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7f5dd2c55cf23d01d191ab4f930a01f2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8fd8b21827317388a45.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "data type, including lists and dictionaries --feedback-- Think about how sets are different from lists, tuples, and dictionaries --video-solution-- 3 --text-- What operator is used to check if an element is present in a set --answers-- == --feedback-- Think about the operator that tests for membership within a collection in get() --feedback-- Think about the operator that tests for membership within a collection find() --feedback-- Think about the operator that tests for membership within a collection--video-solution--\n2\n--text--\nWhich set operation returns a new set with the elements that are present in either one of the two sets, but not in both of them --answers--\nUnion\n--feedback--\nThink about which operation identifies elements that are unique to each set Intersection\n--feedback--\nThink about which operation identifies elements that are unique to each set Difference\n--feedback--\nThink about which operation identifies elements that are unique to each set Symmetric Difference\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6293,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8fd8b21827317388a45.md",
      "source_type": "git_repo"
    },
    "token_count": 199,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "6763f45f7b0f6c27a4415cbcac6c2612",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac37104dc2530a769e6a4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672ac37104dc2530a769e6a4\ntitle: What Are Best Practices for Naming Files for Web Applications challengeType: 19\ndashedName: what-are-best-practices-for-naming-files-for-web-applications\n--description--\nAs you start to build out your own web applications, you will need to be mindful of what you name your files You will want to name your files in a way that is easy to understand and maintain Let's take a look at some examples of good and bad file names for HTML files Note that the html extension in these examples tells us that this is an HTML file Here is an example of a bad file name:\nmd\nindex1234 html\nBy the name alone, it is not clear what the file is about This file could be for a products page, blog page, or any other type of page but we don't know that from the file name Here is an example of a better file name for an HTML file:\nmd\nabout-us html\nBy using a more descriptive name like about-us html, it is clear what the file is about You will also notice in this file name that there are no spaces Instead, you use a hyphen, -, to separate the words Sometimes you might see a file name called index html This is a special file name that is used to represent the main page of a website When you visit a website, the index html file is the first file that is loaded Another important consideration when naming files is the use of special characters Using a mixture of special characters, numbers, and letters can make it difficult to understand what the file is about Here is an example of a bad file name:\nmd\nfile-1 @ html\nThis name looks unnecessarily complicated and does not give us any information about what the file is about So it is best to stick with only using letters and dashes in your file names As you start to learn more languages, you will see that there are common conventions for naming files in those languages as well In these situations, it is always best to consult with official documentation or other resources to understand the best practices for naming files in that language Also you will be in situations where you are working on a team and you will need to follow the conventions that the team has established for naming files Always consult with the team's style guide to make sure your file names are consistent with the rest of the team",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3794,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac37104dc2530a769e6a4.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a3f6a8c7311abb1823d08137892537ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac37104dc2530a769e6a4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "In these situations, it is always best to consult with official documentation or other resources to understand the best practices for naming files in that language Also you will be in situations where you are working on a team and you will need to follow the conventions that the team has established for naming files Always consult with the team's style guide to make sure your file names are consistent with the rest of the team--questions--\n--text--\nWhich of the following is a bad example for naming an HTML file --answers--\nindex html\n--feedback--\nThink about the file name that looks complicated about-us html\n--feedback--\nThink about the file name that looks complicated file-1 @ html\nproducts html\n--feedback--\nThink about the file name that looks complicated --video-solution--\n3\n--text--\nWhat does the index html file represent --answers--\nThe main page of a website A database file used to store user information --feedback--\nThink about the main content of a website A configuration file for server settings --feedback--\nThink about the main content of a website A script file for running server-side code --feedback--\nThink about the main content of a website --video-solution--\n1\n--text--\nWhy are special characters not recommended for file names --answers--\nThey make files incompatible with all operating systems --feedback--\nThink about the purpose of file names They make it difficult to understand what the file is about They lead to frequent software crashes --feedback--\nThink about the purpose of file names They make it impossible to transfer files between computers --feedback--\nThink about the purpose of file names --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3794,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac37104dc2530a769e6a4.md",
      "source_type": "git_repo"
    },
    "token_count": 322,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ebb833c9275069ea67abf59fd3f827b3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8e8a2389f713380fca8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 683ec8e8a2389f713380fca8\ntitle: What Are Some Common Techniques to Loop Over a Dictionary challengeType: 19\ndashedName: what-are-some-common-techniques-to-loop-over-a-dictionary\n--description--\nYou can loop over a dictionary if you need to access and process its key-value pairs This is helpful for updating their values or applying some logic to them Let's take a look at some of the techniques you can use Let's say that we have a products dictionary that associates every product with its price:\npython\nproducts = {\n'Laptop': 990,\n'Smartphone': 600,\n'Tablet': 250,\n'Headphones': 70,\n}\nIf we want to offer a 20% discount on all our products, we can loop over all the key-value pairs and modify the prices The values(), keys(), and items() methods are essential for these techniques We covered them briefly in a previous lecture They return a view object with the values, keys, and key-value pairs of the dictionary You can use these view objects in for loops to iterate over the elements For example, you can iterate over all the values of the dictionary like this You write for, the loop variable (price in this case), products values() to get all the values of the products dictionary, a colon, and then the body of the loop, where you can apply any logic to the values In this case, we are printing them The loop variable will take each one of the values, one per iteration:\npython\nfor price in products values():\nprint(price)\nAnd here is the output As you can see, each value is printed to the console, one by one:\nmd\n990\n600\n250\n70\nThis works exactly the same for keys() if you need to iterate over the keys of a dictionary You just need to iterate over products keys() or products directly, and assign a descriptive name for the loop variable:\n```python\nfor product in products keys():\nprint(product)\nfor product in products:\nprint(product)\n```\nThis is the output Each key is printed to the console, one at a time:\nmd\nLaptop\nSmartphone\nTablet\nHeadphones\nAnd this works exactly the same for key-value pairs if you need to iterate over the keys and their corresponding values simultaneously You just need to iterate over products items():\npython\nfor product in products",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8180,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8e8a2389f713380fca8.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "c17f43792bd2780f61e21f31365677f7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8e8a2389f713380fca8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "assign a descriptive name for the loop variable: ```python for product in products keys(): print(product) for product in products: print(product) ``` This is the output Each key is printed to the console, one at a time: md Laptop Smartphone Tablet Headphones And this works exactly the same for key-value pairs if you need to iterate over the keys and their corresponding values simultaneously You just need to iterate over products items(): python for product in productsitems():\nprint(product)\nThis is the output Now you get individual tuples with the keys and their corresponding values:\nmd\n('Laptop', 990)\n('Smartphone', 600)\n('Tablet', 250)\n('Headphones', 70)\nIf you want to store the key and the value in separate loop variables, you just need to define them and separate them with a comma Then, you can use them in the body of the loop Here, we are defining a product loop variable and a price loop variable Each one will hold its corresponding value It's important to define them in order – the key first, and then the value:\npython\nfor product, price in products items():\nprint(product, price)\nThis is the output We are printing them side by side, but you can use these values as you need them in your code md\nLaptop 990\nSmartphone 600\nTablet 250\nHeadphones 70\nNow that you know more about this, we can go back to our initial example If we want to offer a 20% discount, we would multiply each price by 0 8 and reassign it as the value of that product key We could also round the result down if we want to work with integers:\n```python\nproducts = {\n'Laptop': 990,\n'Smartphone': 600,\n'Tablet': 250,\n'Headphones': 70,\n}\nfor product, price in products items():\nproducts[product] = round(price * 0 8)\nprint(products)\n```\nThen, if we print the dictionary, we would get these key-value pairs with the discounted prices:\npython\n{\n'Laptop': 792,\n'Smartphone': 480,\n'Tablet': 200,\n'Headphones': 56\n}\nAnd finally, if you need to iterate over the key-value pairs while keeping track of a counter, you can call the enumerate() function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8180,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8e8a2389f713380fca8.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "dd016554976530d09aa51fd3c3b519a2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8e8a2389f713380fca8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "products = { 'Laptop': 990, 'Smartphone': 600, 'Tablet': 250, 'Headphones': 70, } for product, price in products items(): products[product] = round(price * 0 8) print(products) ``` Then, if we print the dictionary, we would get these key-value pairs with the discounted prices: python { 'Laptop': 792, 'Smartphone': 480, 'Tablet': 200, 'Headphones': 56 } And finally, if you need to iterate over the key-value pairs while keeping track of a counter, you can call the enumerate() functionThis counter essentially acts as a sort of \"index\" or \"count\" for that element within the loop The function returns an enumerate object, which assigns an integer to each key-value pair, like a counter You can start the counter from any number, but by default, it starts from 0 Here, we are iterating over the keys of the products dictionary:\npython\nfor product in enumerate(products):\nprint(product)\nBut the enumerate() function also assigns an integer to each key, so we get tuples with the integer and the key Here is the output:\nmd\n(0, 'Laptop')\n(1, 'Smartphone')\n(2, 'Tablet')\n(3, 'Headphones')\nIf you need to, you can assign these values to separate loop variables Here, we have two loop variables (index and product) This is what you will commonly see and use when you work with enumerate():\npython\nfor index, product in enumerate(products):\nprint(index, product)\nIf you need to iterate over the values, you can replace products by products values():\npython\nfor price in enumerate(products values()):\nprint(price)\nThe output will have the index and the price in each tuple:\nmd\n(0, 990)\n(1, 600)\n(2, 250)\n(3, 70)\nYou can assign them to separate loop variables as well:\npython\nfor index, price in enumerate(products values()):\nprint(index, price)\nThis will be the output You can use them as you need to in your code:\nmd\n0 990\n1 600\n2 250\n3 70\nAnd with products items(), you can get the entire key-value pair in addition to the \"index\" or \"counter\":\npython\nfor index, product in enumerate(products",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8180,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8e8a2389f713380fca8.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "9d48e2c7ca314a8d4de12d6e0f1c3825",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8e8a2389f713380fca8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "(0, 990) (1, 600) (2, 250) (3, 70) You can assign them to separate loop variables as well: python for index, price in enumerate(products values()): print(index, price) This will be the output You can use them as you need to in your code: md 0 990 1 600 2 250 3 70 And with products items(), you can get the entire key-value pair in addition to the \"index\" or \"counter\": python for index, product in enumerate(productsitems()):\nprint(index, product)\nIn this example, we get the index followed by a tuple that contains the key and the value of the corresponding key-value pair:\nmd\n0 ('Laptop', 990)\n1 ('Smartphone', 600)\n2 ('Tablet', 250)\n3 ('Headphones', 70)\nTo customize the initial value of the count, you can pass a second argument to enumerate() For example, here we are starting the count from 1:\npython\nfor index, product in enumerate(products items(), 1):\nprint(index, product)\nYou can see this change in the output Now the first integer is 1 instead of 0:\nmd\n1 ('Laptop', 990)\n2 ('Smartphone', 600)\n3 ('Tablet', 250)\n4 ('Headphones', 70)\nThis works with any variation we've seen so far You just need to pass the initial number as the second argument There are many techniques to loop over a dictionary These are some common ways, and you'll need to choose the best one for your project --questions--\n--text--\nWhich dictionary method, when used in a loop, allows you to access the key-value pairs stored in the dictionary --answers-- keys()\n--feedback--\nThink about which method returns a sequence with the keys and their corresponding values items() values()\n--feedback--\nThink about which method returns a sequence with the keys and their corresponding values enumerate()\n--feedback--\nThink about which method returns a sequence with the keys and their corresponding values --video-solution--\n2\n--text--\nWhen using the enumerate() function with dictionary items(), what does the first loop variable represent --answers--\nThe dictionary's keys\n--feedback--\nThink about what enumerate() adds to the iterable for each iteration The dictionary's values --feedback--\nThink about what enumerate() adds to the iterable for each iteration",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8180,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8e8a2389f713380fca8.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "b584a56e6f42366a481e0c618e65aabe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8e8a2389f713380fca8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "method returns a sequence with the keys and their corresponding values enumerate() --feedback-- Think about which method returns a sequence with the keys and their corresponding values --video-solution-- 2 --text-- When using the enumerate() function with dictionary items(), what does the first loop variable represent --answers-- The dictionary's keys --feedback-- Think about what enumerate() adds to the iterable for each iteration The dictionary's values --feedback-- Think about what enumerate() adds to the iterable for each iterationThe index or count of the key-value pair The key-value pair as a tuple --feedback--\nThink about what enumerate() adds to the iterable for each iteration --video-solution--\n3\n--text--\nWhich method would you use if you need to iterate over a dictionary and access only the keys --answers-- keys() values()\n--feedback--\nThink about which method gives you access to the keys of the dictionary enumerate()\n--feedback--\nThink about which method gives you access to the keys of the dictionary items()\n--feedback--\nThink about which method gives you access to the keys of the dictionary --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8180,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-dictionaries-and-sets\\683ec8e8a2389f713380fca8.md",
      "source_type": "git_repo"
    },
    "token_count": 222,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "8ead0e5fd1fc6c3a9b5ae7b8b4817cd8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac39a22b0cc30eb8fd65e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672ac39a22b0cc30eb8fd65e\ntitle: What Are Best Practices for File/Folder Organization in Web Applications challengeType: 19\ndashedName: what-are-best-practices-for-file-folder-organization-in-web-applications\n--description--\nWhen building out web applications, it is important to think about the organization of your files and folders This will help keep your code organized and easier to maintain Let's take a look at an example folder structure for an HTML and CSS project:\nbash ├── /assets\n│   ├── /images\n│   │   ├── logo png\n│   │   ├── banner jpg\n│   │   └── icons svg\n│   ├── /fonts\n│   │   ├── custom-font woff\n│   │   └── custom-font woff2\n├── /css\n│   ├── main css\n│   ├── about css\n│   └── contact css\n├── index html\n├── about html\n├── contact html\n└── README md\nAt the top of the example, there is a single dot, which represents the root directory The root directory is the top-level directory in a file system, serving as the starting point for all file paths and containing all other directories and files A directory is another name for a folder Inside the root directory, the first directory shown is the assets directory The term assets refers to any files that are used in the project, such as images, fonts, or other resources In this example, there are two directories inside the assets directory called images and fonts The next directory would be the css directory Sometimes this is also referred to as a stylesheets directory This is where you would store all of your CSS files Below the css directory are the HTML files The index html file represents the homepage, while about html and contact html represent the About and Contact pages, respectively Lastly, there is a README md file README files are commonly used to provide useful information about the project, such as what it does, how to use it, and any other relevant details The md extension stands for Markdown, which is a lightweight markup language that is often used to write documentation By organizing your project into assets, CSS, and HTML files, it makes it easy to find what you are looking for This also makes it easy for other developers to contribute to your project",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4506,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac39a22b0cc30eb8fd65e.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0c4e74765a0cbdfcfe7ed85dc2e089b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac39a22b0cc30eb8fd65e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "commonly used to provide useful information about the project, such as what it does, how to use it, and any other relevant details The md extension stands for Markdown, which is a lightweight markup language that is often used to write documentation By organizing your project into assets, CSS, and HTML files, it makes it easy to find what you are looking for This also makes it easy for other developers to contribute to your projectIt is important to note that this is just one example of how you can organize your files and folders There are many different ways to structure a project --questions--\n--text--\nWhat is the assets directory used for in a web application --answers--\nIt's used to store server log files are kept to monitor web application performance --feedback--\nThink about where to store files like images and fonts in a project It's used to store files such as images, fonts, and other resources It's used to store scripts and tools for testing the web application --feedback--\nThink about where to store files like images and fonts in a project It's used to hold third-party libraries and frameworks --feedback--\nThink about where to store files like images and fonts in a project --video-solution--\n2\n--text--\nWhat is a README md file commonly used for in a project --answers--\nIt's used to store personal information and data collected from users --feedback--\nThink about the file that is used to describe the project It's used to define the structure and schema of the project's database --feedback--\nThink about the file that is used to describe the project It's used to provide useful information about the project It's used to track and document issues and bugs found in the project --feedback--\nThink about the file that is used to describe the project --video-solution--\n3\n--text--\nWhat does the root directory represent in a file system --answers--\nIt represents the default folder where downloaded files are saved --feedback--\nThink about the top level directory in a file system It holds cached files and data to speed up system operations --feedback--\nThink about the top level directory in a file system It contains logs and diagnostic information about system performance --feedback--\nThink about the top level directory in a file system The starting point for all file paths and contains all other directories and files within it --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4506,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac39a22b0cc30eb8fd65e.md",
      "source_type": "git_repo"
    },
    "token_count": 465,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "25aab837d1f4571c2b05db44386590c3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac3f129efbf327742eb33.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672ac3f129efbf327742eb33\ntitle: How Can You Search for Files and Folders on Your Computer challengeType: 19\ndashedName: how-to-search-for-files-and-folders-on-your-computer\n--description--\nLet's learn how to search for files and folders on Windows and macOS We'll start with Windows You can search from the Taskbar or from the File Explorer To search from the Taskbar, write the name of the file or folder that you are looking for You can also search for keywords You'll see results from across your PC and OneDrive If you only want to see documents, you can click on the \"Documents\" tab You also have tabs for apps and web results Another alternative is to use the Search File Explorer You will find it at the top right of the Explorer window, where you can see \"Search Documents \"\nYou have three options to define the scope of the search:\nYou can search from Home to find files from your PC and from the cloud quickly You can search from a folder to find files stored inside it You can search from This PC for a slow but in-depth search This is how you can search for files and folders on Windows Now let's see how you can do this on macOS First, you can use Spotlight, a tool that helps you find files on your Mac To open Spotlight, go to your menu bar at the top right and find the magnifying glass icon If you don't see this icon on the menu bar, you can add it in the Control Center settings Go to your settings, filter by \"Control Center\", click on this option and then scroll down until you find the \"Spotlight\" option You can also use a keyboard shortcut to open Spotlight: Command + Spacebar When you open Spotlight, you'll see the Spotlight Search, where you can search for any file or folder by typing its name When you start typing, you'll see the results grouped by category, including suggestions, folders, presentations, photos, documents, and related searches You can also expand a specific category by clicking on \"Show More \"\nAnother way to search for files that you have recently opened is to open Finder by click on the Finder icon in the Dock Then, go to \"Recents\" in the Finder sidebar And there, you'll find all the files that you've recently viewed This is how you can search for files and folders on macOS",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3841,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac3f129efbf327742eb33.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "21cd18e68ec4a1a736f04ccb69b72787",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac3f129efbf327742eb33.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "suggestions, folders, presentations, photos, documents, and related searches You can also expand a specific category by clicking on \"Show More \" Another way to search for files that you have recently opened is to open Finder by click on the Finder icon in the Dock Then, go to \"Recents\" in the Finder sidebar And there, you'll find all the files that you've recently viewed This is how you can search for files and folders on macOSWith these search tools, you can optimize your workflow and find the files and folders you need very quickly --questions--\n--text--\nIf you need to perform a quick search on your Windows PC and cloud files, you should start your search from:\n--answers--\nHome\nA specific folder\n--feedback--\nThink about the speed of the search process Which one is the fastest one This PC\n--feedback--\nThink about the speed of the search process Which one is the fastest one Desktop\n--feedback--\nThink about the speed of the search process Which one is the fastest one --video-solution--\n1\n--text--\nWhat is the name of a powerful search tool built into macOS that helps you find files and folder in your entire system quickly --answers--\nExplorer\n--feedback--\nThink about the search tools available on macOS Control Center\n--feedback--\nThink about the search tools available on macOS Sidebar\n--feedback--\nThink about the search tools available on macOS Spotlight\n--video-solution--\n4\n--text--\nWhat is the name of the horizontal bar, typically located at the bottom of a Windows computer screen, where you can search for files and folder --answers--\nSidebar\n--feedback--\nThink about the search tools available on Windows Taskbar\nSpotlight\n--feedback--\nThink about the search tools available on Windows Finder\n--feedback--\nThink about the search tools available on Windows --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3841,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac3f129efbf327742eb33.md",
      "source_type": "git_repo"
    },
    "token_count": 373,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "de3564bf492d68c31fb59c4657c9ce6e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac3c5d0e9fd31835ff772.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672ac3c5d0e9fd31835ff772\ntitle: How Can You Create, Move, and Delete Files and Folders Using Explorer/Finder challengeType: 19\ndashedName: how-to-create-move-and-delete-files-and-folders-using-explorer-finder\n--description--\nTo create a file on Windows using the Explorer, you can click on the \"New\" option at the top right This will show you a list of the different types of files that you can create You can also create files in their corresponding applications Let's create a text file to show you the process When you click on \"New\" and select the file type, you will see a new text file in your current folder with a default name You can rename it if you'd like The process of creating folders is exactly the same Click the \"New\" button at the top right and then select the \"Folder\" option or right-click on an empty spot and go to \"New \" Then, select the \"Folder\" option You'll see a new empty folder in your current location You can rename files and folders by selecting them and clicking on the \"Rename\" option at the top When current name of the file is highlighted, you can start writing the new name of the file Press Enter to confirm the changes Alternatively, you can right-click on the file or folder and select the \"Rename\" option or use the F2 keyboard shortcut Write the new name and press Enter to confirm the changes You can move a file or folder to another folder by dragging and dropping it into the destination folder, if you have it opened it as a tab You can also select the file or folder and select the \"Cut\" option at the top Then, go to the destination folder and paste it by clicking the \"Paste\" button at the top If you copied or cut the file previously, this button will be enabled You can also do this by right-clicking on an empty spot and then clicking on the paste icon This will remove the file or folder from its original location To delete a file or folder, click on it and then click on the Trash icon at the top You will also find a \"Delete\" option if you right-click on it Great Now let's see how you can do this on macOS using Finder Finder is the default file manager on macOS To create a file on macOS, you need to open an application that lets you create the type of document that you need to create",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6844,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac3c5d0e9fd31835ff772.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "feedbc69d77f95d2224b07d6c810084c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac3c5d0e9fd31835ff772.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "delete a file or folder, click on it and then click on the Trash icon at the top You will also find a \"Delete\" option if you right-click on it Great Now let's see how you can do this on macOS using Finder Finder is the default file manager on macOS To create a file on macOS, you need to open an application that lets you create the type of document that you need to createCurrently, there isn't a built-in way to create a file directly on Finder For example, to create a simple plain text file, you can open TextEdit and save your file The process works exactly the same for any type of file There are many ways to open TextEdit One of them is to go to Launchpad Then, search for an app where you can create the type of file that you're interested in In this case, that would be \"TextEdit \" Click on the icon to open the app Once you are inside the app, you should see an option to save your file in the App menu This menu is located at the top-right, next to the Apple menu icon In one of the App menu options, you should see a command to save the file This is usually under the File menu Next to it, you will see the keyboard shortcut for saving your file This is usually Command + S on macOS When you are saving the file for the first time, you should see a dialog window, where you can write the name of the file and choose a location Usually, the file extension is added by the application automatically but you can change it before saving the file After saving the file, you can open Finder by clicking on the Finder icon in the Dock You should see your new file in the folder where you saved it To create a new folder, you should go to the location where you want to create that new folder and right-click on an empty spot You will see a list of options The first option is \"New Folder \"\nIf you click on it, you can assign a name to your new folder Write the name and press Enter to confirm There are multiple ways to move files and folders in Finder If you need to move them to a folder listed in your Finder \"Favorites\" section, you can just drag and drop it If you need to move it to a different folder, you have two options You can either open the destination folder as a tab and drag and drop the file or folder into the tab Or you can use keyboard shortcuts",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6844,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac3c5d0e9fd31835ff772.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "d3427c55954c73eda9209711aa90e19b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac3c5d0e9fd31835ff772.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to confirm There are multiple ways to move files and folders in Finder If you need to move them to a folder listed in your Finder \"Favorites\" section, you can just drag and drop it If you need to move it to a different folder, you have two options You can either open the destination folder as a tab and drag and drop the file or folder into the tab Or you can use keyboard shortcutsFirst, copy the file with Command + C, go to the new folder, and then use Command + Option + V to paste the file or folder in that location This will also remove it from the original folder To delete a file or folder, you can right-click on it and select \"Move to trash \"\nYou can also drag and drop them into the trash icon on the Dock This is equivalent When the file or folder is in the trash can, you can right-click on it to delete it immediately or you can empty the trash to remove all the deleted files and folders permanently Knowing how to create, move, and delete files and folders on Windows and macOS is very important By mastering these skills, you can organize your files, locate them quickly, and free up storage on your computer by deleting unnecessary files --questions--\n--text--\nWhich of these actions permanently removes a file or folder from your computer --answers--\nMoving the file to a different folder --feedback--\nThink about where files go after you delete them Renaming the file or folder --feedback--\nThink about where files go after you delete them Emptying the Recycle Bin or Trash Copying the file or folder to an external drive --feedback--\nThink about where files go after you delete them --video-solution--\n3\n--text--\nWhat is the primary difference between copying and moving a file --answers--\nCopying creates a duplicate of the file, while moving transfers the original file to a new location Moving creates a duplicate of the file in a new location, while copying transfers the original file --feedback--\nThink about the impact of copying versus moving the original file There is no difference between copying and moving a file --feedback--\nThink about the impact of copying versus moving the original file Copying deletes the original file, while moving creates a new file --feedback--\nThink about the impact of copying versus moving the original file --video-solution--\n1\n--text--\nWhy are folders important for organizing your computer --answers--\nFolders make files more difficult to find --feedback--\nThink about why grouping your files can be helpful Folders are only necessary for storing large files",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6844,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac3c5d0e9fd31835ff772.md",
      "source_type": "git_repo"
    },
    "token_count": 503,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "cee509cae965a65f13e62731b58fc794",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac3c5d0e9fd31835ff772.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and moving a file --feedback-- Think about the impact of copying versus moving the original file Copying deletes the original file, while moving creates a new file --feedback-- Think about the impact of copying versus moving the original file --video-solution-- 1 --text-- Why are folders important for organizing your computer --answers-- Folders make files more difficult to find --feedback-- Think about why grouping your files can be helpful Folders are only necessary for storing large files--feedback--\nThink about why grouping your files can be helpful Folders help you categorize and find files efficiently Folders slow down your computer if you have too many --feedback--\nThink about why grouping your files can be helpful --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6844,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac3c5d0e9fd31835ff772.md",
      "source_type": "git_repo"
    },
    "token_count": 146,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "72b845cae8563810c06f928ed32e2d1e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\6729974ec29be33cb00eb54d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6729974ec29be33cb00eb54d\ntitle: How Do Forms, Labels, and Inputs Work in HTML challengeType: 19\ndashedName: how-do-forms-labels-and-inputs-work-in-html\n--description--\nThe form element in HTML is used to gather user information, such as names and email addresses Here is an example of a form element:\n```html\n```\nThe action attribute specifies where the form data will be sent upon submission To collect specific information, like names and email addresses, you would use the input element Here is an example of using an input element:\n```html\n```\ninput elements are void elements and do not have closing tags The type attribute defines the data type expected from the user In this case, the data would be plaintext To add a label for the input, you would use a label element Here is an example of using a label element with the text of Full Name::\n```html\nFull Name:\n```\nBy nesting an input inside a label element, you create an implicit association between the label and the input field The term \"implicit\" refers to something that is understood or inferred without needing to be explicitly stated or defined with additional attributes or elements To explicitly associate a label with an input, you can use the for attribute Here is an example of using the for attribute for an email address label:\n```html\nEmail Address:\n```\nWhen using an explicit association, the values for the for attribute and id need to be the same In this case, the values are both set to email The email type in the input provides basic validation for correctly formatted email addresses If you want to show additional hints to the users about the expected input, you can use the placeholder attribute Here is an example using the placeholder attribute inside the email input:\n```html\nEmail Address:\n```\nFor the placeholder text, you want to provide helpful short text to show the format and type of data you expect from your users In this case, the placeholder text, Ex example@email com, shows the user that they must enter a correctly formatted email address --questions--\n--text--\nWhat is the role of the for attribute inside the label element --answers--\nIt indicates the color of the label text --feedback--\nReview the middle portion of the lecture where the for attribute is discussed It's used to explicitly associate a label with an input It specifies the alignment of the label within its container",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4507,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\6729974ec29be33cb00eb54d.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b7e41f7bf019fac74fa56d4262aa9c8b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\6729974ec29be33cb00eb54d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "case, the placeholder text, Ex example@email com, shows the user that they must enter a correctly formatted email address --questions-- --text-- What is the role of the for attribute inside the label element --answers-- It indicates the color of the label text --feedback-- Review the middle portion of the lecture where the for attribute is discussed It's used to explicitly associate a label with an input It specifies the alignment of the label within its container--feedback--\nReview the middle portion of the lecture where the for attribute is discussed It defines a JavaScript function to execute when the label is clicked --feedback--\nReview the middle portion of the lecture where the for attribute is discussed --video-solution--\n2\n--text--\nWhich of the following is a correct value for the type attribute used inside inputs --answers--\nchoice\n--feedback--\nRefer back to the beginning of the lecture where the example shows a valid value for the type attribute text-box\n--feedback--\nRefer back to the beginning of the lecture where the example shows a valid value for the type attribute numberinput\n--feedback--\nRefer back to the beginning of the lecture where the example shows a valid value for the type attribute text\n--video-solution--\n4\n--text--\nWhat is the role of the placeholder attribute inside the input element --answers--\nIt is used to provide a hint or example text within an input field It specifies the type of input field --feedback--\nReview the end of the lecture where the placeholder attribute was discussed It defines the initial value displayed in the input field --feedback--\nReview the end of the lecture where the placeholder attribute was discussed It indicates the maximum length of characters allowed in the input field --feedback--\nReview the end of the lecture where the placeholder attribute was discussed --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4507,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\6729974ec29be33cb00eb54d.md",
      "source_type": "git_repo"
    },
    "token_count": 356,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a08e70dac43beffc37d65976faf9512d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\672a4cd3d59756726657efb8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672a4cd3d59756726657efb8\ntitle: What Are the Different Types of Buttons, and When Should You Use Them challengeType: 19\ndashedName: what-are-the-different-types-of-buttons\n--description--\nThe button element is used to perform a particular action when it is activated Here is an example of a button element with the button text of Start Game html\n<button>Start Game</button>\nOther examples of using the button element include submitting a form, showing a modal, or toggling a side menu open and closed The button element has a type attribute which controls the behavior of the button when it is activated The first possible value for the type attribute would be the button type Here is an example of using the button element with the button type and a text of Show Alert:\nhtml\n<button type=\"button\">Show Alert</button>\nBy default, the button will not do anything when activated However, you can add some JavaScript code to make the button interactive, such as showing an alert in this case Another possible value for the type attribute is the submit value Here is an example of using a button element with the submit type:\n```html\nEmail address:\nSubmit form\n```\nInside this form element, there is a label and input element for the user's email address When the user clicks on the submit button, their data will be sent to the server and will be processed The third possible value for the type attribute is the reset value Here is an example of a form element with reset and submit buttons:\n```html\nEmail address:\nReset form\nSubmit form\n```\nIn this modified example, a label and input element are used to collect the user's email address When the user clicks on the reset button, then it will clear out all of their input data It is important to note that reset buttons are usually not the best idea because they could lead to users accidentally resetting their data Also, multiple buttons in your form could clutter up the user interface Another way to create buttons in HTML is to use the input element The input element also has a type attribute with the possible values of submit, reset, and button Here is an example of using the input element with the type set to button:\nhtml\n<input type=\"button\" value=\"Show Alert\" />\nThe value attribute is used to show the button text So, what is the difference between using the input and button elements",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\672a4cd3d59756726657efb8.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "50238e75a6ced82bc584b9f99d5138a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\672a4cd3d59756726657efb8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the user interface Another way to create buttons in HTML is to use the input element The input element also has a type attribute with the possible values of submit, reset, and button Here is an example of using the input element with the type set to button: html <input type=\"button\" value=\"Show Alert\" /> The value attribute is used to show the button text So, what is the difference between using the input and button elementsinput elements are void elements, which means they cannot have child nodes, such as text, and can only have a start tag On the other hand, the button element offers more flexibility because you can nest text, images, and icons inside it --questions--\n--text--\nWhich of the following is NOT a valid value for the type attribute inside buttons --answers--\nsrc\n--feedback--\nOne of these options is the name of an attribute and not a valid value button\n--feedback--\nOne of these options is the name of an attribute and not a valid value reset\n--feedback--\nOne of these options is the name of an attribute and not a valid value submit\n--feedback--\nOne of these options is the name of an attribute and not a valid value --video-solution--\n1\n--text--\nWhat is the role of type=\"reset\" inside the button element --answers--\nIt submits the form data --feedback--\nThe reset value implies what its role is inside the button element It only resets textarea elements --feedback--\nThe reset value implies what its role is inside the button element It resets the form There is no behavior for the reset type --feedback--\nThe reset value implies what its role is inside the button element --video-solution--\n3\n--text--\nWhat is another element you can use to represent a button --answers--\nimg\n--feedback--\nReview the last part of the lecture where this is discussed in more detail form\n--feedback--\nReview the last part of the lecture where this is discussed in more detail header\n--feedback--\nReview the last part of the lecture where this is discussed in more detail input\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4587,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\672a4cd3d59756726657efb8.md",
      "source_type": "git_repo"
    },
    "token_count": 421,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fb2f592ddfdb93a49993fda4f574e12e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\672a4ce6dab9eb735828b48b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672a4ce6dab9eb735828b48b\ntitle: What Is Client-Side Form Validation in HTML Forms, and What Are Some Examples challengeType: 19\ndashedName: what-is-client-side-form-validation-in-html-forms\n--description--\nWhen a user fills out a form on your website, it is important that they fill out all of the necessary information in the correct format HTML form controls, like inputs, have a lot of built-in validation that you can use to check for invalid data This will help ensure that the user fixes these mistakes before the information is submitted and processed by the server The term \"client-side\" refers to everything that happens on the user's computer or device, like the part of a website or app you interact with directly This includes the layout, design, and any interactive features The term \"server-side\" refers to everything that happens on the server, the computer, or system, that hosts the website or app This includes processing data, running applications, and handling requests that come from the user's device While client-side validation is important, you also need server-side validation for added security Malicious users can bypass client-side checks, so robust server-side measures are essential You'll learn more about this in a later module For now, let's take a look at some examples of client-side form validation One common example of built-in form validation is to use the required attribute in inputs The required attribute specifies that the user needs to fill out that portion of the form before it gets submitted Here is an example of using the required attribute in an email input:\n```html\nEmail Address (Required field):\nSubmit Form\n```\nWhen the user clicks on the Submit Form button without supplying an email address, they will be alerted that the field is required and the form will not be submitted Each browser will have its own set of styles for showing this alert message Another advantage of using the email input, is that email inputs have some basic validation to ensure correctly formatted email addresses For example, if you type in random words and click submit, then the browser will show an alert that an @ sign is missing It is important to note that browsers only check for basic validation for standard email addresses It is up to you to add additional layers of validation, which you will learn about in later modules Other forms of validation for email inputs are to use the minlength and maxlength attributes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4944,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\672a4ce6dab9eb735828b48b.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "5baafe31c5257b9a66cea885d8e32317",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\672a4ce6dab9eb735828b48b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "email addresses For example, if you type in random words and click submit, then the browser will show an alert that an @ sign is missing It is important to note that browsers only check for basic validation for standard email addresses It is up to you to add additional layers of validation, which you will learn about in later modules Other forms of validation for email inputs are to use the minlength and maxlength attributesHere is an example using the extra validation:\n```html\nEmail Address (Required field):\nSubmit Form\n```\nThe minlength and maxlength attributes are used to set the minimum and maximum length in characters for the email input If you don't include the minimum length or exceed the max length of characters, the browser will show an alert message --questions--\n--text--\nWhat is the purpose of the minlength and maxlength attributes inside inputs --answers--\nThey're used to control the font size of the text inside the input field --feedback--\nThe names for these attribute suggest what they are used for They're used to set the minimum and maximum length in characters for the input They're used to define the width of the input field on the page --feedback--\nThe names for these attribute suggest what they are used for They're used to specify the maximum number of characters that can be typed in a textarea --feedback--\nThe names for these attribute suggest what they are used for --video-solution--\n2\n--text--\nWhich attribute is used to ensure that an input field is marked as required --answers--\nrequired\nsize\n--feedback--\nOne of these attribute names heavily implies what it does minlength\n--feedback--\nOne of these attribute names heavily implies what it does autoplay\n--feedback--\nOne of these attribute names heavily implies what it does --video-solution--\n1\n--text--\nWhat happens if you try to submit a value without an @ sign for the email input --answers--\nThe program will crash --feedback--\nRefer back to the middle of the lecture where this was discussed The form will submit just fine --feedback--\nRefer back to the middle of the lecture where this was discussed Nothing will happen --feedback--\nRefer back to the middle of the lecture where this was discussed The browser will show an alert message that the input is missing the @ sign --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4944,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\672a4ce6dab9eb735828b48b.md",
      "source_type": "git_repo"
    },
    "token_count": 452,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2ab7bc88e194dada5cf321a613a6ee35",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\672a4cf959443073a6774908.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672a4cf959443073a6774908\ntitle: What Are the Different Form States, and Why Are They Important challengeType: 19\ndashedName: what-are-the-different-form-states\n--description--\nIn HTML, form controls, like inputs, can be in different stages or conditions like a focused state, readonly state, or disabled state The first state would be considered the default state The default state of an email address input is a blank input That is what the email input looks like when it is first rendered on the page At this point, the user has not input any information When the user clicks on a form control or selects it with the keyboard's tab key, then that means it is in the focused state When an input is in the focused state, most browsers will show a blue highlighted border around the input But you can choose to add additional styles in CSS Another form state is the disabled state This state shows users that an input cannot be focused or activated To disable an input, you can add the disabled boolean attribute to the element like this:\nhtml\n<input disabled type=\"email\" name=\"email\" id=\"email\" />\nIf the user tries to click on the input, then the focus will not be enabled Similar to the focused state, you can choose to add additional styles for the disabled state using CSS Another type of form state is the readonly state This is when a form control, like an input, is not editable by the user Here is an example of setting an email input to read only:\nhtml\n<input\nreadonly\ntype=\"email\"\nname=\"email\"\nid=\"email\"\nvalue=\"example@email com\"\n/>\nThe value attribute is used to set the value shown inside the input field If you tried to click on the input, you would not be able to edit the existing value A key difference between the disabled state and readonly state is that readonly can be focused while the disabled state cannot Understanding the different form states is important because they ensure a smooth user experience by providing clear feedback and guidance while handling errors --questions--\n--text--\nWhich attribute is used to disable an input --answers--\nreadonly\n--feedback--\nThe name of the attribute strongly implies the answer required\n--feedback--\nThe name of the attribute strongly implies the answer checked\n--feedback--\nThe name of the attribute strongly implies the answer disabled\n--video-solution--\n4\n--text--\nWhich attribute is used to mark an input read only",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\672a4cf959443073a6774908.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "99449ff067b31cc7d4a94572f82242d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\672a4cf959443073a6774908.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is important because they ensure a smooth user experience by providing clear feedback and guidance while handling errors --questions-- --text-- Which attribute is used to disable an input --answers-- readonly --feedback-- The name of the attribute strongly implies the answer required --feedback-- The name of the attribute strongly implies the answer checked --feedback-- The name of the attribute strongly implies the answer disabled --video-solution-- 4 --text-- Which attribute is used to mark an input read only--answers--\nchecked\n--feedback--\nThe name of the attribute strongly implies the answer readonly\nsize\n--feedback--\nThe name of the attribute strongly implies the answer capture\n--feedback--\nThe name of the attribute strongly implies the answer --video-solution--\n2\n--text--\nWhen does the focus state occur --answers--\nWhen an input field is disabled and cannot be interacted with --feedback--\nRefer back to the beginning of the lecture where the focused state was discussed When an input field is validated and shows an error message --feedback--\nRefer back to the beginning of the lecture where the focused state was discussed When the user clicks on an input or selects it using the tab key to focus it When an input field has been pre-filled with default values by the browser --feedback--\nRefer back to the beginning of the lecture where the focused state was discussed --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms\\672a4cf959443073a6774908.md",
      "source_type": "git_repo"
    },
    "token_count": 272,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "20ec9b507d94b8f66f8ee4d8eb0f8249",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac403a9ba7732b31c6480.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672ac403a9ba7732b31c6480\ntitle: What Are Some Common File Types You Will Work With in Web Applications challengeType: 19\ndashedName: what-are-some-common-file-types-you-will-work-with-in-web-applications\n--description--\nFiles are classified based on their content and structure The file type determines how a file is opened and processed by computer programs We identify file types based on their extensions A file extension is a three or four letter suffix at the end of the file name The three main file types that you will find in web applications are HTML, CSS, and JavaScript HTML files contain the structure and content of the web application They have a html file extension CSS files define the styles They have a css file extension And JavaScript files add more advanced functionality and interactivity They have a js file extension As you develop web applications, you will also need to include images These are some of the most widely used image file types JPEG, which stands for \"Joint Photographic Experts Group,\" is known for its efficient compression It's great for photographs and images However, the compression is lossy, which means that some image quality is lost to reduce the file size PNG, which stands for \"Portable Network Graphics,\" preserves image quality, even after compression This results in larger files PNG supports transparency and it's great for images with sharp edges, like logos and icons The GIF image format supports both animation and transparency but has a limited color palette GIF stands for \"Graphics Interchange Format \"\nAnd finally, we have SVG, which stands for \"Scalable Vector Graphics \" It's a vector image format These images can be scaled as much as needed without losing quality Great Now that you know about image formats, let's see some video and audio formats MP3 is an audio format known for its efficient compression It's a lossy format, so some audio data is lost during the compression to make these files smaller MP4 is one of the most common video formats It offers good compression and supports multiple audio and video codecs, subtitles, and metadata MOV, the QuickTime multimedia file format developed by Apple, is primarily associated with QuickTime Player Other popular audio and video file types are WAV, a lossless audio format that keeps the original quality of the audio, and WebM, a high-quality open-source video format If you ever need to customize the fonts of your web application, you will also work with font formats",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5747,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac403a9ba7732b31c6480.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "aba014cb81df60bc19e4f6da7d8b8498",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac403a9ba7732b31c6480.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "It offers good compression and supports multiple audio and video codecs, subtitles, and metadata MOV, the QuickTime multimedia file format developed by Apple, is primarily associated with QuickTime Player Other popular audio and video file types are WAV, a lossless audio format that keeps the original quality of the audio, and WebM, a high-quality open-source video format If you ever need to customize the fonts of your web application, you will also work with font formatsThese are three of the most widely used ones TTF, which stands for \"TrueType Font\", is a font format compatible with different operating systems WOFF is a modern font format, specifically designed for web development purposes It stands for \"Web Open Font Format\" These files are smaller because they have better compression They can also store metadata, including licensing information And WOFF2 is the successor of WOFF with even more efficient compression and performance You can also create archive files if you need to group multiple folders and files The most widely used archive format is ZIP ZIP offers lossless compression, so no data is lost during the process It's widely supported across operating systems and software applications And finally, let's talk about documentation In web applications, you will usually find a file called README that contains information about the application, like how to use it, how to install it, its license, and how to contribute They are usually written in a file format called Markdown With Markdown, you can create structured documents with headings, subheadings, links, images, lists, and more Markdown files have a md or markdown extension Here you can find the README file of freeCodeCamp's GitHub repository: https://github com/freeCodeCamp/freeCodeCamp/blob/main/README md\nYou can create this detailed structure and format using Markdown You will definitely read and write many README files throughout your career Learning about these common file types is essential for web development From the core building blocks of HTML, CSS, and JavaScript to image, video, and audio formats, every file type has an important role in creating interactive web applications --questions--\n--text--\nWhich file format is best suited for images with sharp edges and transparent backgrounds --answers--\nJPEG\n--feedback--\nThink about the image format needed for logos and icons PNG\nGIF\n--feedback--\nThink about the image format needed for logos and icons SVG\n--feedback--\nThink about the image format needed for logos and icons",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5747,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac403a9ba7732b31c6480.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3d2b3cf9f2782fb97c623a4e2a922ecf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac403a9ba7732b31c6480.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "HTML, CSS, and JavaScript to image, video, and audio formats, every file type has an important role in creating interactive web applications --questions-- --text-- Which file format is best suited for images with sharp edges and transparent backgrounds --answers-- JPEG --feedback-- Think about the image format needed for logos and icons PNG GIF --feedback-- Think about the image format needed for logos and icons SVG --feedback-- Think about the image format needed for logos and icons--video-solution--\n2\n--text--\nWhich one of these options is an audio format known for its lossless compression --answers--\nMP3\n--feedback--\nThink about audio quality and file size Lossless compression results in larger files WAV\nSVG\n--feedback--\nThink about audio quality and file size Lossless compression results in larger files MP4\n--feedback--\nThink about audio quality and file size Lossless compression results in larger files --video-solution--\n2\n--text--\nWhich one of these options is a modern font format used for web development purposes --answers--\nTTF\n--feedback--\nThink about which font format results in smaller file size and better compression WOFF\nGIF\n--feedback--\nThink about which font format results in smaller file size and better compression ZIP\n--feedback--\nThink about which font format results in smaller file size and better compression --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5747,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-file-systems\\672ac403a9ba7732b31c6480.md",
      "source_type": "git_repo"
    },
    "token_count": 275,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d7201fac6894dc4892ed8b719faa4351",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\672d269da46786225e3fe3fd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672d269da46786225e3fe3fd\ntitle: What Is the Purpose of Functions, and How Do They Work challengeType: 19\ndashedName: what-is-the-purpose-of-functions-and-how-do-they-work\n--description--\nFunctions are reusable pieces of code that perform a specific task or calculate a value Think of functions as a machine that takes some input, does some operations on it, and then produces an output Here is an example of declaring a function:\njs\nfunction greet() {\nconsole log(\"Hello, Jessica \");\n}\nIn this example, we have declared a function called greet Inside that function, we have a console log that logs the message Hello, Jessica If we tried to run this code, we would not see the message appear in the console This is because we need to call the function A function call, or invocation, is when we actually use or execute the function To call a function, you will need to reference the function name followed by a set of parentheses:\n```js\nfunction greet() {\nconsole log(\"Hello, Jessica \");\n}\ngreet(); // \"Hello, Jessica \"\n```\nNow the message of Hello, Jessica will be logged to the console But what if we wanted the message to say Hello, Nick or Hello, Anna We don't want to write a new function each time we greet a different user Instead, we can create a reusable function that uses function parameters and arguments Parameters act as placeholders for the values that will be passed to the function when it is called They allow functions to accept input and work with that input Arguments are the actual values passed to the function when it is called Here is an updated version of the greet function that uses parameters and arguments:\n```js\nfunction greet(name) {\nconsole log(\"Hello, \" + name + \" \");\n}\ngreet(\"Alice\"); // Hello, Alice greet(\"Nick\"); // Hello, Nick ```\nThe name serves as the parameter while the strings Alice and Nick serve as the arguments Now we have a reusable function that can be used dozens of times throughout our code with different arguments When a function finishes its execution, it will always return a value By default, the return value will be undefined Here is an example:\n```js\nfunction doSomething() {\nconsole log(\"Doing something \");\n}\nlet result = doSomething();\nconsole log(result); // undefined\n```\nIf you need your function to return a specific value, then you will need to use the return statement",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5479,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\672d269da46786225e3fe3fd.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "74129fd8ee3b807e7bc56584637648ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\672d269da46786225e3fe3fd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "reusable function that can be used dozens of times throughout our code with different arguments When a function finishes its execution, it will always return a value By default, the return value will be undefined Here is an example: ```js function doSomething() { console log(\"Doing something \"); } let result = doSomething(); console log(result); // undefined ``` If you need your function to return a specific value, then you will need to use the return statementHere is an example of using a return statement to return the sum of two values:\n```js\nfunction calculateSum(num1, num2) {\nreturn num1 + num2;\n}\nconsole log(calculateSum(3, 4)); // 7\n```\nOften times you will be using the return statement, because you can use that value that was output from the function later on in your code So far, we've been working with named functions, but you can also create what's called an anonymous function An anonymous function is a function without a name that can be assigned to a variable like this:\n```js\nconst sum = function (num1, num2) {\nreturn num1 + num2;\n};\nconsole log(sum(3, 4)); // 7\n```\nIn this example, we have a const variable called sum and we are assigning it an anonymous function that returns the sum of num1 and num2 We are then able to call sum and pass in the numbers 3 and 4 to get the result of 7 Functions support default parameters, allowing you to set default values for parameters These default values are used if the function is called without an argument for that parameter Here's an example:\n```js\nfunction greetings(name = \"Guest\") {\nconsole log(\"Hello, \" + name + \" \");\n}\ngreetings(); // Hello, Guest greetings(\"Anna\"); // Hello, Anna ```\nIn this example, if no argument is provided for name, it defaults to Guest In summary, functions allow you to write reusable and organized code They can take inputs (parameters), perform actions, and return outputs --questions--\n--text--\nWhat is the output of the following code js\nfunction mystery(a, b = 3) {\nreturn a * b;\n}\nconsole log(mystery(4));\n--answers--\n12\n7\n--feedback--\nPay attention to the default parameter and how many arguments are passed to the function",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5479,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\672d269da46786225e3fe3fd.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8e84efd9298c578f2b8b92483902521b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\672d269da46786225e3fe3fd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "example, if no argument is provided for name, it defaults to Guest In summary, functions allow you to write reusable and organized code They can take inputs (parameters), perform actions, and return outputs --questions-- --text-- What is the output of the following code js function mystery(a, b = 3) { return a * b; } console log(mystery(4)); --answers-- 12 7 --feedback-- Pay attention to the default parameter and how many arguments are passed to the functionundefined\n--feedback--\nPay attention to the default parameter and how many arguments are passed to the function NaN\n--feedback--\nPay attention to the default parameter and how many arguments are passed to the function --video-solution--\n1\n--text--\nWhich of the following is the correct way to call (or invoke) the sum function js\nfunction sum(num1, num2) {\nreturn num1 + num2\n}\n--answers--\njs\n()sum>\n--feedback--\nReview the section where function calls were discussed js\n()sum()\n--feedback--\nReview the section where function calls were discussed js\nsum()\njs\n<sum>\n--feedback--\nReview the section where function calls were discussed --video-solution--\n3\n--text--\nWhat is the default return value of a function if no return statement is specified --answers--\nnull\n--feedback--\nRemember what we said about functions that don't explicitly return a value 0\n--feedback--\nRemember what we said about functions that don't explicitly return a value undefined\nAn empty string --feedback--\nRemember what we said about functions that don't explicitly return a value --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5479,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\672d269da46786225e3fe3fd.md",
      "source_type": "git_repo"
    },
    "token_count": 335,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c24045abaebf57345c1fd043d631ca10",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67e2a4cab99d4e8bc795e99d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67e2a4cab99d4e8bc795e99d\ntitle: What Is the useActionState Hook, and How Does It Work challengeType: 19\ndashedName: what-is-the-useactionstate-hook-and-how-does-it-work\n--description--\nReact 19 came with two notable new features called server components and server actions From that version onwards, server components became the default in frameworks like Next js that readily support them Server actions on the other hand, are functions that run on the server to allow form handling right on the server without the need for API endpoints A server action looks like this:\n```js\n\"use server\";\nasync function submitForm(formData) {\nconst name = formData get(\"name\");\nreturn { message: Hello, ${name} };\n}\n```\nThis server action extracts a name field from a form and returns a string greeting that name To simplify state management for server actions and remove the need for client-side JavaScript for simple forms, the React team introduced the useActionState hook in version 19 Let's take a closer look at this hook and see how it works The React documentation describes the useActionState hook as a hook that \"allows you to update state based on the result of a form action \"\nBut this doesn't mean that you can only use the useActionState hook with forms You can also use it to manage button clicks and other events, as long as you have an action in place And keep in mind that, since useActionState is a hook, you cannot use it inside a server component Here's the basic syntax of the useActionState hook:\njs\nconst [state, action, isPending] = useActionState(actionFunction, initialState, permalink);\nstate is the current state the action returns action is the function that triggers the server action isPending is a boolean that indicates whether the action is currently running or not The actionFunction parameter is the server action itself initialState is the parameter that represents the starting point for the state before the action runs permalink is an optional string that contains the unique page URL the form modifies To use the useActionState hook, make sure you have an action in place first Let's use the action from the previous example for this, with a bit of a twist:\n```js\n\"use server\";\nexport async function submitForm(_, formData) {\nconst name = formData get(\"name\");\nconst hour = new Date()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9998,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67e2a4cab99d4e8bc795e99d.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "a3e7c55a0018e3f3168cae0033572199",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67e2a4cab99d4e8bc795e99d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "parameter that represents the starting point for the state before the action runs permalink is an optional string that contains the unique page URL the form modifies To use the useActionState hook, make sure you have an action in place first Let's use the action from the previous example for this, with a bit of a twist: ```js \"use server\"; export async function submitForm(_, formData) { const name = formData get(\"name\"); const hour = new Date()getHours();\nlet greeting;\nif (hour < 12) {\ngreeting = \"Good morning\";\n} else if (hour < 18) {\ngreeting = \"Good afternoon\";\n} else {\ngreeting = \"Good evening\";\n}\nreturn { message: ${greeting}, ${name} };\n}\n```\nIn your component, you then need to import the useActionState hook and call it at the top level of the component body (before the return statement) just like other hooks You should also import the action:\n```jsx\n\"use client\";\n// Import the useActionState hook\nimport { useActionState } from \"react\";\n// Import the submitForm action\nimport { submitForm } from \" /actions/submitForm\";\nconst Greeter = () => {\n// Initialize the hook\nconst [state, submit, isPending] = useActionState(submitForm, {\nmessage: \"\",\n});\nreturn (\n{/ Rest of component /}\n);\n};\nexport default Greeter;\n```\nHere's what the full code looks like with a bit of styling:\n```jsx\n\"use client\";\nimport { useActionState } from \"react\";\nimport { submitForm } from \" /actions/submitForm\";\nconst Greeter = () => {\nconst [state, submit, isPending] = useActionState(submitForm, {\nmessage: \"\",\n});\nreturn (\nGreet Someone\n<input\ntype=\"text\"\nname=\"name\"\nplaceholder=\"Enter your name\"\nrequired\nclassName=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400\"\n/>\n<button\ntype=\"submit\"\ndisabled={isPending}\nclassName=\"w-full mt-4 p-3 bg-green-500 text-white font-semibold rounded-lg hover:bg-green-600 disabled:bg-gray-400 transition-all\"\n>\n{isPending \"Greeting \" : \"Greet\"}\n</button>\n{state message && (\n<p className=\"mt-4 text-green-600 text-center font-medium\">\n{state",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9998,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67e2a4cab99d4e8bc795e99d.md",
      "source_type": "git_repo"
    },
    "token_count": 502,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "1935da0797e56e0b50b11a57cf85eb9e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67e2a4cab99d4e8bc795e99d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "} from \"react\"; import { submitForm } from \" /actions/submitForm\"; const Greeter = () => { const [state, submit, isPending] = useActionState(submitForm, { message: \"\", }); return ( Greet Someone <input type=\"text\" name=\"name\" placeholder=\"Enter your name\" required className=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400\" /> <button type=\"submit\" disabled={isPending} className=\"w-full mt-4 p-3 bg-green-500 text-white font-semibold rounded-lg hover:bg-green-600 disabled:bg-gray-400 transition-all\" > {isPending \"Greeting \" : \"Greet\"} </button> {state message && ( <p className=\"mt-4 text-green-600 text-center font-medium\"> {statemessage}\n</p>\n)}\n</form>\n</div>\n);\n};\nexport default Greeter;\n```\nIn the browser, you would see your form button change from Greet to Greeting while the action isPending - and the greeting would show Good morning, {name}, Good afternoon, {name}, or Good evening, {name}, depending on what time of day the form was submitted Remember how we mentioned that you can also use the useActionState hook outside of a form In this example, we'll fetch five users from JSONPlaceholder with a button click:\n```js\n\"use server\";\nexport async function getUsers() {\nconst res = await fetch(\n\"https://jsonplaceholder typicode com/users _start=0&_limit=5/\"\n);\nreturn await res json();\n}\n```\nHere's the styled UI:\n```jsx\n\"use client\";\nimport { useActionState } from \"react\";\nimport { getUsers } from \" /actions/getUsers\";\nexport default function FetchUsers() {\nconst [users, fetchAction, isPending] = useActionState(getUsers, []);\nreturn (\n{isPending \"Fetching Users \" : \"Fetch Users\"}\n<ul className=\"mt-4 space-y-2\">\n{users map((user) => (\n<li key={user id} className=\"p-3 bg-gray-100 rounded-lg\">\n<p className=\"font-semibold\">{user name}</p>\n<p className=\"text-sm text-gray-600\">{user",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9998,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67e2a4cab99d4e8bc795e99d.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "6889e8c13caff2bdfaf5c583e13b05af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67e2a4cab99d4e8bc795e99d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const res = await fetch( \"https://jsonplaceholder typicode com/users _start=0&_limit=5/\" ); return await res json(); } ``` Here's the styled UI: ```jsx \"use client\"; import { useActionState } from \"react\"; import { getUsers } from \" /actions/getUsers\"; export default function FetchUsers() { const [users, fetchAction, isPending] = useActionState(getUsers, []); return ( {isPending \"Fetching Users \" : \"Fetch Users\"} <ul className=\"mt-4 space-y-2\"> {users map((user) => ( <li key={user id} className=\"p-3 bg-gray-100 rounded-lg\"> <p className=\"font-semibold\">{user name}</p> <p className=\"text-sm text-gray-600\">{useremail}</p>\n</li>\n))}\n</ul>\n</div>\n);\n}\n```\nIn the browser, you would see that the button text is never updated to Fetching Users after it's clicked This happens because React treats data fetching and rendering as a higher priority than the isPending state, which blocks isPending in the process and throws an error To fix this issue, you need to wrap the action in startTransition:\n```jsx\n\"use client\";\n// import startTransition from React\nimport { useActionState, startTransition } from \"react\";\nimport { getUsers } from \" /actions/getUsers\";\nexport default function FetchUsers() {\nconst [users, fetchAction, isPending] = useActionState(getUsers, []);\nreturn (\nstartTransition(() => fetchAction())}\ndisabled={isPending}\nclassName=\"px-4 py-2 bg-green-500 font-bold cursor-pointer text-white rounded-lg hover:bg-green-600 disabled:bg-gray-400\"\n>\n{isPending 'Fetching Users ' : 'Fetch Users'}\n<ul className=\"mt-4 space-y-2\">\n{users map((user) => (\n<li key={user id} className=\"p-3 bg-gray-100 rounded-lg\">\n<p className=\"font-semibold\">{user name}</p>\n<p className=\"text-sm text-gray-600\">{user email}</p>\n</li>\n))}\n</ul>\n</div>\n);\n}\n```\nIf you're wondering what startTransition is, it's a function that tells React that a state update is of low-priority and can be interrupted This keeps the UI responsive while handling asynchronous updates like server actions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9998,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67e2a4cab99d4e8bc795e99d.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "58952600445fbefe3f80c370eb4cfeb7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67e2a4cab99d4e8bc795e99d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "font-bold cursor-pointer text-white rounded-lg hover:bg-green-600 disabled:bg-gray-400\" > {isPending 'Fetching Users ' : 'Fetch Users'} <ul className=\"mt-4 space-y-2\"> {users map((user) => ( <li key={user id} className=\"p-3 bg-gray-100 rounded-lg\"> <p className=\"font-semibold\">{user name}</p> <p className=\"text-sm text-gray-600\">{user email}</p> </li> ))} </ul> </div> ); } ``` If you're wondering what startTransition is, it's a function that tells React that a state update is of low-priority and can be interrupted This keeps the UI responsive while handling asynchronous updates like server actionsThat's how to use the useActionState hook inside and outside a form --questions--\n--text--\nWhat is the purpose of the useActionState hook in React --answers--\nIt manages state based on the result of an action, including form submissions, button clicks, and other event-driven updates It only updates state when a form is submitted and does not support other types of actions like button clicks or custom event handlers --feedback--\nIt works with actions, not just forms It handles global state management across multiple components, making it a replacement for state management libraries like Redux or Zustand --feedback--\nIt works with actions, not just forms It replaces the useState hook entirely by providing a built-in way to manage both local and global state without additional dependencies --feedback--\nIt works with actions, not just forms --video-solution--\n1\n--text--\nWhy can't you use the useActionState hook inside a server component --answers--\nBecause server components do not support state management, making useActionState incompatible --feedback--\nHooks only work in a specific type of component Because useActionState requires a database connection, which is only available in client components --feedback--\nHooks only work in a specific type of component Because useActionState is a React hook, and hooks can only be used inside client components Because useActionState depends on browser APIs that are not available on the server --feedback--\nHooks only work in a specific type of component --video-solution--\n3\n--text--\nWhich version of React introduced server components and server actions --answers--\nReact 17\n--feedback--\nThis version focused on improving server-side rendering React 18\n--feedback--\nThis version focused on improving server-side rendering",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9998,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67e2a4cab99d4e8bc795e99d.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "324d2e791dc3a04c19d7542de228bd3f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67e2a4cab99d4e8bc795e99d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "specific type of component Because useActionState is a React hook, and hooks can only be used inside client components Because useActionState depends on browser APIs that are not available on the server --feedback-- Hooks only work in a specific type of component --video-solution-- 3 --text-- Which version of React introduced server components and server actions --answers-- React 17 --feedback-- This version focused on improving server-side rendering React 18 --feedback-- This version focused on improving server-side renderingReact 19\nReact 16\n--feedback--\nThis version focused on improving server-side rendering --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9998,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67e2a4cab99d4e8bc795e99d.md",
      "source_type": "git_repo"
    },
    "token_count": 125,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "1ae00c846cb0b688e641981fbde4a2c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\673284d5e52ef81a2169b097.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673284d5e52ef81a2169b097\ntitle: What Are Arrow Functions, and How Do They Work challengeType: 19\ndashedName: what-are-arrow-functions-and-how-do-they-work\n--description--\nIn the previous lecture, you learned how to work with functions, which are reusable pieces of code that help make your code more modular, easier to maintain, and more efficient All previous examples used the regular function syntax, like this:\njs\nfunction greetings(name) {\nconsole log(\"Hello, \" + name + \" \");\n}\nBut another way to write functions in JavaScript is to create an arrow function expression Here is how you can refactor the previous example to use arrow function syntax instead:\njs\nconst greetings = (name) => {\nconsole log(\"Hello, \" + name + \" \");\n};\nIn this revised example, we are creating a const variable called greetings and assigning it an anonymous function Most of the syntax will look familiar to you except for the missing function keyword and the addition of the arrow (=>) between the name parameter and the function body If your parameter list only has one parameter in it, then you can remove the parentheses like this:\njs\nconst greetings = name => {\nconsole log(\"Hello, \" + name + \" \");\n};\nIf your arrow function has no parameters, then you must use the parentheses like this:\njs\nconst greetings = () => {\nconsole log(\"Hello\");\n};\nWhen first learning about functions, you had to wrap the function body in curly braces But if your function body only contains a single line of code, you can remove the curly braces like this:\njs\nconst greetings = name => console log(\"Hello, \" + name + \" \");\nIt is important to note that removing the parentheses and curly braces for regular function syntax will not work You will get errors if you tried to do something like this:\njs\n// This will produce syntax errors\nfunction greetings name console log(\"Hello, \" + name + \" \");\nThese types of one line functions only work if you are using the arrow function syntax Another key concept is the return statement Here is an example of using the arrow function syntax to calculate the area:\n```js\nconst calculateArea = (width, height) => {\nconst area = width * height;\nreturn area;\n};\nconsole log(calculateArea(5, 3)); // 15\n```\nWe are creating a variable inside the function called area and then returning that variable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5072,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\673284d5e52ef81a2169b097.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "29c4848e6883824545cd38ca843ceb3e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\673284d5e52ef81a2169b097.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"); These types of one line functions only work if you are using the arrow function syntax Another key concept is the return statement Here is an example of using the arrow function syntax to calculate the area: ```js const calculateArea = (width, height) => { const area = width * height; return area; }; console log(calculateArea(5, 3)); // 15 ``` We are creating a variable inside the function called area and then returning that variableBut we could clean up our code a bit and return the calculation itself:\njs\nconst calculateArea = (width, height) => {\nreturn width * height;\n};\nIf you tried to remove the curly braces and place the calculation on the same line, then you would get an Uncaught SyntaxError: Unexpected token 'return' message:\njs\nconst calculateArea = (width, height) => return width * height;\nThe reason why you are getting this error, is because you need to remove the return statement When you remove that return statement, the error will disappear and the function will still implicitly return the calculation js\nconst calculateArea = (width, height) => width * height;\nSo when should you use the arrow function syntax Well, it depends Many developers use it consistently in their personal projects However, when working on a team, the choice usually depends on whether the existing codebase uses regular functions or arrow functions In future lectures, we'll cover when to use arrow functions and when to avoid them --questions--\n--text--\nWhat is the correct way to write an arrow function that takes two parameters and returns their sum --answers--\n(a, b) => { a + b }\n--feedback--\nRemember the syntax for implicit returns in arrow functions (a, b) => a + b\n(a, b) => return a + b\n--feedback--\nRemember the syntax for implicit returns in arrow functions a, b => a + b\n--feedback--\nRemember the syntax for implicit returns in arrow functions --video-solution--\n2\n--text--\nWhat is the correct way to write an arrow function that takes no parameters and returns the string \"Hello\" --answers--\n() => \"Hello\"\n=> \"Hello\"\n--feedback--\nRemember the syntax for arrow functions with no parameters and a single expression return () => { \"Hello\" }\n--feedback--\nRemember the syntax for arrow functions with no parameters and a single expression return",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5072,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\673284d5e52ef81a2169b097.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "aa572f7aeabfa594d75ea05dfecceecc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\673284d5e52ef81a2169b097.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a + b --feedback-- Remember the syntax for implicit returns in arrow functions --video-solution-- 2 --text-- What is the correct way to write an arrow function that takes no parameters and returns the string \"Hello\" --answers-- () => \"Hello\" => \"Hello\" --feedback-- Remember the syntax for arrow functions with no parameters and a single expression return () => { \"Hello\" } --feedback-- Remember the syntax for arrow functions with no parameters and a single expression return() => return \"Hello\"\n--feedback--\nRemember the syntax for arrow functions with no parameters and a single expression return --video-solution--\n1\n--text--\nWhat will be the output of the following code ```js\nlet multiply = (a, b = 1) => a * b;\nconsole log(multiply(5));\nconsole log(multiply(5, 2));\n```\n--answers--\n5, 10\n1, 2\n--feedback--\nConsider how default parameters work in arrow functions undefined, 10\n--feedback--\nConsider how default parameters work in arrow functions This will throw an error --feedback--\nConsider how default parameters work in arrow functions --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5072,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\673284d5e52ef81a2169b097.md",
      "source_type": "git_repo"
    },
    "token_count": 241,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "79625ced24e4f1b5dfe8f77b6bacc983",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67d1a928ae86929a85c1bb6b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d1a928ae86929a85c1bb6b\ntitle: How Do Forms Work in React challengeType: 19\ndashedName: how-do-forms-work-in-react\n--description--\nForms are fundamental to every web application because they let you handle user input, collect data, and trigger actions In React, forms are managed using state or refs, giving you full control over their behavior and validation These two ways to manage forms are called \"controlled\"  and \"uncontrolled\" input Let's look at what controlled and uncontrolled inputs are Controlled input is the most \"React-like\" way to handle form inputs With controlled inputs, you store the input field value in state and update it through onChange events This gives you complete control over the form data and allows instant validation and conditional rendering The process works like this: React maintains the form state with the useState hook, and you update it on every change When a user types in an input field, the onChange event fires, updates the state, and React re-renders the component with the new value ```jsx\nimport { useState } from \"react\";\nfunction App() {\nconst [name, setName] = useState(\"\");\nconst handleChange = (e) => {\nsetName(e target value);\n};\nconst handleSubmit = (e) => {\ne preventDefault();\nconsole log(name);\n};\nreturn (\n<>\nYour name\nSubmit\n</>\n);\n}\nexport default App;\n```\nThe benefits of controlled inputs include the following:\nImmediate access to the form data You can implement instant validation You can conditionally disable the submit button You can control the input value programmatically Uncontrolled inputs on the other hand are seen more in traditional HTML forms So, instead of handling the inputs through the useState hook, uncontrolled inputs in HTML maintain their own internal state with the help of the DOM Since the DOM controls the input values, what you need is to pull in the values of the input fields with ref This approach requires less code and performs better because refs do not make React re-render Here's an example of uncontrolled inputs:\n```jsx\nimport { useRef } from \"react\";\nfunction App() {\nconst nameRef = useRef();\nconst handleSubmit = (e) => {\ne preventDefault();\nconsole log(nameRef current value);\n};\nreturn (\nYour{\" \"}\nSubmit\n);\n}\nexport default App;\n```\nOne very noticeable advantage of uncontrolled inputs is that they require less code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5595,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67d1a928ae86929a85c1bb6b.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "49976af25a6fc65158777ce4428fd6eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67d1a928ae86929a85c1bb6b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "input fields with ref This approach requires less code and performs better because refs do not make React re-render Here's an example of uncontrolled inputs: ```jsx import { useRef } from \"react\"; function App() { const nameRef = useRef(); const handleSubmit = (e) => { e preventDefault(); console log(nameRef current value); }; return ( Your{\" \"} Submit ); } export default App; ``` One very noticeable advantage of uncontrolled inputs is that they require less codeThey also perform better and feel more natural to React beginners who are familiar with HTML So, which should you use between controlled and uncontrolled inputs Use controlled inputs when you need dynamic form updates, real-time validation, or when you want to sync input values with state They provide better control but require more re-renders Use uncontrolled inputs when you need simpler forms, want to access values only on submission, or when you're working with non-React code Regardless of which you use between controlled and uncontrolled inputs, here are some best practices you should adhere to while making forms in React:\nAlways prevent the default form submission Ensure you validate inputs before submission Always provide clear feedback to users with loading, validation errors or other related states --questions--\n--text--\nHow do you manage input field values in a controlled input --answers--\nBy storing the value in state and updating it through onChange events By directly modifying the DOM input value and using JavaScript to get the values --feedback--\nThe state holds the value, and changes trigger updates By using refs to track changes and assigning the ref attribute to each input --feedback--\nThe state holds the value, and changes trigger updates By setting the input value to null for a start and writing a function to get them later --feedback--\nThe state holds the value, and changes trigger updates --video-solution--\n1\n--text--\nWhich of these is a benefit of controlled inputs --answers--\nThey update the DOM directly without state management --feedback--\nControlled inputs give you more control over form data and behavior They allow more control over the form data They prevent form validation --feedback--\nControlled inputs give you more control over form data and behavior They disable the onChange event handler --feedback--\nControlled inputs give you more control over form data and behavior --video-solution--\n2\n--text--\nHow do uncontrolled inputs handle form data in React --answers--\nThey store the input value in the component state",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5595,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67d1a928ae86929a85c1bb6b.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "755dd594e0a2906e614ae9e2d721ce77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67d1a928ae86929a85c1bb6b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--feedback-- Controlled inputs give you more control over form data and behavior They allow more control over the form data They prevent form validation --feedback-- Controlled inputs give you more control over form data and behavior They disable the onChange event handler --feedback-- Controlled inputs give you more control over form data and behavior --video-solution-- 2 --text-- How do uncontrolled inputs handle form data in React --answers-- They store the input value in the component state--feedback--\nUncontrolled inputs rely on the browser's default form behavior instead of React state They use the useReducer hook for state management --feedback--\nUncontrolled inputs rely on the browser's default form behavior instead of React state React updates the input value through onChange events --feedback--\nUncontrolled inputs rely on the browser's default form behavior instead of React state The DOM manages the form data internally --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5595,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-forms-in-react\\67d1a928ae86929a85c1bb6b.md",
      "source_type": "git_repo"
    },
    "token_count": 176,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3aded83df7c8a3500bc2b62cae0aab00",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\673284e7244c0c1a649121b9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673284e7244c0c1a649121b9\ntitle: What Is Scope in Programming, and How Does Global, Local, and Block Scope Work challengeType: 19\ndashedName: what-is-scope-in-programming-and-how-does-global-local-and-block-scope-work\n--description--\nScope in programming refers to the visibility and accessibility of variables in different parts of your code It determines where variables can be accessed or modified In JavaScript, understanding scope is crucial for writing clean, efficient, and bug-free code There are three main types of scope: global scope, local scope, and block scope Global scope is the outermost scope in a JavaScript program Variables declared in the global scope are accessible from anywhere in your code, including within functions and blocks These variables are often called global variables While global variables can be convenient, they should be used sparingly as they can lead to naming conflicts and make your code harder to maintain Here's an example of a global variable:\n```js\nlet globalVar = \"I'm a global variable\";\nfunction printGlobalVar() {\nconsole log(globalVar);\n}\nprintGlobalVar(); // Output: \"I'm a global variable\"\n```\nIn this example, globalVar is declared in the global scope and can be accessed inside the printGlobalVar function Local scope, on the other hand, refers to variables that are only accessible within a function Here's an example of local scope:\n```js\nfunction greet() {\nlet message = \"Hello, local scope \";\nconsole log(message);\n}\ngreet(); // Output: \"Hello, local scope \"\nconsole log(message); // This will throw an error\n```\nIn this code, message is a local variable within the greet function It can be used inside the function, but trying to access it outside the function will result in an error Block scope is a concept introduced with the let and const keywords in ES6 A block is any code section within curly braces, {}, such as in if statements, for loops, or while loops The concept of loops will be taught in an upcoming lecture Variables declared with let or const inside a block are only accessible within that block Here's an example of block scope:\njs\nif (true) {\nlet blockVar = \"I'm in a block\";\nconsole log(blockVar); // Output: \"I'm in a block\"\n}\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5049,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\673284e7244c0c1a649121b9.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f664d401564964fc5d4034d8797907b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\673284e7244c0c1a649121b9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "keywords in ES6 A block is any code section within curly braces, {}, such as in if statements, for loops, or while loops The concept of loops will be taught in an upcoming lecture Variables declared with let or const inside a block are only accessible within that block Here's an example of block scope: js if (true) { let blockVar = \"I'm in a block\"; console log(blockVar); // Output: \"I'm in a block\" } consolelog(blockVar); // This will throw an error\nIn this example, blockVar is only accessible within the if block Trying to access it outside the block will result in an error Understanding these different types of scope is essential for managing variable accessibility and avoiding unintended side effects in your code Global variables should be used sparingly, as they can lead to naming conflicts and make your code harder to maintain Local variables help to keep different parts of your code isolated, which is especially useful in larger programs Block scoping with let and const provides even finer control over variable accessibility, helping to prevent errors and make your code more predictable Mastering these basic concepts of global, local, and block scope will provide a solid foundation for understanding more advanced topics --questions--\n--text--\nWhat will be the output of the following code ```js\nlet x = 10;\nfunction printX() {\nlet x = 20;\nconsole log(x);\n}\nprintX();\nconsole log(x);\n```\n--answers--\n20, 20\n--feedback--\nConsider how local scope works within functions and how it interacts with variables in the global scope 20, 10\n10, 10\n--feedback--\nConsider how local scope works within functions and how it interacts with variables in the global scope 10, 20\n--feedback--\nConsider how local scope works within functions and how it interacts with variables in the global scope --video-solution--\n2\n--text--\nWhat will be the result of trying to access blockVar outside its block in the following code js\nif (true) {\nlet blockVar = \"Hello\";\n}\nconsole log(blockVar);\n--answers--\nIt will print \"Hello\" --feedback--\nRemember how block scope works with variables declared using let It will print undefined --feedback--\nRemember how block scope works with variables declared using let It will throw a ReferenceError It will print null --feedback--\nRemember how block scope works with variables declared using let",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5049,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\673284e7244c0c1a649121b9.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "20bf55e345e7a6dc11e53035f730de52",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\673284e7244c0c1a649121b9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the result of trying to access blockVar outside its block in the following code js if (true) { let blockVar = \"Hello\"; } console log(blockVar); --answers-- It will print \"Hello\" --feedback-- Remember how block scope works with variables declared using let It will print undefined --feedback-- Remember how block scope works with variables declared using let It will throw a ReferenceError It will print null --feedback-- Remember how block scope works with variables declared using let--video-solution--\n3\n--text--\nWhich of the following correctly describes the scope of a variable declared with let at the top level of a script (outside any function or block) --answers--\nFunction scope --feedback--\nThink about where a variable declared at the top level of a script would be accessible Block scope --feedback--\nThink about where a variable declared at the top level of a script would be accessible Global scope Local scope --feedback--\nThink about where a variable declared at the top level of a script would be accessible --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5049,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-functions\\673284e7244c0c1a649121b9.md",
      "source_type": "git_repo"
    },
    "token_count": 208,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5f55f7f8baf855ad8e21f07f79579678",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\67329ffd75010f5ddeb4ea13.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67329ffd75010f5ddeb4ea13\ntitle: What Is a Callback Function, and How Does It Work with the forEach Method challengeType: 19\ndashedName: what-is-a-callback-function-and-how-does-it-work-with-the-foreach-method\n--description--\nIn JavaScript, a callback function is a function that is passed as an argument to another function and is executed after the main function has finished its execution It's a way to ensure that certain code doesn't execute until a previous operation has been completed This concept is fundamental to understanding many aspects of JavaScript, including how the forEach method works Let's start by understanding what a callback function is in a simple context Imagine you have a function that performs a task, and you want to do something after that task is complete Instead of writing all the code in one big function, you can pass a second function (the callback) to be executed when the first function is done This allows for more flexible and modular code Now, let's introduce the forEach method forEach is a built-in method for arrays in JavaScript It allows you to iterate over each element in an array and perform an operation on each element The operation you want to perform is defined in a callback function that you provide to forEach Here's an example of how forEach works with a callback function:\n```js\nlet numbers = [1, 2, 3, 4, 5];\nnumbers forEach(function(number) {\nconsole log(number * 2);\n});\n```\nIn this example, we have an array of numbers We use the forEach method on this array, and we provide a callback function as an argument to forEach This callback function takes one parameter, which represents each element in the array The forEach method will call this callback function once for each element in the array The callback function in this case multiplies each number by 2 and logs the result So, when this code runs, it will output:\nmd\n2\n4\n6\n8\n10\nIt's important to understand that the callback function is called once for each element in the array, in order forEach takes care of the looping for you, so you don't have to write a for loop yourself You can also use an arrow function as the callback, which can make your code even more concise:\njs\nlet numbers = [1, 2, 3, 4, 5];\nnumbers forEach(number => console",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4802,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\67329ffd75010f5ddeb4ea13.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9bd6db001db749accd7745145a26987b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\67329ffd75010f5ddeb4ea13.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "will output: md 2 4 6 8 10 It's important to understand that the callback function is called once for each element in the array, in order forEach takes care of the looping for you, so you don't have to write a for loop yourself You can also use an arrow function as the callback, which can make your code even more concise: js let numbers = [1, 2, 3, 4, 5]; numbers forEach(number => consolelog(number * 2));\nThis does exactly the same thing as the previous example, but with less code The callback function in forEach can actually take up to three arguments: the current element, the index of the current element, and the array that forEach was called upon Here's an example using all three:\njs\nlet numbers = [1, 2, 3, 4, 5];\nnumbers forEach((number, index, array) => {\nconsole log(`Element ${number} is at index ${index} in array ${array}`);\n});\nThis would log information about each element, its index, and the original array Understanding callback functions and methods like forEach is important as you progress in JavaScript They form the basis for many more advanced concepts in the language, particularly in asynchronous programming which you will learn about in future lectures --questions--\n--text--\nWhat is the primary purpose of a callback function in JavaScript --answers--\nTo create a new array --feedback--\nThink about why we might want to pass a function as an argument to another function To execute code after another operation has completed To define a new variable --feedback--\nThink about why we might want to pass a function as an argument to another function To replace a for loop --feedback--\nThink about why we might want to pass a function as an argument to another function --video-solution--\n2\n--text--\nHow many times does the callback function in forEach get called --answers--\nOnce --feedback--\nConsider how forEach iterates over an array Twice --feedback--\nConsider how forEach iterates over an array Once for each element in the array It depends on the size of the array --feedback--\nConsider how forEach iterates over an array --video-solution--\n3\n--text--\nWhich of the following is NOT a parameter that can be passed to the callback function in forEach --answers--\nThe current element --feedback--\nRemember the three parameters we mentioned that forEach can provide to its callback The index of the current element",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4802,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\67329ffd75010f5ddeb4ea13.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "209314438e67bad797b12547fd6425c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\67329ffd75010f5ddeb4ea13.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--feedback-- Consider how forEach iterates over an array Once for each element in the array It depends on the size of the array --feedback-- Consider how forEach iterates over an array --video-solution-- 3 --text-- Which of the following is NOT a parameter that can be passed to the callback function in forEach --answers-- The current element --feedback-- Remember the three parameters we mentioned that forEach can provide to its callback The index of the current element--feedback--\nRemember the three parameters we mentioned that forEach can provide to its callback The array forEach was called on --feedback--\nRemember the three parameters we mentioned that forEach can provide to its callback The length of the array --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4802,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\67329ffd75010f5ddeb4ea13.md",
      "source_type": "git_repo"
    },
    "token_count": 142,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "99e1a9c0dceec9969fb7d1439a8a0393",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362b3f763ae1e38e17df7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673362b3f763ae1e38e17df7\ntitle: What Is the Filter Method, and How Does It Work challengeType: 19\ndashedName: what-is-the-filter-method-and-how-does-it-work\n--description--\nThe filter method is used to create a new array with elements that pass a specified test, making it useful for selectively extracting items based on criteria In this example, we are using the filter method, to create a new array of only even numbers:\n```js\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst evenNumbers = numbers filter((num) => num % 2 === 0);\nconsole log(evenNumbers); // [2, 4, 6, 8, 10]\n```\nIn this example, the filter method applies a callback function to each element of the numbers array The callback checks whether each number is even using the modulo operator (%) If the number is even, the function returns true, and that number is included in the new array If it's odd, the function returns false, and that number is excluded Just like the map method, the callback function for the filter method accepts the same three arguments: the current element being processed, the index, and the array It's important to note that if no elements pass the test, the filter method returns an empty array ```js\nconst numbers = [2, 4, 6, 8] filter((num) => num > 10);\nconsole log(numbers); // []\n```\nfilter is incredibly versatile and can be used in many scenarios You can use it to remove null or undefined values from an array, to filter objects based on their properties, or to implement search functionality Here's an example of using the filter method to return an array of objects for individuals younger than 30 years old ```javascript\nconst developers = [\n{ name: \"Alice\", age: 25 },\n{ name: \"Bob\", age: 30 },\n{ name: \"Charlie\", age: 35 },\n{ name: \"David\", age: 25 }\n];\nconst youngPeople = developers filter((person) => person age < 30);\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4065,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362b3f763ae1e38e17df7.md",
      "source_type": "git_repo"
    },
    "token_count": 466,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "37895b19054a07606378779b6d6a10a5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362b3f763ae1e38e17df7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "an array, to filter objects based on their properties, or to implement search functionality Here's an example of using the filter method to return an array of objects for individuals younger than 30 years old ```javascript const developers = [ { name: \"Alice\", age: 25 }, { name: \"Bob\", age: 30 }, { name: \"Charlie\", age: 35 }, { name: \"David\", age: 25 } ]; const youngPeople = developers filter((person) => person age < 30); consolelog(youngPeople);\n// [{ name: \"Alice\", age: 25 }, { name: \"David\", age: 25 }]\n```\nThroughout the rest of this curriculum, you will be using the map and filter methods very frequently So, building familiarity with them will not only streamline your coding process but also help you write cleaner and more efficient code --questions--\n--text--\nWhat does the filter method return if no elements in the array pass the test --answers--\nnull\n--feedback--\nRemember what we said about the result when no elements meet the filtering condition undefined\n--feedback--\nRemember what we said about the result when no elements meet the filtering condition An empty array The original array --feedback--\nRemember what we said about the result when no elements meet the filtering condition --video-solution--\n3\n--text--\nWhich of the following best describes the purpose of the callback function in the filter method --answers--\nTo transform each element in the array --feedback--\nThink about what the callback function's return value means in the context of filter To determine which elements should be included in the new array To sort the elements in the array --feedback--\nThink about what the callback function's return value means in the context of filter To calculate a single value from all elements in the array --feedback--\nThink about what the callback function's return value means in the context of filter --video-solution--\n2\n--text--\nHow does the filter method affect the original array it's called on --answers--\nIt modifies the original array in place --feedback--\nRecall what we said about immutability and the creation of a new array It removes elements from the original array --feedback--\nRecall what we said about immutability and the creation of a new array It doesn't affect the original array at all It sorts the original array --feedback--\nRecall what we said about immutability and the creation of a new array --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4065,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362b3f763ae1e38e17df7.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fda53bd889eb60c4570859142f0f2d1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362a34edda41dedf87623.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673362a34edda41dedf87623\ntitle: What Is the Map Method, and How Does It Work challengeType: 19\ndashedName: what-is-the-map-method-and-how-does-it-work\n--description--\nThe map method is a powerful and widely used function in JavaScript that operates on arrays It is designed to create a new array by applying a given function to each element of the original array This method does not modify the original array but instead returns a new array containing the results of the function applied to each element Here is an example of using the map method on an array of numbers:\njs\nconst numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers map((num) => num * 2);\nconsole log(numbers); // [1, 2, 3, 4, 5]\nconsole log(doubled); // [2, 4, 6, 8, 10]\nTo create a new array where each number is doubled, we are using the map method The map method accepts a callback function where the function is called on every single element in the array In this case, each number in the array will be multiplied by 2 The result will be a new array of the numbers 2,4,6,8,10 The callback function can accept up to three arguments The first argument is the current element being processed js\nconst numbers = [3, 4, 5, 6, 7] map((element) => {\nconsole log(\"Element:\", element);\nreturn element * 2;\n});\nThe second argument is the index of the current element being processed js\nconst numbers = [3, 4, 5, 6, 7] map((element, index) => {\nconsole log(\"Element:\", element);\nconsole log(\"Index:\", index);\nreturn element * 2;\n});\nThe third argument is the array where map is being called on js\nconst numbers = [3, 4, 5, 6, 7] map((element, index, array) => {\nconsole log(\"Element:\", element);\nconsole log(\"Index:\", index);\nconsole log(\"Array:\", array);\nreturn element * 2;\n});\nUnderstanding and effectively using the map method can significantly improve your ability to work with arrays in JavaScript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3983,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362a34edda41dedf87623.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "f88069548e7d0e67d4cf18742a84c373",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362a34edda41dedf87623.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "5, 6, 7] map((element, index) => { console log(\"Element:\", element); console log(\"Index:\", index); return element * 2; }); The third argument is the array where map is being called on js const numbers = [3, 4, 5, 6, 7] map((element, index, array) => { console log(\"Element:\", element); console log(\"Index:\", index); console log(\"Array:\", array); return element * 2; }); Understanding and effectively using the map method can significantly improve your ability to work with arrays in JavaScriptIn future lectures, we'll dive deeper into more advanced uses of map and explore how it can be a powerful tool for building dynamic and efficient programs --questions--\n--text--\nWhat does the map method return --answers--\nThe original array, modified --feedback--\nThink about what we said regarding the result of the map operation A new array with the same number of elements as the original A single value --feedback--\nThink about what we said regarding the result of the map operation It doesn't return anything, it just modifies the original array --feedback--\nThink about what we said regarding the result of the map operation --video-solution--\n2\n--text--\nHow many arguments can the callback function in map receive --answers--\nOne The current element --feedback--\nRecall the full set of parameters we mentioned that the callback function can receive Two The current element and its index --feedback--\nRecall the full set of parameters we mentioned that the callback function can receive Three The current element, its index, and the original array It depends on how map is called --feedback--\nRecall the full set of parameters we mentioned that the callback function can receive --video-solution--\n3\n--text--\nWhich of the following is NOT a correct use of the map method --answers--\nConverting an array of strings to uppercase --feedback--\nConsider which operation doesn't fit with the idea of transforming each element into a new element Doubling each number in an array --feedback--\nConsider which operation doesn't fit with the idea of transforming each element into a new element Removing specific elements from an array Extracting a property from each object in an array --feedback--\nConsider which operation doesn't fit with the idea of transforming each element into a new element --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3983,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362a34edda41dedf87623.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f505229a0d7319fac30ba446f175aa3d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\67336296a3c1591da81856c2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67336296a3c1591da81856c2\ntitle: What Are Higher-Order Functions challengeType: 19\ndashedName: what-are-higher-order-functions\n--description--\nHigher order functions are a powerful concept in JavaScript that can significantly enhance your coding abilities and make your code more flexible and reusable In essence, a higher order function is a function that either takes one or more functions as arguments, returns a function, or both To understand higher order functions, let's first consider functions as first-class citizens in JavaScript This means that functions can be treated like any other value – they can be assigned to variables, passed as arguments to other functions, and returned from functions This flexibility is what enables the creation and use of higher order functions One common use of higher order functions is to abstract away complex operations For example, you might have a function that performs a specific operation on each element of an array Instead of writing separate functions for different operations, you can create a higher order function that takes the operation as an argument This allows you to reuse the same function structure with different behaviors Here's an example to illustrate this concept:\n```js\nfunction operateOnArray(arr, operation) {\nlet result = [];\nfor (let i = 0; i < arr length; i++) {\nresult push(operation(arr[i]));\n}\nreturn result;\n}\nfunction double(x) {\nreturn x * 2;\n}\nlet numbers = [1, 2, 3, 4, 5];\nlet doubledNumbers = operateOnArray(numbers, double);\nconsole log(doubledNumbers); // Outputs: [2, 4, 6, 8, 10]\n```\nIn this example, operateOnArray is a higher order function It takes an array and a function (operation) as arguments It then applies the operation to each element of the array The double function is passed as an argument to operateOnArray, demonstrating how functions can be used as values Higher order functions can also return functions This is particularly useful for creating specialized functions based on more general ones This concept is often referred to as function factories Here's an example:\n```js\nfunction multiplyBy(factor) {\nreturn function(number) {\nreturn number * factor;\n}\n}\nlet double = multiplyBy(2);\nlet triple = multiplyBy(3);\nconsole log(double(5)); // Outputs: 10\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5806,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\67336296a3c1591da81856c2.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "a84e364e37876a7f7810e1f506b5b737",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\67336296a3c1591da81856c2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "double function is passed as an argument to operateOnArray, demonstrating how functions can be used as values Higher order functions can also return functions This is particularly useful for creating specialized functions based on more general ones This concept is often referred to as function factories Here's an example: ```js function multiplyBy(factor) { return function(number) { return number * factor; } } let double = multiplyBy(2); let triple = multiplyBy(3); console log(double(5)); // Outputs: 10 consolelog(triple(5)); // Outputs: 15\n```\nIn this case, multiplyBy is a higher order function that returns a new function This new function is specialized based on the factor passed to multiplyBy This allows us to create custom multiplication functions with ease Higher order functions are not just a theoretical concept – they're widely used in JavaScript Many built-in methods for arrays in JavaScript, such as map(), filter(), and reduce(), are higher order functions These methods take a function as an argument and apply it to the elements of the array in various ways You will learn more about these methods in future lectures The use of higher order functions can lead to more declarative and easier-to-understand code Instead of describing step-by-step how to accomplish a task (imperative programming), higher order functions allow you to describe what you want to accomplish (declarative programming) This can make your code more readable and maintainable As you continue to work with JavaScript, you'll encounter and use higher order functions frequently They're a key part of functional programming in JavaScript and are essential for writing clean, efficient, and flexible code Understanding and utilizing higher order functions will significantly enhance your ability to write sophisticated and elegant JavaScript programs --questions--\n--text--\nWhich of the following best describes a higher order function --answers--\nA function that only works with numbers --feedback--\nThink about what we said regarding how higher order functions interact with other functions A function that takes a long time to execute --feedback--\nThink about what we said regarding how higher order functions interact with other functions A function that takes another function as an argument or returns a function A function that can only be called once --feedback--\nThink about what we said regarding how higher order functions interact with other functions --video-solution--\n3\n--text--\nWhat is a key benefit of using higher order functions --answers--\nThey always make the code run faster --feedback--\nConsider what we mentioned about the ability to reuse function structures with different behaviors",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5806,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\67336296a3c1591da81856c2.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "774bc5436c30edfd34667abbdb957cf5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\67336296a3c1591da81856c2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "interact with other functions A function that takes another function as an argument or returns a function A function that can only be called once --feedback-- Think about what we said regarding how higher order functions interact with other functions --video-solution-- 3 --text-- What is a key benefit of using higher order functions --answers-- They always make the code run faster --feedback-- Consider what we mentioned about the ability to reuse function structures with different behaviorsThey allow for more flexible and reusable code They reduce the number of variables needed in a program --feedback--\nConsider what we mentioned about the ability to reuse function structures with different behaviors They eliminate the need for loops in JavaScript\n--feedback--\nConsider what we mentioned about the ability to reuse function structures with different behaviors --video-solution--\n2\n--text--\nIn the context of higher order functions, what does it mean for functions to be \"first-class citizens\" in JavaScript --answers--\nFunctions are more important than other data types --feedback--\nRecall what we said about how functions can be treated in JavaScript Functions can only be defined at the top level of a program --feedback--\nRecall what we said about how functions can be treated in JavaScript Functions can be treated like any other value, including being passed as arguments Functions automatically have higher performance than other code --feedback--\nRecall what we said about how functions can be treated in JavaScript --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5806,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\67336296a3c1591da81856c2.md",
      "source_type": "git_repo"
    },
    "token_count": 283,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5f0292a452371d649148f9e54b1dcadd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362be2f70c21e65bc5459.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673362be2f70c21e65bc5459\ntitle: What Is the Reduce Method, and How Does It Work challengeType: 19\ndashedName: what-is-the-reduce-method-and-how-does-it-work\n--description--\nThe reduce method is a function in JavaScript that allows you to process an array and condense it into a single value This single value can be a number, a string, an object, or even another array It's called reduce because it reduces an array to a single output While it might seem complicated at first, understanding reduce can greatly simplify your code in many situations At its core, reduce works by applying a function to each element in the array, in order, passing the result of each calculation on to the next This function is often called the reducer function The reducer function takes two main parameters: an accumulator and the current value The accumulator is where you store the running result of your operations, and the current value is the array element being processed Let's look at an example to illustrate how reduce works:\n```js\nconst numbers = [1, 2, 3, 4, 5];\nconst sum = numbers reduce(\n(accumulator, currentValue) => accumulator + currentValue,\n0\n);\nconsole log(sum); // 15\n```\nIn this example, we're using reduce to get the sum of all the numbers in the array The reducer function takes the accumulator (which starts at 0, as specified by the second argument to reduce) and adds each number to it The result of each addition becomes the new accumulator for the next iteration The reduce method can also take an initial value as its second argument This is the value that the accumulator starts with In the example above, we set it to 0 If you don't provide an initial value, reduce will use the first element of the array as the initial accumulator and start the process from the second element One of the great things about reduce is its flexibility Because you define the reducer function, you have complete control over how the array is processed and what kind of result you want to produce This makes reduce extremely powerful, but it can also make it a bit challenging to understand at first With practice, you will get the hang of working with the reduce method --questions--\n--text--\nWhat does the reduce method do to an array --answers--\nIncreases the size of the array --feedback--\nThink about the end result of using reduce on an array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3968,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362be2f70c21e65bc5459.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "315b6462c09673bd394f008f2aa84d6a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362be2f70c21e65bc5459.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "over how the array is processed and what kind of result you want to produce This makes reduce extremely powerful, but it can also make it a bit challenging to understand at first With practice, you will get the hang of working with the reduce method --questions-- --text-- What does the reduce method do to an array --answers-- Increases the size of the array --feedback-- Think about the end result of using reduce on an arrayRemoves elements from the array --feedback--\nThink about the end result of using reduce on an array Transforms the array into a single value Sorts the elements of the array --feedback--\nThink about the end result of using reduce on an array --video-solution--\n3\n--text--\nIn the reduce method, what is the accumulator --answers--\nThe final result of the reduce operation --feedback--\nConsider what gets passed from one iteration to the next in a reduce operation The current element being processed --feedback--\nConsider what gets passed from one iteration to the next in a reduce operation A temporary variable used for calculations --feedback--\nConsider what gets passed from one iteration to the next in a reduce operation The running result of the reduce operation --video-solution--\n4\n--text--\nWhat happens if you don't provide an initial value to the reduce method --answers--\nIt throws an error --feedback--\nThink about what reduce needs to start its operation if no initial value is provided It uses 0 as the initial value --feedback--\nThink about what reduce needs to start its operation if no initial value is provided It uses the first element of the array as the initial value It returns the array unchanged --feedback--\nThink about what reduce needs to start its operation if no initial value is provided --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3968,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362be2f70c21e65bc5459.md",
      "source_type": "git_repo"
    },
    "token_count": 349,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "ce33448ac2071a322cfb44eed94d27af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362d7f94d551edb532d24.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673362d7f94d551edb532d24\ntitle: How Does the Sort Method Work challengeType: 19\ndashedName: how-does-the-sort-method-work\n--description--\nThere are many different ways to sort your data in programming In this lecture, we will focus on the built-in sort method in JavaScript The sort method is used to arrange the elements of an array and returns a reference to the sorted array No copy is made because the elements are sorted in place Here is the basic syntax for the sort method:\njs\narray sort(compareFunction);\nThe compareFunction is an optional parameter that specifies a function that defines the sort order We will take a look later on how to use a compare function when sorting numbers In this first example, we have an array of strings in random order js\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nOur goal is to sort the array in alphabetical order We can do this by calling the sort method on the fruits array ```js\nconst fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits sort();\nconsole log(fruits); // [\"Apple\", \"Banana\", \"Mango\", \"Orange\"]\n```\nThe result will be a sorted array of fruits in alphabetical order starting with the fruit Apple In this next example, we want to sort the following array of numbers:\njs\nconst numbers = [414, 200, 5, 10, 3];\nIf we try to use the sort method on this numbers array, we will get unexpected results ```js\nconst numbers = [414, 200, 5, 10, 3];\nnumbers sort();\nconsole log(numbers); // [10, 200, 3, 414, 5]\n```\nWe expected to see the result [3, 5, 10, 200, 414], but instead we got [10, 200, 3, 414, 5] This is because the sort method converts the elements to strings and then compares their sequences of UTF-16 code units values UTF-16 code units are the numeric values that represent the characters in the string Examples of UTF-16 code units are the numbers 65, 66, and 67 which represent the characters A, B, and C respectively",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4845,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362d7f94d551edb532d24.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "043e60b2c95ccd8d7cba52acb236a811",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362d7f94d551edb532d24.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "We expected to see the result [3, 5, 10, 200, 414], but instead we got [10, 200, 3, 414, 5] This is because the sort method converts the elements to strings and then compares their sequences of UTF-16 code units values UTF-16 code units are the numeric values that represent the characters in the string Examples of UTF-16 code units are the numbers 65, 66, and 67 which represent the characters A, B, and C respectivelySo, the number 200 appears before the number 3 in the array, because the string 200 comes before the string 3 when comparing their UTF-16 code units The solution to this problem is to provide a compare function to the sort method Here is an example of how to sort the numbers array using a compare function:\n```js\nconst numbers = [414, 200, 5, 10, 3];\nnumbers sort((a, b) => a - b);\nconsole log(numbers); // [3, 5, 10, 200, 414]\n```\nThe parameters a and b are the two elements being compared The compare function should return a negative value if a should come before b, a positive value if a should come after b, and zero if a and b are equal The first comparison is between the numbers 414 and 200 The result of 414 - 200 is 214, which is a positive value This means that 414 should come after 200 in the sorted array The next comparison is between the numbers 200 and 5 The result of 200 - 5 is 195, which is a positive value This means that 200 should come after 5 in the sorted array We repeat this process for all the elements in the array, and the result is a sorted array of numbers Even though there are many more ways to sort data in programming, the sort method in JavaScript can be useful and efficient in a lot of cases when you need to sort an array of elements --questions--\n--text--\nWhat does the sort method do in JavaScript --answers--\nIt creates a copy of the array and sorts the copy --feedback--\nThe method modifies the original array directly It sorts the elements of an array in place It only sorts numbers --feedback--\nThe method modifies the original array directly It sorts elements in descending order by default --feedback--\nThe method modifies the original array directly",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4845,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362d7f94d551edb532d24.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2664a3dc2950b4492ede57b591b8c55e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362d7f94d551edb532d24.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "when you need to sort an array of elements --questions-- --text-- What does the sort method do in JavaScript --answers-- It creates a copy of the array and sorts the copy --feedback-- The method modifies the original array directly It sorts the elements of an array in place It only sorts numbers --feedback-- The method modifies the original array directly It sorts elements in descending order by default --feedback-- The method modifies the original array directly--video-solution--\n2\n--text--\nWhy do numbers not sort as expected when using the sort method without a compare function --answers--\nThe sort method cannot sort numbers --feedback--\nConsider how JavaScript handles different data types when comparing The elements are compared as strings based on UTF-16 code units The sort method is case-sensitive --feedback--\nConsider how JavaScript handles different data types when comparing The method only works for strings --feedback--\nConsider how JavaScript handles different data types when comparing --video-solution--\n2\n--text--\nWhat should a compare function return if a should come after b --answers--\nA negative value --feedback--\nThink about the ordering of elements Zero --feedback--\nThink about the ordering of elements A positive value undefined\n--feedback--\nThink about the ordering of elements --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4845,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362d7f94d551edb532d24.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "16d95c614d3a74fab9ec6b7b4fe7f801",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362cbb475e21eab726506.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673362cbb475e21eab726506\ntitle: What Is Method Chaining, and How Does It Work challengeType: 19\ndashedName: what-is-method-chaining-and-how-does-it-work\n--description--\nMethod chaining is a programming technique that allows you to call multiple methods on the same object in a single line of code This technique can make your code more readable and concise, especially when performing a series of operations on the same object Let's look at an example using different string methods:\n```js\nconst result = \"  Hello, World \" trim() toLowerCase() replace(\"world\", \"JavaScript\");\nconsole log(result); // \"hello, JavaScript \"\n```\nIn this example, we start with a string and perform three operations in sequence: trim whitespace, convert to lowercase, and replace the string world with JavaScript Each method returns a new string, which becomes the target of the next method call Method chaining can significantly improve code readability when working with complex operations For instance, consider this example using the filter, map and reduce methods:\n```js\nconst transactions = [\n{ amount: 100, type: \"credit\" },\n{ amount: 20, type: \"cash\" },\n{ amount: 150, type: \"credit\" },\n{ amount: 50, type: \"cash\" },\n{ amount: 75, type: \"credit\" }\n];\nconst totalCreditWithBonus = transactions filter((transaction) => transaction type === \"credit\") map((transaction) => transaction amount * 1 1) reduce((sum, amount) => sum + amount, 0);\nconsole log(totalCreditWithBonus); // 357 5\n```\nIn this example, we have an array of transactions where each object has an amount and a credit card or cash type We first filter through the transactions and create a new array of just credit card transactions Then, we chain the map method to the filtered result and for each transaction amount, we multiply it by 1 1 which represents a 10% bonus Then, we take that result and chain the reduce method to add up each of the amounts which results in 357 5 While method chaining can make code more concise and readable, it's important to use it judiciously Very long chains can become difficult to debug, as it's not immediately clear which step in the chain might be causing an issue",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4379,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362cbb475e21eab726506.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b8d41f2513beb2ab5fe163f6975f3dd1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362cbb475e21eab726506.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "for each transaction amount, we multiply it by 1 1 which represents a 10% bonus Then, we take that result and chain the reduce method to add up each of the amounts which results in 357 5 While method chaining can make code more concise and readable, it's important to use it judiciously Very long chains can become difficult to debug, as it's not immediately clear which step in the chain might be causing an issueIt's often a good practice to break very long chains into multiple steps for better clarity and easier debugging --questions--\n--text--\nWhat will be the output of the following code js\nlet str = \"  HELLO world  \";\nlet result = str trim() toLowerCase() split(' ');\nconsole log(result);\n--answers--\n[\"HELLO\", \"world\"]\n--feedback--\nConsider the effect of each method in the chain: trim(), toLowerCase(), and split() [\"hello\", \"world\"]\n\"hello world\"\n--feedback--\nConsider the effect of each method in the chain: trim(), toLowerCase(), and split() [\" HELLO\", \"world \"]\n--feedback--\nConsider the effect of each method in the chain: trim(), toLowerCase(), and split() --video-solution--\n2\n--text--\nIn the context of method chaining, what should a method typically return to allow further chaining --answers--\nundefined\n--feedback--\nThink about what allows the next method in the chain to be called immediately after the current one null\n--feedback--\nThink about what allows the next method in the chain to be called immediately after the current one The object itself (this) A new object --feedback--\nThink about what allows the next method in the chain to be called immediately after the current one --video-solution--\n3\n--text--\nWhat will be the result of the following code ```js\nlet obj = {\nvalue: 1,\nincrement: function() {\nthis value++;\nreturn this;\n},\ndouble: function() {\nthis value *= 2;\nreturn this;\n},\ngetValue: function() {\nreturn this value;\n}\n};\nlet result = obj increment() double() increment() getValue();\nconsole log(result);\n```\n--answers--\n2\n--feedback--\nFollow the chain of method calls and their effects on the value property 3\n--feedback--\nFollow the chain of method calls and their effects on the value property 4\n--feedback--\nFollow the chain of method calls and their effects on the value property",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4379,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362cbb475e21eab726506.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e0744459bb47a29f9a6ed3c4cab99b73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362cbb475e21eab726506.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "}, double: function() { this value *= 2; return this; }, getValue: function() { return this value; } }; let result = obj increment() double() increment() getValue(); console log(result); ``` --answers-- 2 --feedback-- Follow the chain of method calls and their effects on the value property 3 --feedback-- Follow the chain of method calls and their effects on the value property 4 --feedback-- Follow the chain of method calls and their effects on the value property5\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4379,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362cbb475e21eab726506.md",
      "source_type": "git_repo"
    },
    "token_count": 109,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "ad2a9ed3aa9f5d98a2e36dca28215cd0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-html-tools\\672a4fa7d335bc7cfb63a392.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672a4fa7d335bc7cfb63a392\ntitle: What Is an HTML Validator, and How Can It Help You Debug Your Code challengeType: 19\ndashedName: what-is-an-html-validator\n--description--\nHTML is a very forgiving language – elements still render even when you make mistakes, like forgetting to include a closing tag Let's say you have an h2 element without a closing tag:\n```html\nArticle Topic\nSubheading 1\nSubheading 2\nSubheading 3\n```\nThe `h2` without a closing tag will still render fine This happens because browsers use a parsing algorithm that handles common errors and tries to render HTML as closely as possible to the author's intention But this could backfire sometimes Let's add a few paragraphs under the existing heading 2 tags in the code:\n```html\nArticle Topic\nLorem ipsum dolor sit amet consectetur adipisicing elit Maiores, nisi Subheading 1\nLorem, ipsum dolor sit amet consectetur adipisicing elit At, doloremque Subheading 2\nLorem ipsum dolor sit amet consectetur adipisicing elit Unde, placeat Subheading 3\nLorem ipsum dolor, sit amet consectetur adipisicing elit Tempore, illum ```\nAs a result, the paragraph element under the `h2` without a closing `h2` tag renders as heading 2 This is why you need an HTML validator An HTML validator is a tool that checks the validity of your HTML code against the standard HTML specifications It helps you identify errors and warnings in your HTML code, ensuring your web pages are correctly structured and compliant with web standards Using an HTML validator benefits not only you and your future code reviews, but also anybody else going through your code, such as your teammates and open-source contributors There are several HTML validators out there you can use The most widely accepted one is the `w3 org` markup validation service When you visit the site [`validator w3 org`](https://validator w3 org/), you can click on the `Validate by Direct Input` button and paste in your HTML code When you click on the `Check` button, then a list of results will display with the errors that need to be fixed Another HTML validator that you can use is [`jsonformatter org`](https://jsonformatter org/) You can copy and paste your HTML code inside the first editor, and when you click on the `Validate` button, it will show you any errors you have in your code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-html-tools\\672a4fa7d335bc7cfb63a392.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7980815a6dcd91abb870a24fe57053d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-html-tools\\672a4fa7d335bc7cfb63a392.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the `Validate by Direct Input` button and paste in your HTML code When you click on the `Check` button, then a list of results will display with the errors that need to be fixed Another HTML validator that you can use is [`jsonformatter org`](https://jsonformatter org/) You can copy and paste your HTML code inside the first editor, and when you click on the `Validate` button, it will show you any errors you have in your code# --questions--\n## --text--\nWhy does the browser render tags correctly even when there's an error like forgetting to close a tag ## --answers--\nHTML does not care about closing a tag ### --feedback--\nLook out for the algorithm one of the tools use for figuring out what the author intends to do ---\nThe browser's parsing algorithm figures out the errors and tries to render the tags as intended ---\nThe code editor's diffing algorithm knows what the author wants to render ### --feedback--\nLook out for the algorithm one of the tools use for figuring out what the author intends to do ---\nHTML is smart enough to know what the author wants to show ### --feedback--\nLook out for the algorithm one of the tools use for figuring out what the author intends to do ## --video-solution--\n2\n## --text--\nWhat is an HTML validator ## --answers--\nA tool for writing HTML ### --feedback--\nLook out for the tool that figures out what is wrong with an HTML code ---\nA tool for arranging HTML code ### --feedback--\nLook out for the tool that figures out what is wrong with an HTML code ---\nA tool for making HTML code work across browsers ### --feedback--\nLook out for the tool that figures out what is wrong with an HTML code ---\nA tool that checks the validity of HTML ## --video-solution--\n4\n## --text--\nWhich of these is an example of an HTML validator ## --answers--\nW3 org HTML validator\n---\nCSS Lint\n### --feedback--\nLook for the tool specifically designed to check the validity of HTML code ---\nJavaScript Debugger\n### --feedback--\nLook for the tool specifically designed to check the validity of HTML code ---\nPhotoshop\n### --feedback--\nLook for the tool specifically designed to check the validity of HTML code ## --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-html-tools\\672a4fa7d335bc7cfb63a392.md",
      "source_type": "git_repo"
    },
    "token_count": 459,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7f291bba275a3821ded3e1c1081bde3c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362e43d57b51f1ad2d466.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673362e43d57b51f1ad2d466\ntitle: How Do the every() and some() Methods Work challengeType: 19\ndashedName: how-do-the-every-and-some-methods-work\n--description--\nWhen you're working with arrays in JavaScript, there are often times when you want to check if all elements in an array meet a certain condition, or if at least one element meets a condition This is where the every() and some() methods come in handy These methods are powerful tools that can simplify your code and make it more readable Let's start with the every() method This method tests whether all elements in an array pass a test implemented by a provided function In simpler terms, it checks if every single item in your array satisfies a condition you specify The every() method returns true if the provided function returns true for all elements in the array If any element fails the test, the method immediately returns false and stops checking the remaining elements Here's an example to illustrate how every() works:\n```js\nconst numbers = [2, 4, 6, 8, 10];\nconst hasAllEvenNumbers = numbers every((num) => num % 2 === 0);\nconsole log(hasAllEvenNumbers); // true\n```\nIn this example, we're checking if all numbers in the array are even The function we provide to every() checks if each number is divisible by 2 with no remainder Since all numbers in our array are indeed even, hasAllEvenNumbers will be true Now, let's look at the some() method While every() checks if all elements pass a test, some() checks if at least one element passes the test The some() method returns true as soon as it finds an element that passes the test If no elements pass the test, it returns false Here's an example of how some() works:\n```js\nconst numbers = [1, 3, 5, 7, 8, 9];\nconst hasSomeEvenNumbers = numbers some((num) => num % 2 === 0);\nconsole log(hasSomeEvenNumbers); // true\n```\nIn this example, we're checking whether any number in the array is even The function we pass to some() is the same as before Even though most numbers in our array are odd, hasEven will be true because there's at least one even number (8) in the array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362e43d57b51f1ad2d466.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "dbd5598350b8d1ba0e433eba76484cea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362e43d57b51f1ad2d466.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "some() works: ```js const numbers = [1, 3, 5, 7, 8, 9]; const hasSomeEvenNumbers = numbers some((num) => num % 2 === 0); console log(hasSomeEvenNumbers); // true ``` In this example, we're checking whether any number in the array is even The function we pass to some() is the same as before Even though most numbers in our array are odd, hasEven will be true because there's at least one even number (8) in the arrayBoth every() and some() are very useful when you need to validate data or check for certain conditions in your arrays They can often replace more verbose loops and conditional statements, making your code cleaner and more expressive It's important to note that both methods stop executing as soon as they can determine the result For every(), this means it stops as soon as it finds a false result For some(), it stops as soon as it finds a true result This can be beneficial for performance, especially with large arrays --questions--\n--text--\nWhat does the every method return if all elements in the array satisfy the given condition --answers--\nfalse\n--feedback--\nThink about what \"every\" implies in the context of all elements meeting a condition true\nundefined\n--feedback--\nThink about what \"every\" implies in the context of all elements meeting a condition It depends on the condition --feedback--\nThink about what \"every\" implies in the context of all elements meeting a condition --video-solution--\n2\n--text--\nIf you use the some method on an empty array, what will it return --answers--\ntrue\n--feedback--\nConsider what it means for \"some\" elements to pass a test when there are no elements false\nundefined\n--feedback--\nConsider what it means for \"some\" elements to pass a test when there are no elements It will throw an error --feedback--\nConsider what it means for \"some\" elements to pass a test when there are no elements --video-solution--\n2\n--text--\nWhich method would you use to check if at least one element in an array is greater than 10 --answers--\nevery\n--feedback--\nThink about which method checks for the existence of at least one element meeting a condition some\nfilter\n--feedback--\nThink about which method checks for the existence of at least one element meeting a condition",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362e43d57b51f1ad2d466.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "4e355c9113092eba215ffdebe88f3de5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362e43d57b51f1ad2d466.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Consider what it means for \"some\" elements to pass a test when there are no elements --video-solution-- 2 --text-- Which method would you use to check if at least one element in an array is greater than 10 --answers-- every --feedback-- Think about which method checks for the existence of at least one element meeting a condition some filter --feedback-- Think about which method checks for the existence of at least one element meeting a conditionmap\n--feedback--\nThink about which method checks for the existence of at least one element meeting a condition --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4331,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-higher-order-functions-and-callbacks\\673362e43d57b51f1ad2d466.md",
      "source_type": "git_repo"
    },
    "token_count": 119,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "730ec543c8f0088801574482bbbd5cfd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-images-and-svgs\\67167835def3588873f339c6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67167835def3588873f339c6\ntitle: What Are Common Ways to Optimize Media Assets challengeType: 19\ndashedName: what-are-common-ways-to-optimize-media-assets\n--description--\nThere are three tools to consider when using media, such as images, on your web pages: the size, the format, and the compression Let's talk about the size of your images first When you are building a website, you'll often style images to display in a specific size For example, you might have an image display at a 640x480 resolution 640 represents the width while 480 represents the height in pixels When preparing your image you want to scale it to a 640x480 size to match that styling If you serve an image that is 1920x1080 but you are styling it to be much smaller, you're requiring your users to download unnecessary data A smaller resolution results in a smaller file size The next thing to consider is your file format Two of the most common file formats are PNG and JPG, but these are no longer the most ideal formats for serving images Unless you need support for older browsers, you should consider using a more optimized format, like WEBP or AVIF Finally, you can run compression algorithms on your images A compression algorithm is used to reduce the size for files or data There are options like pngcrush to compress your images locally, or you can use online compression tools However, it's worth noting that specific file formats, such as JPG, are not lossless Lossless means that the original data can be perfectly reconstructed from the compressed data If you try to compress a JPG image, it will result in a degraded quality You should keep all these things in mind when selecting images for your web pages --questions--\n--text--\nHow should you scale, or size, your images --answers--\nYour images should be smaller than the rendered size on the page --feedback--\nUsing a mismatched size can create loading or display issues Your images should be larger than the rendered size on the page --feedback--\nUsing a mismatched size can create loading or display issues Your images should be the same scale as the rendered size on the page It doesn't matter, use whatever size you'd like --feedback--\nUsing a mismatched size can create loading or display issues --video-solution--\n3\n--text--\nWhich of the following is NOT a valid image file type",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-images-and-svgs\\67167835def3588873f339c6.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "eab885f723eb9e31ac9d718e91f1d9f8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-images-and-svgs\\67167835def3588873f339c6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "can create loading or display issues Your images should be larger than the rendered size on the page --feedback-- Using a mismatched size can create loading or display issues Your images should be the same scale as the rendered size on the page It doesn't matter, use whatever size you'd like --feedback-- Using a mismatched size can create loading or display issues --video-solution-- 3 --text-- Which of the following is NOT a valid image file type--answers--\nTS\nPNG\n--feedback--\nReview the middle of the lecture to see which of these options was not mentioned JPG\n--feedback--\nReview the middle of the lecture to see which of these options was not mentioned WEBP\n--feedback--\nReview the middle of the lecture to see which of these options was not mentioned --video-solution--\n1\n--text--\nWhich file format should you never compress --answers--\nWEBP\n--feedback--\nThis format is not lossless, so compressing it would result in a degraded quality PNG\n--feedback--\nThis format is not lossless, so compressing it would result in a degraded quality JPG\nGIF\n--feedback--\nThis format is not lossless, so compressing it would result in a degraded quality --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3256,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-images-and-svgs\\67167835def3588873f339c6.md",
      "source_type": "git_repo"
    },
    "token_count": 254,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "15da98fd25bab52bcf3a759532244963",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-html-tools\\672a511bb408ec81c592eb68.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672a511bb408ec81c592eb68\ntitle: How to Use the DOM Inspector and DevTools to Debug and Build Your Projects\nchallengeType: 19\ndashedName: how-to-use-the-dom-inspector-and-devtools\n--description--\nWhen you are building out your projects, you will frequently run into issues where your programs are not working as expected Programmers often refer to issues as bugs The process of finding and fixing these bugs is known as debugging To debug your code, you will need to use some tools provided by your browser Two important tools to use would be the DOM inspector and developer tools The DOM inspector allows you to inspect the HTML structure of the page you are on The DOM stands for Document Object Model It is a tree-like structure that represents the elements on a page You will learn more about the DOM in later modules The developer tools allow you to inspect the HTML, CSS, and JavaScript of the page you are on Let's take a look at an HTML example that contains a small bug in the anchor element:\nhtml\n<a href=\"https://www freecodecamp org/larn/\">freeCodeCamp curriculum</a>\nWhen you click on the link, it will lead to a 404 page A 404 page is an error page that appears when a user tries to access a webpage that doesn't exist on the server The intent is for the link to lead to the freeCodeCamp curriculum To see what the issue might be, you can use the developer tools To open the developer tools in your browser, you can right-click on the page and select Inspect You can also use Control Shift I on your PC keyboard or Command Option I on your Mac When you open developer tools in Google Chrome, you'll see a number of tabs The first tab is called the Elements tab This tab shows you the HTML structure of the page you are on The second tab is called the Console tab This tab shows you any errors that might be occurring on the page In the situation where you have a broken link, you can check the console to see the error messages for that broken link The common message that continues to display for the broken link is the 404 error The 404 error indicates that the page is not found This lets us know that the issue is with the URL in the anchor element When you inspect the href value you will see there is a typo",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4061,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-html-tools\\672a511bb408ec81c592eb68.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "7f01c80d2b0163afccbc77ba04f38da6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-html-tools\\672a511bb408ec81c592eb68.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "In the situation where you have a broken link, you can check the console to see the error messages for that broken link The common message that continues to display for the broken link is the 404 error The 404 error indicates that the page is not found This lets us know that the issue is with the URL in the anchor element When you inspect the href value you will see there is a typoRight now the console message shows /larn against a 404, but the correct URL should be /learn When the link is corrected, then it will work as expected You will learn more about working with the developer tools throughout the certification, but this is just a short example on how it can help you debug your code --questions--\n--text--\nWhat is the process of finding and fixing bugs in your code called --answers--\nScanning --feedback--\nReview the beginning of the lecture where this was discussed Building --feedback--\nReview the beginning of the lecture where this was discussed Debugging Scripting --feedback--\nReview the beginning of the lecture where this was discussed --video-solution--\n3\n--text--\nWhat is the tree-like structure that represents the elements on a page called --answers--\nBOM\n--feedback--\nReview the beginning of the lecture where this was discussed DOM\nPython\n--feedback--\nReview the beginning of the lecture where this was discussed CSS\n--feedback--\nReview the beginning of the lecture where this was discussed --video-solution--\n2\n--text--\nWhat is the role of the \"elements\" tab in the developer tools --answers--\nIt shows you the HTML structure of the page you are on It shows you the CSS structure of the page you are on --feedback--\nThe name of this tab implies what it is used for It shows you the JavaScript structure of the page you are on --feedback--\nThe name of this tab implies what it is used for It shows you the PHP structure of the page you are on --feedback--\nThe name of this tab implies what it is used for --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4061,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-html-tools\\672a511bb408ec81c592eb68.md",
      "source_type": "git_repo"
    },
    "token_count": 409,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b1eec04d3b218f80c47f0f94f4551388",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\6716744f7245947a3dd60009.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6716744f7245947a3dd60009\ntitle: What Are the Different Target Attribute Types, and How Do They Work challengeType: 19\ndashedName: what-are-the-different-target-attribute-types\n--description--\nYou may have seen the target attribute on anchor elements, or links This important attribute tells the browser where to open the URL for the anchor element:\nhtml\n<a href=\"https://freecodecamp org\" target=\"_blank\">Visit freeCodeCamp</a>\nThere are four important possible values for this attribute Note that each value is preceded by an underscore The first value is _self, which is the default value This opens the link in the current browsing context In most cases, this will be the current tab or window The second value is _blank, which opens the link in a new browsing context Typically, this will open in a new tab But some users might configure their browsers to open a new window instead The third value is _parent, which opens the link in the parent of the current context For example, if your website has an iframe, a _parent value in that iframe would open in your website's tab/window, not in the embedded frame The fourth value is _top, which opens the link in the top-most browsing context - think \"the parent of the parent\" This is similar to _parent, but the link will always open in the full browser tab/window, even for nested embedded frames There is a fifth value, called _unfencedTop, which is currently used for the experimental FencedFrame API At the time of this lecture, you probably won't have a reason to use this one yet Selecting the right target value to control where your users end up is an important consideration when creating a website --questions--\n--text--\nHow many current target values are there to choose from --answers--\n2\n--feedback--\nDon't include the experimental _unfencedTop attribute 4\n3\n--feedback--\nDon't include the experimental _unfencedTop attribute 1\n--feedback--\nDon't include the experimental _unfencedTop attribute --video-solution--\n2\n--text--\nWhere will a link with target=\"_blank\" open --answers--\nIn a new window or tab In the same window or tab --feedback--\nYou might use this when you don't want someone to lose their place on the current page On your second monitor",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3080,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\6716744f7245947a3dd60009.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c9cb5f8d19c276e3fa385afb64cd8791",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\6716744f7245947a3dd60009.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "are there to choose from --answers-- 2 --feedback-- Don't include the experimental _unfencedTop attribute 4 3 --feedback-- Don't include the experimental _unfencedTop attribute 1 --feedback-- Don't include the experimental _unfencedTop attribute --video-solution-- 2 --text-- Where will a link with target=\"_blank\" open --answers-- In a new window or tab In the same window or tab --feedback-- You might use this when you don't want someone to lose their place on the current page On your second monitor--feedback--\nYou might use this when you don't want someone to lose their place on the current page On Camperchan's computer --feedback--\nYou might use this when you don't want someone to lose their place on the current page --video-solution--\n1\n--text--\nWhat is the default behavior when you do not set a target --answers--\nOpens in a new window or tab --feedback--\nThe default attribute type is _self Opens in the parent context --feedback--\nThe default attribute type is _self Opens in the same window or tab Does not open --feedback--\nThe default attribute type is _self --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3080,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\6716744f7245947a3dd60009.md",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0dd81502a7e436a0dd650d90ec2116df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-images-and-svgs\\6716823876aa22a68ba3e2ec.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6716823876aa22a68ba3e2ec\ntitle: What Are the Different Types of Image Licenses, and How Do They Work challengeType: 19\ndashedName: what-are-the-different-types-of-image-licenses\n--description--\nImages are considered intellectual property, this means that they are protected by copyright regulations, most often belonging to the creator By default, images are released as all rights reserved The creator, or publisher sometimes, holds all copyright for the image This means that you cannot use them in your web page unless you do one of three things: obtain written permission from the copyright holder, purchase a license from the copyright holder, or incorporate the image in a way that falls under fair use That third point is a bit tricky Fair use requires that your use of the image is both limited and transformative Some examples of fair use would be to comment on or review the art or create a parody of the image Some images might be released under a permissive license, like a Creative Commons license, or the BSD license that freeCodeCamp uses These images are available for use in your website, but you'll need to read the license to understand the rules you need to follow when using these images For example, you might be required to make your website open source, or you may not be permitted to modify the image in any way Finally, some images may be released to the public domain An image under the public domain has no copyright attached to it and is free to be used without any restrictions Images licensed specifically under the Creative Commons 0 license are considered public domain Most search engines will allow you to filter image results by a license There are also sites like Pixabay and Unsplash, which offer free-to-use images Always be mindful of the copyright and licensing when you use an image in your website --questions--\n--text--\nWhat is the default license for images --answers--\nAll rights reserved\nPermissive license\n--feedback--\nReview the beginning of the lecture to obtain the answer Public Domain\n--feedback--\nReview the beginning of the lecture to obtain the answer Creative Commons\n--feedback--\nReview the beginning of the lecture to obtain the answer --video-solution--\n1\n--text--\nWhich license releases works to the public domain --answers--\nMIT\n--feedback--\nIt's a specific Creative Commons license BSD\n--feedback--\nIt's a specific Creative Commons license Creative Commons\n--feedback--\nIt's a specific Creative Commons license",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-images-and-svgs\\6716823876aa22a68ba3e2ec.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "cac8ab858e02a404cbae396b0965b36a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-images-and-svgs\\6716823876aa22a68ba3e2ec.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Permissive license --feedback-- Review the beginning of the lecture to obtain the answer Public Domain --feedback-- Review the beginning of the lecture to obtain the answer Creative Commons --feedback-- Review the beginning of the lecture to obtain the answer --video-solution-- 1 --text-- Which license releases works to the public domain --answers-- MIT --feedback-- It's a specific Creative Commons license BSD --feedback-- It's a specific Creative Commons license Creative Commons --feedback-- It's a specific Creative Commons licenseCreative Commons 0\n--video-solution--\n4\n--text--\nHow can you find images that you are allowed to use --answers--\nSearch for images on Google and use them freely --feedback--\nReview the end of the lecture to obtain the answer Use websites like Pixabay or Unsplash Use any image from social media as long as you give credit --feedback--\nReview the end of the lecture to obtain the answer You can use any image as long as it's not watermarked --feedback--\nReview the end of the lecture to obtain the answer --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3209,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-images-and-svgs\\6716823876aa22a68ba3e2ec.md",
      "source_type": "git_repo"
    },
    "token_count": 217,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8f55a0d7f8c556228500f739cb0fade0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-images-and-svgs\\6716825aff3434a71fdc3e99.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6716825aff3434a71fdc3e99\ntitle: What Are SVGs, and When Should You Use Them challengeType: 19\ndashedName: what-are-svgs\n--description--\nFirst, you need to understand how images work Common image formats like PNG and JPG are classified as raster formats This essentially means that they are pixel-based, with the data tracking the color value in each pixel A large downside of raster based images is that they do not upscale well If you've ever tried to make a PNG larger, you may have seen that it becomes pixelated, or blurry An SVG is a different kind of image SVG stands for a scalable vector graphic A vector graphic tracks data based on paths and equations to plot points, lines, and curves What this really means is that a vector graphic, like an SVG, can be scaled to any size without impacting the quality SVGs specifically have the added benefit of storing data in XML This means you can use them directly in your code as raw HTML with the svg element It also means you can programmatically change the color of the image html\n<svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" xmlns=\"http://www w3 org/2000/svg\">\n<circle cx=\"50\" cy=\"50\" r=\"45\" stroke=\"black\" stroke-width=\"4\" fill=\"yellow\" />\n<circle cx=\"35\" cy=\"40\" r=\"5\" fill=\"black\" />\n<circle cx=\"65\" cy=\"40\" r=\"5\" fill=\"black\" />\n<path d=\"M35 65 Q50 80 65 65\" stroke=\"black\" stroke-width=\"4\" fill=\"transparent\" />\n</svg>\nThis SVG code draws a smiley face by combining a few basic elements:\nThe svg element is the container for the whole drawing It sets up the space where all the shapes appear Everything you want to draw with SVG, such as circles, lines, or paths, goes inside the svg element The circle element is used to make the face and the eyes One large circle forms the yellow face, and two smaller circles make the eyes The path element is used to draw the smile It creates a curved line for the mouth Each SVG element has attributes that control its appearance and position within the drawing area So when would you want to use an SVG A great use case is for icons",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-images-and-svgs\\6716825aff3434a71fdc3e99.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "a96b1c27f3a7913fcd3737ce9b9e85e0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-images-and-svgs\\6716825aff3434a71fdc3e99.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "svg element The circle element is used to make the face and the eyes One large circle forms the yellow face, and two smaller circles make the eyes The path element is used to draw the smile It creates a curved line for the mouth Each SVG element has attributes that control its appearance and position within the drawing area So when would you want to use an SVG A great use case is for iconsIf you want to create custom bullet points, or add icons to your links to represent social media platforms, using SVGs is the best approach One of the most popular icon libraries, Font Awesome, uses SVG images for their icons SVGs are also great for webpage logos, because they scale perfectly They allow you to adapt your layout to any responsive design you need Next time you have an SVG locally, try opening it with a text editor and playing with the code --questions--\n--text--\nWhat is a raster image --answers--\nAn image which stores paths, lines, points, and curves --feedback--\nReview the beginning of the lecture to obtain the answer An image which stores color data for each pixel All images are raster images --feedback--\nReview the beginning of the lecture to obtain the answer An image which is easily scalable --feedback--\nReview the beginning of the lecture to obtain the answer --video-solution--\n2\n--text--\nWhat is a vector image --answers--\nAn image which stores paths, lines, points, and curves An image which stores color data for each pixel --feedback--\nReview the middle of the lecture to obtain the answer All images are vector images --feedback--\nReview the middle of the lecture to obtain the answer An image which is not easily scalable --feedback--\nReview the middle of the lecture to obtain the answer --video-solution--\n1\n--text--\nHow does an SVG store data --answers--\nAs pixels --feedback--\nReview the middle of the lecture to obtain the answer As binary --feedback--\nReview the middle of the lecture to obtain the answer As hexadecimal --feedback--\nReview the middle of the lecture to obtain the answer As XML --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3966,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-images-and-svgs\\6716825aff3434a71fdc3e99.md",
      "source_type": "git_repo"
    },
    "token_count": 415,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "7728c8d4e9d51866416fcd635289028c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\671682dd88e461a8e2620f38.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 671682dd88e461a8e2620f38\ntitle: What Is the Difference Between Absolute and Relative Paths challengeType: 19\ndashedName: what-is-the-difference-between-absolute-and-relative-paths\n--description--\nA path is a string that specifies the location of a file or directory in a file system In web development, paths let developers link to resources like images, stylesheets, scripts, and other web pages There are absolute and relative paths - both are essential when specifying file locations within a file system Let's look at the two so you can decide which one of them to use and when An absolute path is a complete link to a resource It starts from the root directory, includes every other directory, and finally the filename and extension The \"root directory\" refers to the top-level directory or folder in a hierarchy An absolute path also includes the protocol - which could be http, https, and file and the domain name if the resource is on the web Here's an example of an absolute path that links to the freeCodeCamp logo:\nhtml\n<a href=\"https://design-style-guide freecodecamp org/img/fcc_secondary_small svg\">\nView fCC Logo\n</a>\nIn this example, the protocol is https, the domain name is design-style-guide freecodecamp org, and the filename is fcc_secondary_small svg Now, what if the resource you want to link to using an absolute path is on your local machine Here's how to link to the about html file with an absolute path:\n```html\nRead more on the\nAbout Page\n```\nIt looks like this because we are going into a folder called Users, then into a folder called user, then into a folder called Desktop, then into a folder called fCC, then into a folder called script-code, then into a folder called absolute-vs-relative-paths, then into a folder called pages to finally get the about html file Here's what the absolute URL looks like in the browser address bar:\nsh\nfile:///Users/user/Desktop/fCC/script-code/absolute-vs-relative-paths/pages/about html\nThe URL includes the protocol, file:// It also include the path, which looks like this: /Users/user/Desktop/fCC/script-code/absolute-vs-relative-paths/pages/, and represents the series of folders that lead to the file And finally, it also includes the about html, which is the filename and the extension",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5137,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\671682dd88e461a8e2620f38.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5fb6d67b147961ea0bd3b013f685e1a8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\671682dd88e461a8e2620f38.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "then into a folder called absolute-vs-relative-paths, then into a folder called pages to finally get the about html file Here's what the absolute URL looks like in the browser address bar: sh file:///Users/user/Desktop/fCC/script-code/absolute-vs-relative-paths/pages/about html The URL includes the protocol, file:// It also include the path, which looks like this: /Users/user/Desktop/fCC/script-code/absolute-vs-relative-paths/pages/, and represents the series of folders that lead to the file And finally, it also includes the about html, which is the filename and the extensionNow, lets look at the relative path A relative path specifies the location of a file relative to the directory of the current file It does not include the protocol or the domain name, making it shorter and more flexible for internal links within the same website Here's an example of linking to the about html page from the contact html page, both of which are in the same folder:\n```html\nRead more on the\nAbout Page\n```\nSo imagine you are on the contact html page, and because the about html page is in the same place, you simply get the filename This is an example of using a relative file path So, which should you use and when; an absolute path or a relative path Here are the rules you should follow:\nUse absolute paths when linking to a resource hosted on an external website Use absolute paths when you need the link to a page or resource to work consistently regardless of the document location within the site Use relative paths when linking to resources within the same website Use relative paths if you want to keep your code cleaner and easier to maintain during development Use relative paths during local testing to ensure links work without an internet connection --questions--\n--text--\nWhat are the two types of paths --answers--\nResolute and absolute paths --feedback--\nOne type starts from the root and the other depends on the current location Absolute and ultimate paths --feedback--\nOne type starts from the root and the other depends on the current location Relative and unique paths --feedback--\nOne type starts from the root and the other depends on the current location Absolute and relative paths --video-solution--\n4\n--text--\nHow do you link to a resource available only on the internet --answers--\nAbsolute path Relative path --feedback--\nThink about the path that has to have an http or https protocol Both relative and absolute paths --feedback--\nThink about the path that has to have an http or https protocol",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5137,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\671682dd88e461a8e2620f38.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "b95b5cf29a6288f227aa57b5848684c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\671682dd88e461a8e2620f38.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Relative and unique paths --feedback-- One type starts from the root and the other depends on the current location Absolute and relative paths --video-solution-- 4 --text-- How do you link to a resource available only on the internet --answers-- Absolute path Relative path --feedback-- Think about the path that has to have an http or https protocol Both relative and absolute paths --feedback-- Think about the path that has to have an http or https protocolNone of the above --feedback--\nThink about the path that has to have an http or https protocol --video-solution--\n1\n--text--\nWhich protocol is used for an absolute path on a local machine --answers--\nhttp://\n--feedback--\nThink about the protocol for accessing local files https://\n--feedback--\nThink about the protocol for accessing local files file://\nlocalhost\n--feedback--\nThink about the protocol for accessing local files --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5137,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\671682dd88e461a8e2620f38.md",
      "source_type": "git_repo"
    },
    "token_count": 186,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b029e1933b11754070f6933da720b8dd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\6716830dbaf95da9564f2e3b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6716830dbaf95da9564f2e3b\ntitle: What Is the Difference Between Slashes, a Single Dot, and Double Dot in Path Syntax challengeType: 19\ndashedName: what-is-the-difference-between-slashes-a-single-dot-and-double-dot-in-path-syntax\n--description--\nYou may have seen links like /public/logo png, /script js, or /styles css before But what do these special types of links mean These are called file paths There are three key syntaxes to know First is the slash, which can be a backslash (\\) or forward slash (/) depending on your operating system The second is the single dot ( ) And finally, we have the double dot ( ) The slash is known as the \"path separator\" It is used to indicate a break in the text between folder or file names This is how your computer knows that naomis-files/ points to a directory of that same name, while naomis/files/ points to a files directory in the naomis directory A single dot points to the current directory, and two dots point to the parent directory You will typically see a single dot used to ensure that the path is recognized as a relative path Remember that you learned in a previous lecture about relative versus absolute paths before Double dots, however, are much more common to access files outside of the current working directory For example, given this file tree:\nsh\nmy-app/\n├─ public/\n│  ├─ favicon ico\n│  ├─ index html\n├─ src/\n│  ├─ index css\n│  ├─ index js\nIf your public/index html file needed to load the favicon ico file, you would use a relative path with a single dot to access the current directory: /favicon ico If your public/index html file needed to load the index css file, you would use a relative path with double dots to navigate to the parent my-app directory first, then to the src directory, and finally to your file: /src/index css --questions--\n--text--\nWhich option is an absolute path --answers--\n/public/styles css /script js\n--feedback--\nAn absolute path starts with a slash /src/nav html\n--feedback--\nAn absolute path starts with a slash https://freecodecamp org\n--feedback--\nAn absolute path starts with a slash --video-solution--\n1\n--text--\nWhich option is a relative path to the current directory --answers--\n/public/styles",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3108,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\6716830dbaf95da9564f2e3b.md",
      "source_type": "git_repo"
    },
    "token_count": 509,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "ac0608758455e85a9cf062700fdb4156",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\6716830dbaf95da9564f2e3b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to navigate to the parent my-app directory first, then to the src directory, and finally to your file: /src/index css --questions-- --text-- Which option is an absolute path --answers-- /public/styles css /script js --feedback-- An absolute path starts with a slash /src/nav html --feedback-- An absolute path starts with a slash https://freecodecamp org --feedback-- An absolute path starts with a slash --video-solution-- 1 --text-- Which option is a relative path to the current directory --answers-- /public/stylescss\n--feedback--\nA single dot points to the current directory /script js /src/nav html\n--feedback--\nA single dot points to the current directory https://freecodecamp org\n--feedback--\nA single dot points to the current directory --video-solution--\n2\n--text--\nWhich option is a relative path to the parent directory --answers--\n/public/styles css\n--feedback--\nA double dot points to the parent directory /script js\n--feedback--\nA double dot points to the parent directory /src/nav html\nhttps://freecodecamp org\n--feedback--\nA double dot points to the parent directory --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3108,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\6716830dbaf95da9564f2e3b.md",
      "source_type": "git_repo"
    },
    "token_count": 249,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "f0d24d08297fa8787ce978292722fb04",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\67168323932391a9ee0d3a9e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67168323932391a9ee0d3a9e\ntitle: What Are the Different Link States, and Why Are They Important challengeType: 19\ndashedName: what-are-the-different-link-states\n--description--\nYou may have seen a link on a web page become purple after you click it This is because the state of the link has changed, so different styling gets applied There are five different states a link can be in The first is the default state, which is :link This state represents a link which the user has not visited, clicked, or interacted with yet You can think of this state as providing the base styles for all links on your page The other states build on top of it The second state is :visited, which applies when a user has already visited the page being linked to By default, this turns the link purple - but you can leverage CSS to provide a different visual indication to the user This is helpful to let someone know they have already read a portion of your documentation Or, that the site is one they can trust because they have used it before The third state is :hover This state applies when a user is hovering their cursor over a link This state is helpful for providing extra attention to a link, to ensure a user actually intends to click it Then we have :focus This state applies when we focus on a link And finally, we have :active This state applies to links that are being activated by the user This typically means clicking on the link with the primary mouse button by left clicking, in most cases This state can be helpful for showing a user that the element they clicked on is interactive When you use these states to style your links, there is a specific order you need to write your CSS in: link, visited, hover, focus, then active You should now know how to give links in your page your own personal flair, while still providing the important information a user needs about the state of each link --questions--\n--text--\nWhat is the default state of a link --answers--\n:link\n:visited\n--feedback--\nA user has not visited or interacted with a link in this state :hover\n--feedback--\nA user has not visited or interacted with a link in this state :active\n--feedback--\nA user has not visited or interacted with a link in this state --video-solution--\n1\n--text--\nWhich state applies while a user is clicking the link",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3174,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\67168323932391a9ee0d3a9e.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "63b37d4b1236fd79479dc88e3f42a83b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\67168323932391a9ee0d3a9e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "about the state of each link --questions-- --text-- What is the default state of a link --answers-- :link :visited --feedback-- A user has not visited or interacted with a link in this state :hover --feedback-- A user has not visited or interacted with a link in this state :active --feedback-- A user has not visited or interacted with a link in this state --video-solution-- 1 --text-- Which state applies while a user is clicking the link--answers--\n:link\n--feedback--\nClicking a link activates it :visited\n--feedback--\nClicking a link activates it :hover\n--feedback--\nClicking a link activates it :active\n--video-solution--\n4\n--text--\nIn what order should you style your links --answers--\nvisited, link, active, hover --feedback--\nReview the last part of the lecture for the answer link, active, hover, visited --feedback--\nReview the last part of the lecture for the answer hover, active, link, visited --feedback--\nReview the last part of the lecture for the answer link, visited, hover, active --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3174,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-links\\67168323932391a9ee0d3a9e.md",
      "source_type": "git_repo"
    },
    "token_count": 238,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "62549f531a6554b9dde01e4081f66cb4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c04638420641dcca2e6e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732c04638420641dcca2e6e\ntitle: How Does the For of Loop Work, and When Should You Use It challengeType: 19\ndashedName: how-does-the-for-of-loop-work-and-when-should-you-use-it\n--description--\nA for of loop is used when you need to loop over values from an iterable Examples of iterables would be arrays, and strings Here is the basic syntax for a for of loop:\njs\nfor (variable of iterable) {\n// code block to be executed\n}\nThe variable in the example represents the current value of the iterable that is being looped over If you have an array of numbers, the variable would be the current number in the array If you have a string, the variable would be the current character in the string Let's take a look at a few examples so you can better understand how the for of loop works In this first example we have an array of numbers and we want to loop over each number and log it to the console ```js\nconst numbers = [1, 2, 3, 4, 5];\nfor (const num of numbers) {\nconsole log(num);\n}\n```\nWe have created a variable called num that will represent the current number in the array For iteration 1, num will be 1, for iteration 2, num will be 2, and so on Inside the loop, we are logging the current number to the console Here is another example where we have a string and we want to loop over each character and log it to the console ```js\nconst str = 'freeCodeCamp';\nfor (let char of str) {\nconsole log(char);\n}\n```\nIn this example, we have created a variable called char that will represent the current character in the string For each iteration, the loop will log the current character to the console It is important to note that you can use let, or const when declaring the variable in a for of loop If you are going to use const though, make sure that the value of the variable does not change inside the loop If it does, you will get an error Here is an example of using const that results in an error:\n```js\nconst numbers = [1, 2, 3, 4, 5];\nfor (const num of numbers) {\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5234,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c04638420641dcca2e6e.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "9e8b6bbd50d6f8e35d4ebfe806ac6827",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c04638420641dcca2e6e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to note that you can use let, or const when declaring the variable in a for of loop If you are going to use const though, make sure that the value of the variable does not change inside the loop If it does, you will get an error Here is an example of using const that results in an error: ```js const numbers = [1, 2, 3, 4, 5]; for (const num of numbers) { consolelog(num);\nnum = num + 1; // This will cause an error\n}\n```\nIn this example, we are trying to change the value of num inside the loop Since we declared num with const, we will get an error So, if you need to change the value of the variable inside the loop, use let instead Let's take a look at one last example dealing with an array of objects ```js\nconst people = [\n{ name: 'John', age: 30 },\n{ name: 'Jane', age: 25 },\n{ name: 'Jim', age: 40 }\n];\nfor (const person of people) {\nconsole log(${person name} is ${person age} years old);\n}\n```\nIn this example, we have an array of objects called people Each object has a name and age property When we loop through the array, we create a variable called person that will represent the current object in the array Inside the loop, we are outputting a message to the console The first message will be John is 30 years old, the second message will be Jane is 25 years old, and the third message will be Jim is 40 years old for of loops are really useful when you need to loop over values from an iterable like an array or a string They are also easy to read and can make your code more concise --questions--\n--text--\nWhat will be the output of the following code ```js\nconst colors = ['red', 'green', 'blue'];\nfor (const color of colors) {\nconsole log(color);\n}\n```\n--answers--\nmd\nred\ngreen\nblue\nmd\nred\nred\nred\n--feedback--\nThink about what the color variable represents in the loop md\ncolor\ncolor\ncolor\n--feedback--\nThink about what the color variable represents in the loop md\nblue\nblue\nred\nred\ngreen\ngreen\n--feedback--\nThink about what the color variable represents in the loop",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5234,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c04638420641dcca2e6e.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e21e4511c596282928c001c0f31bc121",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c04638420641dcca2e6e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the output of the following code ```js const colors = ['red', 'green', 'blue']; for (const color of colors) { console log(color); } ``` --answers-- md red green blue md red red red --feedback-- Think about what the color variable represents in the loop md color color color --feedback-- Think about what the color variable represents in the loop md blue blue red red green green --feedback-- Think about what the color variable represents in the loop--video-solution--\n1\n--text--\nWhat happens if you try to reassign a value to a variable declared with const inside a for of loop --answers--\nThe value is reassigned successfully --feedback--\nThink about what const means and how it relates to reassigning values The loop will skip the iteration where the reassignment occurs --feedback--\nThink about what const means and how it relates to reassigning values An error will occur The loop will terminate immediately --feedback--\nThink about what const means and how it relates to reassigning values --video-solution--\n3\n--text--\nIn the following code snippet, what is logged to the console ```js\nconst fruits = ['apple', 'banana', 'cherry'];\nfor (let fruit of fruits) {\nconsole log(fruit toUpperCase());\n}\n```\n--answers--\nmd\nAPPLE\nAPPLE\nAPPLE\n--feedback--\nThink about what the fruit variable represents in the loop and how the toUpperCase method works md\napple\nbanana\ncherry\n--feedback--\nThink about what the fruit variable represents in the loop and how the toUpperCase method works md\nAPPLE\nBANANA\nCHERRY\nmd\nFRUIT\nFRUIT\nFRUIT\n--feedback--\nThink about what the fruit variable represents in the loop and how the toUpperCase method works --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5234,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c04638420641dcca2e6e.md",
      "source_type": "git_repo"
    },
    "token_count": 370,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "3d82ef21572bbf6d2a2fed4eb5311b78",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\67329f7f3d1bd75c17896c66.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67329f7f3d1bd75c17896c66\ntitle: How Do Loops and Iteration Work in JavaScript challengeType: 19\ndashedName: how-do-loops-and-iteration-work-in-javascript\n--description--\nLoops in programming are used to repeat a block of code multiple times An example of a loop would be when you are designing a program that needs to print out a list of items You could use a loop to print out each one of the items in the list Another example would be when you designing a game and you want to move a character across the screen You could use a loop to move the character a certain number of pixels each time the loop runs In JavaScript, there are several types of loops that you can use In this lecture, we will cover the for loop Here is the basic syntax for a for loop:\njs\nfor (initialization; condition; increment or decrement) {\n// code block to be executed\n}\nThe initialization statement is executed before the loop starts It is typically used to initialize a counter variable A counter variable is a variable that is used to keep track of how many times the loop has run The condition statement is evaluated before each iteration of the loop An iteration is a single pass through the loop If the condition is true, the code block inside the loop is executed If the condition is false, the loop stops and you move on to the next block of code The last part of the loop is the increment/decrement statement This statement is executed after each iteration of the loop It is typically used to increment or decrement the counter variable js\nfor (let i = 0; i < 5; i++) {\nconsole log(i);\n}\nIn the first part of the example above, we initialize a counter variable i to 0 It is common convention to use i as the counter variable in a for loop The next part is to check the condition In this case, the condition is checking if i is less than 5 Since i is 0, the condition is true, and the code block inside the loop is executed The code block inside the loop is to log the value of i to the console The value of i is 0, so the console will show the value of 0 Then the increment statement is executed In this case, we are incrementing i by 1 So i is now 1 Then we check the condition again which is to check if i is less than 5",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4695,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\67329f7f3d1bd75c17896c66.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "92dde6ba1ab7b1c063c5c0f35c226122",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\67329f7f3d1bd75c17896c66.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and the code block inside the loop is executed The code block inside the loop is to log the value of i to the console The value of i is 0, so the console will show the value of 0 Then the increment statement is executed In this case, we are incrementing i by 1 So i is now 1 Then we check the condition again which is to check if i is less than 5Since i is now 1, the condition is still true, and the code block inside the loop is executed again We keep repeating this process until the condition is false In this case, when i is 5, the condition is false, and the loop stops When you're working with loops you should be careful not to create a condition that is always true If you do, the loop will run forever and your program will crash This is known as an infinite loop It is possible to create nested for loops A nested loop is when you place one loop inside of another We will see examples of when you might want to do this later on Loops can be beneficial in programming when you need to repeat a block of code a certain number of times Even though working with for loops can be tricky at first,  with practice you will get the hang of it --questions--\n--text--\nWhat is the purpose of the initialization statement in a for loop --answers--\nTo execute code repeatedly --feedback--\nThink about when the loop should start counting at To check if the loop should continue running --feedback--\nThink about when the loop should start counting at To set up a counter variable before the loop starts To increment or decrement the counter variable --feedback--\nThink about when the loop should start counting at --video-solution--\n3\n--text--\nWhat happens if the condition in a for loop is always true --answers--\nThe loop will run a limited number of times --feedback--\nThink about what an infinite loop is The loop will run once and then stop --feedback--\nThink about what an infinite loop is The loop will never execute --feedback--\nThink about what an infinite loop is The loop will run forever and may cause the program to crash --video-solution--\n4\n--text--\nIn the following for loop example, what will be the output js\nfor (let i = 2; i <= 6; i += 2) {\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4695,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\67329f7f3d1bd75c17896c66.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "07782f8f6110cfb55480e0c07c3d3bcb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\67329f7f3d1bd75c17896c66.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Think about what an infinite loop is The loop will run once and then stop --feedback-- Think about what an infinite loop is The loop will never execute --feedback-- Think about what an infinite loop is The loop will run forever and may cause the program to crash --video-solution-- 4 --text-- In the following for loop example, what will be the output js for (let i = 2; i <= 6; i += 2) { consolelog(i);\n}\n--answers--\n2, 4, 6\n2, 3, 4, 5, 6\n--feedback--\nPay close attention to the condition and increment statements 2, 4, 6, 8\n--feedback--\nPay close attention to the condition and increment statements 1, 2, 3, 4, 5, 6\n--feedback--\nPay close attention to the condition and increment statements --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4695,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\67329f7f3d1bd75c17896c66.md",
      "source_type": "git_repo"
    },
    "token_count": 196,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5b31174d186aafa903301743a5d3b9e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c05595ca7d422b9e55ff.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732c05595ca7d422b9e55ff\ntitle: What Is the For in Loop, and When Should You Use It challengeType: 19\ndashedName: what-is-the-for-in-loop-and-when-should-you-use-it\n--description--\nA for in loop is best used when you need to loop over the properties of an object This loop will iterate over all enumerable properties of an object, including inherited properties and non-numeric properties An inherited property is a property that is inherited from the object's prototype chain A non-numeric property is a property that is not a number or a string that can be converted to a number Here is the basic syntax of a for in loop:\njs\nfor (variable in object) {\n// code block to be executed\n}\nThe variable in the example represents the current property of the object that is being looped over Let's take a look at a few examples so you can better understand how the for in loop works In this first example we have a fruit object and we want to loop over each property and log the value to the console ```js\nconst fruit = {\nname: 'apple',\ncolor: 'red',\nprice: 0 99\n};\nfor (const prop in fruit) {\nconsole log(fruit[prop]);\n}\n```\nThe prop variable represents the current property of the object fruit[prop] is used to access the value of each property For the first iteration, prop will be name For the second iteration, prop will be color, and so on The results logged to the console will be apple, red, and 0 99 In this second example, we have a nested object and we want to loop over each property and log the value to the console ```js\nconst person = {\nname: 'John',\nage: 30,\naddress: {\nstreet: '123 Main St',\ncity: 'Anytown',\nstate: 'CA'\n}\n};\nfor (const prop in person) {\nconsole log(person[prop]);\n}\n```\nThe address property is an object itself The for in loop will also loop over the properties of the person object and log the entire address object to the console Here is what the result will look like in the console:\nmd\nJohn\n30\n{ street: '123 Main St', city: 'Anytown', state: 'CA' }\nIf you want to loop over the properties of the address object, you can nest another for",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5868,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c05595ca7d422b9e55ff.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5c6626a3916ba64d992042ed09c3a035",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c05595ca7d422b9e55ff.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "{ console log(person[prop]); } ``` The address property is an object itself The for in loop will also loop over the properties of the person object and log the entire address object to the console Here is what the result will look like in the console: md John 30 { street: '123 Main St', city: 'Anytown', state: 'CA' } If you want to loop over the properties of the address object, you can nest another forin loop inside the first one ```js\nfunction isObject(obj) {\nreturn typeof obj === 'object' && Array isArray(obj) && obj == null;\n}\nfor (const prop in person) {\nif (isObject(person[prop])) {\nfor (const nestedProp in person[prop]) {\nconsole log(person[prop][nestedProp]);\n}\n} else {\nconsole log(person[prop]);\n}\n}\n```\nIn this example have a custom function isObject that checks if the value is an object The Array isArray method is used to check if the value is an array By placing the logical NOT operator ( ) in front of the method, we are checking if the value is not an array The reason why we can't just use typeof equals 'object' is because arrays are also considered objects in JavaScript We want to exclude arrays from the check Also, due to a historical bug in JavaScript, typeof null returns 'object' So we want to also exclude null values from the check If the condition is true, we nest another for in loop that will loop over the properties of the nested object and log the value to the console The nestedProp variable represents the current property of the nested object Here is what the modified result will look like in the console:\nmd\n\"John\"\n30\n\"123 Main St\"\n\"Anytown\"\n\"CA\"\nA for in loop is useful when you need to loop over the properties of an object It is not recommended to use a for in loop to loop over the elements of an array Instead, use a for of loop or other array methods like forEach, map, filter, and reduce, which you will learn about in future lessons --questions--\n--text--\nWhat will be the output of the following code ```js\nconst fruit = {\nname: 'apple',\ncolor: 'red',\nprice: 0 99\n};\nfor (const prop in fruit) {\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5868,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c05595ca7d422b9e55ff.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2ef144a85b3955e5a90cbb804893bf82",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c05595ca7d422b9e55ff.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of an object It is not recommended to use a for in loop to loop over the elements of an array Instead, use a for of loop or other array methods like forEach, map, filter, and reduce, which you will learn about in future lessons --questions-- --text-- What will be the output of the following code ```js const fruit = { name: 'apple', color: 'red', price: 0 99 }; for (const prop in fruit) { consolelog(fruit[prop]);\n}\n```\n--answers--\njs\napple\napple\napple\n--feedback--\nReview the beginning of the lecture to learn what the for in loop does js\nname\ncolor\nprice\n--feedback--\nReview the beginning of the lecture to learn what the for in loop does js\napple\nred\n0 99\njs\nfruit\nfruit\nfruit\n--feedback--\nReview the beginning of the lecture to learn what the for in loop does --video-solution--\n3\n--text--\nWhy is it generally not recommended to use a for in loop to iterate over the elements of an array --answers--\nfor in only iterates over array methods, not elements --feedback--\nConsider the types of properties and indices for in can access for in iterates over all enumerable properties, including inherited properties and non-numeric properties, which may lead to unexpected results for in loops are slower compared to other array iteration methods --feedback--\nConsider the types of properties and indices for in can access for in cannot handle arrays with non-numeric indices --feedback--\nConsider the types of properties and indices for in can access --video-solution--\n2\n--text--\nWhy is the isObject function necessary in the nested loop example --answers--\nTo check if the value is a string --feedback--\nThink about the additional checks needed to check if the value is an object literal To ensure that the value is neither an array nor null To verify that the value is an integer --feedback--\nThink about the additional checks needed to check if the value is an object literal To convert the value to an object --feedback--\nThink about the additional checks needed to check if the value is an object literal --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5868,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c05595ca7d422b9e55ff.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8de1a7bca018f41f043e1b23bb4a33c5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c06654ea3442724284fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732c06654ea3442724284fe\ntitle: What Is a While Loop, and How Does It Differ from the Do while Loop challengeType: 19\ndashedName: what-is-a-while-loop-and-how-does-it-differ-from-the-do-while-loop\n--description--\nIn previous lectures, you learned how to work with for loops, for in loops and for of loops In this lecture, you will learn about the while loop and the do while loop A while loop will run a block of code as long as the condition is true Here is the basic syntax for a while loop:\njs\nwhile (condition) {\n// code block to be executed\n}\nThe condition is checked before the block of code is executed If the condition is false, the block of code will not be executed while loops are useful when you do not know how many times you need to run the block of code Here is an example of using a while loop to validate user input:\n```js\nlet userInput = prompt(\"Please enter a number between 1 and 10\");\nwhile (isNaN(userInput) || Number(userInput) < 1 || Number(userInput) > 10) {\nuserInput = prompt(\"Invalid input Please enter a number between 1 and 10 \");\n}\nalert(\"You entered a valid number \");\n```\nIn this example, we are using the prompt method to ask for user input Then, the while loop first checks if the userInput is NaN Remember that NaN is \"Not a Number\" isNaN checks whether the value is NaN and that NaN is the result of an invalid number conversion because it's not a number So if the user types in random characters or nothing at all, then they will be prompted with the message again The while loop is also checking if the userInput, when converted to a number, is between 1 and 10 We are using the Number constructor here because a prompt will return a string and we want only want to be explicitly checking numbers here If the user input is not between 1 and 10, the while loop will continue to prompt the user to enter a number between 1 and 10 Once the user enters a valid number, the while loop will exit and an alert will be displayed to the user Another loop similar to the while loop would be the do while loop Here is the basic syntax:\njs\ndo {\n// code block to be executed\n} while (condition);\nOne key difference between a do",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c06654ea3442724284fe.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ea5d9b17a1f89513a6bcdd16652494c9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c06654ea3442724284fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and 10, the while loop will continue to prompt the user to enter a number between 1 and 10 Once the user enters a valid number, the while loop will exit and an alert will be displayed to the user Another loop similar to the while loop would be the do while loop Here is the basic syntax: js do { // code block to be executed } while (condition); One key difference between a dowhile loop and a while loop is that the do while loop will execute the block of code at least once before checking the condition If the condition is true, the block of code will continue to execute If the condition is false, the block of code will stop executing Here is an example of using a do while loop to validate user input:\n```js\nlet userInput;\ndo {\nuserInput = prompt(\"Please enter a number between 1 and 10\");\n} while (Number(userInput) < 1 || Number(userInput) > 10);\nalert(\"You entered a valid number \");\n```\nIn this example, we have a variable called userInput and have not assigned a value to it Then we have a do while loop that will prompt the user to enter a number between 1 and 10 Then the while loop will check if the user input is less than 1 or greater than 10 If the input is not between 1 and 10, the do while loop will continue to prompt the user to enter a number between 1 and 10 Once the user complies and enters a valid number, the do while loop will exit and an alert will be displayed to the user In most cases, you will probably use the while loop more often than the do while loop However, it is good to know both types of loops and when to use them --questions--\n--text--\nWhat is the main difference between a while loop and a do while loop --answers--\nA while loop executes the code block at least once, whereas a do while loop does not --feedback--\nConsider which loop executes its code block before checking the condition A do while loop executes the code block at least once, whereas a while loop does not A while loop and a do while loop are exactly the same and have no differences --feedback--\nConsider which loop executes its code block before checking the condition A while loop checks the condition after executing the code block, whereas a do while loop checks the condition before --feedback--\nConsider which loop executes its code block before checking the condition",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c06654ea3442724284fe.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e8a4493503d8545d91042c59d9092586",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c06654ea3442724284fe.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "do while loop executes the code block at least once, whereas a while loop does not A while loop and a do while loop are exactly the same and have no differences --feedback-- Consider which loop executes its code block before checking the condition A while loop checks the condition after executing the code block, whereas a do while loop checks the condition before --feedback-- Consider which loop executes its code block before checking the condition--video-solution--\n2\n--text--\nIn which situation would you prefer to use a do while loop over a while loop --answers--\nWhen you need to execute a block of code zero or more times --feedback--\nThink about which loop guarantees at least one execution of its code block When you need to execute a block of code at least once before checking the condition When the number of iterations is known beforehand --feedback--\nThink about which loop guarantees at least one execution of its code block When you want to ensure the loop never executes --feedback--\nThink about which loop guarantees at least one execution of its code block --video-solution--\n2\n--text--\nWhat happens if the condition in a while loop is initially false --answers--\nThe code block inside the loop will execute once and then stop --feedback--\nReview what occurs if the condition is not met at the start of a while loop The code block inside the loop will not execute at all The code block inside the loop will execute indefinitely --feedback--\nReview what occurs if the condition is not met at the start of a while loop The loop will terminate immediately and produce an error --feedback--\nReview what occurs if the condition is not met at the start of a while loop --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5759,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c06654ea3442724284fe.md",
      "source_type": "git_repo"
    },
    "token_count": 334,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "cc02d7cdd09e3ce0e20f810b6162e5f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c07238355642a9781dfb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732c07238355642a9781dfb\ntitle: What Are the Break and Continue Statements Used for in Loops challengeType: 19\ndashedName: what-are-the-break-and-continue-statements-used-for-in-loops\n--description--\nA break statement is used to exit a loop early, while a continue statement is used to skip the current iteration of a loop and move to the next one Here is an example of using a break statement in a for loop:\njs\nfor (let i = 0; i < 10; i++) {\nif (i === 5) {\nbreak;\n}\nconsole log(i);\n}\nIn the example above, the loop starts counting at 0 and while i is less then 10, the loop will continue to run Inside the loop, we check if i is equal to 5 If it is, we use the break statement to exit the loop early If not, we log the value of i to the console So the output of the code will print the numbers 0, 1, 2, 3, and 4 The break statement is useful when you want to exit a loop early based on a certain condition For example, if you are searching for a specific value in an array, you can use a break statement to exit the loop once you find the value Sometimes you may want to skip a particular iteration of a loop without exiting the loop entirely This is where the continue statement comes in Here is an example of using a continue statement in a for loop:\njs\nfor (let i = 0; i < 10; i++) {\nif (i === 5) {\ncontinue;\n}\nconsole log(i);\n}\nJust like before, we have initialized i to 0 and have a condition that will run the loop as long as i is less than 10 Inside the loop, when i is equal to 5, we use the continue statement to skip the current iteration and move to the next one The output of this code will print the numbers 0, 1, 2, 3, 4, 6, 7, 8, and 9 The number 5 is skipped because of the continue statement Another thing you can do with both the break and continue statements is to use labels to specify which loop you want to break or continue",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c07238355642a9781dfb.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b8fe20c80255b28f76b2c6b0c6091023",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c07238355642a9781dfb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "i is equal to 5, we use the continue statement to skip the current iteration and move to the next one The output of this code will print the numbers 0, 1, 2, 3, 4, 6, 7, 8, and 9 The number 5 is skipped because of the continue statement Another thing you can do with both the break and continue statements is to use labels to specify which loop you want to break or continueThis is useful when you have nested loops and you want to control the flow of the outer loop from within the inner loop Here is an example of using labels with the break statement:\njs\nouterLoop: for (let i = 0; i < 3; i++) {\ninnerLoop: for (let j = 0; j < 3; j++) {\nif (i === 1 && j === 1) {\nbreak outerLoop;\n}\nconsole log(`i: ${i}, j: ${j}`);\n}\n}\nIn this example, we have an outer for loop labeled outerLoop and an inner for loop labeled innerLoop When i is equal to 1 and j is equal to 1, we use the break statement with the outerLoop label to exit the outer loop early This will exit both the inner and outer loops The output of this code will log the following to the console:\nmd\n\"i: 0, j: 0\"\n\"i: 0, j: 1\"\n\"i: 0, j: 2\"\n\"i: 1, j: 0\"\nMost of the time you will not find the need to use labels with the break and continue statements, but it is good to know that you have that option if you ever need it --questions--\n--text--\nWhat is the purpose of the break statement in a loop --answers--\nTo skip the current iteration and continue with the next one --feedback--\nThe name implies that it allows you to \"break\" out of the loop To exit the loop immediately To stop the program execution --feedback--\nThe name implies that it allows you to \"break\" out of the loop To restart the loop from the beginning --feedback--\nThe name implies that it allows you to \"break\" out of the loop --video-solution--\n2\n--text--\nWhat happens when the continue statement is encountered inside a loop --answers--\nThe loop exits immediately",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c07238355642a9781dfb.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "cc6cd95e9594f621fbca4d243d61ff23",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c07238355642a9781dfb.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "name implies that it allows you to \"break\" out of the loop To exit the loop immediately To stop the program execution --feedback-- The name implies that it allows you to \"break\" out of the loop To restart the loop from the beginning --feedback-- The name implies that it allows you to \"break\" out of the loop --video-solution-- 2 --text-- What happens when the continue statement is encountered inside a loop --answers-- The loop exits immediately--feedback--\nThink about when you might want to skip an iteration of a loop The loop starts over from the beginning --feedback--\nThink about when you might want to skip an iteration of a loop The current iteration is skipped and the next iteration starts The loop is paused --feedback--\nThink about when you might want to skip an iteration of a loop --video-solution--\n3\n--text--\nWhat is the purpose of using labels with break and continue statements --answers--\nTo specify which loop to exit or skip when dealing with nested loops To name the loops for easier debugging --feedback--\nLabels are used to control the flow of execution in nested loops To restart the loop from a specific point --feedback--\nLabels are used to control the flow of execution in nested loops To allow multiple break and continue statements within the same loop --feedback--\nLabels are used to control the flow of execution in nested loops --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4726,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops\\6732c07238355642a9781dfb.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "0c062558af11c230125de24209906f80",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3a99ba37f09b9d0059b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6839e3a99ba37f09b9d0059b\ntitle: What Are Tuples and How Do They Work challengeType: 19\ndashedName: what-are-tuples-and-how-do-they-work\n--description--\nA tuple is a Python data type used to create an ordered sequence of values Tuples can contain a mixed set of data types like this:\npy\ndeveloper = ('Alice', 34, 'Rust Developer')\nTuples are similar to lists, but while lists are a mutable data type, tuples are immutable This means that the elements in a tuple cannot be changed once it's created If you try to update one of the items in the tuple, you will get a TypeError:\n```py\nprogramming_languages = ('Python', 'Java', 'C++', 'Rust')\nprogramming_languages[0] = 'JavaScript'\n\"\"\"\nTraceback (most recent call last):\nFile \"\", line 2, in\nTypeError: 'tuple' object does not support item assignment\n\"\"\"\n```\nTo access an element from a tuple, you can use bracket notation and the index number:\npy\ndeveloper = ('Alice', 34, 'Rust Developer')\ndeveloper[1] # 34\nIf you need to access elements starting from the end of a tuple, then you can use negative indexing Here is an example of using a negative index to access the second to last element in a tuple:\npy\nnumbers = (1, 2, 3, 4, 5)\nnumbers[-2] # 4\nIf you try to pass in an index number that exceeds or equals the length of the tuple, then you will receive an IndexError like this:\n```py\nnumbers = (1, 2, 3, 4, 5)\nnumbers[7]\n\"\"\"\nTraceback (most recent call last):\nFile \"\", line 2, in\nIndexError: list index out of range\n\"\"\"\n```\nAnother way to create a tuple is by using the tuple() constructor like this:\npy\ndeveloper = 'Jessica'\ntuple(developer) # ('J', 'e', 's', 's', 'i', 'c', 'a')\nFor the tuple() constructor, you can pass in different iterables like strings, lists and even other tuples",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5532,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3a99ba37f09b9d0059b.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "ee443d077273a0380953a0f37fda98ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3a99ba37f09b9d0059b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "an IndexError like this: ```py numbers = (1, 2, 3, 4, 5) numbers[7] \"\"\" Traceback (most recent call last): File \"\", line 2, in IndexError: list index out of range \"\"\" ``` Another way to create a tuple is by using the tuple() constructor like this: py developer = 'Jessica' tuple(developer) # ('J', 'e', 's', 's', 'i', 'c', 'a') For the tuple() constructor, you can pass in different iterables like strings, lists and even other tuplesTo check if an item is in a tuple, you can use the in keyword like this:\n```py\nprogramming_languages = ('Python', 'Java', 'C++', 'Rust')\n'Rust' in programming_languages # True\n'JavaScript' in programming_languages # False\n```\nYou can also unpack items from a tuple just like you did with lists:\n```py\ndeveloper = ('Alice', 34, 'Rust Developer')\nname, age, job = developer\nprint(name) # 'Alice'\nprint(age) # 34\nprint(job) # 'Rust Developer'\n```\nIn this example, name has the value 'Alice', age has the value 34, and job has the value 'Rust Developer' If you need to collect any remaining elements from a tuple, you can use the asterisk (*) operator like this:\n```py\ndeveloper = ('Alice', 34, 'Rust Developer')\nname, *rest = developer\nprint(name, rest) # 'Alice'\nprint(rest) # [34, 'Rust Developer']\n```\nHere, name has the value 'Alice', and rest is a list comprised of the number 34 and the string 'Rust Developer' Just like with a list, you can use the slice operator on a tuple to extract a portion of it Here is an example of extracting the items 'pie' and 'cookies' into a separate tuple:\npy\ndesserts = ('cake', 'pie', 'cookies', 'ice cream')\ndesserts[1:3] # ('pie', 'cookies')\nRemember that the first number represents the starting index for the extraction while the second number represents the ending index But note that the item at the ending index is not included in the extracted tuple If you need to remove an item from a tuple, that isn't possible because tuples are immutable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5532,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3a99ba37f09b9d0059b.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "b97f45548946590acedebe182f6e609c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3a99ba37f09b9d0059b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of extracting the items 'pie' and 'cookies' into a separate tuple: py desserts = ('cake', 'pie', 'cookies', 'ice cream') desserts[1:3] # ('pie', 'cookies') Remember that the first number represents the starting index for the extraction while the second number represents the ending index But note that the item at the ending index is not included in the extracted tuple If you need to remove an item from a tuple, that isn't possible because tuples are immutableSo this example, will produce an error:\n```py\ndeveloper = ('Jane Doe', 23, 'Python Developer')\ndel developer[1]\n\"\"\"\nTraceback (most recent call last):\nFile \"\", line 2, in\nTypeError: \"tuple\" object doesn't support item deletion\n\"\"\"\n```\nSo when might you use a tuple over a list If you need a dynamic collection of elements where you can add, remove and update elements, then you should use a list If you know that you are working with a fixed and immutable collection of data, then you should use a tuple In the next lecture, we will take a look at some common methods you will use when working with tuples --questions--\n--text--\nWhat will be output to the console py\ndeveloper = ('Alice', 34, 'Rust Developer')\nprint(developer[1]) # --answers--\n'Rust Developer'\n--feedback--\nReview the beginning of the lecture for the answer IndexError\n--feedback--\nReview the beginning of the lecture for the answer 34\n'Alice'\n--feedback--\nReview the beginning of the lecture for the answer --video-solution--\n3\n--text--\nWhat will be the result for the following code py\ndesserts = ('cake', 'pie', 'cookies', 'ice cream')\ndesserts[1:3]\n--answers--\n('cookies', 'ice cream')\n--feedback--\nReview the last part of the lecture for the answer ('cake', 'pie')\n--feedback--\nReview the last part of the lecture for the answer ('pie', 'cookies')\n('pie', 'ice cream')\n--feedback--\nReview the last part of the lecture for the answer --video-solution--\n3\n--text--\nWhat will be the result for the following code py\ndeveloper = (\"Jane Doe\", 23, \"Python Developer\")\ndel developer[1]\n--answers--\nThe first item will be deleted --feedback--\nReview the last part of the lecture for the answer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5532,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3a99ba37f09b9d0059b.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "a6a9ceeb733e59753f57ca9a7d5eed6d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3a99ba37f09b9d0059b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "part of the lecture for the answer ('cake', 'pie') --feedback-- Review the last part of the lecture for the answer ('pie', 'cookies') ('pie', 'ice cream') --feedback-- Review the last part of the lecture for the answer --video-solution-- 3 --text-- What will be the result for the following code py developer = (\"Jane Doe\", 23, \"Python Developer\") del developer[1] --answers-- The first item will be deleted --feedback-- Review the last part of the lecture for the answerYou will get a TypeError You will get an IndexError --feedback--\nReview the last part of the lecture for the answer The second item will be deleted --feedback--\nReview the last part of the lecture for the answer --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5532,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3a99ba37f09b9d0059b.md",
      "source_type": "git_repo"
    },
    "token_count": 160,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "7f61073e861c68ae94b89ecb8164cd59",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e38cdf93ee5a00c79676.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6839e38cdf93ee5a00c79676\ntitle: What Are Some Common Methods Used for Lists challengeType: 19\ndashedName: what-are-some-common-methods-used-for-lists\n--description--\nIn the previous lecture, you were introduced to the list data type and learned how to access elements from a list as well as list slicing In this lecture, you will continue to learn about lists and some common methods associated with them like append(), pop(), and sort() The first method we will look at is the append() method This is used to add an item to the end of the list Here is an example of using the append() method to add the number 6 to list of numbers:\npy\nnumbers = [1, 2, 3, 4, 5]\nnumbers append(6)\nprint(numbers) # [1, 2, 3, 4, 5, 6]\nIf you want to add one list at the end of another, you can also use the append() method like this:\n```py\nnumbers = [1, 2, 3, 4, 5]\neven_numbers = [6, 8, 10]\nnumbers append(even_numbers)\nprint(numbers) # [1, 2, 3, 4, 5, [6, 8, 10]]\n```\nNotice how the entire even_numbers list is nested inside of the numbers list But if you want to add all of the individual numbers from the even_numbers list at the end of the numbers list, then you can use the extend() method The extend() method is similar to the append() method, but with extend() you can add multiple elements from one list to another Here's an example of adding the numbers 6, 8, and 10 from one list to the end of the numbers list:\n```py\nnumbers = [1, 2, 3, 4, 5]\neven_numbers = [6, 8, 10]\nnumbers extend(even_numbers)\nprint(numbers) # [1, 2, 3, 4, 5, 6, 8, 10]\n```\nAs you can see, the nested list is gone and it's just a list of numbers To insert an element at a specific index in a list, you can use the insert() method",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6978,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e38cdf93ee5a00c79676.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "d2ff2d24ffef095c85d8ec58abbbd2b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e38cdf93ee5a00c79676.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "adding the numbers 6, 8, and 10 from one list to the end of the numbers list: ```py numbers = [1, 2, 3, 4, 5] even_numbers = [6, 8, 10] numbers extend(even_numbers) print(numbers) # [1, 2, 3, 4, 5, 6, 8, 10] ``` As you can see, the nested list is gone and it's just a list of numbers To insert an element at a specific index in a list, you can use the insert() methodThis method accepts two arguments: the index where you wish to insert the new item and the item you want to insert Here is an example of using the insert() method:\n```py\nnumbers = [1, 2, 3, 4, 5]\nnumbers insert(2, 2 5)\nprint(numbers) # [1, 2, 2 5, 3, 4, 5]\n```\nThe following code will insert the number 2 5 at index 2 in the numbers list If you want to remove an element from a list, you can use the remove() method Here is an example of using the remove() method to remove a duplicate number from a numbers list:\n```py\nnumbers = [1, 2, 3, 4, 5, 5]\nnumbers remove(5)\nprint(numbers) # [1, 2, 3, 4, 5]\n```\nIt is important to note that this method will only remove the first occurrence of an item Not all of them:\n```py\nnumbers = [1, 2, 3, 4, 5, 5, 5]\nnumbers remove(5)\nprint(numbers) # [1, 2, 3, 4, 5, 5]\n```\nTo remove an element at a specific index in the list, you can use the pop() method like this:\npy\nnumbers = [1, 2, 3, 4, 5]\nnumbers pop(1) # The number 2 is returned\nIf you don't specify an element for the pop method, then the last element is removed py\nnumbers = [1, 2, 3, 4, 5]\nnumbers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6978,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e38cdf93ee5a00c79676.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "806f8664e8de35237b3c35384d7d3df1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e38cdf93ee5a00c79676.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "3, 4, 5, 5, 5] numbers remove(5) print(numbers) # [1, 2, 3, 4, 5, 5] ``` To remove an element at a specific index in the list, you can use the pop() method like this: py numbers = [1, 2, 3, 4, 5] numbers pop(1) # The number 2 is returned If you don't specify an element for the pop method, then the last element is removed py numbers = [1, 2, 3, 4, 5] numberspop() # The number 5 is returned\nIf you need to empty the list, then you can use the clear() method like this:\n```py\nnumbers = [1, 2, 3, 4, 5]\nnumbers clear()\nprint(numbers) # []\n```\nThe next method we will take a look at is the the sort() method This method is used to sort the elements in place Here is an example of sorting a random list of numbers in place:\n```py\nnumbers = [19, 2, 35, 1, 67, 41]\nnumbers sort()\nprint(numbers) # [1, 2, 19, 35, 41, 67]\n```\nIn contrast to the sort() method, there is the sorted() function which works for any iterable and returns a new sorted list instead of modifying the original list For example:\n```py\nnumbers = [19, 2, 35, 1, 67, 41]\nsorted_numbers = sorted(numbers)\nprint(numbers) # [19, 2, 35, 1, 67, 41]\nprint(sorted_numbers) # [1, 2, 19, 35, 41, 67]\n```\nAs a reminder, an iterable is a special type of object that you can loop over, allowing you to access each item one at a time You'll learn more about how loops work in Python in a future lecture Both the sort() method and sorted() function accept optional key and reverse parameters You will learn more about these optional parameters in a future lecture when you learn about tuples You'll also learn more about other built-in functions like sorted() in future lectures The next method we will take a look at is the the reverse() method",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6978,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e38cdf93ee5a00c79676.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "ef748d9310be02da2a19c1f192e0df62",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e38cdf93ee5a00c79676.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "each item one at a time You'll learn more about how loops work in Python in a future lecture Both the sort() method and sorted() function accept optional key and reverse parameters You will learn more about these optional parameters in a future lecture when you learn about tuples You'll also learn more about other built-in functions like sorted() in future lectures The next method we will take a look at is the the reverse() methodThis method, will reverse a list of elements in place like this:\n```py\nnumbers = [6, 5, 4, 3, 2, 1]\nnumbers reverse()\nprint(numbers) # [1, 2, 3, 4, 5, 6]\n```\nThe last method we will take a look at is the index method This is used to find the first index where an element can be found in a list Here is an example of using the index method to find the language 'Java' in a programming_languages list:\npy\nprogramming_languages = ['Rust', 'Java', 'Python', 'C++']\nprogramming_languages index('Java') # 1\nIf the element cannot be found, then Python throws a ValueError:\n```py\nprogramming_languages = ['Rust', 'Java', 'Python', 'C++']\nprogramming_languages index('JavaScript')\n\"\"\"\nTraceback (most recent call last):\nFile \"\", line 1, in\nValueError: 'JavaScript' is not in list\n\"\"\"\n```\nThere are a few more methods for Python lists, but this initial list of methods is a good place to start --questions--\n--text--\nWhich of the following examples will correctly insert the number 2 5 at index 2 in the numbers list --answers--\npy\nnumbers = [1, 2, 3, 4, 5]\nnumbers insertInto(2 5, 2)\n--feedback--\nRemember that the first index represent the index where you want to insert into and the second index represents the item you want to insert py\nnumbers = [1, 2, 3, 4, 5]\nnumbers insert(2, 2 5)\npy\nnumbers = [1, 2, 3, 4, 5]\nnumbers insertInto(2, 2 5)\n--feedback--\nRemember that the first index represent the index where you want to insert into and the second index represents the item you want to insert",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6978,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e38cdf93ee5a00c79676.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "6985e683c5a72ada9bf3795493eee3ac",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e38cdf93ee5a00c79676.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--feedback-- Remember that the first index represent the index where you want to insert into and the second index represents the item you want to insert py numbers = [1, 2, 3, 4, 5] numbers insert(2, 2 5) py numbers = [1, 2, 3, 4, 5] numbers insertInto(2, 2 5) --feedback-- Remember that the first index represent the index where you want to insert into and the second index represents the item you want to insertpy\nnumbers = [1, 2, 3, 4, 5]\nnumbers insert(2 5, 2)\n--feedback--\nRemember that the first index represent the index where you want to insert into and the second index represents the item you want to insert --video-solution--\n2\n--text--\nWhich of the following methods will reverse a list of elements in place --answers--\nreverse()\nreversing()\n--feedback--\nReview the last part of the lecture for the answer reversedList()\n--feedback--\nReview the last part of the lecture for the answer reversingList()\n--feedback--\nReview the last part of the lecture for the answer --video-solution--\n1\n--text--\nWhich of the following is NOT a commonly used method for lists --answers--\npop()\n--feedback--\nOne of these methods is used in JavaScript Not Python clear()\n--feedback--\nOne of these methods is used in JavaScript Not Python splice()\nappend()\n--feedback--\nOne of these methods is used in JavaScript Not Python --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6978,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e38cdf93ee5a00c79676.md",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "94139a0fab20fa4f6075a35701e21f46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3ea328b630cf5fca9ac.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6839e3ea328b630cf5fca9ac\ntitle: How Do Loops Work challengeType: 19\ndashedName: how-do-loops-work\n--description--\nAs you learned in earlier modules, loops are used to repeat a block of code for a set number of times In this lecture you will learn how to work with different types of loops in Python The first loop we will go over is the for loop Here is an example of using a for loop to iterate through a list and print each item to the console:\n```py\nprogramming_languages = ['Rust', 'Java', 'Python', 'C++']\nfor language in programming_languages:\nprint(language)\n```\nThe result would be:\nmd\nRust\nJava\nPython\nC++\nNotice that the print(language) is indented inside of the loop Without that indentation, you would get an IndentationError:\npython\n\"\"\"\nTraceback (most recent call last):\nFile \"<stdin>\", line 4, in <module>\nIndentationError: expected an indented block after 'for' statement on line 3\n\"\"\"\nYou can also use a for loop to iterate through other iterables like a string Here is an example of using a for loop to loop through the string code and print out each character:\npy\nfor char in 'code':\nprint(char)\nThe result would be:\nmd\nc\no\nd\ne\nJust like in JavaScript, you can also nest for loops in Python Here is an example of using a nested for loop:\n```py\ncategories = ['Fruit', 'Vegetable']\nfoods = ['Apple', 'Carrot', 'Banana']\nfor category in categories:\nfor food in foods:\nprint(category, food)\n```\nThe outer loop will iterate through each category in the categories list For each category, the inner loop will iterate through each food in the foods list Here is the result that will be printed to the console:\nmd\nFruit Apple\nFruit Carrot\nFruit Banana\nVegetable Apple\nVegetable Carrot\nVegetable Banana\nAnother type of loop you can use in Python is the while loop This type of loop will repeat a block of code until the condition is False Here is an example of using a while loop for a guessing game:\n```py\nsecret_number = 3\nguess = 0\nwhile guess",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3ea328b630cf5fca9ac.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "463331f0c2a7c17a390739e11f8ecfeb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3ea328b630cf5fca9ac.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "foods list Here is the result that will be printed to the console: md Fruit Apple Fruit Carrot Fruit Banana Vegetable Apple Vegetable Carrot Vegetable Banana Another type of loop you can use in Python is the while loop This type of loop will repeat a block of code until the condition is False Here is an example of using a while loop for a guessing game: ```py secret_number = 3 guess = 0 while guess= secret_number:\nguess = int(input('Guess the number (1-5): '))\nif guess = secret_number:\nprint('Wrong Try again ')\nprint('You got it ')\n```\nIn this example we have a secret_number variable with the value of 3 and an initial guess of 0 Then we use the input function to get input from the user, then convert the input string into and integer with the int() function, and assign it to the guess variable If the user guesses correctly by inputting 3, the while loop is broken out of and the message You got it is printed to the console Otherwise, the message Wrong Try again is printed to the console, and the loop repeats, prompting the user to guess again Here's an example result:\nmd\nGuess the number (1-5): 2\nWrong Try again Guess the number (1-5): 1\nWrong Try again Guess the number (1-5): 3\nYou got it Just like in JavaScript, Python supports the break and continue statements The break statement is used to stop the execution of a loop Here is an example of using the break statement for a list of developer_names:\n```py\ndeveloper_names = ['Jess', 'Naomi', 'Tom']\nfor developer in developer_names:\nif developer == 'Naomi':\nbreak\nprint(developer)\n```\nIn this example, we iterate through a list of developer_names and print each name to the console If the name is equal to Naomi, then we break out of the loop This results in only the name Jess being printed to the console The continue statement is used to skip the current iteration of a loop and move onto the next iteration Let's modify the example from earlier to use the continue statement instead of break:\n```py\ndeveloper_names = ['Jess', 'Naomi', 'Tom']\nfor developer in developer_names:\nif developer == 'Naomi':\ncontinue\nprint(developer)\n```\nNow the result in the console will be different",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3ea328b630cf5fca9ac.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "ca8a5673783708e002bca4150a1d819c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3ea328b630cf5fca9ac.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "break out of the loop This results in only the name Jess being printed to the console The continue statement is used to skip the current iteration of a loop and move onto the next iteration Let's modify the example from earlier to use the continue statement instead of break: ```py developer_names = ['Jess', 'Naomi', 'Tom'] for developer in developer_names: if developer == 'Naomi': continue print(developer) ``` Now the result in the console will be differentThe names Jess and Tom are printed because the continue statement skips the second iteration of the loop when developer is equal to Naomi, and does not print that name to the console Both for and while loops can be combined with an else clause, which is executed only when the loop is not terminated by a break statement Here is an example of using multiple for loops:\n```python\nwords = ['sky', 'apple', 'rhythm', 'fly', 'orange']\nfor word in words:\nfor letter in word:\nif letter lower() in 'aeiou':\nprint(f\"'{word}' contains the vowel '{letter}'\")\nbreak\nelse:\nprint(f\"'{word}' has no vowels\")\n```\nIn this example we have a list of random words, and a for loop is used to loop through each word Inside the outer for loop, we have another for loop to loop through each letter of each word If the lowercase version of the letter is a vowel, we print the word followed by what vowels it contains, then break out of the inner loop If the word contains no values, then we print a message indicating that Here is what the result looks like in the console:\nmd\n'sky' has no vowels\n'apple' contains the vowel 'a'\n'rhythm' has no vowels\n'fly' has no vowels\n'orange' contains the vowel 'o'\nLoops are very common in Python, so it's important to get comfortable with them In the next few lectures, you will learn how to work with the enumerate() and range() functions in loops --questions--\n--text--\nWhat will the following code print to the console ```py\nprogramming_languages = ['Rust', 'Java', 'Python', 'C++']\nfor language in programming_languages:\nprint(language)\n```\n--answers--\nmd\nRust\nJava\nPython\nC++\nmd\nRust\nPython\nC++\n--feedback--\nReview the beginning of the lecture for the answer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3ea328b630cf5fca9ac.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "3e61e24bd4b35674b4f49da29d907c36",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3ea328b630cf5fca9ac.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "are very common in Python, so it's important to get comfortable with them In the next few lectures, you will learn how to work with the enumerate() and range() functions in loops --questions-- --text-- What will the following code print to the console ```py programming_languages = ['Rust', 'Java', 'Python', 'C++'] for language in programming_languages: print(language) ``` --answers-- md Rust Java Python C++ md Rust Python C++ --feedback-- Review the beginning of the lecture for the answermd\nRust\nJava\n--feedback--\nReview the beginning of the lecture for the answer md\nRust\nPython\nJava\nC++\n--feedback--\nReview the beginning of the lecture for the answer --video-solution--\n1\n--text--\nWhich of the following loops is used to repeat a block of code until a condition is False --answers--\nlist\n--feedback--\nOnly one of these options is a real type of loop used in both Python and JavaScript while\ncontinue\n--feedback--\nOnly one of these options is a real type of loop used in both Python and JavaScript break\n--feedback--\nOnly one of these options is a real type of loop used in both Python and JavaScript --video-solution--\n2\n--text--\nWhich of the following is used to stop the execution of a loop --answers--\nstop\n--feedback--\nReview the end of the lecture for the answer end\n--feedback--\nReview the end of the lecture for the answer break\nhalt\n--feedback--\nReview the end of the lecture for the answer --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6912,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e3ea328b630cf5fca9ac.md",
      "source_type": "git_repo"
    },
    "token_count": 324,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "90f5cc3779e5328dfe4997257203f61e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\67fe8399c41a212871025f96.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67fe8399c41a212871025f96\ntitle: What Are Lists and How Do They Work challengeType: 19\ndashedName: what-are-lists-and-how-do-they-work\n--description--\nOver the next few lectures we are going to learn about lists, tuples, and ranges, which are three basic sequence types used in Python The list data type is an ordered sequence of elements that can be comprised of strings, numbers, or even other lists Similar to JavaScript, lists are mutable and use zero-based indexing, meaning that the first element of the list is at index zero Here is the basic syntax for a list:\npy\ncities = ['Los Angeles', 'London', 'Tokyo']\nTo access an element from the cities list, you can reference its index number in the sequence Here is an example of accessing the first element of the cities list:\npy\ncities = ['Los Angeles', 'London', 'Tokyo']\ncities[0] # 'Los Angeles'\nNegative indexing is used to access elements starting from the end of the list instead of the beginning at index 0 To access the last element of any list, you can use -1 like this:\npy\ncities = ['Los Angeles', 'London', 'Tokyo']\ncities[-1] # 'Tokyo'\nAnother way to create a list is to use the list() constructor The list() constructor is used to convert an iterable into a list like this:\npy\ndeveloper = 'Jessica'\nlist(developer) # ['J', 'e', 's', 's', 'i', 'c', 'a']\nAn iterable is a special type of object that can be looped over one item at a time You will learn more about loops in Python later on To get the total number of elements in a list, you can use the len() function like this:\npy\nnumbers = [1, 2, 3, 4, 5]\nlen(numbers) # 5\nIf you wanted to update a value at a particular index, you can do something like this:\npy\nprogramming_languages = ['Python', 'Java', 'C++', 'Rust']\nprogramming_languages[0] = 'JavaScript'\nprint(programming_languages) # ['JavaScript', 'Java', 'C++', 'Rust']\nSince lists are mutable, you can update any element in the list as long as you pass in a valid index number",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\67fe8399c41a212871025f96.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "04e5641ce8424a507b5b7cb21dbf5e8e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\67fe8399c41a212871025f96.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a list, you can use the len() function like this: py numbers = [1, 2, 3, 4, 5] len(numbers) # 5 If you wanted to update a value at a particular index, you can do something like this: py programming_languages = ['Python', 'Java', 'C++', 'Rust'] programming_languages[0] = 'JavaScript' print(programming_languages) # ['JavaScript', 'Java', 'C++', 'Rust'] Since lists are mutable, you can update any element in the list as long as you pass in a valid index numberIf you pass in an index (either positive or negative) that is out of bounds for the list, then you will receive an IndexError:\n```py\nprogramming_languages = ['Python', 'Java', 'C++', 'Rust']\nprogramming_languages[10] = 'JavaScript'\n\"\"\"\nTraceback (most recent call last):\nFile \"\", line 2, in\nIndexError: list assignment index out of range\n\"\"\"\n```\nIf you want to remove an element from a list you can use the del keyword like this:\npy\ndeveloper = ['Jane Doe', 23, 'Python Developer']\ndel developer[1]\nprint(developer) # ['Jane Doe', 'Python Developer']\nSometimes it is helpful to check if an element is inside the list To do that, you can use the in keyword like this:\n```py\nprogramming_languages = ['Python', 'Java', 'C++', 'Rust']\n'Rust' in programming_languages # True\n'JavaScript' in programming_languages # False\n```\nSometimes it is common to have lists nested inside of other lists like this:\npy\ndeveloper = ['Alice', 25, ['Python', 'Rust', 'C++']]\nIn this example, we have one nested list containing three popular programming languages",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\67fe8399c41a212871025f96.md",
      "source_type": "git_repo"
    },
    "token_count": 381,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "d68eb2f25407887dae30679ca0efa875",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\67fe8399c41a212871025f96.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "it is helpful to check if an element is inside the list To do that, you can use the in keyword like this: ```py programming_languages = ['Python', 'Java', 'C++', 'Rust'] 'Rust' in programming_languages # True 'JavaScript' in programming_languages # False ``` Sometimes it is common to have lists nested inside of other lists like this: py developer = ['Alice', 25, ['Python', 'Rust', 'C++']] In this example, we have one nested list containing three popular programming languagesTo access the nested list, you will need to access it using index 2 since lists are zero based indexed:\npy\ndeveloper = ['Alice', 25, ['Python', 'Rust', 'C++']]\ndeveloper[2] # ['Python', 'Rust', 'C++']\nThen to access the second language from that nested list, you will need to access it using index 1 like this:\npy\ndeveloper = ['Alice', 25, ['Python', 'Rust', 'C++']]\ndeveloper[2][1] # 'Rust'\nAnother common technique used with lists is unpacking values Unpacking values from a list is a technique used to assign values from a list to new variables Here is an example of unpacking a developer list into new variables called name, age and job ```py\ndeveloper = ['Alice', 34, 'Rust Developer']\nname, age, job = developer\nprint(name) # 'Alice'\nprint(age) # 34\nprint(job) # 'Rust Developer'\n```\nHere, name has the value 'Alice', age has the value 34, and job has the value 'Rust Developer' If you need to collect any remaining elements from a list, you can use the asterisk (*) operator like this:\n```py\ndeveloper = ['Alice', 34, 'Rust Developer']\nname, *rest = developer\nprint(name) # 'Alice'\nprint(rest) # [34, 'Rust Developer']\n```\nIn this example, name will still have the value 'Alice', and rest is a list of two items: the number 34 and the string 'Rust Developer'",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\67fe8399c41a212871025f96.md",
      "source_type": "git_repo"
    },
    "token_count": 451,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "5d250985d5b97738a43ec0e969abb096",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\67fe8399c41a212871025f96.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the value 34, and job has the value 'Rust Developer' If you need to collect any remaining elements from a list, you can use the asterisk (*) operator like this: ```py developer = ['Alice', 34, 'Rust Developer'] name, *rest = developer print(name) # 'Alice' print(rest) # [34, 'Rust Developer'] ``` In this example, name will still have the value 'Alice', and rest is a list of two items: the number 34 and the string 'Rust Developer'If the numbers of variables on the left side of the assignment operator doesn't match the total numbers of items in the list, then you will receive a ValueError:\n```py\ndeveloper = ['Alice', 34, 'Rust Developer']\nname, age, job, city = developer\n\"\"\"\nTraceback (most recent call last):\nFile \"\", line 2, in\nValueError: not enough values to unpack (expected 4, got 3)\n\"\"\"\n```\nThe last concept we will look at is the slice operator (:) Similar to strings, you can access portions of a list by using the slice operator like this:\npy\ndesserts = ['Cake', 'Cookies', 'Ice Cream', 'Pie', 'Brownies']\ndesserts[1:4] # ['Cookies', 'Ice Cream', 'Pie']\nIn this example, the start index is 1 since that points to the second item in the list Then we use the slice operator followed by an end index of 4, which includes everything up to (but not including), the item at that index Another thing you can do with the slice operator : is specify a step interval which determines how much to increment between the indices Let's say you had a list of numbers like this:\npy\nnumbers = [1, 2, 3, 4, 5, 6]\nIf you wanted to extract a list of just even numbers, you can use the slicing operator like this:\npy\nnumbers = [1, 2, 3, 4, 5, 6]\nnumbers[1::2] # [2, 4, 6]\nThe first even number is at index 1, so that will be the start index Since we want to go through the end of the list, then we omit the end index",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\67fe8399c41a212871025f96.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "afe253ed1f79ebbce98c11571655f46a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\67fe8399c41a212871025f96.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "like this: py numbers = [1, 2, 3, 4, 5, 6] If you wanted to extract a list of just even numbers, you can use the slicing operator like this: py numbers = [1, 2, 3, 4, 5, 6] numbers[1::2] # [2, 4, 6] The first even number is at index 1, so that will be the start index Since we want to go through the end of the list, then we omit the end indexLastly, we specify 2 for the optional step interval so it will only increment by 2 instead of the default 1 Lists are a useful and flexible data structure that you will use a lot in your Python programs In the next lecture, you will learn about common methods that you can use with lists --questions--\n--text--\nWhich of the following is true about lists --answers--\nThey are two-based indexed --feedback--\nRefer to the beginning of the lecture for the answer They are zero-based indexed They are only used inside of classes --feedback--\nRefer to the beginning of the lecture for the answer They are rarely used in Python programs --feedback--\nRefer to the beginning of the lecture for the answer --video-solution--\n2\n--text--\nWhich of the following is the correct way to access the second element in the list py\ncities = ['Los Angeles', 'London', 'Tokyo']\n--answers--\ncities[1]\ncities[2]\n--feedback--\nRefer to the beginning of the lecture for the answer cities[0]\n--feedback--\nRefer to the beginning of the lecture for the answer cities[-1]\n--feedback--\nRefer to the beginning of the lecture for the answer --video-solution--\n1\n--text--\nWhich of the following is the correct way to access the second element from the end py\nnumbers = [1, 2, 3, 4, 5, 6]\n--answers--\nnumbers[-5]\n--feedback--\nRemember that negative indexing is used to access elements starting at the end numbers[2]\n--feedback--\nRemember that negative indexing is used to access elements starting at the end numbers[0]\n--feedback--\nRemember that negative indexing is used to access elements starting at the end numbers[-2]\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7746,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\67fe8399c41a212871025f96.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "3285d84bc2ef07c7a65508c2cc1c0b77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e41fe8dac60f11f583db.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6839e41fe8dac60f11f583db\ntitle: What Are Ranges and How Can You Use Them in a Loop challengeType: 19\ndashedName: what-are-ranges-and-how-can-you-use-them-in-a-loop\n--description--\nThe range() function is used to generate a sequence of integers Here is the basic syntax for the range() function:\npy\nrange(start, stop, step)\nThe required stop argument is an integer that represents the end point for the sequence of numbers being generated Here is an example of using the range() function:\npy\nfor num in range(3):\nprint(num)\nThe following code generates a sequence of numbers between 0 and 2 The integer 3 is not included because the stop argument is non-inclusive If a start argument is not specified, then the default is 0 Otherwise, you can use the optional start argument to start the sequence of integers at a integer other than 0 Here is an example of generating a sequence of integers between 1 and 4:\npy\nfor num in range(1, 5):\nprint(num)\nBy default the sequence of integers will increment by 1 But if you want to change that default, then you can use the optional step argument Here is an example of generating a sequence of even integers between 2 and 10:\npy\nfor num in range(2, 11, 2):\nprint(num)\nAs mentioned earlier, there is only one required argument for the range() function If you don't provide any arguments to range(), then you'll get a TypeError:\nmd\nERROR Traceback (most recent call last):\nFile \"<main py>\", line 1, in <module>\nTypeError: range expected at least 1 argument, got 0\nIt is important to note that the range() function only accepts integers as arguments, not floats Remember that floats are numbers with decimal points like 3 4 If you try to pass floats as arguments, you'll get a TypeError:\nmd\nERROR Traceback (most recent call last):\nFile \"<main",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4226,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e41fe8dac60f11f583db.md",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6424ca05689c047c12ade01098120c5e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e41fe8dac60f11f583db.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "then you'll get a TypeError: md ERROR Traceback (most recent call last): File \"<main py>\", line 1, in <module> TypeError: range expected at least 1 argument, got 0 It is important to note that the range() function only accepts integers as arguments, not floats Remember that floats are numbers with decimal points like 3 4 If you try to pass floats as arguments, you'll get a TypeError: md ERROR Traceback (most recent call last): File \"<mainpy>\", line 1, in <module>\nTypeError: 'float' object cannot be interpreted as an integer\nIf you want to generate a sequence of integers in decrementing order, then you can use a negative integer for the step argument, like this:\npy\nfor num in range(40, 0, -10):\nprint(num)\nThe following code prints the numbers 40, 30, 20, and 10 in that order to the console Another thing you can do with the range() function is create a list of integers by using it with the list constructor The list constructor is used to convert an iterable into a list Here is an example of generating a list of even integers between 2 and 10:\npy\nnumbers = list(range(2, 11, 2))\nprint(numbers) # [2, 4, 6, 8, 10]\nThe range() function is a very handy way to generate a sequence of integers in Python Once you get the hang of it, you'll probably find yourself using it a lot in your Python programs --questions--\n--text--\nWhat is the range() function used for --answers--\nTo generate a list of lists --feedback--\nReview the beginning of the lecture for the answer To generate list of strings --feedback--\nReview the beginning of the lecture for the answer To generate a sequence of integers To generate a list of characters --feedback--\nReview the beginning of the lecture for the answer --video-solution--\n3\n--text--\nWhich of the following is the only required argument needed for the range() function --answers--\nstop\nstart\n--feedback--\nReview the beginning of the lecture for the answer step\n--feedback--\nReview the beginning of the lecture for the answer index\n--feedback--\nReview the beginning of the lecture for the answer --video-solution--\n1\n--text--\nWhich of the following errors will be returned from the following code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4226,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e41fe8dac60f11f583db.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2eb987fb3447568945807fe858042301",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e41fe8dac60f11f583db.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Review the beginning of the lecture for the answer --video-solution-- 3 --text-- Which of the following is the only required argument needed for the range() function --answers-- stop start --feedback-- Review the beginning of the lecture for the answer step --feedback-- Review the beginning of the lecture for the answer index --feedback-- Review the beginning of the lecture for the answer --video-solution-- 1 --text-- Which of the following errors will be returned from the following codepy\nrange()\n--answers--\nIndexError\n--feedback--\nThis error occurs when an incompatible type is used for a given operation RangeError\n--feedback--\nThis error occurs when an incompatible type is used for a given operation TypeError\nSyntaxError\n--feedback--\nThis error occurs when an incompatible type is used for a given operation --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4226,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e41fe8dac60f11f583db.md",
      "source_type": "git_repo"
    },
    "token_count": 171,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1a00e2dccd93bb74fc9e0eabd1c8810e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4b003571c149bcda122.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6839e4b003571c149bcda122\ntitle: What Are the Enumerate and Zip Functions and How Do They Work challengeType: 19\ndashedName: what-are-the-enumerate-and-zip-functions-and-how-do-they-work\n--description--\nIn previous lectures you learned how to work with the for loop, which is used to repeat a block of code a set number of times Here is an example of using a for loop to print each language from the languages list to the console:\n```py\nlanguages = ['Spanish', 'English', 'Russian', 'Chinese']\nfor language in languages:\nprint(language)\n```\nBut what if you wanted to keep track of the index for each element Well, one option is to create an index variable and increment it by 1 for each iteration of the loop, like this:\n```py\nlanguages = ['Spanish', 'English', 'Russian', 'Chinese']\nindex = 0\nfor language in languages:\nprint(f'Index {index} and language {language}')\nindex += 1\n```\nWhile that works, an easier way to do that is by using the enumerate() function The enumerate() function keeps track of the index for an iterable and returns an enumerate object If we pass the languages list to the enumerate() function and convert its returned value into a list with the list() function, it looks like this:\n```python\nlanguages = ['Spanish', 'English', 'Russian', 'Chinese']\nlist(enumerate(languages))\n[(0, 'Spanish'), (1, 'English'), (2, 'Russian'), (3, 'Chinese')]\n```\nEach entry in the enumerate object (now a list) is a tuple containing a count, followed by a value from the iterable passed to the enumerate() function Now, let's refactor the example from earlier to use the enumerate() function:\n```python\nlanguages = ['Spanish', 'English', 'Russian', 'Chinese']\nfor index, language in enumerate(languages):\nprint(f'Index {index} and language {language}')\n```\nWe unpack the count and value for each tuple in the enumerate object into variables named index and language, respectively Finally, both those variables are used in an f-string that's printed to the console in each iteration of the loop",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5896,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4b003571c149bcda122.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "218ecc1cddaf86a4a7a7d603ab1348ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4b003571c149bcda122.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "iterable passed to the enumerate() function Now, let's refactor the example from earlier to use the enumerate() function: ```python languages = ['Spanish', 'English', 'Russian', 'Chinese'] for index, language in enumerate(languages): print(f'Index {index} and language {language}') ``` We unpack the count and value for each tuple in the enumerate object into variables named index and language, respectively Finally, both those variables are used in an f-string that's printed to the console in each iteration of the loopmd\nIndex 0 and language Spanish\nIndex 1 and language English\nIndex 2 and language Russian\nIndex 3 and language Chinese\nThis removes the need for manually creating and updating an index variable The enumerate() function also accepts an optional start argument that specifies the starting value for the count If this argument is omitted, then the count will begin at 0 Here is an example of using the optional start argument:\n```python\nlanguages = ['Spanish', 'English', 'Russian', 'Chinese']\nfor index, language in enumerate(languages, 1):\nprint(f'Index {index} and language {language}')\n```\nAnd here is what the result will look like in the console:\nmd\nIndex 1 and language Spanish\nIndex 2 and language English\nIndex 3 and language Russian\nIndex 4 and language Chinese\nSo far we've only been iterating over one list But what if you need to iterate over multiple iterables in parallel Well, you can use the zip() function for that, which combines lists into pairs of elements and returns an iterator of tuples",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5896,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4b003571c149bcda122.md",
      "source_type": "git_repo"
    },
    "token_count": 325,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "fcbff1636f69acc88851d2cc31e5de67",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4b003571c149bcda122.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "And here is what the result will look like in the console: md Index 1 and language Spanish Index 2 and language English Index 3 and language Russian Index 4 and language Chinese So far we've only been iterating over one list But what if you need to iterate over multiple iterables in parallel Well, you can use the zip() function for that, which combines lists into pairs of elements and returns an iterator of tuplesIf we pass a list of developers and ids to the zip() function and convert its returned value into a list with the list() function, here's what it looks like:\n```python\ndevelopers = ['Naomi', 'Dario', 'Jessica', 'Tom']\nids = [1, 2, 3, 4]\nlist(zip(developers, ids))\n[('Naomi', 1), ('Dario', 2), ('Jessica', 3), ('Tom', 4)]\n```\nAnd here's an example of using the zip() function with a for loop to iterate over developers and ids:\n```python\ndevelopers = ['Naomi', 'Dario', 'Jessica', 'Tom']\nids = [1, 2, 3, 4]\nfor name, id in zip(developers, ids):\nprint(f'Name: {name}')\nprint(f'ID: {id}')\n```\nIn this example, zip() combines the two lists into pairs of elements and returns an iterator of tuples The for loop then unpacks each tuple into name and id Finally, for each print statement, we are printing each name and id from the ids and developers lists respectively Here is what the result looks like in the console:\nmd\nName: Naomi\nID: 1\nName: Dario\nID: 2\nName: Jessica\nID: 3\nName: Tom\nID: 4\nThe enumerate() and zip() functions are very powerful, and when combined with loops, can make your code much more concise --questions--\n--text--\nWhat does the enumerate() function do --answers--\nIt is used to print the memory addresses for each element in a list --feedback--\nReview the beginning of the lecture for the answer It is used to create tuples and sets from lists and return an enumerate object --feedback--\nReview the beginning of the lecture for the answer It is used to track of the index for an iterable and return an enumerate object It is used to speed up the performance for your Python applications",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5896,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4b003571c149bcda122.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "47cc3583170a4a638f1258ad7440af9d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4b003571c149bcda122.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is used to print the memory addresses for each element in a list --feedback-- Review the beginning of the lecture for the answer It is used to create tuples and sets from lists and return an enumerate object --feedback-- Review the beginning of the lecture for the answer It is used to track of the index for an iterable and return an enumerate object It is used to speed up the performance for your Python applications--feedback--\nReview the beginning of the lecture for the answer --video-solution--\n3\n--text--\nWhich of the following optional arguments in the enumerate() function specifies the starting value for the count --answers--\nset\n--feedback--\nReview the end of the lecture for the answer position\n--feedback--\nReview the end of the lecture for the answer start\ncount\n--feedback--\nReview the end of the lecture for the answer --video-solution--\n3\n--text--\nWhat does the zip() function do --answers--\nIt is used to iterate over multiple iterables in parallel It is used to create zip files --feedback--\nReview the end of the lecture for the answer It is used to break out of a nested loop --feedback--\nReview the end of the lecture for the answer It is used to create an iterable that saves memory starting from a list --feedback--\nReview the end of the lecture for the answer --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5896,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4b003571c149bcda122.md",
      "source_type": "git_repo"
    },
    "token_count": 271,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "0d0eb0f67c27012e4cf83d9c188f25af",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4d62ae09d1661e4cf9b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6839e4d62ae09d1661e4cf9b\ntitle: What Are List Comprehensions and What Are Some Useful Functions to Work With Lists challengeType: 19\ndashedName: what-are-list-comprehensions-and-what-are-some-useful-functions-to-work-with-lists\n--description--\nFor the past few lectures, you have been getting comfortable working with loops like this:\n```py\neven_numbers = []\nfor num in range(21):\nif num % 2 == 0:\neven_numbers append(num)\nprint(even_numbers)\n```\nThis example creates a new empty list called even_numbers and loops through a sequence of numbers between 0 and 20 Inside the loop, there's a condition that checks if the current number has a remainder of 0 when divided by 2 This is used to determine if the number is even If the condition is True, then the current num is appended at the end of the even_numbers list Finally, we print the even_numbers list to the console While this code works, there is a more concise way to write this that uses list comprehension instead List comprehension allows you to create a new list in a single line by combining a loop and condition directly within square brackets This makes the code shorter and often easier to read Here is the refactored example from earlier using square brackets:\npy\neven_numbers = [num for num in range(21) if num % 2 == 0]\nprint(even_numbers)\nIn this refactored example, the even_numbers list is created using a single line of code The list comprehension loops through numbers from 0 to 20, and includes only those that are divisible by 2 This approach is more compact and eliminates the need for a separate loop and conditional block Let's take a look at another example so we can better understand how list comprehension works:\npy\nnumbers = [1, 2, 3, 4, 5]\nresult = [(num, 'Even') if num % 2 == 0 else (num, 'Odd') for num in numbers]\nprint(result)\nIn this example, we have a list of numbers and want to create a new list of tuples indicating which numbers are even or odd In the first part of the list comprehension, we use an if statement to check if the number is evenly divisible by 2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6594,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4d62ae09d1661e4cf9b.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a94156471054ddaa28485ef4c2351641",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4d62ae09d1661e4cf9b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "comprehension works: py numbers = [1, 2, 3, 4, 5] result = [(num, 'Even') if num % 2 == 0 else (num, 'Odd') for num in numbers] print(result) In this example, we have a list of numbers and want to create a new list of tuples indicating which numbers are even or odd In the first part of the list comprehension, we use an if statement to check if the number is evenly divisible by 2If so, then the result is a tuple of that number followed by the word Even Otherwise, the result is a tuple with the number followed by the word Odd Here is what the result looks like printed in the console:\npy\n[(1, 'Odd'), (2, 'Even'), (3, 'Odd'), (4, 'Even'), (5, 'Odd')]\nAnother way to create a list starting from an existing iterable is the filter() function Here is an example of creating a new list of just words longer than four characters:\n```py\nwords = ['tree', 'sky', 'mountain', 'river', 'cloud', 'sun']\ndef is_long_word(word):\nreturn len(word) > 4\nlong_words = list(filter(is_long_word, words))\nprint(long_words) # ['mountain', 'river', 'cloud']\n```\nThe filter() function is used to select elements from an iterable that meet a specific condition The filter() function accepts a function and an iterable for its arguments In this example, we are passing in an is_long_word function into the filter() function to check if the current word count is greater than 4 All words that have a character count greater than 4 are added into a new list and assigned to the long_words variable Aside from the filter() function, there are a few more functions that are helpful when working with lists Another function to be aware of is the map() function, which takes an iterable and applies a function to each of its elements Here is an example of using the map() function to convert a list of temperatures from Celsius to Fahrenheit:\n```py\ncelsius = [0, 10, 20, 30, 40]\ndef to_fahrenheit(temp):\nreturn (temp * 9/5) + 32\nfahrenheit = list(map(to_fahrenheit, celsius))\nprint(fahrenheit) # [32 0, 50 0, 68",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6594,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4d62ae09d1661e4cf9b.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "055d29cf3c173938718de06b2c654c1a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4d62ae09d1661e4cf9b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "that are helpful when working with lists Another function to be aware of is the map() function, which takes an iterable and applies a function to each of its elements Here is an example of using the map() function to convert a list of temperatures from Celsius to Fahrenheit: ```py celsius = [0, 10, 20, 30, 40] def to_fahrenheit(temp): return (temp * 9/5) + 32 fahrenheit = list(map(to_fahrenheit, celsius)) print(fahrenheit) # [32 0, 50 0, 680, 86 0, 104 0]\n```\nJust like the filter() function, map() accepts a function and an iterable for its arguments The to_fahrenheit function takes a temperature and converts it from Celsius to Fahrenheit The last function we will look at is the sum() function This function is used to get the sum from an iterable like a list or tuple Here is an example of using the sum() function:\npy\nnumbers = [5, 10, 15, 20]\ntotal = sum(numbers)\nprint(total) # Result: 50\nYou can also pass in an optional start argument which sets the initial value for the summation Here is an updated example using the start argument as a positional argument:\npy\nnumbers = [5, 10, 15, 20]\ntotal = sum(numbers, 10) # positional argument\nprint(total) # 60\nYou can also choose to use the start argument as a keyword argument like this instead:\npy\nnumbers = [5, 10, 15, 20]\ntotal = sum(numbers, start=10) # keyword argument\nprint(total) # 60\nBoth versions will produce the same result, but the keyword argument is a little more explicit List comprehension as well as other functions like map(), filter(), and sum() might seem a little confusing at first But with enough practice and time, you will start to feel more comfortable using them in your Python programs --questions--\n--text--\nWhich of the following is the correct way to use list comprehension --answers--\npy\n[while for loop num in range(21)]\n--feedback--\nReview the beginning of the lecture for the answer py\n[num for num in range(21) if num % 2 == 0]\npy\n[num for num]\n--feedback--\nReview the beginning of the lecture for the answer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6594,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4d62ae09d1661e4cf9b.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "e544b3437d5fcccca78d3a984aa98b5b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4d62ae09d1661e4cf9b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "with enough practice and time, you will start to feel more comfortable using them in your Python programs --questions-- --text-- Which of the following is the correct way to use list comprehension --answers-- py [while for loop num in range(21)] --feedback-- Review the beginning of the lecture for the answer py [num for num in range(21) if num % 2 == 0] py [num for num] --feedback-- Review the beginning of the lecture for the answerpy\n[for num in range(21) if num % 2 == 0]\n--feedback--\nReview the beginning of the lecture for the answer --video-solution--\n2\n--text--\nWhich of the following functions takes an iterable and applies a function to each of its elements --answers--\nmemoryview\n--feedback--\nThink of the function that \"maps\" a transformation onto every item in a list, one by one map\nmax\n--feedback--\nThink of the function that \"maps\" a transformation onto every item in a list, one by one min\n--feedback--\nThink of the function that \"maps\" a transformation onto every item in a list, one by one --video-solution--\n2\n--text--\nWhat will be printed to the console py\nnumbers = [5, 10, 15, 20]\ntotal = sum(numbers, start=10)\nprint(total) # --answers--\n60\n50\n--feedback--\nReview the end of the lecture for the answer 40\n--feedback--\nReview the end of the lecture for the answer 70\n--feedback--\nReview the end of the lecture for the answer --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6594,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4d62ae09d1661e4cf9b.md",
      "source_type": "git_repo"
    },
    "token_count": 340,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "07b001e6b928751a859b188439ed149c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4ef24827717b838f54d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6839e4ef24827717b838f54d\ntitle: What Are Lambda Functions and How Do They Work challengeType: 19\ndashedName: what-are-lambda-functions-and-how-do-they-work\n--description--\nThroughout the previous lectures, you have been used to defining functions by using the def keyword like this:\n```py\ndef square(num):\nreturn num ** 2\nprint(square(4)) # 16\n```\nBut when it comes to working with high order functions like map() and filter(), you can use an anonymous inline function This is where lambda functions come in Here's what the square() function looks like when refactored into a lambda function:\npy\nlambda num: num ** 2\nAs mentioned earlier, lambda functions are anonymous, so this function no longer has the name square associated with it Lambda functions are great when you need to use them in higher order functions like this:\n```py\nnumbers = [1, 2, 3, 4, 5]\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\nprint(even_numbers)  # [2, 4]\n```\nIn this example, we have a list of numbers and want to create a new list of even numbers So we pass in a lambda function as one of the arguments to the filter() function to get a new list containing the numbers 2 and 4 When working with lambda functions it is important to be aware of best practices For example, it is not a good practice to assign a lambda function to a variable like this:\n```py\nnumbers = [1, 2, 3, 4, 5]\nsquare = lambda x: x ** 2\nsquared_numbers = list(map(square, numbers))\nprint(squared_numbers) # [1, 4, 9, 16, 25]\n```\nThis defeats the purpose of using anonymous functions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4ef24827717b838f54d.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "8606899dcaee2220a07de7836cb1980f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4ef24827717b838f54d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a new list containing the numbers 2 and 4 When working with lambda functions it is important to be aware of best practices For example, it is not a good practice to assign a lambda function to a variable like this: ```py numbers = [1, 2, 3, 4, 5] square = lambda x: x ** 2 squared_numbers = list(map(square, numbers)) print(squared_numbers) # [1, 4, 9, 16, 25] ``` This defeats the purpose of using anonymous functionsIn this case, you should use a regular function, like this:\n```py\nnumbers = [1, 2, 3, 4, 5]\ndef square(num):\nreturn num ** 2\nsquared_numbers = list(map(square, numbers))\nprint(squared_numbers) # [1, 4, 9, 16, 25]\n```\nAlso, you should avoid creating lambda functions that are difficult to read or unnecessarily complicated, like this:\npy\nresult = (lambda x: (x**2 + 2*x - 1) if x > 0 else (x**3 - x + 4))(3)\nprint(result)  # 14\nWhile this function runs fine and produces the correct result of 14, it is not easy to read or look at In this case, it would be better to create a separate function with an if/else statement, and then call that function:\n```py\ndef calculate_expression(x):\nif x > 0:\nreturn x2 + 2*x - 1\nelse:\nreturn x3 - x + 4\nprint(calculate_expression(3))  # 14\n```\nBoth regular functions and lambda functions have their use cases in Python programs If you are dealing with a single inline expressions, then you might consider using a lambda function Otherwise, using a regular function would be the way to go --questions--\n--text--\nWhich of the following is the best use case for a lambda function --answers--\nDefining a function with multiple lines and conditional logic --feedback--\nThink about when an anonymous, one-line function is most appropriate Creating a reusable function across multiple modules --feedback--\nThink about when an anonymous, one-line function is most appropriate Writing a small function for use inside a map() or filter() call Creating a function with a descriptive name for clarity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4ef24827717b838f54d.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "11cde8ed46d48ed0f57e2b9e2b642994",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4ef24827717b838f54d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "go --questions-- --text-- Which of the following is the best use case for a lambda function --answers-- Defining a function with multiple lines and conditional logic --feedback-- Think about when an anonymous, one-line function is most appropriate Creating a reusable function across multiple modules --feedback-- Think about when an anonymous, one-line function is most appropriate Writing a small function for use inside a map() or filter() call Creating a function with a descriptive name for clarity--feedback--\nThink about when an anonymous, one-line function is most appropriate --video-solution--\n3\n--text--\nWhy is it generally considered bad practice to assign a lambda function to a variable --answers--\nIt results in syntax errors --feedback--\nRemember that anonymous functions are meant to be inline and not named It defeats the purpose of using an anonymous function Lambda functions are slower than regular functions --feedback--\nRemember that anonymous functions are meant to be inline and not named Python does not allow this in most versions --feedback--\nRemember that anonymous functions are meant to be inline and not named --video-solution--\n2\n--text--\nWhat is the primary disadvantage of using a complex lambda function like the one shown below py\nresult = (lambda x: (x**2 + 2*x - 1) if x > 0 else (x**3 - x + 4))(3)\n--answers--\nIt makes the code more readable --feedback--\nReview the last part of the lecture for the answer It could lead to unexpected behavior due to ambiguity --feedback--\nReview the last part of the lecture for the answer It is harder to understand and maintain It requires too many resources to execute --feedback--\nReview the last part of the lecture for the answer --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4613,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\6839e4ef24827717b838f54d.md",
      "source_type": "git_repo"
    },
    "token_count": 351,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "44e38393fa1e697d8804b26b91b272d9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\683d6a3fe8c1060ffb1f9b78.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 683d6a3fe8c1060ffb1f9b78\ntitle: What Are Some Common Methods for Tuples challengeType: 19\ndashedName: what-are-some-common-methods-for-tuples\n--description--\nIn the previous lecture, you learned how to work with the tuple data type In this lecture, you'll learn about some common methods you'll use when working with tuples The first method we will cover is count() This method is used to determine how many times an item appears in a tuple Here is an example of checking how many times the string Rust appears in a tuple named programming_languages:\npy\nprogramming_languages = ('Rust', 'Java', 'Python', 'C++', 'Rust')\nprogramming_languages count('Rust') # 2\nSince Rust appears twice in the tuple, the count() method returns the number 2 If the specified item in the count() function is not present at all in the tuple, then the return value is 0:\npy\nprogramming_languages = ('Rust', 'Java', 'Python', 'C++', 'Rust')\nprogramming_languages count('JavaScript') # 0\nIf no arguments are passed into the count() function, then Python raises a TypeError:\n```py\nprogramming_languages = ('Rust', 'Java', 'Python', 'C++', 'Rust')\nprogramming_languages count()\n\"\"\"\nTraceback (most recent call last):\nFile \"\", line 2, in\nTypeError: tuple count() takes exactly one argument (0 given)\n\"\"\"\n```\nThe next method we will look at is the index() method This method is used to find the index where a particular item is present in a tuple Here is an example of using the index() method to find the index for the string Java:\npy\nprogramming_languages = ('Rust', 'Java', 'Python', 'C++', 'Rust')\nprogramming_languages index('Java') # 1\nIf the specified item cannot be found, then Python raises a ValueError:\n```py\nprogramming_languages = ('Rust', 'Java', 'Python', 'C++', 'Rust')\nprogramming_languages index('JavaScript')\n\"\"\"\nTraceback (most recent call last):\nFile \"\", line 2, in\nValueError: tuple index(x): x not in tuple\n\"\"\"\n```\nAnother thing you can do with the index() method is to pass in optional start and stop index arguments",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\683d6a3fe8c1060ffb1f9b78.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "b36366544a0429e3aad5f965b0a014e6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\683d6a3fe8c1060ffb1f9b78.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the string Java: py programming_languages = ('Rust', 'Java', 'Python', 'C++', 'Rust') programming_languages index('Java') # 1 If the specified item cannot be found, then Python raises a ValueError: ```py programming_languages = ('Rust', 'Java', 'Python', 'C++', 'Rust') programming_languages index('JavaScript') \"\"\" Traceback (most recent call last): File \"\", line 2, in ValueError: tuple index(x): x not in tuple \"\"\" ``` Another thing you can do with the index() method is to pass in optional start and stop index argumentsHere is an example of passing in an optional start index:\npy\nprogramming_languages = ('Rust', 'Java', 'Python', 'C++', 'Rust', 'Python')\nprogramming_languages index('Python', 3) # 5\nIn this example, we are specifying where to start searching for the string Python By passing in the number 3 as the second argument to the index() function, we are specifying to start searching at index 3 Since Python appears twice in the tuple, the index() function will return index 5 instead of index 2 because of the use of the optional start index argument You can also pass in an optional stop index Here is a modified example of specifying a start and stop index:\npy\nprogramming_languages = ('Rust', 'Java', 'Python', 'C++', 'Rust', 'Python', 'JavaScript', 'Python')\nprogramming_languages index('Python', 2, 5) # 2\nNow the result is index 2 because we are starting the search at index 2, and searching up to, but not including, index 5 Another commonly used function used with tuples is the sorted() function In a previous lecture you learned about the sort() method for lists Well, the sorted() function can be used on any iterable including tuples Here is an example of creating a new list of numbers using the sorted() function:\npy\nnumbers = (13, 2, 78, 3, 45, 67, 18, 7)\nsorted(numbers) # [2, 3, 7, 13, 18, 45, 67, 78]\nThe sorted() function will always create a new list of the sorted values This differs from the sort() method which sorts the elements of a list in place and does not return a new list",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\683d6a3fe8c1060ffb1f9b78.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "55bc43b6b17d1036ec5c703b8996c430",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\683d6a3fe8c1060ffb1f9b78.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "on any iterable including tuples Here is an example of creating a new list of numbers using the sorted() function: py numbers = (13, 2, 78, 3, 45, 67, 18, 7) sorted(numbers) # [2, 3, 7, 13, 18, 45, 67, 78] The sorted() function will always create a new list of the sorted values This differs from the sort() method which sorts the elements of a list in place and does not return a new listIf you need to customize the sorting behavior for an iterable, you can use the optional reverse and key arguments Here is an example of using key argument to sort items in a tuple by length:\n```py\nprogramming_languages = ('Rust', 'Java', 'Python', 'C++', 'Rust', 'Python')\nsorted(programming_languages, key=len)\nResult\n['C++', 'Rust', 'Java', 'Rust', 'Python', 'Python']\n```\nIf you want to create a new list of values in reverse order, then you can use the reverse argument like this:\n```py\nprogramming_languages = ('Rust', 'Java', 'Python', 'C++', 'Rust', 'Python')\nprint(sorted(programming_languages, reverse=True))\nResult\n['Rust', 'Rust', 'Python', 'Python', 'Java', 'C++']\n```\nTuples are a common data type in Python Understanding how to work with them, along with some helpful methods and functions, will help you write more efficient code --questions--\n--text--\nWhat will the following code return py\nprogramming_languages = ('Rust', 'Java', 'Python', 'C++', 'Rust')\nprogramming_languages count('Rust')\n--answers--\n2\n1\n--feedback--\nReview the beginning of the lecture for the answer 0\n--feedback--\nReview the beginning of the lecture for the answer 3\n--feedback--\nReview the beginning of the lecture for the answer --video-solution--\n1\n--text--\nWhat will be the result for the following code py\nprogramming_languages = ('Rust', 'Java', 'Python', 'C++', 'Rust')\nprogramming_languages index('JavaScript')\n--answers--\nIndexError\n--feedback--\nThink about which type of error is appropriate to communicate that a value cannot be found",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\683d6a3fe8c1060ffb1f9b78.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "e51b56d70e7514f8317fae61331162c2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\683d6a3fe8c1060ffb1f9b78.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--answers-- 2 1 --feedback-- Review the beginning of the lecture for the answer 0 --feedback-- Review the beginning of the lecture for the answer 3 --feedback-- Review the beginning of the lecture for the answer --video-solution-- 1 --text-- What will be the result for the following code py programming_languages = ('Rust', 'Java', 'Python', 'C++', 'Rust') programming_languages index('JavaScript') --answers-- IndexError --feedback-- Think about which type of error is appropriate to communicate that a value cannot be foundRangeError\n--feedback--\nThink about which type of error is appropriate to communicate that a value cannot be found ValueError\nSyntaxError\n--feedback--\nThink about which type of error is appropriate to communicate that a value cannot be found --video-solution--\n3\n--text--\nWhich of the following functions is used to return a new list of sorted results from an iterable --answers--\nsorts()\n--feedback--\nReview the last part of the lecture for the answer sorting()\n--feedback--\nReview the last part of the lecture for the answer sort()\n--feedback--\nReview the last part of the lecture for the answer sorted()\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6107,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-loops-and-sequences\\683d6a3fe8c1060ffb1f9b78.md",
      "source_type": "git_repo"
    },
    "token_count": 248,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "717cbc1b285b20d62bf2880658a90359",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-media\\6716743531fc9a797351c21e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6716743531fc9a797351c21e\ntitle: What Are Replaced Elements, and What Are Some Examples challengeType: 19\ndashedName: what-are-replaced-elements\n--description--\nA replaced element is an element whose content is determined by an external resource rather than by CSS itself CSS, or cascading stylesheets, is used to add styles to a web page Common examples of replaced elements include the image, iframe, and video elements With replaced elements, you can control the position, or layout of an element But your CSS cannot directly modify the content of that element This might be easier to explain with some examples Consider the image element, which embeds an image on your web page:\nhtml\n<img src=\"example-img-url\" alt=\"Descriptive text goes here\">\nThe element itself is replaced with the external object: the image Your CSS can control things like the positioning of the image, or apply a filter to it, but you cannot actually modify the image itself A more robust example might be the iframe element, which embeds an external site on your web page:\n```html\n```\nCommon examples for using the iframe element would be to embed Maps or YouTube videos onto the page The element itself is replaced with the external object: the site Your CSS can change the positioning of the embedded site, but you cannot modify the site's contents To dive a bit further, if the embedded site has an h1 element, your CSS would not be able to style that h1 element You cannot change the size, font color, and so on There are some other replaced elements, such as video, and embed And some elements behave as replaced elements under specific circumstances Here's an example of an input element with the type attribute set to image:\nhtml\n<input type=\"image\" alt=\"Descriptive text goes here\" src=\"example-img-url\">\nThis type of input is considered to be a replaced element, but other input types like text, or email are not replaced elements --questions--\n--text--\nWhat can you style in a replaced element --answers--\nThe font size --feedback--\nYou can change where the element is located on your page The layout or positioning The color of specific text --feedback--\nYou can change where the element is located on your page Everything --feedback--\nYou can change where the element is located on your page --video-solution--\n2\n--text--\nWhat is a replaced element replaced with --answers--\nAn external object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3321,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-media\\6716743531fc9a797351c21e.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "872e4fe5439817306da05b18ed4186cb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-media\\6716743531fc9a797351c21e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "replaced elements --questions-- --text-- What can you style in a replaced element --answers-- The font size --feedback-- You can change where the element is located on your page The layout or positioning The color of specific text --feedback-- You can change where the element is located on your page Everything --feedback-- You can change where the element is located on your page --video-solution-- 2 --text-- What is a replaced element replaced with --answers-- An external objectAnother element --feedback--\nThe element is replaced by something outside your site Some CSS --feedback--\nThe element is replaced by something outside your site Assembly --feedback--\nThe element is replaced by something outside your site --video-solution--\n1\n--text--\nWhich of these is a replaced element --answers--\nh1\n--feedback--\nReview the section where examples of replaced elements were discussed p\n--feedback--\nReview the section where examples of replaced elements were discussed iframe\na\n--feedback--\nReview the section where examples of replaced elements were discussed --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3321,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-media\\6716743531fc9a797351c21e.md",
      "source_type": "git_repo"
    },
    "token_count": 213,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "503544b1fedd140daaad0e9941922a51",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-media\\671682b3983489a819507553.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 671682b3983489a819507553\ntitle: How Do You Embed Videos onto Your Page Using the iframe Element challengeType: 19\ndashedName: how-do-you-embed-videos-onto-your-page-using-the-iframe-element\n--description--\nFirst, what exactly is the iframe element iframe stands for inline frame It's an inline element used to embed other HTML content directly within the HTML page That HTML content could be a video, map, another HTML element, or even other web pages Here's what the syntax of the iframe element looks like:\n```html\n```\nThe src attribute specifies the URL of the page you want to embed The width attribute specifies the width of the iframe The height attribute specifies the height of the iframe The allowfullscreen attribute allows the user to display the iframe in full screen mode It's also a good practice to specify a title attribute for the iframe, as it's important for accessibility To embed a video within an iframe you can copy it directly from popular video services like YouTube and Vimeo, or define it yourself with the src attribute pointing to the URL of that video Here's an example of embedding a popular freeCodeCamp course from YouTube:\n```html\nA freeCodeCamp YouTube Video Embedded with the iframe Element\n```\nYou can then customize the iframe to your needs or even define your own by copying the link to the YouTube video and pasting it in as the URL value The caveat is that you must replace https://youtu be with https://youtube com/embed/ youtu be is the domain when you copy the share link and youtube com/embed/ is the domain required for embedding videos with the iframe element Here's an example of that:\n```html\n```\nNote that the video can come from anywhere It doesn't have to come from video services like YouTube and Vimeo Here's a video from Pixabay embedded with the iframe element:\n```html\nA Video from Pixabay Embedded with the iframe Element\n```\nDon't forget you can also embed a map, another web page, or direct HTML within the iframe element Here's a map I was able to embed with the iframe element:\n```html\nA Map from Openstreetmap org Embedded with the iframe Element\nView Larger Map\n```\nIf you want to embed direct HTML within the iframe element you have to use the srcdoc attribute instead of src --questions--\n--text--\nWhat does iframe mean --answers--\nInternational frame",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4669,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-media\\671682b3983489a819507553.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "0f1bd4419bf105d0e3b73b2c350f47c4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-media\\671682b3983489a819507553.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "``` Don't forget you can also embed a map, another web page, or direct HTML within the iframe element Here's a map I was able to embed with the iframe element: ```html A Map from Openstreetmap org Embedded with the iframe Element View Larger Map ``` If you want to embed direct HTML within the iframe element you have to use the srcdoc attribute instead of src --questions-- --text-- What does iframe mean --answers-- International frame--feedback--\nReview the beginning of the lecture to obtain the answer Inline form --feedback--\nReview the beginning of the lecture to obtain the answer Inline frame Inline form element --feedback--\nReview the beginning of the lecture to obtain the answer --video-solution--\n3\n--text--\nWhich attribute of the iframe element specifies the location of what you want to embed --answers--\nsrc\nurl\n--feedback--\nThink about the attribute that means \"source\" frameborder\n--feedback--\nThink about the attribute that means \"source\" cross-origin\n--feedback--\nThink about the attribute that means \"source\" --video-solution--\n1\n--text--\nWhich attribute of the iframe element do you use instead of src if you want to embed direct HTML --answers--\nhtml\n--feedback--\nLook out for the attribute that is related to src document\n--feedback--\nLook out for the attribute that is related to src srcweb\n--feedback--\nLook out for the attribute that is related to src srcdoc\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4669,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-media\\671682b3983489a819507553.md",
      "source_type": "git_repo"
    },
    "token_count": 297,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "992a5ea0734ea067d2cfda7be2d47d58",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733dd694f91d61a5272b4ac.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733dd694f91d61a5272b4ac\ntitle: What Is the Map Object, and How Does It Differ from WeakMaps challengeType: 19\ndashedName: what-is-the-map-object-and-how-does-it-differ-from-weakmaps\n--description--\nIn JavaScript, a Map is a built-in object that stores key-value pairs, similar to an object However, it differs from standard JavaScript objects by allowing keys of any type, including objects and functions A WeakMap is a collection of key-value pairs, similar to a Map, but it uses weak references for its keys The keys must be objects, while the values can be of any type Think of the relationship between a WeakMap and a Map as similar to the relationship between a WeakSet and a Set, as you learned in the previous lecture To create a Map, you use the Map() constructor prepended with the new keyword:\njs\nconst myFirstMap = new Map();\nYou can initialize the Map with values:\njs\nconst myTreesMap = new Map([\n[{ type: 'deciduous' }, 'Maple tree'],\n[['forest', 'grove'], 'Pine tree'],\n[42, 'Oak tree'],\n[true, 'Birch tree'],\n[function() { return 'I am a function key'; }, 'Willow tree'],\n]);\nIf you didn't initialize the Map with values, you can use the set() method to add them:\n```js\nconst myTreesMap = new Map();\nmyTreesMap set({ type: 'deciduous' }, 'Maple tree');\nmyTreesMap set([1, 2], 'Pine tree');\nmyTreesMap set(42, 'Oak tree');\nmyTreesMap set(true, 'Birch tree');\nmyTreesMap set(function() { return \"I'm a function key\"; }, 'Willow tree');\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6032,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733dd694f91d61a5272b4ac.md",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "d60639628753425503c4c07f6c45383e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733dd694f91d61a5272b4ac.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "'grove'], 'Pine tree'], [42, 'Oak tree'], [true, 'Birch tree'], [function() { return 'I am a function key'; }, 'Willow tree'], ]); If you didn't initialize the Map with values, you can use the set() method to add them: ```js const myTreesMap = new Map(); myTreesMap set({ type: 'deciduous' }, 'Maple tree'); myTreesMap set([1, 2], 'Pine tree'); myTreesMap set(42, 'Oak tree'); myTreesMap set(true, 'Birch tree'); myTreesMap set(function() { return \"I'm a function key\"; }, 'Willow tree'); consolelog(myTreesMap);\n```\nHere's what a Map looks like in the console:\njs\n/*\nMap(5) {{…} => 'Maple tree', Array(2) => 'Pine tree', 42 => 'Oak tree', true => 'Birch tree', ƒ => 'Willow tree'}\n[[Entries]]\n0:{Object => \"Maple tree\"}\nkey: {type: 'deciduous'}\nvalue: \"Maple tree\"\n1:{Array(2) => \"Pine tree\"}\nkey: (2)\nvalue: \"Pine tree\"\n2:{42 => \"Oak tree\"}\nkey: 42\nvalue: \"Oak tree\"\n3:{true => \"Birch tree\"}\nkey: true\nvalue: \"Birch tree\"\n4:{function () { return \"I'm a function key\"; } => \"Willow tree\"}\nkey: f ()\nvalue: \"Willow tree\"\nsize: 5\n[[Prototype]]: Map\n*/\nOther methods you can use to work with a Map are:\nget(key) to retrieve the value associated with the specified key has(key) to check if a key exists in the Map delete(key) to remove a key-value pair from the Map clear() to remove all key-value pairs entries() to check the entries of the Map (it returns the entries in a MapIterator) forEach() to loop through the entries of the Map size to indicate the number of key-value pairs in the Map",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6032,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733dd694f91d61a5272b4ac.md",
      "source_type": "git_repo"
    },
    "token_count": 455,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "48b4a0dc045097b3c59f3427ba5ed4df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733dd694f91d61a5272b4ac.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to work with a Map are: get(key) to retrieve the value associated with the specified key has(key) to check if a key exists in the Map delete(key) to remove a key-value pair from the Map clear() to remove all key-value pairs entries() to check the entries of the Map (it returns the entries in a MapIterator) forEach() to loop through the entries of the Map size to indicate the number of key-value pairs in the MapThere's a WeakMap() constructor you can use to create a WeakMap:\njs\nconst myFirstWeakMap = new WeakMap();\nThe set(), get(), has(), and delete() methods are all available for use with a WeakMap as well For example here's how you can assign items to the Map with the set() method:\n```js\nconst myTreeWeakMap = new WeakMap();\nmyTreeWeakMap set({ id: 1 }, 'Maple tree');\nmyTreeWeakMap set({ id: 2 }, 'Pine tree');\nmyTreeWeakMap set({ id: 3 }, 'Oak tree');\nmyTreeWeakMap set({ id: 4 }, 'Birch tree');\nmyTreeWeakMap set({ id: 5 }, 'Willow tree');\nconsole log(myTreeWeakMap);\n```\nHere's what a WeakMap looks like in the console:\njs\n/*\nWeakMap {{…} => 'Willow tree', {…} => 'Maple tree', {…} => 'Pine tree', {…} => 'Oak tree'}\n[[Entries]]\nNo properties\n[[Prototype]]: WeakMap\n*/\nHere are the differences between a Map and a WeakMap:\n| Feature | Map | WeakMap |\n| --- | --- | --- |\n| Key Type | Keys can be of any data type, including strings, numbers, objects, or even functions | Keys must be objects |\n| Use Case | Use a Map when you need to associate data with any type of key | Use a WeakMap when you only need to associate data with objects |\n| Iteration | You can loop through a Map using forEach(), keys(), values(), or entries() | A WeakMap is not iterable |\n| Size Property | Map has a size property to get the number of key-value pairs | WeakMap does not have a size property |\nIn the table above, you can see the differences summarized including the key type, use case, iteration and size property",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6032,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733dd694f91d61a5272b4ac.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "7cb6ca17d9793d391acb432ae6e17fd3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733dd694f91d61a5272b4ac.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "you only need to associate data with objects | | Iteration | You can loop through a Map using forEach(), keys(), values(), or entries() | A WeakMap is not iterable | | Size Property | Map has a size property to get the number of key-value pairs | WeakMap does not have a size property | In the table above, you can see the differences summarized including the key type, use case, iteration and size propertyPlease take a moment to read the content of this table to learn more about their differences --questions--\n--text--\nWhich of these differentiates a Map from a WeakMap in JavaScript --answers--\nA Map allows only objects as keys, while a WeakMap allows keys of any type --feedback--\nThink about the key types allowed and how the references are handled A Map has weak references to keys, while a WeakMap does not --feedback--\nThink about the key types allowed and how the references are handled A Map allows keys of any type, while a WeakMap only allows objects as keys A Map and a WeakMap function exactly the same --feedback--\nThink about the key types allowed and how the references are handled --video-solution--\n3\n--text--\nWhich property lets you know the number of items in a Map --answers--\nlength\n--feedback--\nThink about the property that measures the number of entries in a Map count\n--feedback--\nThink about the property that measures the number of entries in a Map total\n--feedback--\nThink about the property that measures the number of entries in a Map size\n--video-solution--\n4\n--text--\nWhich method lets you add an item to a Map and a WeakMap --answers--\nadd()\n--feedback--\nThink about the method specifically used for adding key-value pairs to a Map push()\n--feedback--\nThink about the method specifically used for adding key-value pairs to a Map set()\ninsert()\n--feedback--\nThink about the method specifically used for adding key-value pairs to a Map --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6032,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733dd694f91d61a5272b4ac.md",
      "source_type": "git_repo"
    },
    "token_count": 402,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "08c1bd75ef57e5d00c661092198f43ad",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733ab269b378bf724c9ac71.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733ab269b378bf724c9ac71\ntitle: What Are Sets in JavaScript, and How Does It Differ from WeakSets challengeType: 19\ndashedName: what-are-sets-in-javascript-and-how-does-it-differ-from-weaksets\n--description--\nIn JavaScript, Set is a built-in object for managing data collections It lets you store unique values of any type, whether primitive or object references Set ensures that each value in it appears only once, making it useful for eliminating duplicates from an array or handling collections of distinct values As for WeakSet, it’s a special type of Set with fewer features that allows you to store weakly held object references and symbols Unlike Set, WeakSet does not support primitives like numbers or strings Unlike a regular Set, a WeakSet only stores objects, and the references to those objects are \"weak\" meaning WeakSets do not prevent the stored objects from being garbage-collected if there are no other references to them In simpler terms, if the object is not being used anywhere else in your code, it is removed automatically to free up memory To create a Set, you use the Set constructor and assign it to a variable:\njs\nconst myFirstSet = new Set();\nYou can also initialize the Set with values:\njs\nconst treeSet = new Set(['Baobab', 'Jackalberry', 'Mopane Tree', 'Breadfruit']);\nIf you log the Set to the console, this is what the output looks like:\njs\n/*\nSet(4) {'Baobab', 'Jackalberry', 'Mopane Tree', 'Breadfruit'}\n[[Entries]]\n0: \"Baobab\"\nvalue: \"Baobab\"\n1: \"Jackalberry\"\nvalue: \"Jackalberry\"\n2: \"Mopane Tree\"\nvalue: \"Mopane Tree\"\n3: \"Breadfruit\"\nvalue: \"Breadfruit\"\nsize: 4\n[[Prototype]]: Set\n*/\nIf you didn't initialize the Set with values, you can use the add() method to add an item to the Set:\n```js\nconst treeSet = new Set();\n// Add items to the treeSet\ntreeSet add('Baobab');\ntreeSet add('Jackalberry');\ntreeSet add('Mopane Tree');\ntreeSet",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733ab269b378bf724c9ac71.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "bea81bcaec2d9f7009edfa235b1c28f6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733ab269b378bf724c9ac71.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "output looks like: js /* Set(4) {'Baobab', 'Jackalberry', 'Mopane Tree', 'Breadfruit'} [[Entries]] 0: \"Baobab\" value: \"Baobab\" 1: \"Jackalberry\" value: \"Jackalberry\" 2: \"Mopane Tree\" value: \"Mopane Tree\" 3: \"Breadfruit\" value: \"Breadfruit\" size: 4 [[Prototype]]: Set */ If you didn't initialize the Set with values, you can use the add() method to add an item to the Set: ```js const treeSet = new Set(); // Add items to the treeSet treeSet add('Baobab'); treeSet add('Jackalberry'); treeSet add('Mopane Tree'); treeSetadd('Breadfruit');\n```\nThe result and appearance of the result in the console remains the same Don't forget that duplicate items will be ignored in the Set:\n```js\nconst treeSet = new Set();\n// Add items to the treeSet\ntreeSet add('Baobab');\ntreeSet add('Jackalberry');\ntreeSet add('Mopane Tree');\ntreeSet add('Breadfruit');\ntreeSet add('Baobab'); //duplicate item will be ignored\nconsole log(treeSet);\n// Set(4) {'Baobab', 'Jackalberry', 'Mopane Tree', 'Breadfruit'}\n```\nThe other methods you can use to manipulate a Set are:\ndelete()\nclear()\nhas()\nentries()\nforEach()\nkeys()\nvalues()\nLet's look at how these methods work one by one delete() removes a specified item from the Set:\n```js\nconst treeSet = new Set();\n// Add items to the treeSet\ntreeSet add('Baobab');\ntreeSet add('Jackalberry');\ntreeSet add('Mopane Tree');\ntreeSet add('Breadfruit');\ntreeSet delete('Breadfruit');\nconsole log(treeSet); // Set(3) {'Baobab', 'Jackalberry', 'Mopane Tree'}\n```\nhas() checks if a specified value exists in the Set:\n```js\nconst treeSet = new Set();\n// Add items to the treeSet\ntreeSet add('Baobab');\ntreeSet add('Jackalberry');\ntreeSet add('Mopane Tree');\ntreeSet",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733ab269b378bf724c9ac71.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "88f67c7a8b9e786055c661b443db0f26",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733ab269b378bf724c9ac71.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "these methods work one by one delete() removes a specified item from the Set: ```js const treeSet = new Set(); // Add items to the treeSet treeSet add('Baobab'); treeSet add('Jackalberry'); treeSet add('Mopane Tree'); treeSet add('Breadfruit'); treeSet delete('Breadfruit'); console log(treeSet); // Set(3) {'Baobab', 'Jackalberry', 'Mopane Tree'} ``` has() checks if a specified value exists in the Set: ```js const treeSet = new Set(); // Add items to the treeSet treeSet add('Baobab'); treeSet add('Jackalberry'); treeSet add('Mopane Tree'); treeSetadd('Breadfruit');\ntreeSet delete('Breadfruit');\nconsole log(treeSet has('Breadfruit')); // false\n```\nentries() returns a Set iterator containing an array of the values in a [value, value] format:\n```js\nconst treeSet = new Set();\n// Add items to the treeSet\ntreeSet add('Baobab');\ntreeSet add('Jackalberry');\ntreeSet add('Mopane Tree');\ntreeSet add('Breadfruit');\ntreeSet delete('Breadfruit');\nconsole log(treeSet entries());\n// SetIterator {'Baobab' => 'Baobab', 'Jackalberry' => 'Jackalberry', 'Mopane Tree' => 'Mopane Tree'}\n```\nkeys() and values() show the values in the Set keys() is just an alias for the values() method:\n```js\nconst treeSet = new Set();\n// Add items to the treeSet\ntreeSet add('Baobab');\ntreeSet add('Jackalberry');\ntreeSet add('Mopane Tree');\ntreeSet add('Breadfruit');\ntreeSet delete('Breadfruit');\nconsole log('Keys: ', treeSet keys());\nconsole log('Values: ', treeSet values());\n// Keys: SetIterator {'Baobab', 'Jackalberry', 'Mopane Tree'}\n// Values: SetIterator {'Baobab', 'Jackalberry', 'Mopane Tree'}\n```\nforEach() lets you iterate through the Set:\n```js\nconst treeSet = new Set();\n// Add items to the treeSet\ntreeSet add('Baobab');\ntreeSet",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733ab269b378bf724c9ac71.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "f04b59cb8d9edd2876d8373a4e43d4cf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733ab269b378bf724c9ac71.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "an alias for the values() method: ```js const treeSet = new Set(); // Add items to the treeSet treeSet add('Baobab'); treeSet add('Jackalberry'); treeSet add('Mopane Tree'); treeSet add('Breadfruit'); treeSet delete('Breadfruit'); console log('Keys: ', treeSet keys()); console log('Values: ', treeSet values()); // Keys: SetIterator {'Baobab', 'Jackalberry', 'Mopane Tree'} // Values: SetIterator {'Baobab', 'Jackalberry', 'Mopane Tree'} ``` forEach() lets you iterate through the Set: ```js const treeSet = new Set(); // Add items to the treeSet treeSet add('Baobab'); treeSetadd('Jackalberry');\ntreeSet add('Mopane Tree');\ntreeSet add('Breadfruit');\ntreeSet delete('Breadfruit');\ntreeSet forEach((tree) => console log(tree));\n/\nBaobab\nJackalberry\nMopane Tree\n/\n```\nclear() removes all the items of the array:\n```js\nconst treeSet = new Set();\n// Add items to the treeSet\ntreeSet add('Baobab');\ntreeSet add('Jackalberry');\ntreeSet add('Mopane Tree');\ntreeSet add('Breadfruit');\ntreeSet delete('Breadfruit');\ntreeSet clear();\nconsole log(treeSet); // Set(0) {size: 0}\n```\nIt is also worth mentioning that there's a size property that returns the number of items in the Set:\n```js\nconst treeSet = new Set();\n// Add items to the treeSet\ntreeSet add('Baobab');\ntreeSet add('Jackalberry');\ntreeSet add('Mopane Tree');\ntreeSet add('Breadfruit');\ntreeSet delete('Breadfruit');\nconsole log(treeSet size); // 3\n```\nJust like Set, there's also a WeakSet constructor you can use to create a WeakSet:\njavascript\nconst treeWeakSet = new WeakSet();\nWeakSet also has the add(), delete(), and the has() methods:\n```javascript\nconst treeWeakSet = new WeakSet();\ntreeWeakSet add({ name: 'Baobab' });\ntreeWeakSet add({ name: 'Jackalberry' });\ntreeWeakSet",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733ab269b378bf724c9ac71.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "5b5665525cd11a06ba49a2c92ab93cb2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733ab269b378bf724c9ac71.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const treeSet = new Set(); // Add items to the treeSet treeSet add('Baobab'); treeSet add('Jackalberry'); treeSet add('Mopane Tree'); treeSet add('Breadfruit'); treeSet delete('Breadfruit'); console log(treeSet size); // 3 ``` Just like Set, there's also a WeakSet constructor you can use to create a WeakSet: javascript const treeWeakSet = new WeakSet(); WeakSet also has the add(), delete(), and the has() methods: ```javascript const treeWeakSet = new WeakSet(); treeWeakSet add({ name: 'Baobab' }); treeWeakSet add({ name: 'Jackalberry' }); treeWeakSetadd({ name: 'Mopane Tree' });\ntreeWeakSet add({ name: 'Breadfruit' });\ntreeWeakSet delete('Jackalberry');\nconsole log(treeWeakSet has('Jackalberry')); // false\nconsole log(treeWeakSet);\n```\nIn the output, the contents of the WeakSet appear like this:\njavascript\n/*\nWeakSet {{…}, {…}, {…}, {…}}\n[[Entries]]\nNo properties\n[[Prototype]]: WeakSet */\nThe contents appear empty because WeakSets are not iterable and do not expose their contents directly Don't forget that only symbols and objects with well-defined keys and values are supported Adding a primitive, such as numbers or strings, will result in an error:\n```js\ntreeWeakSet add('Alan Smith');\nconsole log(treeWeakSet); // Invalid value used in weak set\n//    at WeakSet add ()\n```\nThe key difference between a Set and a WeakSet is that a Set stores any value, while a WeakSet can only store objects",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733ab269b378bf724c9ac71.md",
      "source_type": "git_repo"
    },
    "token_count": 358,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "3c9e74e9e5060c093060dbd90d32b45d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733ab269b378bf724c9ac71.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and do not expose their contents directly Don't forget that only symbols and objects with well-defined keys and values are supported Adding a primitive, such as numbers or strings, will result in an error: ```js treeWeakSet add('Alan Smith'); console log(treeWeakSet); // Invalid value used in weak set // at WeakSet add () ``` The key difference between a Set and a WeakSet is that a Set stores any value, while a WeakSet can only store objectsHere are some other noticeable differences between a Set and a WeakSet:\n| Feature | Set | WeakSet |\n| --- | --- | --- |\n| Type of Values Stored | Stores any data type | Stores only objects |\n| Referencing | Strong referencing | Weak referencing |\n| Iteration | Supports iteration with forEach and loops | Does not support iteration |\n| Methods and Properties | add(), delete(), has(), keys(), values(), size, and more | add(), delete(), and has() only |\n| Use case | General-purpose collection of unique values and removing duplicates from arrays | Efficient memory tracking of object references |\nYou can see the differences in the types of values that the two kinds of sets can store, their support for iterating over the stored objects and their ideal use cases Please take a moment to read the content of this table --questions--\n--text--\nHow does a Set differ from a WeakSet when it comes to the data they both support --answers--\nA Set allows weakly held object references, while a WeakSet supports both objects and primitives --feedback--\nRemember that a Set can hold a variety of data types A Set stores any type, including primitives, while a WeakSet allows only weakly held object references A Set has fewer features than a WeakSet --feedback--\nRemember that a Set can hold a variety of data types A Set is exclusively for objects, while a WeakSet is for numbers --feedback--\nRemember that a Set can hold a variety of data types --video-solution--\n2\n--text--\nHow do you create a Set or a WeakSet in JavaScript --answers--\nBy calling Set() or WeakSet() without the new keyword\n--feedback--\nThink about what keyword needs to be included to create a Set or WeakSet By using object literals {}\n--feedback--\nThink about what keyword needs to be included to create a Set or WeakSet By using array literals []\n--feedback--\nThink about what keyword needs to be included to create a Set or WeakSet",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733ab269b378bf724c9ac71.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "8f9223c7688a82c6943e82a67ca0f6cd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733ab269b378bf724c9ac71.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "How do you create a Set or a WeakSet in JavaScript --answers-- By calling Set() or WeakSet() without the new keyword --feedback-- Think about what keyword needs to be included to create a Set or WeakSet By using object literals {} --feedback-- Think about what keyword needs to be included to create a Set or WeakSet By using array literals [] --feedback-- Think about what keyword needs to be included to create a Set or WeakSetBy using the Set or WeakSet constructor with the new keyword\n--video-solution--\n4\n--text--\nWhich methods are available to both a Set and a WeakSet in JavaScript --answers--\nkeys(), values(), size()\n--feedback--\nReview the end of the lecture where this was discussed add(), delete(), has()\nclear(), entries(), forEach()\n--feedback--\nReview the end of the lecture where this was discussed set(), get(), remove()\n--feedback--\nReview the end of the lecture where this was discussed --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9236,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-maps-and-sets\\6733ab269b378bf724c9ac71.md",
      "source_type": "git_repo"
    },
    "token_count": 200,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "4aba4cf0e01accc670fbde4bca811d6f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-nano\\688170ebc58d8d3b1ae493a2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 688170ebc58d8d3b1ae493a2\ntitle: What Is Nano challengeType: 19\ndashedName: what-is-nano\n--description--\nWhen working in the terminal, standard text editors aren't always available, but there are programs designed to edit files directly from within the terminal Linux environments typically include a text editor Vi, or Vim, tend to be the most common Emacs and Nano may need to be installed manually, but they are readily available for nearly every distribution The challenge with Vim is it has a substantial learning curve If you are not already familiar with it, you may not even know how to close the application Emacs is arguably a bit more user friendly, but still has its own tome of keyboard shortcuts Nano is considerably more streamlined and user-friendly, especially for new learners It can be much quicker to dive in and edit a file with Nano, and the application even offers on-screen help for the basic keyboard shortcuts The tradeoff for this, however, is the lack of extensibility Unlike Vim or Emacs, which can be extended with plugins to become full development environments, Nano is rather barebones Let's take a peek at what Nano can do To open a file, you can enter nano <filename> in the terminal Once a file is open, you will see the version of Nano you are running and the name of the file you have open at the top of the screen Below that is the content of the file You can use the arrow keys to navigate your cursor and insert or delete text with your keyboard The file will scroll as needed to follow Then, at the bottom, you will see a list of available keyboard shortcuts, that looks something like this:\nbash\n^G Help   ^O Write Out    ^F Where Is   ^K Cut      ^T Execute  ^C Location     M-U Undo    M-A Set Mark    M-] To Bracket    M-B Previous\n^X Exit   ^R Read File    ^\\ Replace    ^U Paste    ^J Justify  ^/ Go To Line   M-E Redo    M-6 Copy        ^B Where Was      M-F Next\nShortcuts which start with the caret (^) symbol indicate you need to hold the Ctrl key and press the indicated letter Shortcuts which start with M- require you to hold the \"meta key\", which in most setups should be the Alt key, and press the letter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5021,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-nano\\688170ebc58d8d3b1ae493a2.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "30048396d86847af54fdf4e3eb617917",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-nano\\688170ebc58d8d3b1ae493a2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Mark M-] To Bracket M-B Previous ^X Exit ^R Read File ^\\ Replace ^U Paste ^J Justify ^/ Go To Line M-E Redo M-6 Copy ^B Where Was M-F Next Shortcuts which start with the caret (^) symbol indicate you need to hold the Ctrl key and press the indicated letter Shortcuts which start with M- require you to hold the \"meta key\", which in most setups should be the Alt key, and press the letterTo edit a file in Nano, you only need to know a few of the shortcut commands After making changes to a file, you can press Ctrl + O to \"Write Out\", or save, the file After entering the command, you will see the menu at the bottom change to this:\nbash\nFile Name to write : <filename>\n^G Get Help                 ^T  To Files\n^C Cancel                   TAB Complete\nPress enter to save the file and go back to editing the file, or Ctrl + C to cancel and go back to editing the file While in the editor, you can press Ctrl + X to exit Nano and go back to the terminal If you have unsaved changes when trying to exit, you will see this in the bottom menu:\nbash\nSave modified buffer (ANSWERING \"No\" WILL DESTROY CHANGES) Y Yes\n^C Cancel                   N No\nPress Y to save your unsaved changes, or N to discard them With this knowledge, you should be better prepared the next time you need to quickly edit a file on a remote server, where you might not have access to a full graphical environment --questions--\n--text--\nWhat makes Nano different from editors like Vim and Emacs --answers--\nIt has a steeper learning curve --feedback--\nThink about the advantages and disadvantages of Nano mentioned in the lecture It's more extensible with plugins --feedback--\nThink about the advantages and disadvantages of Nano mentioned in the lecture It's more user-friendly with on-screen keyboard shortcuts It's not available on most Linux distributions --feedback--\nThink about the advantages and disadvantages of Nano mentioned in the lecture --video-solution--\n3\n--text--\nIn Nano's interface, what does the caret (^) symbol before a key indicate --answers--\nPress the Shift key and the indicated letter --feedback--\nThe lecture explains how to interpret the keyboard shortcuts shown at the bottom of the Nano interface Press the Control (Ctrl) key and the indicated letter",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5021,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-nano\\688170ebc58d8d3b1ae493a2.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "443959dc1c31061508a0ae939a20e63c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-nano\\688170ebc58d8d3b1ae493a2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "with on-screen keyboard shortcuts It's not available on most Linux distributions --feedback-- Think about the advantages and disadvantages of Nano mentioned in the lecture --video-solution-- 3 --text-- In Nano's interface, what does the caret (^) symbol before a key indicate --answers-- Press the Shift key and the indicated letter --feedback-- The lecture explains how to interpret the keyboard shortcuts shown at the bottom of the Nano interface Press the Control (Ctrl) key and the indicated letterPress the Alt key and the indicated letter --feedback--\nThe lecture explains how to interpret the keyboard shortcuts shown at the bottom of the Nano interface Press the indicated letter twice quickly --feedback--\nThe lecture explains how to interpret the keyboard shortcuts shown at the bottom of the Nano interface --video-solution--\n2\n--text--\nWhat keyboard shortcut is used to save changes to a file in Nano --answers--\nCtrl + Q\n--feedback--\nFind where the lecture mentions how to save the file Ctrl + X\n--feedback--\nFind where the lecture mentions how to save the file Ctrl + G\n--feedback--\nFind where the lecture mentions how to save the file Ctrl + O\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5021,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-nano\\688170ebc58d8d3b1ae493a2.md",
      "source_type": "git_repo"
    },
    "token_count": 237,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "9623ed0e8ff918aec4c0121facb48fb8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\672d266e014ef8216df987d2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672d266e014ef8216df987d2\ntitle: What Is the Number Type in JavaScript, and What Are the Different Types of Numbers Available challengeType: 19\ndashedName: what-is-the-number-type-in-javascript-and-what-are-the-different-types-of-numbers-available\n--description--\nThe Number type is one of the most used data types in JavaScript and other programming languages Numbers might seem simple, but there's a lot to explore when it comes to numbers in JavaScript So, let's take a deeper look In JavaScript, the Number data type represents a numeric value Unlike many other programming languages that separate integers and floating-point numbers into different types, JavaScript uses one unified Number type to account for numbers This means you can work with whole numbers, decimals, and even special numeric values all under the same Number data type umbrella Here's a basic example showing you integers, floating point numbers, and negative numbers are all of type number:\n```js\nconst wholeNumber = 50;\nconst decimalNumber = 4 5;\nconst negativeNumber = -7;\nconsole log(typeof wholeNumber); // number\nconsole log(typeof decimalNumber); // number\nconsole log(typeof negativeNumber); // number\n```\nJavaScript's Number type includes various kinds of numeric values, ranging from simple integers and floating-point numbers to special cases like Infinity and NaN, or \"Not a Number\" Let's break down the main types you'll encounter Integers are whole numbers without any fractional or decimal part They can be positive, negative, or zero Here are some examples:\n```js\nconst positiveInteger = 100;\nconst negativeInteger = -25;\nconst zero = 0;\nconsole log(typeof positiveInteger); // number\nconsole log(typeof negativeInteger); // number\nconsole log(typeof zero); // number\n```\nFloating point numbers are numbers with decimal points They're often referred to as just \"floats\" by JavaScript developers Floats are useful when you need more precision, such as when you're dealing with measurements or currencies Here are some examples:\n```js\nconst floatingPointNumber = 4 5;\nconst anotherFloat = 89 56;\nconst oneMoreFloat = 16 462;\nconsole log(typeof floatingPointNumber); // number\nconsole log(typeof anotherFloat); // number\nconsole log(typeof oneMoreFloat); // number\n```\nJavaScript can represent numbers that are beyond the maximum limit with Infinity",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5338,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\672d266e014ef8216df987d2.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4e5c51b7048e9a18220ec0b4fa16fedb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\672d266e014ef8216df987d2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "points They're often referred to as just \"floats\" by JavaScript developers Floats are useful when you need more precision, such as when you're dealing with measurements or currencies Here are some examples: ```js const floatingPointNumber = 4 5; const anotherFloat = 89 56; const oneMoreFloat = 16 462; console log(typeof floatingPointNumber); // number console log(typeof anotherFloat); // number console log(typeof oneMoreFloat); // number ``` JavaScript can represent numbers that are beyond the maximum limit with InfinityYou'll encounter this when you try to divide a number by zero or on rare occasions, exceed the upper boundary of the Number type Here's an example:\njs\nconst infiniteNumber = 1 / 0;\nconsole log(infiniteNumber); // Infinity\nconsole log(typeof infiniteNumber); // number\nSometimes in JavaScript, some mathematical operations don't result in a valid number For instance, if you try to perform a mathematical operation on something that isn't a number, you'll get NaN, which stands for \"Not a Number\":\njs\nconst notANumber = 'hello world' / 2;\nconsole log(notANumber); // NaN\nSurprisingly, the type of NaN is also Number:\njs\nconst notANumber = 'hello world' / 2;\nconsole log(typeof notANumber); // number\nApart from the standard decimal system (base 10), JavaScript also supports numbers in different bases such as binary, octal, and hexadecimal Binary is a base-2 system that uses only digits 1 and 0 Octal is a base-8 system that uses only digits 0 to 7 Hexadecimal is a base-16 system that uses digits 0 to 9 and letters a to f, like you see in CSS hex colors --questions--\n--text--\nWhich of these best describes the JavaScript Number type --answers--\nIt only includes integers --feedback--\nConsider all the different kinds of numeric values JavaScript can handle It covers both integers and floating-point numbers, as well as special cases like infinity and NaN It is limited to simple arithmetic operations --feedback--\nConsider all the different kinds of numeric values JavaScript can handle It excludes special values like infinity and NaN --feedback--\nConsider all the different kinds of numeric values JavaScript can handle --video-solution--\n2\n--text--\nWhen are floating point numbers most useful in JavaScript --answers--\nWhen dealing with whole numbers --feedback--\nConsider situations where exact values are crucial",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5338,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\672d266e014ef8216df987d2.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "727dfaf1f155071779c620e60f53a924",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\672d266e014ef8216df987d2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "floating-point numbers, as well as special cases like infinity and NaN It is limited to simple arithmetic operations --feedback-- Consider all the different kinds of numeric values JavaScript can handle It excludes special values like infinity and NaN --feedback-- Consider all the different kinds of numeric values JavaScript can handle --video-solution-- 2 --text-- When are floating point numbers most useful in JavaScript --answers-- When dealing with whole numbers --feedback-- Consider situations where exact values are crucialWhen you need to perform simple arithmetic --feedback--\nConsider situations where exact values are crucial When you need more precision, such as in measurements or currencies When working exclusively with integers --feedback--\nConsider situations where exact values are crucial --video-solution--\n3\n--text--\nWhen might you encounter the value Infinity in JavaScript --answers--\nWhen multiplying any two numbers --feedback--\nThink about extreme cases involving large numbers or impossible calculations When a number exceeds the lower boundary of the Number type --feedback--\nThink about extreme cases involving large numbers or impossible calculations When performing string concatenation --feedback--\nThink about extreme cases involving large numbers or impossible calculations When dividing a number by zero or exceeding the upper boundary of the Number type --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5338,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\672d266e014ef8216df987d2.md",
      "source_type": "git_repo"
    },
    "token_count": 240,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "04eb126f6df83bf95a58cd443b6b935d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\673271884bf678d8b9c64f56.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673271884bf678d8b9c64f56\ntitle: What Are the Different Arithmetic Operators in JavaScript challengeType: 19\ndashedName: what-are-the-different-arithmetic-operators-in-javascript\n--description--\nJavaScript provides tools to perform basic arithmetic operations on numbers, such as addition, subtraction, multiplication, and division JavaScript also includes operators for more complex arithmetic operations, such as remainder and exponentiation All these tools are called arithmetic operators Let's look at these operators in detail, how to use them and how to combine them The addition operator is a plus sign (+) The addition operator allows you to find the total of two or more numbers In addition operations, the order of the numbers doesn't matter:\n```js\nconst num1 = 10;\nconst num2 = 5;\nconst num3 = 15;\nconst result1 = num1 + num2;\nconst result2 = num2 + num1;\nconst result3 = num2 + num1 + num3;\nconsole log(result1); // 15\nconsole log(result2); // 15\nconsole log(result3); // 30\n```\nThe subtraction operator is a minus sign (-) It allows you to find the difference between two numbers Use the minus sign when you want to subtract a number from another number, usually a smaller one from a bigger one:\njs\nconst difference = 10 - 5;\nconsole log(difference); // 5\nIf a smaller number comes first, you'll get a negative result:\njs\nconst difference = 5 - 10;\nconsole log(difference); // -5\nYou can also assign the numbers to variables and do the subtraction with the variable names:\n```js\nconst num1 = 10;\nconst num2 = 5;\nconst result = num1 - num2;\nconsole log(result); // 5\n```\nIn JavaScript, the multiplication operator is represented by an asterisk (*) and is used to find the product of two or more numbers The order of the numbers you're multiplying does not matter:\n```js\nconst num1 = 10;\nconst num2 = 5;\nconst num3 = 15;\nconst result1 = num1 * num2;\nconst result2 = num2 * num1;\nconst result3 = num2 * num1 * num3;\nconsole log(result1); // 50\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5357,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\673271884bf678d8b9c64f56.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "5c4580d0cee77e502f3865ac6bdfb9e3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\673271884bf678d8b9c64f56.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "console log(result); // 5 ``` In JavaScript, the multiplication operator is represented by an asterisk (*) and is used to find the product of two or more numbers The order of the numbers you're multiplying does not matter: ```js const num1 = 10; const num2 = 5; const num3 = 15; const result1 = num1 * num2; const result2 = num2 * num1; const result3 = num2 * num1 * num3; console log(result1); // 50 consolelog(result2); // 50\nconsole log(result3); // 750\n```\nIn JavaScript, the division operator is a slash (/), which differs from the division symbol used in traditional math (÷) You perform division operations with the division operator The order of the numbers you're dividing matters in this case:\n```js\nconst num1 = 10;\nconst num2 = 5;\nconst num3 = 15;\nconst result1 = num1 / num2;\nconst result2 = num2 / num1;\nconst result3 = num2 / num1 / num3;\nconsole log(result1); // 2\nconsole log(result2); // 0 5\nconsole log(result3); // 0 03333333333333333\n```\nIt's important to note that if you try to divide by zero, JavaScript will return Infinity:\n```js\nconst result = 10 / 0;\nconsole log(result); // Infinity\n```\nMake sure to avoid those types of calculations so you don't end up with unexpected results in your code The remainder operator, represented by a percentage sign (%), returns the remainder of a division The remainder in math is the leftover value after performing division:\n```js\nconst num1 = 10;\nconst num2 = 3;\nconst remainder = num1 % num2;\nconsole log(remainder); // 1\n```\nThe exponentiation operator, represented by a double asterisk (**), raises one number to the power of another:\n```js\nconst num1 = 2;\nconst num2 = 3;\nconst exponent = num1 ** num2;\nconsole log(exponent); // 8\n```\nIt's possible to mix operators in a single operation or expression:\njs\nconst result = 10 + 5 * 2 - 8 / 4;\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5357,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\673271884bf678d8b9c64f56.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "7e83fd9a134adf962deb3d19a1423ae4",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\673271884bf678d8b9c64f56.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "num2 = 3; const remainder = num1 % num2; console log(remainder); // 1 ``` The exponentiation operator, represented by a double asterisk (**), raises one number to the power of another: ```js const num1 = 2; const num2 = 3; const exponent = num1 ** num2; console log(exponent); // 8 ``` It's possible to mix operators in a single operation or expression: js const result = 10 + 5 * 2 - 8 / 4; consolelog(result); // 18\nWhen you mix different operators in a single expression, the JavaScript engine follows a system called operator precedence to determine the order of operations Operator precedence determines the order in which operations are executed in expressions You will learn more about operator precedence in future lectures --questions--\n--text--\nWhich of the following operators should you use to subtract one number from another --answers--\n+\n--feedback--\nThink about the symbol typically used for subtraction -\n*\n--feedback--\nThink about the symbol typically used for subtraction /\n--feedback--\nThink about the symbol typically used for subtraction --video-solution--\n2\n--text--\nWhat’s the output of the following code js\nconst result = 4 / 0;\nconsole log(result);\n--answers--\nInfinity\n4\n--feedback--\nRecall the special value JavaScript returns when you divide by zero 1\n--feedback--\nRecall the special value JavaScript returns when you divide by zero 16\n--feedback--\nRecall the special value JavaScript returns when you divide by zero --video-solution--\n1\n--text--\nWhat’s the output of the following code js\nconst remainder = 5 % 3;\nconsole log(remainder);\n--answers--\n15\n--feedback--\nRemember that % is the remainder operator, so another way to think of the equation is, after 3 goes into 5 once, what’s left 2\n3\n--feedback--\nRemember that % is the remainder operator, so another way to think of the equation is, after 3 goes into 5 once, what’s left 1 6666666666666667\n--feedback--\nRemember that % is the remainder operator, so another way to think of the equation is, after 3 goes into 5 once, what’s left --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5357,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\673271884bf678d8b9c64f56.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d37fc5ab4769fb6de341f9d1b116e99e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-modules\\683ec7b778993c6971b56c83.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 683ec7b778993c6971b56c83\ntitle: What Is the Python Standard Library, and How Do You Import a Module challengeType: 19\ndashedName: what-is-the-python-standard-library-and-how-do-you-import-a-module\n--description--\nIn software development, a library is like a toolbox for developers Instead of having to implement every single part of the code yourself from scratch, a library gives you pre-written and reusable code, like functions, classes, and data structures that you can use in your projects Python has an extensive standard library with many different built-in modules They're all standardized, well-vetted solutions for many of the problems and tasks you'll face daily as a programmer, such as:\nInteracting with the operating system Working with files Networking Working with date and time Performing mathematical operations Using regular expressions Testing and debugging your code And much more Some examples of popular built-in modules are math, random, re (short for \"regular expressions\"), and datetime The math module has helpful functions for performing more complex mathematical operations The random module is helpful for generating random numbers The re module is used for working with regular expressions And the datetime module is helpful for working with dates and times in Python But how can you access the variables, constants, functions, and classes defined in these built-in modules You use an import statement These statements let you import modules into your Python script Import statements are generally written at the top of the file Also, you can customize them based on your needs First, you use the import statement, followed by the name of the module:\npython\nimport module_name\nLet's say that you want to import the math module In that case, you would write this at the top of your file:\npython\nimport math\nThen, if you need to call a method from that module in your Python script, you would use dot notation, with the name of the module followed by the name of the method:\npython\nmodule_name method_name()\nFor example, to get the square root of 36, you would write math followed by a dot and then sqrt, an abbreviation of square root, and within parentheses, you would pass any necessary arguments In this case, we only need to pass in the number we want the square root of:\npython\nmath sqrt(36)\nThis is the most basic version of an import statement, but there are other alternatives",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-modules\\683ec7b778993c6971b56c83.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "3942b3723361e848b0e2548c2c926e57",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-modules\\683ec7b778993c6971b56c83.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "name of the method: python module_name method_name() For example, to get the square root of 36, you would write math followed by a dot and then sqrt, an abbreviation of square root, and within parentheses, you would pass any necessary arguments In this case, we only need to pass in the number we want the square root of: python math sqrt(36) This is the most basic version of an import statement, but there are other alternativesIf you need to import the module with a different name (also known as an \"alias\"), you can use this syntax, with as followed by the alias at the end of the import statement:\npython\nimport module_name as module_alias\nThis is often used to shorten long module names, or to avoid naming conflicts For example, to refer to the math module as m in your code, you can assign an alias to it, like this:\npython\nimport math as m\nThen, you can access the elements of the module using the alias:\npython\nm sqrt(36)\nBut sometimes you don't need to import everything from a module Perhaps you only need one or two specific functions or classes Python has exactly what you need in that case Now the import statement starts with from, followed by the name of the module, and then the import keyword followed by the name of the elements that you want to import:\npython\nfrom module_name import name1, name2\nThen, you can use these names without the module prefix in your Python script If you want to assign aliases to these names, you can do that by using the as keyword after each, followed by the alias you want to use:\npython\nfrom module_name import name1 as alias1, name2 as alias2\nLet's say that you only want to import the radians, sine, and cosine functions from the math module You would write:\npython\nfrom math import radians, sin, cos\nNow you can call these functions directly in your code, without the math module as a prefix",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-modules\\683ec7b778993c6971b56c83.md",
      "source_type": "git_repo"
    },
    "token_count": 405,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "701f4741298e20a2fc084651a817b2a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-modules\\683ec7b778993c6971b56c83.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "these names, you can do that by using the as keyword after each, followed by the alias you want to use: python from module_name import name1 as alias1, name2 as alias2 Let's say that you only want to import the radians, sine, and cosine functions from the math module You would write: python from math import radians, sin, cos Now you can call these functions directly in your code, without the math module as a prefixHere we have a more detailed example:\nTo find the sine and cosine of a specific angle initially expressed in degrees, we can call the radians function to convert it to radians, and then call the sine and cosine functions, passing the angle in radians:\n```python\nfrom math import radians, sin, cos\nangle_degrees = 40\nangle_radians = radians(angle_degrees)\nsine_value = sin(angle_radians)\ncos_value = cos(angle_radians)\nprint(sine_value) # 0 6427876096865393\nprint(cos_value)  # 0 766044443118978\n```\nNotice how we are calling the functions directly, without the name of the module as a prefix This is because we imported the functions with this alternative syntax This is helpful, but it can result in naming conflicts if you already have functions or variables with the same name defined in the Python script itself So that's something to keep in mind when choosing which type of import statement you want to use And finally, we find this import statement that ends with an asterisk The asterisk is telling Python that you want to import everything in that module, but you want to import it so that you don't need to use the name of the module as a prefix:\npython\nfrom module_name import *\nFor example, if you do this while importing the math module, you'll be able to call any function defined in that module without specifying the name of the module as a prefix Here are some examples:\npython\nfrom math import *\nprint(sqrt(36))  # 6 0\nprint(pow(5, 2)) # 25 0\nprint(exp(1))    # 2 718281828459045\nHowever, this is generally discouraged because it can lead to namespace collisions, and make it harder to know where certain names are coming from Import statements work exactly the same for functions, classes, constants, variables, and any other elements defined in the module",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-modules\\683ec7b778993c6971b56c83.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "0215093049b350533a7d99c180eb102a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-modules\\683ec7b778993c6971b56c83.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "module without specifying the name of the module as a prefix Here are some examples: python from math import * print(sqrt(36)) # 6 0 print(pow(5, 2)) # 25 0 print(exp(1)) # 2 718281828459045 However, this is generally discouraged because it can lead to namespace collisions, and make it harder to know where certain names are coming from Import statements work exactly the same for functions, classes, constants, variables, and any other elements defined in the moduleHere is an example of a constant from the math module, the number pi:\npython\nimport math\nprint(math pi)\nAnd here is an example of a class from the datetime module We create a date object that represents July 15, 1959 Then, we assign that date object to a variable and access the day, month, and year individually using dot notation:\npython\nimport datetime\nbirthday = datetime date(1959, 7, 15)\nprint(birthday day)    # 15\nprint(birthday month)  # 7\nprint(birthday year)   # 1959\nYou can find more information about the content of the module in the official Python documentation for that module Great Now that you know more about modules, you should also know about this very important idiom in Python scripts, because they are very closely related:\npython\nif __name__ == '__main__':\n# Code\n__name__ is a special built-in variable in Python When a Python file is executed directly, Python sets the value of this variable to the string \"__main__\" But if the Python file is imported as a module into another Python script, the value of the __name__ variable is set to the name of that module (usually the filename without the py extension) This is why you'll often find this conditional in Python scripts It contains the code that you want to run only if the Python script is running as the main program:\npython\nif __name__ == '__main__':\n# Code\nBut if the script is imported as a module, the code within that block doesn't run This is helpful because it allows Python scripts to have two purposes They can be run directly to execute their main logic, or they can be imported into another module without executing their main logic --questions--\n--text--\nWhich of the following statements best describes the Python Standard Library --answers--\nIt is a collection of pre-written modules and packages included with Python",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-modules\\683ec7b778993c6971b56c83.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "f63382bb6b37c3d7101181d8f70a72eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-modules\\683ec7b778993c6971b56c83.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "if the script is imported as a module, the code within that block doesn't run This is helpful because it allows Python scripts to have two purposes They can be run directly to execute their main logic, or they can be imported into another module without executing their main logic --questions-- --text-- Which of the following statements best describes the Python Standard Library --answers-- It is a collection of pre-written modules and packages included with PythonIt is a collection of third-party libraries that need to be installed separately --feedback--\nThink about what \"standard\" means in the content of the Python Standard Library It is the core syntax of the Python language itself --feedback--\nThink about what \"standard\" means in the content of the Python Standard Library It consists of external libraries written in other programming languages --feedback--\nThink about what \"standard\" means in the content of the Python Standard Library --video-solution--\n1\n--text--\nWhich of the following is the correct syntax to import the entire datetime module and give it a shorter alias dt --answers--\nimport datetime\n--feedback--\nThink about the keyword used for creating aliases during the import process from datetime import date as dt\n--feedback--\nThink about the keyword used for creating aliases during the import process import datetime as dt\nfrom datetime import dt\n--feedback--\nThink about the keyword used for creating aliases during the import process --video-solution--\n3\n--text--\nIf you only want to use the mean function from the statistics module directly in your code without prefixing it with statistics, which import statement would you use --answers--\nimport statistics\n--feedback--\nThink about the keyword used to import specific names from a module from statistics import mean\nimport mean from statistics\n--feedback--\nThink about the keyword used to import specific names from a module from statistics import *\n--feedback--\nThink about the keyword used to import specific names from a module --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9571,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-modules\\683ec7b778993c6971b56c83.md",
      "source_type": "git_repo"
    },
    "token_count": 384,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "2a8e44c1d0de1d27afae610a82024333",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-common-number-methods\\672d26809d388621ad1ecd43.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672d26809d388621ad1ecd43\ntitle: How Does isNaN Work challengeType: 19\ndashedName: how-does-isnan-work\n--description--\nIn JavaScript, NaN stands for \"Not a Number\" It's a special value that represents an unrepresentable or undefined numerical result NaN is a property of the global object, and it's also considered a type of number in JavaScript, which might seem counterintuitive at first NaN is typically the result of operations that should return a number but can't produce a meaningful numerical value For example:\njs\nlet result = 0 / 0;\nconsole log(result); // Output: NaN\nIn this case, dividing zero by zero is mathematically undefined, so JavaScript returns NaN One peculiar property of NaN is that it's not equal to anything, including itself:\njs\nconsole log(NaN === NaN); // Output: false\nThis unique behavior makes it challenging to check if a value is NaN using standard comparison operators To address this, JavaScript provides the isNaN() function The isNaN() function property is used to determine whether a value is NaN or not However, it's important to understand how isNaN() works, as it can sometimes produce unexpected results Here's how isNaN() behaves:\n```js\nconsole log(isNaN(NaN));       // true\nconsole log(isNaN(undefined)); // true\nconsole log(isNaN({}));        // true\nconsole log(isNaN(true));      // false\nconsole log(isNaN(null));      // false\nconsole log(isNaN(37));        // false\nconsole log(isNaN(\"37\"));      // false: \"37\" is converted to 37\nconsole log(isNaN(\"37 37\"));   // false: \"37 37\" is converted to 37 37\nconsole log(isNaN(\"\"));        // false: empty string is converted to 0\nconsole log(isNaN(\" \"));       // false: string with a space is converted to 0\nconsole log(isNaN(\"blabla\"));  // true: \"blabla\" is not a number\n```\nAs you can see, isNaN() first attempts to convert the parameter to a number If it can't be converted, it returns true This behavior can lead to some surprising results, especially when dealing with strings that can be coerced into numbers Due to these potential inconsistencies, ES6 introduced Number isNaN()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5014,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-common-number-methods\\672d26809d388621ad1ecd43.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "65b6afaf4ffc688cb82158c36c31b0bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-common-number-methods\\672d26809d388621ad1ecd43.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "converted to 0 console log(isNaN(\" \")); // false: string with a space is converted to 0 console log(isNaN(\"blabla\")); // true: \"blabla\" is not a number ``` As you can see, isNaN() first attempts to convert the parameter to a number If it can't be converted, it returns true This behavior can lead to some surprising results, especially when dealing with strings that can be coerced into numbers Due to these potential inconsistencies, ES6 introduced Number isNaN()This method does not attempt to convert the parameter to a number before testing It only returns true if the value is exactly NaN:\n```js\nconsole log(Number isNaN(NaN));        // true\nconsole log(Number isNaN(Number NaN)); // true\nconsole log(Number isNaN(0 / 0));      // true\nconsole log(Number isNaN(\"NaN\"));      // false\nconsole log(Number isNaN(undefined));  // false\nconsole log(Number isNaN({}));         // false\nconsole log(Number isNaN(\"blabla\"));   // false\n```\nNumber isNaN() provides a more reliable way to check for NaN values, especially in cases where type coercion might lead to unexpected results with the global isNaN() function In practice, when dealing with numerical operations or user inputs that should be numbers, it's often necessary to check for NaN to handle errors or unexpected inputs gracefully For example:\n```js\nfunction divide(a, b) {\nlet result = a / b;\nif (Number isNaN(result)) {\nreturn \"Error: Division resulted in NaN\";\n}\nreturn result;\n}\nconsole log(divide(10, 2));  // 5\nconsole log(divide(10, 0));  // Infinity\nconsole log(divide(0, 0));   // \"Error: Division resulted in NaN\"\n```\nIn this example, we're using Number isNaN() to catch cases where the division operation results in NaN, allowing us to handle this scenario appropriately Understanding NaN and how to properly check for it is crucial for writing robust JavaScript code, especially when dealing with mathematical operations or parsing user inputs --questions--\n--text--\nWhat will be the output of the following code js\nconsole log(isNaN(\"123\"));\n--answers--\ntrue\n--feedback--\nConsider how isNaN() treats strings that can be converted to numbers false\nundefined\n--feedback--\nConsider how isNaN() treats strings that can be converted to numbers",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5014,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-common-number-methods\\672d26809d388621ad1ecd43.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a45e2b0205deabb6b000c7c7d8c1a1ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-common-number-methods\\672d26809d388621ad1ecd43.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "NaN, allowing us to handle this scenario appropriately Understanding NaN and how to properly check for it is crucial for writing robust JavaScript code, especially when dealing with mathematical operations or parsing user inputs --questions-- --text-- What will be the output of the following code js console log(isNaN(\"123\")); --answers-- true --feedback-- Consider how isNaN() treats strings that can be converted to numbers false undefined --feedback-- Consider how isNaN() treats strings that can be converted to numbersNaN\n--feedback--\nConsider how isNaN() treats strings that can be converted to numbers --video-solution--\n2\n--text--\nWhich of the following correctly checks if a value is exactly NaN --answers--\nvalue === NaN\n--feedback--\nThink about which method doesn't attempt to convert the value before checking isNaN(value)\n--feedback--\nThink about which method doesn't attempt to convert the value before checking Number isNaN(value)\nvalue isNaN()\n--feedback--\nThink about which method doesn't attempt to convert the value before checking --video-solution--\n3\n--text--\nWhat is the result of NaN === NaN --answers--\ntrue\n--feedback--\nRemember the unique property of NaN in comparisons false\nundefined\n--feedback--\nRemember the unique property of NaN in comparisons Error\n--feedback--\nRemember the unique property of NaN in comparisons --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5014,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-common-number-methods\\672d26809d388621ad1ecd43.md",
      "source_type": "git_repo"
    },
    "token_count": 267,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "244351393e2b7e176eaff83bfa9bb41d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\67327195e77b1bd90bdd49d7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67327195e77b1bd90bdd49d7\ntitle: What Happens When You Try to Do Calculations with Numbers and Strings challengeType: 19\ndashedName: what-happens-when-you-try-to-do-calculations-with-numbers-and-strings\n--description--\nJavaScript is a language where things sometimes work in surprising, or even weird, ways One such surprise occurs when you mix numbers and strings in calculations The first thing you'll probably try is to add a number and a string In JavaScript, the + operator does double duty It handles both addition and string concatenation, which is a way to join two strings together When you use + with a number and a string, JavaScript decides to treat them both as strings and joins them together If you check the type of the result with the typeof operator, you'd see it's indeed a string:\n```js\nconst result = 5 + '10';\nconsole log(result); // 510\nconsole log(typeof result); // string\n```\nWhat do you think will happen if you switch the order of 5 and '10' ```js\nconst result = '10' + 5;\nconsole log(result); // 105\nconsole log(typeof result); // string\n```\nYou can see the same thing happened JavaScript sees a string in '10' and a number in 5, so it converts the number to a string and concatenates them This is known as type coercion Type coercion is when a value from one data type is converted into another Things get more interesting when you try to perform other arithmetic operations like subtraction, multiplication, or division with a string and number In these cases, JavaScript tries to convert the string into a number before doing the math – another type coercion Here's what happens:\n```js\nconst subtractionResult = '10' - 5;\nconsole log(subtractionResult); // 5\nconsole log(typeof subtractionResult); // number\nconst multiplicationResult = '10' * 2;\nconsole log(multiplicationResult); // 20\nconsole log(typeof multiplicationResult); // number\nconst divisionResult = '20' / 2;\nconsole log(divisionResult); // 10\nconsole log(typeof divisionResult); // number\n```\nIn the examples above, JavaScript successfully converts the string '10' or '20' to a number and then performs the calculation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6980,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\67327195e77b1bd90bdd49d7.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "a686cf7bca9b8d48573de19124fa41b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\67327195e77b1bd90bdd49d7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the math – another type coercion Here's what happens: ```js const subtractionResult = '10' - 5; console log(subtractionResult); // 5 console log(typeof subtractionResult); // number const multiplicationResult = '10' * 2; console log(multiplicationResult); // 20 console log(typeof multiplicationResult); // number const divisionResult = '20' / 2; console log(divisionResult); // 10 console log(typeof divisionResult); // number ``` In the examples above, JavaScript successfully converts the string '10' or '20' to a number and then performs the calculationAs a result, '10' - 5 yields 5, '10' * 2 gives 20, and '20' / 2 results in 10 But what if the string doesn't look like a number Let's see what happens in that case:\n```js\nconst subtractionResult = 'abc' - 5;\nconsole log(subtractionResult); // NaN\nconsole log(typeof subtractionResult); // number\nconst multiplicationResult = 'abc' * 2;\nconsole log(multiplicationResult); // NaN\nconsole log(typeof multiplicationResult); // number\nconst divisionResult = 'abc' / 2;\nconsole log(divisionResult); // NaN\nconsole log(typeof divisionResult); // number\n```\nIn the examples above, the string 'abc' does not represent a valid numeric value, so JavaScript cannot convert it into a meaningful number When such conversion fails, JavaScript returns NaN, which stands for \"Not a Number\" NaN is a special value of the Number type that represents an invalid or unrepresentable number What if you perform arithmetic operations with a boolean (true or false) Let's see what happens JavaScript treats booleans as numbers in mathematical operations: true becomes 1, and false becomes 0 ```js\nconst result1 = true + 1;\nconsole log(result1); // 2\nconsole log(typeof result1); // number\nconst result2 = false + 1;\nconsole log(result2); // 1\nconsole log(typeof result2); // number\nconst result3 = 'Hello' + true;\nconsole log(result3); // \"Hellotrue\"\nconsole log(typeof result3); // string\n```\nIn the first two examples, true + 1 resulted in 2, and false + 1 resulted in 1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6980,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\67327195e77b1bd90bdd49d7.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "ed33c21f5b61aff90599b5f55bb566dc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\67327195e77b1bd90bdd49d7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "numbers in mathematical operations: true becomes 1, and false becomes 0 ```js const result1 = true + 1; console log(result1); // 2 console log(typeof result1); // number const result2 = false + 1; console log(result2); // 1 console log(typeof result2); // number const result3 = 'Hello' + true; console log(result3); // \"Hellotrue\" console log(typeof result3); // string ``` In the first two examples, true + 1 resulted in 2, and false + 1 resulted in 1In the third example, 'Hello' + true, JavaScript converted true to a string and concatenates it with 'Hello', resulting in 'Hellotrue', which is a string For null and undefined, JavaScript treats null as 0 and undefined as NaN in mathematical operations:\n```js\nconst result1 = null + 5;\nconsole log(result1); // 5\nconsole log(typeof result1); // number\nconst result2 = undefined + 5;\nconsole log(result2); // NaN\nconsole log(typeof result2); // number\n```\nJavaScript often performs type coercion, automatically converting data types such as numbers, strings, and booleans in sometimes unexpected ways Understanding these conversions is crucial for avoiding bugs and writing robust code in your projects --questions--\n--text--\nWhat happens when you run the following code js\nconst result = 3 + \"19\";\n--answers--\nJavaScript ignores the string and only performs the operation on the number --feedback--\nRecall how type coercion works for addition operations, and how you use the same symbol to combine strings JavaScript throws an error when you try to mix strings and numbers in arithmetic --feedback--\nRecall how type coercion works for addition operations, and how you use the same symbol to combine strings JavaScript converts the number 3 into the string \"3\", concatenates the two strings, and assigns the value \"319\" to result JavaScript converts the string \"19\" into the number 19, performs the operation, and assigns the value 22 to result --feedback--\nRecall how type coercion works for addition operations, and how you use the same symbol to combine strings --video-solution--\n3\n--text--\nWhat happens when you run the following code js\nconst result = \"6\" - 4;\n--answers--\nConversion fails and JavaScript returns NaN",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6980,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\67327195e77b1bd90bdd49d7.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "b213dcb98b67789f37797e796adb50eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\67327195e77b1bd90bdd49d7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "string \"3\", concatenates the two strings, and assigns the value \"319\" to result JavaScript converts the string \"19\" into the number 19, performs the operation, and assigns the value 22 to result --feedback-- Recall how type coercion works for addition operations, and how you use the same symbol to combine strings --video-solution-- 3 --text-- What happens when you run the following code js const result = \"6\" - 4; --answers-- Conversion fails and JavaScript returns NaN--feedback--\nRecall how type coercion works for subtraction, multiplication, division, and other kinds of operations JavaScript converts the number 4 into the string \"4\", concatenates the two strings, and assigns the value \"64\" to result --feedback--\nRecall how type coercion works for subtraction, multiplication, division, and other kinds of operations The value Infinity is assigned to result --feedback--\nRecall how type coercion works for subtraction, multiplication, division, and other kinds of operations JavaScript converts the string \"6\" into the number 6, performs the operation, and assigns the value 2 to result --video-solution--\n4\n--text--\nWhat happens when you perform arithmetic operations with a boolean (true or false) in JavaScript --answers--\nJavaScript throws an error --feedback--\nConsider how JavaScript interprets true and false in numerical contexts JavaScript ignores the boolean and only performs the operation on numbers --feedback--\nConsider how JavaScript interprets true and false in numerical contexts JavaScript treats true as 1 and false as 0 in arithmetic operations JavaScript converts the boolean to a string before performing the operation --feedback--\nConsider how JavaScript interprets true and false in numerical contexts --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6980,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-arithmetic-operators\\67327195e77b1bd90bdd49d7.md",
      "source_type": "git_repo"
    },
    "token_count": 344,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "6c2ecd4edc0d91592d75beb23ba7e98f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-common-number-methods\\6732808f3221720adc833e81.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732808f3221720adc833e81\ntitle: How Do the parseFloat() and parseInt() Methods Work challengeType: 19\ndashedName: how-do-the-parsefloat-and-parseint-methods-work\n--description--\nparseFloat() and parseInt() are two essential methods in JavaScript for converting strings to numbers These methods are particularly useful when dealing with user input or processing data that comes in string format but needs to be treated as numerical values Let's start with parseFloat() This method parses a string argument and returns a floating-point number It's designed to extract a number from the beginning of a string, even if the string contains non-numeric characters later on Remember that floats are numbers with decimal points Here's how parseFloat() works:\njs\nconsole log(parseFloat(\"3 14\"));     // Output: 3 14\nconsole log(parseFloat(\"3 14 abc\")); // Output: 3 14\nconsole log(parseFloat(\"3 14 5\"));   // Output: 3 14\nconsole log(parseFloat(\"abc 3 14\")); // Output: NaN\nAs you can see, parseFloat() starts parsing from the beginning of the string and continues until it encounters a character that can't be part of a floating-point number If it can't find a valid number at the start of the string, it returns NaN (Not a Number) parseInt(), on the other hand, parses a string argument and returns an integer Like parseFloat(), it starts from the beginning of the string, but it stops at the first non-digit character Here's how parseInt() works:\njs\nconsole log(parseInt(\"42\"));       // Output: 42\nconsole log(parseInt(\"42px\"));     // Output: 42\nconsole log(parseInt(\"3 14\"));     // Output: 3\nconsole log(parseInt(\"abc123\"));   // Output: NaN\nparseInt() stops parsing at the first non-digit it encounters For floating-point numbers, it returns only the integer part If it can't find a valid integer at the start of the string, it returns NaN Both methods have some noteworthy behaviors They ignore leading whitespace:\njs\nconsole log(parseFloat(\"  3 14\"));  // Output: 3 14\nconsole log(parseInt(\"  42\"));      // Output: 42\nThey handle plus and minus signs at the beginning of the string:\njs\nconsole log(parseFloat(\"+3 14\"));  // Output: 3 14\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4224,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-common-number-methods\\6732808f3221720adc833e81.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "4ad5a4067400f077cdb48602c33c5833",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-common-number-methods\\6732808f3221720adc833e81.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the first non-digit it encounters For floating-point numbers, it returns only the integer part If it can't find a valid integer at the start of the string, it returns NaN Both methods have some noteworthy behaviors They ignore leading whitespace: js console log(parseFloat(\" 3 14\")); // Output: 3 14 console log(parseInt(\" 42\")); // Output: 42 They handle plus and minus signs at the beginning of the string: js console log(parseFloat(\"+3 14\")); // Output: 3 14 consolelog(parseInt(\"-42\"));      // Output: -42\nIt's worth noting that while these methods are powerful, they have some limitations For instance, they don't handle all number formats, such as scientific notation, directly For more complex parsing needs, you might need to use additional techniques or libraries In conclusion, parseFloat() and parseInt() are valuable tools for converting strings to numbers in JavaScript Understanding how they work and their specific behaviors allows you to handle numeric data more effectively in your applications, especially when dealing with user inputs or external data sources --questions--\n--text--\nWhat will be the output of the following code js\nconsole log(parseInt(\"10 99\"));\n--answers--\n10 99\n--feedback--\nConsider how Number parseInt() handles decimal points 10\n11\n--feedback--\nConsider how Number parseInt() handles decimal points NaN\n--feedback--\nConsider how Number parseInt() handles decimal points --video-solution--\n2\n--text--\nWhat will be the output of the following code js\nconsole log(parseInt(\"  -42abc\"));\n--answers--\n-42\nNaN\n--feedback--\nConsider how Number parseInt() handles leading whitespace and non-digit characters 42\n--feedback--\nConsider how Number parseInt() handles leading whitespace and non-digit characters \"-42abc\"\n--feedback--\nConsider how Number parseInt() handles leading whitespace and non-digit characters --video-solution--\n1\n--text--\nWhat will parseFloat(\"3 14 15\") return --answers--\n3 1415\n--feedback--\nConsider how parseFloat() handles multiple decimal points in a string 3 14\nNaN\n--feedback--\nConsider how parseFloat() handles multiple decimal points in a string 3\n--feedback--\nConsider how parseFloat() handles multiple decimal points in a string --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4224,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-common-number-methods\\6732808f3221720adc833e81.md",
      "source_type": "git_repo"
    },
    "token_count": 461,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "dbbbe2aea9c32ee528abd3ead91dd4be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b721eb98f224868b44a6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732b721eb98f224868b44a6\ntitle: How Can You Remove Properties from an Object challengeType: 19\ndashedName: how-can-you-remove-properties-from-an-object\n--description--\nThere are several ways to remove properties from an object, with the delete operator being the most straightforward and commonly used method When you use delete, it removes the selected property from the object Here's an example of how to use the delete operator:\n```js\nconst person = {\nname: \"Alice\",\nage: 30,\njob: \"Engineer\"\n};\ndelete person job;\nconsole log(person job); // undefined\n```\nIn this example, we start with a person object that has three properties: name, age, and job Then, we use the delete operator to remove the job property After the deletion, the person object no longer has the job property Another way to remove properties is by using destructuring assignment with rest parameters This approach doesn't actually delete the property, but it creates a new object without the specified properties:\n```js\nconst person = {\nname: \"Bob\",\nage: 25,\njob: \"Designer\",\ncity: \"New York\"\n};\nconst { job, city, remainingProperties } = person;\n// { name: \"Bob\", age: 25 }\nconsole log(remainingProperties);\n```\nIn this example, we use destructuring to extract job and city from the person object, and collect the remaining properties into a new object called remainingProperties This creates a new object without the job and city properties Understanding how to remove properties from objects is an important skill in JavaScript programming It allows you to manipulate objects dynamically, and clean up unnecessary data --questions--\n--text--\nWhat will be the output of the following code js\nlet obj = {a: 1, b: 2, c: 3};\ndelete obj b;\nconsole log(obj);\n--answers--\n{a: 1, c: 3}\n{a: 1, b: undefined, c: 3}\n--feedback--\nConsider how the delete operator affects object properties {a: 1, b: 2, c: 3}\n--feedback--\nConsider how the delete operator affects object properties This will throw an error --feedback--\nConsider how the delete operator affects object properties --video-solution--\n1\n--text--\nWhat will be the output of the following code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3302,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b721eb98f224868b44a6.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "096a1c7cce4a2f29e0e94378a3ccf9f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b721eb98f224868b44a6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "js let obj = {a: 1, b: 2, c: 3}; delete obj b; console log(obj); --answers-- {a: 1, c: 3} {a: 1, b: undefined, c: 3} --feedback-- Consider how the delete operator affects object properties {a: 1, b: 2, c: 3} --feedback-- Consider how the delete operator affects object properties This will throw an error --feedback-- Consider how the delete operator affects object properties --video-solution-- 1 --text-- What will be the output of the following code```js\nlet car = {\nbrand: \"Toyota\",\nmodel: \"Corolla\",\nyear: 2020\n};\ndelete car year;\nconsole log(car year);\n```\n--answers--\n2020\n--feedback--\nThink about what happens when you try to access a property that has been deleted undefined\nnull\n--feedback--\nThink about what happens when you try to access a property that has been deleted This will throw an error --feedback--\nThink about what happens when you try to access a property that has been deleted --video-solution--\n2\n--text--\nWhich operator is commonly used to remove properties from an object in JavaScript --answers--\nremove\n--feedback--\nConsider the standard JavaScript operator for removing object properties delete\nerase\n--feedback--\nConsider the standard JavaScript operator for removing object properties clear\n--feedback--\nConsider the standard JavaScript operator for removing object properties --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3302,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b721eb98f224868b44a6.md",
      "source_type": "git_repo"
    },
    "token_count": 311,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "82a1bb3d4e3eb7d2f4bb175695310fe6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\67329f737126b75bcb949e13.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67329f737126b75bcb949e13\ntitle: What Is an Object in JavaScript, and How Can You Access Properties from an Object challengeType: 19\ndashedName: what-is-an-object-in-javascript-and-how-can-you-access-properties-from-an-object\n--description--\nIn JavaScript, an object is a fundamental data structure that allows you to store and organize related data and functionality You can think of an object as a container that holds various pieces of information, much like a filing cabinet holds different folders and documents These pieces of information are called properties, and they consist of a name (or key) and a value js\nconst exampleObject = {\npropertyName: value;\n}\nObjects are incredibly versatile and form the backbone of JavaScript In fact, almost everything in JavaScript is an object or can be treated as one This includes arrays, functions, and even primitive data types like strings and numbers when used in certain ways This object-centric nature of JavaScript is one of the reasons it's such a flexible and powerful language Let's look at how you can create an object:\njs\nconst person = {\nname: \"Alice\",\nage: 30,\ncity: \"New York\"\n};\nIn this example, we've created an object called person with three properties: name, age, and city Each property has a name and a value, separated by a colon Now, let's explore how you can access these properties There are two main ways to access object properties in JavaScript: dot notation and bracket notation Dot notation is the most common and straightforward way to access object properties Here is the basic syntax for dot notation:\njs\nobjectName propertyName\nHere's how you would use dot notation with our person object:\n```js\nconst person = {\nname: \"Alice\",\nage: 30,\ncity: \"New York\"\n};\nconsole log(person name);  // Alice\nconsole log(person age);   // 30\n```\nDot notation is concise and easy to read, making it the preferred choice when you know the exact name of the property you want to access and that name is a valid JavaScript identifier (meaning it doesn't start with a number and doesn't contain special characters or spaces) Bracket notation, on the other hand, allows you to access object properties using a string inside square brackets Here's how you would use bracket notation:\n```js\nconst person = {\nname: \"Alice\",\nage: 30,\ncity: \"New York\"\n};\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\67329f737126b75bcb949e13.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "7f48d7b0ad4ebdf966f226f3182b40ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\67329f737126b75bcb949e13.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "preferred choice when you know the exact name of the property you want to access and that name is a valid JavaScript identifier (meaning it doesn't start with a number and doesn't contain special characters or spaces) Bracket notation, on the other hand, allows you to access object properties using a string inside square brackets Here's how you would use bracket notation: ```js const person = { name: \"Alice\", age: 30, city: \"New York\" }; consolelog(person[\"name\"]); // Alice\nconsole log(person[\"age\"]); //  30\n```\nBracket notation is more flexible than dot notation because it allows you to use property names that aren't valid JavaScript identifiers For example, if you had a property name with spaces or that starts with a number, you'd need to use bracket notation:\n```js\nconst oddObject = {\n\"1stProperty\": \"Hello\",\n\"property with spaces\": \"World\"\n};\nconsole log(oddObject[\"1stProperty\"]);  // Hello\nconsole log(oddObject[\"property with spaces\"]);  // World\n```\nAnother advantage of bracket notation is that it allows you to use variables to access properties dynamically:\n```js\nconst person = {\nname: \"Alice\",\nage: 30,\ncity: \"Wonderland\"\n};\nlet propertyName = \"city\";\nconsole log(person[propertyName]); // Wonderland\n```\nThis flexibility makes bracket notation particularly useful when you don't know the exact property name at the time you're writing the code, or when you're working with property names that come from user input or some other dynamic source It's worth noting that objects in JavaScript are incredibly powerful and versatile They can contain not just simple values like strings and numbers, but also arrays, or other objects Understanding objects and how to work with them is crucial in JavaScript because they're used extensively throughout the language and in many JavaScript libraries and frameworks As you continue to learn and work with JavaScript, you'll find that mastering objects opens up a world of possibilities for creating complex and powerful applications --questions--\n--text--\nWhich notation would you use to access a property of an object if the property name contains spaces --answers--\nDot notation\n--feedback--\nThink about which notation allows for more flexibility in property names Bracket notation\nBoth dot and bracket notation\n--feedback--\nThink about which notation allows for more flexibility in property names",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\67329f737126b75bcb949e13.md",
      "source_type": "git_repo"
    },
    "token_count": 474,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e738410db28cbe6e8099c6fdbfb88c31",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\67329f737126b75bcb949e13.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "learn and work with JavaScript, you'll find that mastering objects opens up a world of possibilities for creating complex and powerful applications --questions-- --text-- Which notation would you use to access a property of an object if the property name contains spaces --answers-- Dot notation --feedback-- Think about which notation allows for more flexibility in property names Bracket notation Both dot and bracket notation --feedback-- Think about which notation allows for more flexibility in property namesNeither, it's not possible to have property names with spaces\n--feedback--\nThink about which notation allows for more flexibility in property names --video-solution--\n2\n--text--\nWhat's an advantage of using bracket notation over dot notation when accessing object properties --answers--\nIt's faster to type --feedback--\nRemember what we said about using dynamic property names It allows you to use variables as property names It's the only way to access nested properties --feedback--\nRemember what we said about using dynamic property names It automatically converts property names to uppercase --feedback--\nRemember what we said about using dynamic property names --video-solution--\n2\n--text--\nWhy is it said that most things in JavaScript are objects --answers--\nBecause everything in JavaScript has properties and methods --feedback--\nRecall what we mentioned about the nature of different data types in JavaScript Because JavaScript was originally designed for object-oriented programming --feedback--\nRecall what we mentioned about the nature of different data types in JavaScript Because objects are the only data type in JavaScript --feedback--\nRecall what we mentioned about the nature of different data types in JavaScript Because even primitive data types can be treated as objects in certain contexts --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5869,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\67329f737126b75bcb949e13.md",
      "source_type": "git_repo"
    },
    "token_count": 329,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6d14c03690c870c2fe7a7b4216c6faf7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-common-number-methods\\673280a1c29d0a0b17316e56.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673280a1c29d0a0b17316e56\ntitle: What Is the toFixed() Method, and How Does It Work challengeType: 19\ndashedName: what-is-the-tofixed-method-and-how-does-it-work\n--description--\nThe toFixed() method is a built-in JavaScript function that formats a number using fixed-point notation It's particularly useful when you need to control the number of decimal places in a number, especially for displaying currency values or when working with precise measurements The toFixed() method is called on a number and takes one optional argument, which is the number of digits to appear after the decimal point It returns a string representation of the number with the specified number of decimal places Here's a basic example of how toFixed() works:\njs\nlet num = 3 14159;\nconsole log(num toFixed(2)); // Output: \"3 14\"\nIn this case, we're limiting the number of decimal places to two So, 3 14159 becomes 3 14 It's important to note that toFixed() returns a string, not a number This is because the method is primarily intended for formatting numbers for display, not for further calculations The toFixed() method rounds the number to the nearest value that can be represented with the specified number of decimal places This rounding behavior is important to understand:\njs\nconsole log((3 14159) toFixed(3));  // Output: \"3 142\"\nconsole log((3 14449) toFixed(3));  // Output: \"3 144\"\nconsole log((3 14550) toFixed(3));  // Output: \"3 146\"\nAs you can see, toFixed() rounds up when the next digit is 5 or greater, and rounds down otherwise If you call toFixed() without arguments, it defaults to 0 decimal places:\njs\nlet num = 3 14159;\nconsole log(num toFixed()); // Output: \"3\"\nThe toFixed() method can be particularly useful when working with financial calculations or displaying prices:\n```js\nlet price = 19 99;\nlet taxRate = 0 08;\nlet total = price + (price * taxRate);\nconsole log(\"Total: $\" + total toFixed(2)); // Output: \"Total: $21 59\"\n```\nIn this example, toFixed(2) ensures that the total is always displayed with two decimal places, which is standard for currency in many countries In conclusion, the",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4151,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-common-number-methods\\673280a1c29d0a0b17316e56.md",
      "source_type": "git_repo"
    },
    "token_count": 521,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "591f810f96b3e3258d1a1cb2ecce02b0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-common-number-methods\\673280a1c29d0a0b17316e56.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "toFixed()); // Output: \"3\" The toFixed() method can be particularly useful when working with financial calculations or displaying prices: ```js let price = 19 99; let taxRate = 0 08; let total = price + (price * taxRate); console log(\"Total: $\" + total toFixed(2)); // Output: \"Total: $21 59\" ``` In this example, toFixed(2) ensures that the total is always displayed with two decimal places, which is standard for currency in many countries In conclusion, thetoFixed() method is a powerful tool for formatting numbers in JavaScript, particularly when you need to control the display of decimal places While it's primarily used for formatting output, remember its behavior, especially when precise calculations are needed --questions--\n--text--\nWhat will be the output of the following code js\nlet num = 5 678;\nconsole log(num toFixed(1));\n--answers--\n\"5 7\"\n\"5 6\"\n--feedback--\nConsider how toFixed() rounds numbers and what type of value it returns 5 7\n--feedback--\nConsider how toFixed() rounds numbers and what type of value it returns 5 6\n--feedback--\nConsider how toFixed() rounds numbers and what type of value it returns --video-solution--\n1\n--text--\nWhat will be the output of the following code ```js\nlet num1 = 12 345;\nlet num2 = 67 891;\nconsole log((num1 + num2) toFixed(2));\n```\n--answers--\n80 23\n--feedback--\nRemember that toFixed() rounds the result based on the third decimal digit 80 24\n80 25\n--feedback--\nRemember that toFixed() rounds the result based on the third decimal digit 80 26\n--feedback--\nRemember that toFixed() rounds the result based on the third decimal digit --video-solution--\n2\n--text--\nWhat happens if you call toFixed() without any arguments --answers--\nIt throws an error --feedback--\nConsider what the default behavior might be when no decimal place count is specified It returns the original number without any changes --feedback--\nConsider what the default behavior might be when no decimal place count is specified It returns the number rounded to the nearest integer --feedback--\nConsider what the default behavior might be when no decimal place count is specified It returns a string representation of the number with no decimal places --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4151,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-numbers-and-common-number-methods\\673280a1c29d0a0b17316e56.md",
      "source_type": "git_repo"
    },
    "token_count": 506,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "03b0b66b76316365d160faaada1048d8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b72961f94324bd6390de.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732b72961f94324bd6390de\ntitle: How to Check If an Object Has a Property challengeType: 19\ndashedName: how-to-check-if-an-object-has-a-property\n--description--\nIn JavaScript, there are several ways to check if an object has a specific property Understanding these methods is important for working effectively with objects, especially when you're dealing with data from external sources or when you need to ensure certain properties exist before using them We'll explore three common approaches: the hasOwnProperty() method, the in operator, and checking against undefined Let's start with the hasOwnProperty() method This method returns a boolean indicating whether the object has the specified property as its own property Here's an example:\n```js\nconst person = {\nname: \"Alice\",\nage: 30\n};\nconsole log(person hasOwnProperty(\"name\")); // true\nconsole log(person hasOwnProperty(\"job\")); // false\n```\nIn this example, we have an object called person with two properties: name and age To check if name is a property in the person object, we use the hasOwnProperty() method Since name is a property, it will return true But when we use the hasOwnProperty() to check if job is a property, it will return false because it does not exist in the object Another way to check for the existence of a property in an object is to use the in operator Like hasOwnProperty(), the in operator will return true if the property exists on the object Here's how you can use it:\njs\nconst person = {\nname: \"Bob\",\nage: 25\n};\nconsole log(\"name\" in person);  // true\nIn this example, \"name\" in person returns true because name is a property of person The third method involves checking if a property is undefined This approach can be useful, but it has some limitations Here's an example:\n```js\nconst car = {\nbrand: \"Toyota\",\nmodel: \"Corolla\",\nyear: 2020\n};\nconsole log(car brand == undefined); // true\nconsole log(car color == undefined); // false\n```\nIn this code, we check if car brand and car color are not undefined This works because accessing a non-existent property on an object returns undefined However, this method can give false negatives if a property explicitly has the value undefined In practice, the choice between these methods often depends on the specific requirements of your code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4138,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b72961f94324bd6390de.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d993b3ef86664679ecaf44c4edf41cba",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b72961f94324bd6390de.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"Corolla\", year: 2020 }; console log(car brand == undefined); // true console log(car color == undefined); // false ``` In this code, we check if car brand and car color are not undefined This works because accessing a non-existent property on an object returns undefined However, this method can give false negatives if a property explicitly has the value undefined In practice, the choice between these methods often depends on the specific requirements of your codeUnderstanding the differences between them will help you make the right choice in different scenarios --questions--\n--text--\nWhat will be the output of the following code js\nlet obj = {x: 0, y: null};\nconsole log(obj hasOwnProperty(\"y\"));\n--answers--\ntrue\nfalse\n--feedback--\nhasOwnProperty() checks if the property exists directly on the object, regardless of its value null\n--feedback--\nhasOwnProperty() checks if the property exists directly on the object, regardless of its value undefined\n--feedback--\nhasOwnProperty() checks if the property exists directly on the object, regardless of its value --video-solution--\n1\n--text--\nWhat will be the output of the following code ```js\nlet person = {\nname: \"Alice\",\nage: 30\n};\nconsole log(\"name\" in person);\n```\n--answers--\ntrue\nfalse\n--feedback--\nThe in operator checks if the property exists in the object \"Alice\"\n--feedback--\nThe in operator checks if the property exists in the object undefined\n--feedback--\nThe in operator checks if the property exists in the object --video-solution--\n1\n--text--\nWhat will be the output of the following code js\nlet obj = {a: undefined};\nconsole log(obj a == undefined);\n--answers--\ntrue\n--feedback--\nConsider what happens when a property exists but has the value undefined false\nundefined\n--feedback--\nConsider what happens when a property exists but has the value undefined This will throw an error --feedback--\nConsider what happens when a property exists but has the value undefined --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4138,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b72961f94324bd6390de.md",
      "source_type": "git_repo"
    },
    "token_count": 416,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b64197e5b292ab9f988ff83058697b93",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b73509f71f24ef05e86e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732b73509f71f24ef05e86e\ntitle: How Do You Work with Accessing Properties from Nested Objects and Arrays in Objects challengeType: 19\ndashedName: how-do-you-work-with-accessing-properties-from-nested-objects-and-arrays-in-objects\n--description--\nWhen working with JavaScript, you'll often encounter complex data structures that involve nested objects and arrays within objects These structures can represent rich, hierarchical data, but they also require a clear understanding of how to access and manipulate the data within them Let's explore how to navigate these nested structures effectively Accessing properties from nested objects involves using the dot notation or bracket notation, much like accessing properties from simple objects However, you'll need to chain these accessors to drill down into the nested structure For example, let's consider a nested object representing a person with contact information:\njs\nconst person = {\nname: \"Alice\",\nage: 30,\ncontact: {\nemail: \"alice@example com\",\nphone: {\nhome: \"123-456-7890\",\nwork: \"098-765-4321\"\n}\n}\n};\nTo access Alice's work phone number, you would chain the property accessors like this:\njs\nconsole log(person contact phone work); // \"098-765-4321\"\nYou can also use bracket notation, which is particularly useful when property names include spaces or special characters, or when you're using variables to access properties:\njs\nconsole log(person['contact']['phone']['work']); // \"098-765-4321\"\nNow, let’s take a look at how we can access data where one of the object properties has the value of an array Here is a modified person object that includes an array of addresses:\njs\nconst person = {\nname: \"Alice\",\nage: 30,\naddresses: [\n{ type: \"home\", street: \"123 Main St\", city: \"Anytown\" },\n{ type: \"work\", street: \"456 Market St\", city: \"Workville\" }\n]\n};\nHere is an example of how to access Alice's work address city:\njs\nconsole log(person addresses[1] city); // \"Workville\"\nIn this example, person addresses refers to the array of addresses To access the second address in that array, we use bracket notation and index 1 Then, we use dot notation to access the city from that address object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4519,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b73509f71f24ef05e86e.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "828ff5ebad665f966adf2f6bbe57a2ff",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b73509f71f24ef05e86e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"123 Main St\", city: \"Anytown\" }, { type: \"work\", street: \"456 Market St\", city: \"Workville\" } ] }; Here is an example of how to access Alice's work address city: js console log(person addresses[1] city); // \"Workville\" In this example, person addresses refers to the array of addresses To access the second address in that array, we use bracket notation and index 1 Then, we use dot notation to access the city from that address objectUnderstanding how to access properties in nested objects and arrays is essential when working with complex data structures In future workshops and labs, you will have the opportunity to practice working with these types of data structures --questions--\n--text--\nHow would you access the work phone number from this object js\nlet person = {\ncontact: {\nphone: {\nhome: \"123-456-7890\",\nwork: \"098-765-4321\"\n}\n}\n};\n--answers--\nperson work\n--feedback--\nThink about how we need to navigate through each level of the nested object person contact work\n--feedback--\nThink about how we need to navigate through each level of the nested object person contact phone work\nperson[contact][phone][work]\n--feedback--\nThink about how we need to navigate through each level of the nested object --video-solution--\n3\n--text--\nWhat will be the output of the following code ```js\nlet person = {\nname: \"Alice\",\ndetails: {\nage: 25,\nhobbies: [\"reading\", \"swimming\"]\n}\n};\nconsole log(person details hobbies[1]);\n```\n--answers--\nreading\n--feedback--\nConsider how to access elements in an array that is nested within an object swimming\nundefined\n--feedback--\nConsider how to access elements in an array that is nested within an object This will throw an error --feedback--\nConsider how to access elements in an array that is nested within an object --video-solution--\n2\n--text--\nIn the following code, what will be logged to the console ```js\nlet data = {\nresults: [\n{ name: \"Alice\", score: 95 },\n{ name: \"Bob\", score: 80 },\n{ name: \"Charlie\", score: 90 }\n]\n};\nconsole log(data results[1] name);\n```\n--answers--\nAlice\n--feedback--\nConsider the structure of the data object and how we access elements in an array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4519,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b73509f71f24ef05e86e.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2f14baef8a8d79686e8d0c957b536eef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b73509f71f24ef05e86e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to access elements in an array that is nested within an object --video-solution-- 2 --text-- In the following code, what will be logged to the console ```js let data = { results: [ { name: \"Alice\", score: 95 }, { name: \"Bob\", score: 80 }, { name: \"Charlie\", score: 90 } ] }; console log(data results[1] name); ``` --answers-- Alice --feedback-- Consider the structure of the data object and how we access elements in an arrayBob\nCharlie\n--feedback--\nConsider the structure of the data object and how we access elements in an array undefined\n--feedback--\nConsider the structure of the data object and how we access elements in an array --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4519,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b73509f71f24ef05e86e.md",
      "source_type": "git_repo"
    },
    "token_count": 158,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "06beee6f586d0e4f42e57e40694d5985",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b73d25cc01251b778043.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732b73d25cc01251b778043\ntitle: What Is the Difference Between Primitive and Non-Primitive Data Types challengeType: 19\ndashedName: what-is-the-difference-between-primitive-and-non-primitive-data-types\n--description--\nIn JavaScript, understanding the difference between primitive and non-primitive data types is important for writing efficient and bug-free code These two categories of data types behave differently in terms of how they are stored in memory and how they are manipulated in your programs Primitive data types are the simplest form of data in JavaScript They include numbers, strings, booleans, null, undefined, and symbols These types are called \"primitive\" because they represent single values and are not objects When you work with primitive data types, you're dealing directly with their values For example, when you create a variable with a primitive value, that value is stored directly in the variable Primitive values are immutable, which means once they are created, their value cannot be changed However, you can reassign a new value to the variable Here's an example of working with primitive data types:\n```js\nlet num1 = 5;\nlet num2 = num1;\nnum1 = 10;\nconsole log(num2); // 5\n```\nIn this example, we are assigning a primitive value (5) from num1 to num2 This creates an independent copy of the value As a result, any changes made to the original variable (num1) do not affect the copy (num2) Non-primitive data types, on the other hand, are more complex In JavaScript, these are objects, which include regular objects, arrays, and functions Unlike primitives, non-primitive types can hold multiple values as properties or elements When you create a variable with a non-primitive value, what's stored in the variable is actually a reference to the location in memory where the object is stored, not the object itself This leads to some important differences in behavior Here's an example with non-primitive types:\n```js\nconst originalPerson = { name: \"John\", age: 30 };\nconst copiedPerson = originalPerson;\noriginalPerson age = 31;\nconsole log(copiedPerson age); // 31\n```\nIn this example we have an object called originalPerson with two properties of name and age We then assign the originalPerson object to a variable called copiedPerson Then we update the age value for the originalPerson object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4700,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b73d25cc01251b778043.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "74cb272ab4f665c3f7648ab72f881d7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b73d25cc01251b778043.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "itself This leads to some important differences in behavior Here's an example with non-primitive types: ```js const originalPerson = { name: \"John\", age: 30 }; const copiedPerson = originalPerson; originalPerson age = 31; console log(copiedPerson age); // 31 ``` In this example we have an object called originalPerson with two properties of name and age We then assign the originalPerson object to a variable called copiedPerson Then we update the age value for the originalPerson objectWhen we log the age property of copiedPerson object it shows the updated value But why is that happening This occurs because both originalPerson and copiedPerson are referencing the same object in memory In JavaScript, when you assign an object to another variable, you're copying the reference to the object, not the object itself This is known as shallow copying by reference As a result, any changes made to the object through one reference are reflected in all references to that object As you continue to work with JavaScript, you'll encounter many situations where understanding the difference between primitive and non-primitive types is important It's a fundamental concept that underlies many aspects of the language and is key to writing efficient and correct code --questions--\n--text--\nWhich of the following is NOT a primitive data type in JavaScript --answers--\nNumber\n--feedback--\nThink about which data type can hold multiple values String\n--feedback--\nThink about which data type can hold multiple values Boolean\n--feedback--\nThink about which data type can hold multiple values Array\n--video-solution--\n4\n--text--\nWhat happens when you assign a primitive value to a new variable --answers--\nThe new variable gets a reference to the original value --feedback--\nRemember how we said primitive values are stored and copied The value is copied to the new variable Both variables share the same memory location --feedback--\nRemember how we said primitive values are stored and copied The original variable becomes null --feedback--\nRemember how we said primitive values are stored and copied --video-solution--\n2\n--text--\nWhat will be the output of the following code js\nlet x = 10;\nlet y = x;\nx = 20;\nconsole log(y);\n--answers--\n10\n20\n--feedback--\nRemember how primitive data types are copied when assigned to a new variable undefined\n--feedback--\nRemember how primitive data types are copied when assigned to a new variable This will throw an error",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4700,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b73d25cc01251b778043.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c7c0e08700c72b349599fcefd6cfe7e5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b73d25cc01251b778043.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "becomes null --feedback-- Remember how we said primitive values are stored and copied --video-solution-- 2 --text-- What will be the output of the following code js let x = 10; let y = x; x = 20; console log(y); --answers-- 10 20 --feedback-- Remember how primitive data types are copied when assigned to a new variable undefined --feedback-- Remember how primitive data types are copied when assigned to a new variable This will throw an error--feedback--\nRemember how primitive data types are copied when assigned to a new variable --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4700,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b73d25cc01251b778043.md",
      "source_type": "git_repo"
    },
    "token_count": 123,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "5a48ee50ee3875faf48f4014ad887c7a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b758194c97257d23fc72.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732b758194c97257d23fc72\ntitle: What Is the Object() Constructor, and When Should You Use It challengeType: 19\ndashedName: what-is-the-object-constructor-and-when-should-you-use-it\n--description--\nIn JavaScript, a constructor is a special type of function used to create and initialize objects It is invoked with the new keyword and can initialize properties and methods on the newly created object In this lecture, we will take a look at how to work with the Object() constructor The Object() constructor creates a new empty object Here is an example:\njs\nnew Object()\nWhen you call new Object(), it returns a new object that can be used to store values The Object() constructor can be used with or without the new keyword When called as a function without new, it behaves differently depending on the type of value passed to it Here's an example of using the Object() constructor without the new keyword:\n```js\nconst num = 42;\nconst numObj = Object(num); // Creates an object wrapper for the number\nconsole log(numObj); // 42\nconsole log(typeof numObj); // \"object\"\n```\nThe first console log will show 42, but it is important to note that this is not a regular number As you can see in the second console log, numObj is an object This is happening because we used the Object() constructor to turn that input of a number into an object What happens if we try to pass null or undefined to the Object() constructor js\nconst newObj = new Object(undefined);\nconsole log(newObj); // {}\nWell, the result will be an empty object Another use case for the Object() constructor is when you're working with a value of unknown type and you need to ensure it's an object Let’s take a look at the following example:\n```js\nfunction toObject(value) {\nif (value === null || value === undefined) {\nreturn {};\n}\nif (typeof value === \"object\") {\nreturn value;\n}\nreturn Object(value);\n}\nconsole log(toObject(null));\nconsole log(toObject(true));\nconsole log(toObject([1, 2, 3]));\n```\nIn this example, we have a function called toObject The second condition will check if the value is a type of object and will return the value if the condition is true This condition will check for objects as well as arrays since arrays are special types of objects",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b758194c97257d23fc72.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4d0162efbb92949b993e0f5b2ba5380f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b758194c97257d23fc72.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "=== undefined) { return {}; } if (typeof value === \"object\") { return value; } return Object(value); } console log(toObject(null)); console log(toObject(true)); console log(toObject([1, 2, 3])); ``` In this example, we have a function called toObject The second condition will check if the value is a type of object and will return the value if the condition is true This condition will check for objects as well as arrays since arrays are special types of objectsIf neither of the conditions is true, the function returns Object(value), which converts the input into an object This works for values like numbers, strings, and booleans\nMost of the time you will not be using the Object() constructor to create new objects because you will be using object literal syntax instead (e g , const objectLiteral = { name: \"Beau\" }) But it is still good to understand the basics of working with the Object constructor --questions--\n--text--\nWhat will be the output of the following code js\nlet obj = Object(42);\nconsole log(typeof obj);\n--answers--\n\"number\"\n--feedback--\nRemember that the Object() constructor creates an object wrapper for primitive values \"object\"\n42\n--feedback--\nRemember that the Object() constructor creates an object wrapper for primitive values This will throw an error --feedback--\nRemember that the Object() constructor creates an object wrapper for primitive values --video-solution--\n2\n--text--\nWhat's the difference between new Object() and {} --answers--\nnew Object() creates an empty object, while {} does not --feedback--\nConsider the functionality and the common usage of both methods in creating objects {} creates an empty object, while new Object() does not --feedback--\nConsider the functionality and the common usage of both methods in creating objects There is no difference, they both create an empty object new Object() is faster than {} --feedback--\nConsider the functionality and the common usage of both methods in creating objects --video-solution--\n3\n--text--\nWhen might you use the Object() constructor instead of object literal notation --answers--\nWhen you need better performance --feedback--\nThink about the special capabilities of the Object() constructor that we discussed in the lecture When you want to create an object wrapper for a primitive value When you're working with JSON data --feedback--\nThink about the special capabilities of the Object() constructor that we discussed in the lecture When you're creating nested objects",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b758194c97257d23fc72.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "7fe649de18a5fd8e6ef862678e5f24d6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b758194c97257d23fc72.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--video-solution-- 3 --text-- When might you use the Object() constructor instead of object literal notation --answers-- When you need better performance --feedback-- Think about the special capabilities of the Object() constructor that we discussed in the lecture When you want to create an object wrapper for a primitive value When you're working with JSON data --feedback-- Think about the special capabilities of the Object() constructor that we discussed in the lecture When you're creating nested objects--feedback--\nThink about the special capabilities of the Object() constructor that we discussed in the lecture --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4732,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b758194c97257d23fc72.md",
      "source_type": "git_repo"
    },
    "token_count": 119,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "174303cbfe8bb8aa4617c6a2a3f91d31",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b749b8aad125523dcda5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732b749b8aad125523dcda5\ntitle: What Is the Difference Between Functions and Object Methods challengeType: 19\ndashedName: what-is-the-difference-between-functions-and-object-methods\n--description--\nIn JavaScript, functions and object methods are both ways to encapsulate reusable code, but they have some key differences in how they are defined, used, and the context in which they operate Understanding these differences is crucial for writing effective and organized JavaScript code As you learned in earlier modules, functions are reusable blocks of code that perform a specific task:\njs\nfunction greet(name) {\nreturn \"Hello, \" + name + \" \";\n}\nconsole log(greet(\"Alice\")); // \"Hello, Alice \"\nObject methods, on the other hand, are functions that are associated with an object They are defined as properties of an object and can access and manipulate the object's data Here's an example of an object with a method:\n```js\nconst person = {\nname: \"Bob\",\nage: 30,\nsayHello: function() {\nreturn \"Hello, my name is \" + this name;\n}\n};\nconsole log(person sayHello()); // \"Hello, my name is Bob\"\n```\nIn this example, sayHello is a method of the person object The this keyword allows the sayHello method to access the properties of the object named person You will learn more about the this keyword in future lectures A difference between functions and methods is how they are invoked Functions are called by their name, while methods are called using dot notation on the object they belong to For example, we call the greet function as greet(\"Alice\"), but we call the sayHello method as person sayHello() Another important difference is the context in which they operate Regular functions have their own scope, but they don't have a built-in reference to any particular object Methods, however, are bound to their object and can access its properties and other methods using the this keyword A key point to note is that, methods help in organizing code into logical objects, while functions are used for more general, reusable code Understanding the difference between functions and object methods is important as you progress in your JavaScript journey While they may seem similar at first, recognizing when to use each will help you write more organized, efficient, and better code --questions--\n--text--\nWhat is the main difference between a function and an object method --answers--\nFunctions can take parameters, but methods cannot",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4421,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b749b8aad125523dcda5.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "03b269c679e0fbc516b53bf0fcd610f5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b749b8aad125523dcda5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in organizing code into logical objects, while functions are used for more general, reusable code Understanding the difference between functions and object methods is important as you progress in your JavaScript journey While they may seem similar at first, recognizing when to use each will help you write more organized, efficient, and better code --questions-- --text-- What is the main difference between a function and an object method --answers-- Functions can take parameters, but methods cannot--feedback--\nConsider how functions and methods are defined and their relationship to objects Methods are associated with objects, while functions are standalone Functions can return values, but methods cannot --feedback--\nConsider how functions and methods are defined and their relationship to objects Methods can use the this keyword, but functions cannot --feedback--\nConsider how functions and methods are defined and their relationship to objects --video-solution--\n2\n--text--\nGiven the following code, how would you correctly call the greet method js\nlet person = {\nname: \"Alice\",\ngreet: function() {\nconsole log(\"Hello, I'm \" + this name);\n}\n};\n--answers--\ngreet();\n--feedback--\nRemember how methods are called on objects using dot notation person greet;\n--feedback--\nRemember how methods are called on objects using dot notation person greet();\nperson(greet);\n--feedback--\nRemember how methods are called on objects using dot notation --video-solution--\n3\n--text--\nWhat will be the output of the following code ```js\nfunction sayHello() {\nreturn \"Hello \";\n}\nlet obj = {\nsayHello: function() {\nreturn \"Hi there \";\n}\n};\nconsole log(sayHello());\nconsole log(obj sayHello());\n```\n--answers--\n\"Hello \", \"Hello \"\n--feedback--\nConsider that the function and the method have the same name but are defined and called differently \"Hi there \", \"Hi there \"\n--feedback--\nConsider that the function and the method have the same name but are defined and called differently \"Hello \", \"Hi there \"\nThis will throw an error --feedback--\nConsider that the function and the method have the same name but are defined and called differently --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4421,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b749b8aad125523dcda5.md",
      "source_type": "git_repo"
    },
    "token_count": 428,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "19baf52676d5526cfe815062ac7d9f73",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b76c03f7d825c7fc74ee.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732b76c03f7d825c7fc74ee\ntitle: What Is the Optional Chaining Operator, and How Does It Work challengeType: 19\ndashedName: what-is-the-optional-chaining-operator-and-how-does-it-work\n--description--\nThe optional chaining operator ( ) is a useful tool in JavaScript that lets you safely access object properties or call methods without worrying whether they exist It's like a safety net for working with objects that might have missing parts ```js\nconst person = {\nname: \"Alice\",\nage: 30\n};\nconsole log(person name); // \"Alice\"\nconsole log(person job); // undefined\n```\nIn this example, person name exists, so it logs Alice But person job doesn't exist, so it gives us undefined Now, let's say we want to access a property of an object that might not exist:\n```js\nconst person = {\nname: \"Alice\",\nage: 30\n};\nconsole log(person address street); // This will throw an error ```\nThis example will throw an Uncaught TypeError Since person address is undefined, we are not able to access the street property This is where the optional chaining operator comes in handy Here is an example of using the optional chaining operator:\n```js\nconst user = {\nname: \"John\",\nprofile: {\nemail: \"john@example com\",\naddress: {\nstreet: \"123 Main St\",\ncity: \"Somewhere\"\n}\n}\n};\nconsole log(user profile address street); // \"123 Main St\"\nconsole log(user profile phone number);   // undefined\n```\nBy using the optional chaining operator, we are telling JavaScript to only continue with the operation if the object (or the value before the ) exists and is not null or undefined If the value before the is null or undefined, JavaScript returns undefined rather than attempting to proceed with the operation and throwing an error Remember, the optional chaining operator is most useful when you're not sure if a property or method exists It helps prevent errors and makes your code more robust --questions--\n--text--\nWhat will be the output of the following code ```js\nlet car = {\nbrand: \"Toyota\",\nmodel: \"Corolla\"\n};\nconsole log(car color);\n```\n--answers--\nToyota\n--feedback--\nThe optional chaining operator returns undefined if the property doesn't exist Corolla\n--feedback--\nThe optional chaining operator returns undefined if the property doesn't exist",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3777,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b76c03f7d825c7fc74ee.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c7dc52018c0e8690c2727ef0910fadc1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b76c03f7d825c7fc74ee.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "operator is most useful when you're not sure if a property or method exists It helps prevent errors and makes your code more robust --questions-- --text-- What will be the output of the following code ```js let car = { brand: \"Toyota\", model: \"Corolla\" }; console log(car color); ``` --answers-- Toyota --feedback-- The optional chaining operator returns undefined if the property doesn't exist Corolla --feedback-- The optional chaining operator returns undefined if the property doesn't existundefined\nThis will throw an error --feedback--\nThe optional chaining operator returns undefined if the property doesn't exist --video-solution--\n3\n--text--\nWhat will be the output of the following code ```js\nlet person = {\nname: \"John\",\nage: 30\n};\nconsole log(person name);\n```\n--answers--\nJohn\n30\n--feedback--\nIf the property exists, the optional chaining operator allows access to it normally undefined\n--feedback--\nIf the property exists, the optional chaining operator allows access to it normally This will throw an error --feedback--\nIf the property exists, the optional chaining operator allows access to it normally --video-solution--\n1\n--text--\nWhat will be the output of the following code ```js\nlet book = {\ntitle: \"JavaScript 101\",\nauthor: {\nname: \"Jane Doe\"\n}\n};\nconsole log(book author name);\n```\n--answers--\nJavaScript 101\n--feedback--\nThe optional chaining operator can be used multiple times in a single expression Jane Doe\nundefined\n--feedback--\nThe optional chaining operator can be used multiple times in a single expression This will throw an error --feedback--\nThe optional chaining operator can be used multiple times in a single expression --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3777,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b76c03f7d825c7fc74ee.md",
      "source_type": "git_repo"
    },
    "token_count": 354,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "07964dcb5d1d2e01b4c28f430d7b800f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b788046862264eeb1c39.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732b788046862264eeb1c39\ntitle: What Is JSON, and How Do You Access Values Using Bracket and Dot Notation challengeType: 19\ndashedName: what-is-json-and-how-do-you-access-values-using-bracket-and-dot-notation\n--description--\nWhat is JSON and how do you access values using bracket and dot notation JSON stands for JavaScript Object Notation It is a lightweight, text-based data format that is commonly used to exchange data between a server and a web application One of the reasons why JSON is so popular in web development is because it is both machine-parseable and human-readable Since JSON is language-independent, you can easily send JSON data from a Java application to a Python application, or from a JavaScript application to a C# application JSON supports many data types including objects, arrays, strings, booleans, null, and numbers Here's an example of a JSON object:\njs\n{\n\"name\": \"Alice\",\n\"age\": 30,\n\"isStudent\": false,\n\"list of courses\": [\"Mathematics\", \"Physics\", \"Computer Science\"]\n}\nAs you can see, JSON uses key-value pairs to store information and each pair is separated by a comma Each key must be wrapped in double quotes, otherwise you will get an error To access data from a JSON object, you can either use dot or bracket notation In this example, we are using dot notation to access the age from the JSON object:\n```js\nimport data from \" /example json\" with { type: \"json\" };\nconsole log(data age);\n```\nThis particular example is using what is known as an import statement, which imports the JSON object into this file so we have access to it You will learn more about the import statement in a future lecture You can also use bracket notation to access information from JSON objects Here is an example of accessing the list of courses array:\n```js\nimport data from \" /example json\" with { type: \"json\" };\nconsole log(data[\"list of courses\"]);\n```\nUsing bracket notation is particularly useful here because the key contains multiple words separated by spaces If we tried to use dot notation, it would result in an error In summary, JSON is a versatile format that can store many data types, including arrays and nested objects By using dot notation or bracket notation, you can easily access the values stored within a JSON object --questions--\n--text--\nWhich of the following is true about JSON",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3978,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b788046862264eeb1c39.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "22128f89e25abef16a5a59dc387599ab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b788046862264eeb1c39.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "``` Using bracket notation is particularly useful here because the key contains multiple words separated by spaces If we tried to use dot notation, it would result in an error In summary, JSON is a versatile format that can store many data types, including arrays and nested objects By using dot notation or bracket notation, you can easily access the values stored within a JSON object --questions-- --text-- Which of the following is true about JSON--answers--\nJSON is only used in JavaScript --feedback--\nThink of how JSON is commonly used in APIs to pass data between applications JSON is a lightweight data format used for data exchange between servers and web applications JSON does not support arrays --feedback--\nThink of how JSON is commonly used in APIs to pass data between applications JSON must include functions --feedback--\nThink of how JSON is commonly used in APIs to pass data between applications --video-solution--\n2\n--text--\nHow would you access the value of the name key in the following JSON object using dot notation js\n{\n\"name\": \"Alice\",\n\"age\": 30\n}\n--answers--\ndata(\"name\")\n--feedback--\nDot notation involves using a period ( ) followed by the key name data[\"name\"]\n--feedback--\nDot notation involves using a period ( ) followed by the key name data name\ndata name[]\n--feedback--\nDot notation involves using a period ( ) followed by the key name --video-solution--\n3\n--text--\nWhich of the following keys would require you to use bracket notation to access its value js\n{\n\"first name\": \"Alice\",\n\"age\": 30\n}\n--answers--\n\"age\"\n--feedback--\nConsider what makes a key invalid for dot notation \"first name\"\nBoth of the above --feedback--\nConsider what makes a key invalid for dot notation None of the above --feedback--\nConsider what makes a key invalid for dot notation --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3978,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b788046862264eeb1c39.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "5450cf301b0530868ce0df9da201d932",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b77adf9de12617a2dbb3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732b77adf9de12617a2dbb3\ntitle: What Is Object Destructuring, and How Does It Work challengeType: 19\ndashedName: what-is-object-destructuring-and-how-does-it-work\n--description--\nObject destructuring is a powerful feature in JavaScript that allows you to extract values from objects and assign them to variables in a more concise and readable way It's part of the ES6 (ECMAScript 2015) specification and has become an essential tool for many JavaScript developers Destructuring can simplify your code, especially when working with complex objects or when you need to extract multiple values at once At its core, object destructuring is about unpacking values from objects into distinct variables Instead of accessing object properties one by one, you can extract multiple properties in a single statement This can make your code cleaner and more efficient Let's start with an example to illustrate how object destructuring works:\n```js\nconst person = { name: \"Alice\", age: 30, city: \"New York\" };\nconst { name, age } = person;\nconsole log(name); // Alice\nconsole log(age);  // 30\n```\nIn this example, we're extracting the name and age properties from the person object and assigning them to variables with the same names One of the powerful aspects of object destructuring is that you can assign the extracted values to variables with different names This is particularly useful when you're working with objects that have property names that might conflict with existing variables or when you want to use a different name:\n```js\nlet person = { name: \"Alice\", age: 30, city: \"New York\" };\nlet { name: personName, age: personAge } = person;\nconsole log(personName); // Alice\nconsole log(personAge); //  30\n```\nIn this case, we're extracting the name property and assigning it to a variable called personName, and doing the same with age and personAge Object destructuring also allows you to set default values If a property doesn't exist in the object you're destructuring, you can specify a fallback value:\n```js\nlet person = { name: \"Alice\", age: 30, city: \"New York\" };\nlet { name, age, country = \"Unknown\" } = person;\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b77adf9de12617a2dbb3.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b1d7b59f4de06c39879574fd4f0359bb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b77adf9de12617a2dbb3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "// 30 ``` In this case, we're extracting the name property and assigning it to a variable called personName, and doing the same with age and personAge Object destructuring also allows you to set default values If a property doesn't exist in the object you're destructuring, you can specify a fallback value: ```js let person = { name: \"Alice\", age: 30, city: \"New York\" }; let { name, age, country = \"Unknown\" } = person; consolelog(country); // Unknown\n```\nHere, since country doesn't exist in our person object, it gets the default value Unknown Now, let's talk about the shorthand notation in object destructuring When you're creating objects, especially when the property names match variable names, you can use a shorthand syntax:\n```js\nlet name = \"Bob\";\nlet age = 25;\nlet person = { name, age };\nconsole log(person); // { name: \"Bob\", age: 25 }\n```\nThe code above takes the properties with the same name as our variables and assigns them the values of those variables This shorthand notation is particularly useful when you're returning objects from functions or creating objects with multiple properties:\n```js\nfunction createPerson(name, age) {\nreturn { name, age };\n}\nlet person = createPerson(\"Charlie\", 35);\nconsole log(person); // { name: \"Charlie\", age: 35 }\n```\nObject destructuring and the shorthand object notation are powerful features that can make your code more concise and easier to read They're especially useful when working with complex data structures, or when you need to pass multiple parameters to functions As you continue to work with JavaScript, you'll find many situations where these techniques can simplify your code and make it more expressive --questions--\n--text--\nWhat is the primary purpose of object destructuring in JavaScript --answers--\nTo create new objects --feedback--\nThink about what we said destructuring allows you to do with object properties To extract values from objects and assign them to variables To merge multiple objects --feedback--\nThink about what we said destructuring allows you to do with object properties To delete properties from objects --feedback--\nThink about what we said destructuring allows you to do with object properties --video-solution--\n2\n--text--\nHow can you assign a default value to a variable when destructuring an object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b77adf9de12617a2dbb3.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d36d90859a9b5efd1d0e95e7ca32497c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b77adf9de12617a2dbb3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "about what we said destructuring allows you to do with object properties To extract values from objects and assign them to variables To merge multiple objects --feedback-- Think about what we said destructuring allows you to do with object properties To delete properties from objects --feedback-- Think about what we said destructuring allows you to do with object properties --video-solution-- 2 --text-- How can you assign a default value to a variable when destructuring an object--answers--\n{ property = defaultValue } = object\n{ property: defaultValue } = object\n--feedback--\nRecall the syntax we used to provide a fallback value for non-existent properties { property || defaultValue } = object\n--feedback--\nRecall the syntax we used to provide a fallback value for non-existent properties { property defaultValue } = object\n--feedback--\nRecall the syntax we used to provide a fallback value for non-existent properties --video-solution--\n1\n--text--\nWhat does the shorthand notation { name, age } do when creating an object --answers--\nIt creates an object with undefined properties --feedback--\nRemember what we said about the shorthand syntax when property names match variable names It creates an object with null values for name and age --feedback--\nRemember what we said about the shorthand syntax when property names match variable names It creates an object with properties named name and age, assigning them the values of variables with the same names It throws an error because it's invalid syntax --feedback--\nRemember what we said about the shorthand syntax when property names match variable names --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5447,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b77adf9de12617a2dbb3.md",
      "source_type": "git_repo"
    },
    "token_count": 312,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "2dbd8cfcc64273005fb78fe5225291b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b79c6aa77826855a3f11.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732b79c6aa77826855a3f11\ntitle: How Do JSON parse() and JSON stringify() Work challengeType: 19\ndashedName: how-do-json-parse-and-json-stringify-work\n--description--\nThere are two powerful methods in JavaScript for handling JSON data: JSON parse() and JSON stringify() These methods are commonly used to convert between JSON strings and JavaScript objects JSON stringify() is used to convert a JavaScript object into a JSON string This is useful when you want to store or transmit data in a format that can be easily shared or transferred between systems Here's how you can use the JSON stringify() method:\n```js\nconst user = {\nname: \"John\",\nage: 30,\nisAdmin: true\n};\nconst jsonString = JSON stringify(user);\nconsole log(jsonString);\n```\nIn the example, the JavaScript object user is converted into a JSON string that looks like this:\njs\n'{\"name\":\"John\",\"age\":30,\"isAdmin\":true}'\nThe JSON stringify() method also accepts an optional parameter called a replacer, which can be a function or an array Here is an example of using an array for the optional replacer parameter:\n```js\nconst developerObj = {\nfirstName: \"Jessica\",\nisAwesome: true,\nisMusician: true,\ncountry: \"USA\",\n};\n// result: {\"firstName\":\"Jessica\",\"country\":\"USA\"}\nconsole log(JSON stringify(developerObj, [\"firstName\", \"country\"]));\n```\nIn this example, we have a developerObj with four properties When we use the JSON stringify() method, we can pass in an array for the second parameter and specify which properties we want stringified The result will be a stringified object containing only the firstName and country properties Another optional parameter for the JSON stringify() method would be the spacer parameter This allows you to control the spacing for the stringified result:\n```js\nconst developerObj = {\nfirstName: \"Jessica\",\nisAwesome: true,\nisMusician: true,\ncountry: \"USA\",\n};\nconsole log(JSON stringify(developerObj, null, 2));\n/ result\n{\n\"firstName\": \"Jessica\",\n\"isAwesome\": true,\n\"isMusician\": true,\n\"country\": \"USA\"\n}\n/\n```\nMost of the time you will not be using either of these optional parameters for the JSON",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5043,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b79c6aa77826855a3f11.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "18bfbab78af6db27bdd07b8c4f887009",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b79c6aa77826855a3f11.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "country properties Another optional parameter for the JSON stringify() method would be the spacer parameter This allows you to control the spacing for the stringified result: ```js const developerObj = { firstName: \"Jessica\", isAwesome: true, isMusician: true, country: \"USA\", }; console log(JSON stringify(developerObj, null, 2)); / result { \"firstName\": \"Jessica\", \"isAwesome\": true, \"isMusician\": true, \"country\": \"USA\" } / ``` Most of the time you will not be using either of these optional parameters for the JSONstringify() method but it is still helpful to be aware of them Another method you will be using a lot in your programming is the JSON parse() method JSON parse() converts a JSON string back into a JavaScript object This is useful when you retrieve JSON data from a web server or from localStorage and you need to manipulate the data in your application You will learn more about localStorage in a future lecture Here's an example on how to work with the JSON parse() method:\njs\nconst jsonString = '{\"name\":\"John\",\"age\":30,\"isAdmin\":true}';\nconst userObject = JSON parse(jsonString);\nThe JSON string is parsed back into a JavaScript object that looks like this:\njs\n{\nname: \"John\",\nage: 30,\nisAdmin: true\n}\nThis allows you to work with the data in your program as a normal JavaScript object, making it easier to manipulate and use In future modules, we will continue to learn more about how to work with JSON and the JSON parse() and JSON stringify() methods --questions--\n--text--\nWhat does JSON stringify() do --answers--\nIt converts a JSON string into a JavaScript object --feedback--\nThink about which function is responsible for creating a string format out of an object It converts a JavaScript object into a JSON string It sends data to a web server --feedback--\nThink about which function is responsible for creating a string format out of an object It converts an array into a string --feedback--\nThink about which function is responsible for creating a string format out of an object --video-solution--\n2\n--text--\nWhat does JSON parse() do --answers--\nIt converts a JavaScript object into a JSON string --feedback--\nThis method parses a string and returns a usable JavaScript object It stores data in local storage --feedback--\nThis method parses a string and returns a usable JavaScript object It converts a JSON string into a JavaScript object",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5043,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b79c6aa77826855a3f11.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "e59950583146adb497819295d66d5e19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b79c6aa77826855a3f11.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "into a string --feedback-- Think about which function is responsible for creating a string format out of an object --video-solution-- 2 --text-- What does JSON parse() do --answers-- It converts a JavaScript object into a JSON string --feedback-- This method parses a string and returns a usable JavaScript object It stores data in local storage --feedback-- This method parses a string and returns a usable JavaScript object It converts a JSON string into a JavaScript objectIt sends data over the network --feedback--\nThis method parses a string and returns a usable JavaScript object --video-solution--\n3\n--text--\nGiven the following JSON string, how would you convert it back into a JavaScript object and access the \"age\" value js\nconst jsonString = '{\"name\":\"Alice\",\"age\":25}';\n--answers--\njsonString name\n--feedback--\nUse the method that parses JSON strings into objects and then access the \"age\" property JSON stringify(jsonString) age\n--feedback--\nUse the method that parses JSON strings into objects and then access the \"age\" property JSON parse(jsonString) age\njsonString[1]\n--feedback--\nUse the method that parses JSON strings into objects and then access the \"age\" property --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5043,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-objects\\6732b79c6aa77826855a3f11.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "576f3b6b0ffafcd2fd8aed7d3cc8b22b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\673271a8998ddfd97578d095.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673271a8998ddfd97578d095\ntitle: How Do the Increment and Decrement Operators Work challengeType: 19\ndashedName: how-do-the-increment-and-decrement-operators-work\n--description--\nIf you're working with numbers and need to increase or decrease a value by one, the increment and decrement operators make the job easier Let's break it down in a simple way The increment and decrement operators are represented by ++ and --, respectively They both allow you to adjust the value of a variable by 1 Instead of writing something like x = x + 1 or x = x - 1, you can simply use x++ to add 1, or x-- to subtract 1 It's faster, cleaner, and easier to read There's a twist to how the increment and decrement operators work: they come in two forms, prefix and postfix, with the difference being when the value gets updated For the increment operator, prefix is ++x and postfix is x++ Prefix (++x) increases the value of the variable first, then returns a new value Postfix (x++) returns the current value of the variable first, then increases it:\n```js\nlet x = 5;\nconsole log(++x); // 6\nconsole log(x); // 6\n```\nIn the code above, ++x means \"increment x first, then use it\" So when you log ++x, you immediately get the incremented value, which is 6 Now, let's take a look at an example using the postfix:\n```js\nlet y = 5;\nconsole log(y++); // 5\nconsole log(y); // 6\n```\nIn this example, y++ means \"use y first, then increment it\" When you log y++, you get 5, but y becomes 6 after that line of code The decrement operator does the same thing as increment, except it decreases the value by 1 Again, there are two forms: prefix (--x) decreases the value of the variable first, then returns the new value And postfix (x--) returns the current value first, then decreases it:\n```js\nlet x = 5;\nconsole log(--x); // 4\nconsole log(x); // 4\nlet y = 5;\nconsole log(y--); // 5\nconsole log(y); // 4\n```\nSo, which should you use: prefix or postfix",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\673271a8998ddfd97578d095.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "b661c57591982a5dcf5188c55c7eb89e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\673271a8998ddfd97578d095.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the same thing as increment, except it decreases the value by 1 Again, there are two forms: prefix (--x) decreases the value of the variable first, then returns the new value And postfix (x--) returns the current value first, then decreases it: ```js let x = 5; console log(--x); // 4 console log(x); // 4 let y = 5; console log(y--); // 5 console log(y); // 4 ``` So, which should you use: prefix or postfixIn many cases, it doesn't matter which one you use Both get the job done However, if you're using the value immediately in an expression, the difference becomes important Let's take a look at this example:\n```js\nlet a = 5;\nlet b = ++a;\nconsole log(b); // 6 (a was incremented before assignment)\nlet c = 5;\nlet d = c++;\nconsole log(d); // 5 (c was incremented after assignment)\n```\nSo, if you need the updated value right away, use prefix If you want the current value first and you don’t care about the increment until later, go with postfix --questions--\n--text--\nWhich operators in JavaScript allow you to adjust the value of a variable by 1 --answers--\n+ and - --feedback--\nThink about the operators that increase or decrease a value by exactly 1 * and / --feedback--\nThink about the operators that increase or decrease a value by exactly 1 ++ and -- && and || --feedback--\nThink about the operators that increase or decrease a value by exactly 1 --video-solution--\n3\n--text--\nWhich form of the increment or decrement operator should you use if you need the updated value immediately in an expression --answers--\nPostfix (value++ or value--) --feedback--\nThink about which form updates the value before the expression is evaluated Prefix (++value or --value) Either prefix or postfix, it doesn't matter --feedback--\nThink about which form updates the value before the expression is evaluated Neither, you should use addition or subtraction instead --feedback--\nThink about which form updates the value before the expression is evaluated --video-solution--\n2\n--text--\nIn which forms do the increment and decrement operators come in JavaScript --answers--\nPrefix and postfix Addition and subtraction --feedback--\nThink about the two different ways these operators can be applied Multiplication and division",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\673271a8998ddfd97578d095.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a6db8e4324cc168d1113c791059c526f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\673271a8998ddfd97578d095.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "or postfix, it doesn't matter --feedback-- Think about which form updates the value before the expression is evaluated Neither, you should use addition or subtraction instead --feedback-- Think about which form updates the value before the expression is evaluated --video-solution-- 2 --text-- In which forms do the increment and decrement operators come in JavaScript --answers-- Prefix and postfix Addition and subtraction --feedback-- Think about the two different ways these operators can be applied Multiplication and division--feedback--\nThink about the two different ways these operators can be applied Left and right --feedback--\nThink about the two different ways these operators can be applied --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4239,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\673271a8998ddfd97578d095.md",
      "source_type": "git_repo"
    },
    "token_count": 132,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8d0adb4f66e568f5efab71ce484ac675",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\6732719e2e3ad4d947410b65.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6732719e2e3ad4d947410b65\ntitle: How Does Operator Precedence Work challengeType: 19\ndashedName: how-does-operator-precedence-work\n--description--\nIf you write an expression with several operators in JavaScript, how does JavaScript decide which one to evaluate first This is where operator precedence comes in Let's explore operator precedence in detail with code examples, and also what happens when operators have the same precedence Operator precedence determines the order in which operations are evaluated in an expression Operators with higher precedence are evaluated before those with lower precedence Think of operator precedence like in math, where division and multiplication happen before addition and subtraction Without following this rule, basic equations would give you the wrong answer JavaScript works the same way It has its own rules for which operators come first, second, and so on For example, take a look at the expression below:\n```js\nconst result = 2 + 3 * 4;\nconsole log(result); // 14\n```\nIf JavaScript evaluated this expression from left to right, you'd expect 2 + 3 = 5, then 5 * 4 = 20 But because multiplication has a higher precedence than addition, JavaScript evaluates the 3 * 4 part first, resulting in 2 + 12 = 14 Sometimes, you may want certain parts of your expression to run first, regardless of precedence rules You can use parentheses, (), to do this Anything inside parentheses is evaluated first, no matter what Let's make the 2 + 3 part of the previous example evaluate first:\n```js\nconst result = (2 + 3) * 4;\nconsole log(result); // 20\n```\nIn the example above, the parentheses force JavaScript to evaluate 2 + 3 first, and then multiply the result by 4 This gives you 20 instead of 14 The division operator has more precedence than addition or subtraction too:\n```js\nconst result = 2 + 6 / 3;\nconsole log(result); // 4\n```\nIf JavaScript evaluated this expression from left to right, you might expect 2 + 6 = 8, then 8 / 3 = 2 67 But since division has a higher precedence than addition, JavaScript evaluates the division first: 6 / 3 = 2, and then adds 2 + 2, giving the result 4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5647,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\6732719e2e3ad4d947410b65.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "fdb3a06a182643216fc5d81bb81349ca",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\6732719e2e3ad4d947410b65.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "operator has more precedence than addition or subtraction too: ```js const result = 2 + 6 / 3; console log(result); // 4 ``` If JavaScript evaluated this expression from left to right, you might expect 2 + 6 = 8, then 8 / 3 = 2 67 But since division has a higher precedence than addition, JavaScript evaluates the division first: 6 / 3 = 2, and then adds 2 + 2, giving the result 4So, in both multiplication and division, those operations will always take place before addition and subtraction unless you use parentheses to change the order So what happens if the operators have the same precedence JavaScript uses associativity to figure out the order to evaluate them Associativity is what tells JavaScript whether to evaluate operators from left to right or right to left For most operators like addition and multiplication, associativity is left to right So, JavaScript processes these from the leftmost side of the expression to the right:\n```js\nconst result = 10 - 2 + 3;\nconsole log(result); // 11\n```\nFirst, 10 - 2 = 8, then 8 + 3 = 11 JavaScript moves left to right in this case Some operators, like assignment (=), are right-to-left associative This means the right side of the expression gets evaluated first:\n```js\nlet a, b;\na = b = 5;\nconsole log(a); // 5\nconsole log(b); // 5\nconsole log(a + b); // 10\n```\nIn the example above, JavaScript assigns 5 to b first, then assigns b (which is now 5) to a The exponent operator is also right-to-left associative:\n```js\nconst result = 2 ** 3 ** 2;\nconsole log(result); // 512\n```\nFirst, JavaScript evaluates 3 ** 2, which equals 9, then, it evaluates 2 ** 9, which equals 512 If the exponent operator had left-to-right associativity, JavaScript would have calculated 2 ** 3 first to get 8, then 8 ** 2 to get 64 --questions--\n--text--\nHow does operator precedence in JavaScript compare to mathematics --answers--\nAddition happens before multiplication and division --feedback--\nThink about the order of operations you follow in math equations Division and multiplication happen before addition and subtraction, just like in mathematics",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5647,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\6732719e2e3ad4d947410b65.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "2e58d5db41a5c70ada91ab2270a30fc2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\6732719e2e3ad4d947410b65.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "then, it evaluates 2 ** 9, which equals 512 If the exponent operator had left-to-right associativity, JavaScript would have calculated 2 ** 3 first to get 8, then 8 ** 2 to get 64 --questions-- --text-- How does operator precedence in JavaScript compare to mathematics --answers-- Addition happens before multiplication and division --feedback-- Think about the order of operations you follow in math equations Division and multiplication happen before addition and subtraction, just like in mathematicsAll operations are performed in the order they appear --feedback--\nThink about the order of operations you follow in math equations Subtraction takes precedence over all other operations --feedback--\nThink about the order of operations you follow in math equations --video-solution--\n2\n--text--\nHow can you override operator precedence in JavaScript --answers--\nBy using the addition operator (+) to change the order of operations --feedback--\nThink about how you change the order of operations in math equations By using parentheses to force certain parts of the expression to be evaluated first By reversing the operators in the expression --feedback--\nThink about how you change the order of operations in math equations By performing all operations left to right, regardless of precedence --feedback--\nThink about how you change the order of operations in math equations --video-solution--\n2\n--text--\nHow does JavaScript evaluate expressions with the exponent operator (**) --answers--\nFrom left to right --feedback--\nThink about the order in which exponentiation occurs in the expression From right to left, meaning it evaluates the rightmost exponentiation first By multiplying the base by itself the number of times indicated --feedback--\nThink about the order in which exponentiation occurs in the expression By adding the exponents together first, then calculating the result --feedback--\nThink about the order in which exponentiation occurs in the expression --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5647,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\6732719e2e3ad4d947410b65.md",
      "source_type": "git_repo"
    },
    "token_count": 373,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "6977b32fc3926919a4ecf75a60d01057",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\673271b4213033d9b661c70e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 673271b4213033d9b661c70e\ntitle: What Are Compound Assignment Operators in JavaScript, and How Do They Work challengeType: 19\ndashedName: what-are-compound-assignment-operators-in-javascript-and-how-do-they-work\n--description--\nIn JavaScript, all arithmetic operators have a compound assignment form Compound assignment operators allow you to perform a mathematical operation and reassign the result back to the variable in one line of code Instead of writing something like this:\n```js\nlet num = 5;\nnum = num + 2;\nconsole log(num); // 7\n```\nYou can write something like this:\n```js\nlet num = 5;\nnum += 2;\nconsole log(num); // 7\n```\nNotice how num += 2 combines both the addition and assignment steps into one This saves time and reduces clutter in your code Let's dive deeper into the most common compound assignment operators in JavaScript As you've already seen, the += operator lets you add a value to an existing variable It is known as the addition assignment operator The addition assignment operator takes the current value of the variable, adds the specified number to it, and then assigns the result back to the variable:\n```js\nlet total = 10;\ntotal += 5;\nconsole log(total); // 15\n```\nAs you might guess, there's a subtraction assignment operator denoted by -= The subtraction assignment operator subtracts the specified value from the current value of the variable and assigns the new value back to the variable:\n```js\nlet score = 20;\nscore -= 7;\nconsole log(score); // 13\n```\nIf you didn't use the subtraction assignment, you'd have done something like this:\n```js\nlet score = 20;\nscore = score - 7;\nconsole log(score); // 13\n```\nThe multiplication assignment operator is represented by *= It multiplies the current value of the variable by the specified number and reassigns it back to the variable:\n```js\nlet points = 5;\npoints *= 3;\nconsole log(points); // 15\n```\nLastly, there's a division assignment operator denoted by /= Just like others before it, it lets you divide the current value of a variable by a number you specify, then assign the result back to the variable:\n```js\nlet balance = 100;\nbalance /= 4;\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4988,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\673271b4213033d9b661c70e.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "bb2bea2b8691ab470b4fd69610a73885",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\673271b4213033d9b661c70e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the current value of the variable by the specified number and reassigns it back to the variable: ```js let points = 5; points *= 3; console log(points); // 15 ``` Lastly, there's a division assignment operator denoted by /= Just like others before it, it lets you divide the current value of a variable by a number you specify, then assign the result back to the variable: ```js let balance = 100; balance /= 4; consolelog(balance); // 25\n```\nRemember there's a compound assignment operator for every operator in JavaScript So, apart from the four already mentioned, we also have:\nRemainder assignment operator (%=), which divides a variable by the specified number and assigns the remainder to the variable Exponent assignment operator (**=), which raises a variable to the power of the specified number and reassigns the result to the variable Bitwise AND assignment operator (&=), which performs a bitwise AND operation with the specified number and reassigns the result to the variable Bitwise OR assignment operator (|=), which performs a bitwise OR operation with the specified number and reassigns the result to the variable --questions--\n--text--\nWhat do compound assignment operators in JavaScript allow you to do --answers--\nPerform a mathematical operation without changing the variable's value --feedback--\nThink about how to combine mathematical operations and reassignment Perform a mathematical operation and reassign the result to the variable in one line of code Perform two different operations at once --feedback--\nThink about how to combine mathematical operations and reassignment Only perform addition and subtraction in one line of code --feedback--\nThink about how to combine mathematical operations and reassignment --video-solution--\n2\n--text--\nWhat does the modulus assignment operator (%=) do in JavaScript --answers--\nDivides a variable by the specified number and assigns the quotient to the variable --feedback--\nThink about how the modulus operator works in a normal arithmetic operation Multiplies a variable by the specified number and assigns the product to the variable --feedback--\nThink about how the modulus operator works in a normal arithmetic operation Divides a variable by the specified number and assigns the remainder back to the variable Adds the remainder of a division to the variable --feedback--\nThink about how the modulus operator works in a normal arithmetic operation --video-solution--\n3\n--text--\nWhat happens when you run the code let points = 5; points *= 3;",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4988,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\673271b4213033d9b661c70e.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a84bfe187ef0e182a9ea821cd06d7d55",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\673271b4213033d9b661c70e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "specified number and assigns the product to the variable --feedback-- Think about how the modulus operator works in a normal arithmetic operation Divides a variable by the specified number and assigns the remainder back to the variable Adds the remainder of a division to the variable --feedback-- Think about how the modulus operator works in a normal arithmetic operation --video-solution-- 3 --text-- What happens when you run the code let points = 5; points *= 3;--answers--\npoints is multiplied by 3, and the result is added to the original value of points --feedback--\nThink about how the *= compound assignment operator works points is divided by 3 --feedback--\nThink about how the *= compound assignment operator works points is multiplied by 3, and the result (15) is assigned back to points points remains unchanged --feedback--\nThink about how the *= compound assignment operator works --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4988,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-operator-behavior\\673271b4213033d9b661c70e.md",
      "source_type": "git_repo"
    },
    "token_count": 182,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "85381e6608caaad3ad97600db54808ef",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672aa74f761c065c9828a95e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa74f761c065c9828a95e\ntitle: What Are Pseudo-classes, and How Do They Work challengeType: 19\ndashedName: what-are-pseudo-classes\n--description--\nPseudo-classes are special CSS keywords that allow you to select an element based on its specific state or position The element's state or position could include:\nWhen it's active When it's being hovered over by a mouse When it's the first child of a parent When it's the last child of a parent When a link has been visited When it's disabled To use a pseudo-class, you add it to the selector by using a colon (:) followed by the name of the pseudo-class:\ncss\nselector:pseudo-class {\n/* CSS properties */\n}\nLet's see how you can use a pseudo-class to represent each of the states and positions we already mentioned The :active pseudo-class lets you select the active state of an element, like clicking on a button:\ncss\nbutton:active {\nbackground: greenyellow;\n}\nThe :hover pseudo-class defines the hover state of an element An example would be hovering over a button or link:\ncss\na:hover {\ntext-decoration: none;\nbackground: crimson;\n}\nThe :first-child pseudo-class selects an element that is the first child of its parent element Here's an HTML example showing a div element containing multiple paragraph elements:\n```html\nfirst child\nsecond child\nthird child\nlast child\n```\nHere's the CSS that selects the first paragraph element in that div container:\ncss container p:first-child {\nbackground: lightcoral;\npadding: 0 4rem;\n}\nThe first paragraph element in that div will receive the lightcoral background color and padding of 0 4rem on all four sides The :last-child pseudo-class targets the last element that is the child of its parent Here is an example of targeting the last paragraph element in the container div element:\ncss container p:last-child {\nbackground: lightcoral;\npadding: 0 4rem;\n}\nThe :visited pseudo-class lets you style a link the user has already visited:\ncss\na:visited {\ncolor: purple;\n}\nThe :disabled pseudo-class lets you style an interactive element in disabled mode:\ncss\nbutton:disabled {\nbackground-color: lightgray;\n}\nAs you can see, pseudo-classes let you style elements based on user interactions, like hovering or visiting a link",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672aa74f761c065c9828a95e.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "630da728b705f9df9b0e9b22ed3bf79f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672aa74f761c065c9828a95e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "targeting the last paragraph element in the container div element: css container p:last-child { background: lightcoral; padding: 0 4rem; } The :visited pseudo-class lets you style a link the user has already visited: css a:visited { color: purple; } The :disabled pseudo-class lets you style an interactive element in disabled mode: css button:disabled { background-color: lightgray; } As you can see, pseudo-classes let you style elements based on user interactions, like hovering or visiting a linkThis makes your website feel more interactive Apart from the pseudo-classes already mentioned, there are others like:\n:focus\n:first-of-type\n:last-of-type\n:nth-of-type\n:modal\n:enabled\n:checked\n:required, and more --questions--\n--text--\nWhat does the :hover pseudo-class do in CSS --answers--\nIt selects an element when it's clicked --feedback--\nThink about a user interaction with the mouse It selects an element when it's being hovered over by a mouse It selects the first child element of a parent --feedback--\nThink about a user interaction with the mouse It selects a link after it's been visited --feedback--\nThink about a user interaction with the mouse --video-solution--\n2\n--text--\nWhat are pseudo-classes --answers--\nThey are special CSS keywords that let you select an element based on its state or position They are used to create new HTML elements --feedback--\nThink about how CSS can style elements based on their interaction or position They change the content of an element --feedback--\nThink about how CSS can style elements based on their interaction or position They are replacements for classes in HTML --feedback--\nThink about how CSS can style elements based on their interaction or position --video-solution--\n1\n--text--\nWhat does the :disabled pseudo-class do in CSS --answers--\nIt styles an element when it's disabled It styles an element when it's being hovered over --feedback--\nThink about when a button or input field is not interactive It styles the first child of a parent element --feedback--\nThink about when a button or input field is not interactive It styles a link after it's been visited --feedback--\nThink about when a button or input field is not interactive --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4381,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672aa74f761c065c9828a95e.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "a94a9373920d2208857b41d529d86f4e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbe9171a5cca90f2edeea.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bbe9171a5cca90f2edeea\ntitle: What Are Examples of Element User Action Pseudo-classes challengeType: 19\ndashedName: what-are-examples-of-element-user-action-pseudo-classes\n--description--\nUser feedback is a crucial element of web design For instance, it's important for users to receive visual cues when they interact with elements on a website, such as hovering over a button or clicking a link This feedback helps users understand the state of interactive elements, like indicating whether a link has been visited or not User action pseudo-classes in CSS are special keywords that allow you to provide this kind of feedback without needing JavaScript or other programming languages These pseudo-classes include :hover, :active, :focus, and :visited, among others They enable you to change the appearance of elements based on user interactions, improving the overall user experience Let's dive into some of the user action pseudo-classes we have and see how they work The :active pseudo-class applies styles when an element is activated by the user For example, when the user clicks a button or a link, it provides immediate visual feedback, showing users that their actions are being recognized css\na:active {\ncolor: crimson;\n}\nThe :hover pseudo-class is triggered when a user hovers over an element with their mouse or other pointing device Developers often use it to create visual feedback for buttons, links, or any element that should respond to user attention Here's a button a user would hover over before clicking:\nhtml\n<button class=\"btn\">Hover Over Me</button>\nHere's the CSS that changes the color, background color, and cursor of the button once the user hovers over it:\ncss btn:hover {\nbackground-color: darkgreen;\ncolor: white;\ncursor: pointer;\n}\nThe :focus pseudo-class applies styles when an element gains focus, typically through keyboard navigation or when a user clicks into a form input This is not just for feedback but also crucial for accessibility It ensures that users who rely heavily on keyboards can easily identify which element they are interacting with Here's an input element inside a form element:\n```html\n```\nHere's the CSS that gives the input a solid dark green border and a border-radius when the user clicks into it:\ncss\ninput:focus {\noutline: 2px solid darkgreen;\nborder-radius: 4px;\n}\nThe :visited pseudo-class targets a link the user has visited",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5826,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbe9171a5cca90f2edeea.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "35a8e57ca0543519b79388b1efd0a60a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbe9171a5cca90f2edeea.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "for feedback but also crucial for accessibility It ensures that users who rely heavily on keyboards can easily identify which element they are interacting with Here's an input element inside a form element: ```html ``` Here's the CSS that gives the input a solid dark green border and a border-radius when the user clicks into it: css input:focus { outline: 2px solid darkgreen; border-radius: 4px; } The :visited pseudo-class targets a link the user has visitedThis can be useful for helping users distinguish between pages they have already visited and the ones they are yet to visit Here is an example of changing the anchor text color to cyan when the link is visited:\ncss\na:visited {\ncolor: cyan;\n}\nThe :checked pseudo-class in CSS allows you to style form elements such as checkboxes and radio buttons when they are selected (checked) This pseudo-class is useful for customizing the appearance of these elements to enhance user experience, even though browsers provide default styles for them Here's the kind of checkbox you usually check to agree to terms on a website:\n```html\nAgree\n```\nHere's how you can use the :checked pseudo-class to indicate to the user that it is checked:\ncss checkbox:checked {\nappearance: none;\nwidth: 12px;\nheight: 12px;\nbackground-color: red;\n}\nIn this example, we are using the appearance property set to none to remove the default styling applied by the browser to checkbox inputs When the user checks the box, it will have a background color of red Other examples of action pseudo-classes are:\n:focus-within: for applying styles to an element when it or any of its descendants have focus :enabled: for targeting form buttons or other elements that are currently enabled :disabled: for targeting form buttons or other elements that are disabled :target: for applying styles to an element that is the target of a URL fragment (the part of a URL after the # symbol) --questions--\n--text--\nWhat do user action pseudo-classes allow you to do --answers--\nThey enable animations and transitions --feedback--\nThink about how you can interact with users purely with CSS They allow you to modify the DOM structure dynamically --feedback--\nThink about how you can interact with users purely with CSS They let you provide feedback to the user without relying on JavaScript They let you style the last element in a list --feedback--\nThink about how you can interact with users purely with CSS",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5826,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbe9171a5cca90f2edeea.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3d8e5644548f1a6aeb765016da0dac4a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbe9171a5cca90f2edeea.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "you to do --answers-- They enable animations and transitions --feedback-- Think about how you can interact with users purely with CSS They allow you to modify the DOM structure dynamically --feedback-- Think about how you can interact with users purely with CSS They let you provide feedback to the user without relying on JavaScript They let you style the last element in a list --feedback-- Think about how you can interact with users purely with CSS--video-solution--\n3\n--text--\nWhat does the :checked pseudo-class do in CSS --answers--\nIt selects an element when it is disabled --feedback--\nThink about how forms handle user selections It selects an element when it is being hovered over --feedback--\nThink about how forms handle user selections It styles elements like checkboxes or radio buttons that are checked It styles an element when it gains focus --feedback--\nThink about how forms handle user selections --video-solution--\n3\n--text--\nWhat does the :focus pseudo-class do --answers--\nIt selects an element when it is hovered over by a mouse --feedback--\nThink about how users navigate forms using a keyboard It applies styles when an element gains focus, usually through keyboard navigation or a click It selects an element after a form is submitted --feedback--\nThink about how users navigate forms using a keyboard It applies styles to an element when it is disabled --feedback--\nThink about how users navigate forms using a keyboard --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5826,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbe9171a5cca90f2edeea.md",
      "source_type": "git_repo"
    },
    "token_count": 284,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "298f5bda782a61da6e0ec45e1b13f04e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbe9d6ec03ea954d92ff7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bbe9d6ec03ea954d92ff7\ntitle: What Are Examples of Input Pseudo-classes challengeType: 19\ndashedName: what-are-examples-of-input-pseudo-classes\n--description--\nThe appearance and behavior of input elements matter when building web forms A form with inputs that respond to user actions goes a long way in improving user experience, and it should not cause confusion or frustration CSS provides several input pseudo-classes that can make your forms more intuitive and user-friendly Let's look at these pseudo-classes in detail The :focus pseudo-class allows you to target an input element when a user selects or clicks on it, drawing attention to the active input field This helps users easily identify where they're currently typing:\ncss\ninput:focus {\nborder: 2px solid crimson;\noutline: none;\n}\nAs the name implies, the :hover pseudo-class is triggered when the user places the cursor over an element It provides visual feedback before the user interacts with the input, effectively alerting them that the input is ready for action css\ninput:hover {\nbackground-color: orange;\n}\nIn the example above, the input element background changes to an orange color when the user hovers over it, letting them know that the field is ready for interaction The :checked pseudo-class lets you style a radio button or checkbox differently when a user selects it This way, the user can easily see which option they've chosen Here is an example:\n```html\nI have read the terms\n```\ncss checkbox:checked {\nappearance: none;\nwidth: 12px;\nheight: 12px;\nbackground-color: coral;\n}\n:required targets input elements that have the required attribute It signals to the user that they must fill out the field to submit the form The HTML below has a form with two required input elements:\n```html\nName:\nEmail:\nPhone Number:\nSubmit\n```\nAnd this CSS applies an orange border of two pixels to the two required inputs:\ncss\ninput:required {\nborder: 2px solid orange;\n}\nWhen validating forms, you can use the :valid pseudo-class to style the input fields that meet the validation criteria, and :invalid to style the input fields that do not meet the criteria Typically, you will use green for a valid input and red for an invalid input",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6228,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbe9d6ec03ea954d92ff7.md",
      "source_type": "git_repo"
    },
    "token_count": 472,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "36532fead3967ce702f6faea085ff121",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbe9d6ec03ea954d92ff7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Name: Email: Phone Number: Submit ``` And this CSS applies an orange border of two pixels to the two required inputs: css input:required { border: 2px solid orange; } When validating forms, you can use the :valid pseudo-class to style the input fields that meet the validation criteria, and :invalid to style the input fields that do not meet the criteria Typically, you will use green for a valid input and red for an invalid inputHere is an example using the :valid pseudo-class:\ncss\ninput:valid {\nborder-color: green;\n}\nHere is an example of using the :invalid pseudo-class:\ncss\ninput:invalid {\nborder-color: crimson;\n}\nThe :disabled pseudo-class allows you to select and style input elements that are disabled These elements have the disabled attribute, which prevents users from interacting with them When an input is disabled, it cannot be clicked, focused, or edited Here is an example of a label and a disabled input element:\nhtml\n<label for=\"name\">Name:</label>\n<input class=\"text-input\" type=\"text\" id=\"name\" name=\"name\" disabled />\nIn the CSS, we are targeting that disabled input and giving it a background color of lightgray and changing the cursor pointer to not-allowed css text-input:disabled {\nbackground-color: lightgray;\ncursor: not-allowed;\n}\nThe cursor: not-allowed; CSS property value changes the appearance of the cursor to indicate that an action is not permitted When applied to an element, it shows a cursor with a circle-slash symbol (usually a circle with a diagonal line through it) to signal to users that the element is not interactive or cannot be clicked or interacted with Here are some other examples of input pseudo-classes and what they do:\n:autofill: applies styles to input fields that the browser automatically fills with saved data :optional: styles input elements that are not required and can be left empty :in-range and :out-of-range: style elements based on whether their values are within or outside specified range constraints --questions--\n--text--\nWhat does the :focus pseudo-class let you do --answers--\nIt enables you to highlight multiple elements simultaneously --feedback--\nConsider how you can draw attention to the active input field purely with CSS It allows you to style an input element when it is selected or clicked It lets you automatically submit a form when an input is clicked",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6228,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbe9d6ec03ea954d92ff7.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8f10026365c30381fc6ad326cd93754f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbe9d6ec03ea954d92ff7.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "and :out-of-range: style elements based on whether their values are within or outside specified range constraints --questions-- --text-- What does the :focus pseudo-class let you do --answers-- It enables you to highlight multiple elements simultaneously --feedback-- Consider how you can draw attention to the active input field purely with CSS It allows you to style an input element when it is selected or clicked It lets you automatically submit a form when an input is clicked--feedback--\nConsider how you can draw attention to the active input field purely with CSS It allows you to reorder elements in a form dynamically --feedback--\nConsider how you can draw attention to the active input field purely with CSS --video-solution--\n2\n--text--\nWhat can the :valid and :invalid pseudo-classes be used for in form validation --answers--\nThey allow you to reset all input fields automatically --feedback--\nThink about how you might visually indicate to users whether their input is correct or not They let you provide different styles for inputs based on whether they meet validation criteria They let you disable form submission if any field is left empty --feedback--\nThink about how you might visually indicate to users whether their input is correct or not They allow you to change the placeholder text dynamically --feedback--\nThink about how you might visually indicate to users whether their input is correct or not --video-solution--\n2\n--text--\nWhich pseudo-class allows you to style input fields that must be filled out before form submission --answers--\n:optional\n--feedback--\nThink about how you can indicate mandatory fields using CSS :disabled\n--feedback--\nThink about how you can indicate mandatory fields using CSS :required\n:checked\n--feedback--\nThink about how you can indicate mandatory fields using CSS --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6228,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbe9d6ec03ea954d92ff7.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "f7098d260c260e1afbb21ab2b8a5f455",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbeaa5afdc5a98d5ab8ff.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bbeaa5afdc5a98d5ab8ff\ntitle: What Are Examples of Location Pseudo-classes challengeType: 19\ndashedName: what-are-examples-of-location-pseudo-classes\n--description--\nLocation pseudo-classes are used for styling links and elements that are targeted within the current document They offer a way to apply styles based on whether a link is visited or whether an element is currently in focus Examples of location pseudo-classes are:\n:link\n:visited\n:any-link\n:local-link\n:target\n:target-within\nLet's take a deeper look at each of these pseudo-classes The :link pseudo-class allows you to target all unvisited links on a webpage You can use it to style links differently before the user clicks on them For example, you might want to make all unvisited links blue or your website's primary color:\ncss\na:link {\ncolor: magenta;\n}\nIn this case, any link the user hasn't clicked yet will appear magenta Once the user clicks the link, the :link style no longer applies, and the :visited pseudo-class takes over The :visited pseudo-class comes into play after the user clicks the link, so you can use it to target links the user has already clicked Here is an example of changing the visited link state to the color purple:\ncss\na:visited {\ncolor: purple;\n}\nThe :visited pseudo-class helps users distinguish between links they have visited and those they have not The :any-link pseudo-class is a combination of the :link and :visited pseudo-classes So it matches any anchor element with an href attribute, regardless of whether it's visited or not Here is an example of changing the link color for the :any-link pseudo-class to crimson:\ncss\na:any-link {\ncolor: crimson;\n}\nThe :local-link pseudo-class targets links that point to the same document It can be useful when you want to differentiate internal links from external ones Currently, no browser supports the :local-link pseudo-class The :target pseudo-class selects an element that matches the current URL fragment identifier, for example, #section1 It's very useful for pages with in-page navigation Here's an HTML example that represents an in-page navigation:\n```html\nIntroduction\nFeatures\nIntroduction\nThis is the introduction section Features\nThis section describes the features",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbeaa5afdc5a98d5ab8ff.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "9fdb9835c345e74dfe6d23e195625a7b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbeaa5afdc5a98d5ab8ff.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "links that point to the same document It can be useful when you want to differentiate internal links from external ones Currently, no browser supports the :local-link pseudo-class The :target pseudo-class selects an element that matches the current URL fragment identifier, for example, #section1 It's very useful for pages with in-page navigation Here's an HTML example that represents an in-page navigation: ```html Introduction Features Introduction This is the introduction section Features This section describes the features```\nHere's the CSS that uses the :target pseudo-class to style the section that matches where the user navigates to:\ncss\nsection:target {\nbackground-color: green;\nborder: 2px solid green;\npadding: 10px;\n}\nWhen the user clicks on one of the navigation links, the background color for that respective section will change to green --questions--\n--text--\nWhich pseudo-class allows you to style an element that matches the current URL fragment identifier, such as #section1 --answers--\n:hover\n--feedback--\nThink about how you can highlight a specific section when navigating through in-page links :focus\n--feedback--\nThink about how you can highlight a specific section when navigating through in-page links :target\n:checked\n--feedback--\nThink about how you can highlight a specific section when navigating through in-page links --video-solution--\n3\n--text--\nWhen are location pseudo-classes particularly useful --answers--\nWhen styling elements based on their sibling relationships --feedback--\nThink about how you can style links and targeted elements depending on user interaction When applying styles based on whether a link is visited or an element is currently in focus When styling elements based on their parent element's attributes --feedback--\nThink about how you can style links and targeted elements depending on user interaction When adjusting the layout of a webpage dynamically --feedback--\nThink about how you can style links and targeted elements depending on user interaction --video-solution--\n2\n--text--\nWhich pseudo-class is designed to target links that point to the same document but is not currently supported by any browser --answers--\n:any-link\n--feedback--\nConsider the pseudo-class intended for distinguishing internal links from external ones, even though it's not yet supported :local-link\n:visited\n--feedback--\nConsider the pseudo-class intended for distinguishing internal links from external ones, even though it's not yet supported :target\n--feedback--\nConsider the pseudo-class intended for distinguishing internal links from external ones, even though it's not yet supported --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4936,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbeaa5afdc5a98d5ab8ff.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "407f7aac69c10d81a741316f539bd472",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbec3b86dbdaa07a5a5be.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bbec3b86dbdaa07a5a5be\ntitle: What Are Examples of Functional Pseudo-classes challengeType: 19\ndashedName: what-are-examples-of-functional-pseudo-classes\n--description--\nFunctional pseudo-classes allow you to select elements based on more complex conditions or relationships Unlike regular pseudo-classes which target elements based on a state, for example, :hover, :focus, functional pseudo-classes accept arguments within parentheses, hence the name \"functional pseudo-classes\" Examples of functional pseudo-classes are:\n:is()\n:where()\n:has()\n:not()\nLet's take a deeper look at each of these functional pseudo-classes with examples The :is() pseudo-class is useful when you want to style a group of elements that share some, but not all, characteristics For example, you might want to style different types of buttons on your website, including button elements, links styled as buttons, and input elements with types submit and reset Here's an HTML example representing that:\nhtml\n<button>Click Me</button>\n<a href=\"#\" class=\"button\">Click Me Too</a>\n<input type=\"submit\" value=\"Submit\" />\n<input type=\"reset\" value=\"Reset\" />\nWithout the :is() function, you would have to write a complex selector like this:\n```css\nbutton,\na button,\ninput[type='submit'],\ninput[type='reset'] {\nbackground-color: darkblue;\ncolor: white;\nborder: 1px solid darkblue;\npadding: 10px 20px;\ntext-decoration: none;\nborder-radius: 5px;\ncursor: pointer;\ndisplay: inline-block;\nmargin: 5px;\nfont-size: 16px;\ntext-align: center;\n}\nbutton:hover,\na button:hover,\ninput[type='submit']:hover,\ninput[type='reset']:hover {\nbackground-color: lightblue;\nborder-color: lightblue;\n}\n```\nWith the :is() function, you can write a more compact and understandable selector like this:\n```css\n:is(button, a",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbec3b86dbdaa07a5a5be.md",
      "source_type": "git_repo"
    },
    "token_count": 423,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "b8d013fdd804d2b7df2fad5419608022",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbec3b86dbdaa07a5a5be.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the :is() function, you would have to write a complex selector like this: ```css button, a button, input[type='submit'], input[type='reset'] { background-color: darkblue; color: white; border: 1px solid darkblue; padding: 10px 20px; text-decoration: none; border-radius: 5px; cursor: pointer; display: inline-block; margin: 5px; font-size: 16px; text-align: center; } button:hover, a button:hover, input[type='submit']:hover, input[type='reset']:hover { background-color: lightblue; border-color: lightblue; } ``` With the :is() function, you can write a more compact and understandable selector like this: ```css :is(button, abutton, input[type='submit'], input[type='reset']) {\nbackground-color: darkblue;\ncolor: white;\nborder: 1px solid darkblue;\npadding: 10px 20px;\ntext-decoration: none;\nborder-radius: 5px;\ncursor: pointer;\ndisplay: inline-block;\nmargin: 5px;\nfont-size: 16px;\ntext-align: center;\n}\n:is(button, a button, input[type='submit'], input[type='reset']):hover {\nbackground-color: blue;\nborder-color: blue;\n}\n```\nThe :where() pseudo-class functions similarly to :is(), but it doesn't increase the specificity of your selectors This makes it ideal for applying styles without affecting the specificity of other rules For example, you can use the :where() function to apply zero margin and padding to heading elements This ensures that the reset won't interfere with more specific styles you might apply later Here's the HTML for that:\n```html\nPage Title\nSubtitle\nA point\n```\nAnd this is the CSS:\ncss\n:where(h1, h2, h3) {\nmargin: 0;\npadding: 0;\n}\nStyling a parent element based on its children's states was previously challenging until the :has() pseudo-class was introduced It allows you to apply styles to a parent element based on the presence or state of its child elements",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbec3b86dbdaa07a5a5be.md",
      "source_type": "git_repo"
    },
    "token_count": 443,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "43099e8753d4a0679dc6452273db55c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbec3b86dbdaa07a5a5be.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "reset won't interfere with more specific styles you might apply later Here's the HTML for that: ```html Page Title Subtitle A point ``` And this is the CSS: css :where(h1, h2, h3) { margin: 0; padding: 0; } Styling a parent element based on its children's states was previously challenging until the :has() pseudo-class was introduced It allows you to apply styles to a parent element based on the presence or state of its child elementsFor example, the CSS below will only apply to any article element that has an h2 in it:\ncss\narticle:has(h2) {\nborder: 2px solid hotpink;\n}\nHere's the HTML for that:\n```html\nSubheading\nLorem ipsum dolor sit amet A point\nLorem ipsum dolor sit amet Lorem ipsum dolor sit amet ```\nThe :not() pseudo-class is ideal for situations where you want to apply styles to a group of elements, excluding one or more specific exceptions In the CSS below, any button that is not a primary button will have a grey background:\n```css\nbutton {\npadding: 10px 20px;\nborder-radius: 4px;\ncursor: pointer;\nfont-size: 16px;\nborder: none;\ncolor: white;\n}\nbutton primary {\nbackground-color: deepskyblue;\n}\nbutton:not( primary) {\nbackground-color: grey;\n}\n```\nHere's the HTML for the buttons:\nhtml\n<button class=\"primary\">Primary Button</button>\n<button class=\"secondary\">Secondary Button</button>\n<button class=\"danger\">Another Secondary Button</button>\n--questions--\n--text--\nWhich pseudo-class works like :is(), but doesn't add any specificity to your selectors --answers--\n:not()\n--feedback--\nThis pseudo-class is great for applying broad, non-invasive styles :has()\n--feedback--\nThis pseudo-class is great for applying broad, non-invasive styles :where()\n:empty\n--feedback--\nThis pseudo-class is great for applying broad, non-invasive styles --video-solution--\n3\n--text--\nWhich of these is not a functional pseudo-class --answers--\n:is()\n--feedback--\nFunctional pseudo-classes use parentheses and accept arguments inside them :first-child\n--feedback--\nFunctional pseudo-classes use parentheses and accept arguments inside them :has()\n--feedback--\nFunctional pseudo-classes use parentheses and accept arguments inside them",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbec3b86dbdaa07a5a5be.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "d81e28a193674afe61447fb2e6021e49",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbec3b86dbdaa07a5a5be.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "pseudo-class is great for applying broad, non-invasive styles :has() --feedback-- This pseudo-class is great for applying broad, non-invasive styles :where() :empty --feedback-- This pseudo-class is great for applying broad, non-invasive styles --video-solution-- 3 --text-- Which of these is not a functional pseudo-class --answers-- :is() --feedback-- Functional pseudo-classes use parentheses and accept arguments inside them :first-child --feedback-- Functional pseudo-classes use parentheses and accept arguments inside them :has() --feedback-- Functional pseudo-classes use parentheses and accept arguments inside them:where()\n--feedback--\nFunctional pseudo-classes use parentheses and accept arguments inside them --video-solution--\n2\n--text--\nWhich pseudo-class is perfect for a situation in which you want to apply styles to a group of elements without one or two exceptions --answers--\n:has()\n--feedback--\nThink about how you can exclude specific elements from being styled :is()\n--feedback--\nThink about how you can exclude specific elements from being styled :not()\n:where()\n--feedback--\nThink about how you can exclude specific elements from being styled --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5728,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbec3b86dbdaa07a5a5be.md",
      "source_type": "git_repo"
    },
    "token_count": 240,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "a70191358dd8d85d1a454b862c3f2edd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbed37c6f51aa3a15e78c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bbed37c6f51aa3a15e78c\ntitle: What Are Pseudo-elements, and How Do They Work challengeType: 19\ndashedName: what-are-pseudo-elements\n--description--\nOne of the most interesting aspects of CSS is the use of pseudo-elements In this context, \"pseudo\" means \"not real\", so pseudo-elements are virtual or synthetic elements that don't directly match any actual HTML elements They allow you to style specific parts of an element or insert content without adding extra HTML To apply a pseudo-element, attach it to the original element's selector using a double colon (::) Note that the selector can be any type, such as a class or ID selector Here's what the basic syntax of pseudo-elements looks like:\ncss\nselector::pseudo-element {\nproperty: value;\n}\nThis double colon is what distinguishes pseudo-elements from pseudo-classes, which use a single colon Pseudo-elements allow you to style specific parts of an element's content or insert content before or after it, but they cannot exist independently The element to which a pseudo-element is attached is called its originating element Let's start by looking at examples for the ::before and ::after pseudo-elements As their names suggest, ::before lets you insert content just before the element's content while ::after lets you insert content after it Here is an example of a button element:\nhtml\n<button class=\"cta-button\">Learn More</button>\nIn the CSS, we will use absolute positioning and the ::before pseudo-element to add a star before the button's Learn More text You will learn more about absolute positioning in future lectures ```css cta-button {\nbackground-color: lightseagreen;\ncolor: white;\nborder: none;\npadding: 10px 20px;\ncursor: pointer;\nposition: relative;\n} cta-button::before {\ncontent: \"⭐\";\nposition: absolute;\nleft: 3px;\ntop: 8px;\nfont-size: 0 75rem;\n}\n```\nThe content property is used to represent the content you wish to add before the button text In this example, we are adding a star You'll notice that you can not only insert content but also style it Here's an example of the ::after pseudo-element with the same button:\n```css cta-button {\nbackground-color: orange;\nborder: none;\npadding: 10px 30px;\ncursor: pointer;\nposition: relative;\n}",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7235,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbed37c6f51aa3a15e78c.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "48972db351395b828b2e7bb6c727ad3f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbed37c6f51aa3a15e78c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "\"⭐\"; position: absolute; left: 3px; top: 8px; font-size: 0 75rem; } ``` The content property is used to represent the content you wish to add before the button text In this example, we are adding a star You'll notice that you can not only insert content but also style it Here's an example of the ::after pseudo-element with the same button: ```css cta-button { background-color: orange; border: none; padding: 10px 30px; cursor: pointer; position: relative; }cta-button::after {\ncontent: '➡️';\nposition: absolute;\nright: 5px;\nbottom: 6px;\nfont-size: 1 125rem;\ntransition: transform 0 3s ease;\n}\n```\nIn the ::after pseudo-element, the transition property is used to animate changes over 0 3 seconds with an easing effect, creating a smooth and gradual transformation rather than a sudden one You will learn more about the transition property in future lectures You can also attach a pseudo-class to the content you insert into another content with the ::before and ::after pseudo-elements For example, a hover state for the content Here's an example:\n```css cta-button {\nbackground-color: orange;\nborder: none;\npadding: 10px 30px;\ncursor: pointer;\nposition: relative;\n} cta-button::after {\ncontent: \"➡️\";\nposition: absolute;\nright: 5px;\nbottom: 6px;\nfont-size: 1 125rem;\ntransition: transform 0 3s ease;\n} cta-button:hover::after {\ntransform: translateX(2px);\n}\n```\nWith transform: translateX(2px) in the hover state, the content gets pushed to the right by 2px any time the user hovers on the button The transition property in the ::after itself ensures the process takes 0 3s That's what the transform property does – it allows you to rotate, skew, scale, or translate an element in a particular direction You will learn more about that in future lectures In the next example, we will look at the ::first-letter pseudo-element The ::first-letter pseudo-element targets the first letter of an element's content, allowing you to style it Here's an example of some paragraph text:\n```html\nfreeCodeCamp lets you learn to code without having to pay",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7235,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbed37c6f51aa3a15e78c.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "4d29cdb0e156d4136d9c5de8be7a4379",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbed37c6f51aa3a15e78c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "That's what the transform property does – it allows you to rotate, skew, scale, or translate an element in a particular direction You will learn more about that in future lectures In the next example, we will look at the ::first-letter pseudo-element The ::first-letter pseudo-element targets the first letter of an element's content, allowing you to style it Here's an example of some paragraph text: ```html freeCodeCamp lets you learn to code without having to pay```\nIf we want to style the first letter, we can use the ::first-letter pseudo-element like this:\ncss\np::first-letter {\nfont-size: 4rem;\n}\nIn the last example, we will look at is the ::marker pseudo-element which lets you select the marker, bullet or numbering of list items for styling The ::marker pseudo-element offers a way to enhance your website's brand identity by customizing list markers to match your color scheme Here's an example of an unordered list and an ordered list:\n```html\nUnordered list item 1\nUnordered list item 2\nUnordered list item 3\nUnordered list item 4\nOrdered list item 1\nOrdered list item 2\nOrdered list item 3\nOrdered list item 4\n```\nTo change the list item's marker color and size, you can use the ::marker pseudo-element like this:\ncss\nli::marker {\ncolor: crimson;\nfont-size: 1 5em;\nfont-weight: bold;\n}\nIn this lecture, we have covered only a few pseudo-elements But there are many more like the ::placeholder, ::spelling-error and ::selection that I encourage you to explore on your own --questions--\n--text--\nWhich of these best describes the relationship between pseudo-elements and their originator element --answers--\nPseudo-elements can exist independently of the originator element --feedback--\nThink about how pseudo-elements style or insert content Pseudo-elements must always be declared before the originator element --feedback--\nThink about how pseudo-elements style or insert content Pseudo-elements depend on the originator element and cannot exist independently Pseudo-elements are used to create new HTML elements --feedback--\nThink about how pseudo-elements style or insert content --video-solution--\n3\n--text--\nWhich of these correctly distinguishes pseudo-elements from pseudo-classes --answers--\nPseudo-elements use a single colon, while pseudo-classes use a double colon",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7235,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbed37c6f51aa3a15e78c.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ce5b2894653cc9d5901f944aaa8898ae",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbed37c6f51aa3a15e78c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Think about how pseudo-elements style or insert content Pseudo-elements must always be declared before the originator element --feedback-- Think about how pseudo-elements style or insert content Pseudo-elements depend on the originator element and cannot exist independently Pseudo-elements are used to create new HTML elements --feedback-- Think about how pseudo-elements style or insert content --video-solution-- 3 --text-- Which of these correctly distinguishes pseudo-elements from pseudo-classes --answers-- Pseudo-elements use a single colon, while pseudo-classes use a double colon--feedback--\nThink about how pseudo-elements are visually represented in CSS Pseudo-elements use a double colon, while pseudo-classes use a single colon Both pseudo-elements and pseudo-classes use the same colon notation --feedback--\nThink about how pseudo-elements are visually represented in CSS Pseudo-classes require a double colon, while pseudo-elements do not --feedback--\nThink about how pseudo-elements are visually represented in CSS --video-solution--\n2\n--text--\nWhich of these best describes the function of pseudo-elements in CSS --answers--\nThey add new HTML elements to the document --feedback--\nThink about how pseudo-elements target specific portions of content They style specific parts of an element's content without adding extra HTML tags They replace the entire content of an element with new content --feedback--\nThink about how pseudo-elements target specific portions of content They modify the structure of the HTML document --feedback--\nThink about how pseudo-elements target specific portions of content --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7235,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbed37c6f51aa3a15e78c.md",
      "source_type": "git_repo"
    },
    "token_count": 301,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "174370eb85ad2ec02386ece4a4c1b6c7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbeb6eefd7ca9c003ea00.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bbeb6eefd7ca9c003ea00\ntitle: What Are Examples of Tree-structural Pseudo-classes challengeType: 19\ndashedName: what-are-examples-of-tree-structural-pseudo-classes\n--description--\nTree-structural pseudo-classes allow you to target and style elements based on their position within the document tree The document tree refers to the hierarchical structure of elements in an HTML document Here is a list of tree-structural pseudo-classes:\n:root\n:empty\n:nth-child(n)\n:nth-last-child(n)\n:first-child\n:last-child\n:only-child\n:nth-of-type\n:first-of-type\n:last-of-type\n:only-of-type\nLet's take a closer look at each of the tree-structural pseudo-classes, accompanied by examples ​​The :root pseudo-class is usually the root html element It helps you target the highest level in the document so you can apply a common style to the entire document css\n:root {\nbackground: black;\ncolor: aliceblue;\n}\nThe :root pseudo-class is also commonly used in setting CSS variables:\ncss\n:root {\n--main-font: 'Arial, sans-serif';\n--primary-color: blue;\n--secondary-color: green;\n}\nWith CSS variables, you get to store values and reuse them in your stylesheet You will learn more about these later on Empty elements, that is, elements with no children other than white space, are also included in the document tree That's why there's an :empty pseudo-class to target empty elements For example, this HTML code has two empty list items:\n```html\nItem 1\nItem 2\nItem 3\n```\nWith the :empty pseudo-class, you can style the empty list items differently:\ncss\n:empty {\nbackground: black;\n}\nThe most practical thing to do with the empty list items is probably not displaying them at all:\ncss\n:empty {\ndisplay: none;\n}\n:nth-child(n) allows you to select elements based on their position within a parent, while :nth-last-child(n) enables you to select elements by counting from the end The n can be a specific number or a keyword like odd or even This is incredibly useful in styling table cells based on position: even and odd Here's an HTML example of a fruit price list table:\n```html\nItem\nPrice\nApple\n$1 00\nBanana\n$0 50\nOrange\n$0",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9078,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbeb6eefd7ca9c003ea00.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "4c5235fc0088d42db091767484fc61b6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbeb6eefd7ca9c003ea00.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "none; } :nth-child(n) allows you to select elements based on their position within a parent, while :nth-last-child(n) enables you to select elements by counting from the end The n can be a specific number or a keyword like odd or even This is incredibly useful in styling table cells based on position: even and odd Here's an HTML example of a fruit price list table: ```html Item Price Apple $1 00 Banana $0 50 Orange $080\n```\nHere's the CSS using the :nth-child pseudo-class to target the table cells based on odd and even positions:\n```css\nth,\ntd {\nborder: 1px solid lightgray;\npadding: 8px;\n}\ntr:nth-child(even) {\nbackground-color: orangered;\n}\ntr:nth-child(odd) {\nbackground-color: lightgreen;\n}\n```\nThe :first-child, :last-child, and :only-child pseudo-classes all act on items within a parent container or the entire document :first-child selects the first element in a parent element or the document :last-child selects the last element in a parent element or the document :only-child selects the only element in a parent element or the document Using the :first-child and :last-child pseudo-classes will select both Item 1 and Item 3 in this HTML:\n```html\nItem 1\nItem 2\nItem 3\n```\nHere's the CSS:\n```css\nli:first-child {\nbackground-color: orangered;\n}\nli:last-child {\nbackground-color: lightgreen;\n}\n```\nIf you have more unordered lists on the page, you have to be more specific with the selection:\n```css\nul li:first-child {\nbackground-color: orangered;\n}\nul li:last-child {\nbackground-color: lightgreen;\n}\n```\nTo show you how the :only-child pseudo-class works, here's an HTML example with two separate div elements:\n```html\nThis is the only item in this container This is one of two items in this container Here is the second item ```\nUsing the :only-child pseudo-class ensures only the div element with a single child is selected:\ncss container div:only-child {\nborder: 2px solid crimson;\npadding: 10px;\nbackground-color: lightblue;\n}\nThe :first-of-type and :last-of-type pseudo-classes select the first and last occurrence of a specific element type within its parent",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9078,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbeb6eefd7ca9c003ea00.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "37f719f7ed53a4943aefaf5ec6f8b50a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbeb6eefd7ca9c003ea00.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "with two separate div elements: ```html This is the only item in this container This is one of two items in this container Here is the second item ``` Using the :only-child pseudo-class ensures only the div element with a single child is selected: css container div:only-child { border: 2px solid crimson; padding: 10px; background-color: lightblue; } The :first-of-type and :last-of-type pseudo-classes select the first and last occurrence of a specific element type within its parentThey are useful for applying unique styles to the first or last instance of that element type among its siblings In the HTML below, :first-of-type and :last-of-type applies to the first element and last element within the section element:\n```html\nIntroduction\nThis is the first paragraph in the first section\nThis is the second paragraph in the first section\nDetails\nThis is the first paragraph in the second section This is the second paragraph in the second section ```\nHere's the CSS:\n```css\nsection p:first-of-type {\nbackground-color: lightgreen;\n}\nsection p:last-of-type {\nbackground-color:lightblue;\n}\n```\n:nth-of-type(n) allows you to select a specific element within its parent based on its position among siblings of the same type For instance, in the HTML below, :nth-of-type(2) targets the second element in the container:\n```html\nFirst paragraph\nFirst heading\nSecond paragraph\nThird paragraph\nSecond heading\n```\nHere's the CSS:\ncss\np:nth-of-type(2) {\ncolor: red;\nfont-weight: bold;\n}\n:only-of-type selects an element if it's the only one of its type within its parent This can be useful for emphasizing single items or ensuring that they are styled differently when they’re not part of a group In the HTML below, there are two div elements with one having a single element:\n```html\nThe only paragraph\nThe first paragraph\nThe second paragraph\n```\nHere's the CSS that only applies to the first container:\ncss\np:only-of-type {\nborder: 4px solid green;\n}\n--questions--\n--text--\nWhat is the difference between the :first-of-type and :last-of-type pseudo-classes --answers--\n:first-of-type targets the first element of a specific type within its parent, while :last-of-type targets the last element of a different type",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9078,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbeb6eefd7ca9c003ea00.md",
      "source_type": "git_repo"
    },
    "token_count": 487,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "03294a1022637fa71ef69ed652ef7dd0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbeb6eefd7ca9c003ea00.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "below, there are two div elements with one having a single element: ```html The only paragraph The first paragraph The second paragraph ``` Here's the CSS that only applies to the first container: css p:only-of-type { border: 4px solid green; } --questions-- --text-- What is the difference between the :first-of-type and :last-of-type pseudo-classes --answers-- :first-of-type targets the first element of a specific type within its parent, while :last-of-type targets the last element of a different type--feedback--\nConsider how these pseudo-classes help you style the first and last instances of a particular tag, like p or h1 :first-of-type and :last-of-type both target the first occurrence of an element but in different sections of the document --feedback--\nConsider how these pseudo-classes help you style the first and last instances of a particular tag, like p or h1 :first-of-type selects the first occurrence of a specific element type within its parent, while :last-of-type selects the last occurrence of that same element type within its parent :last-of-type applies styles to the first and last elements within the document, while :last-of-type applies styles to all elements of a specific type --feedback--\nConsider how these pseudo-classes help you style the first and last instances of a particular tag, like p or h1 --video-solution--\n3\n--text--\nWhat is the difference between the :first-child and :last-child pseudo-classes --answers--\n:first-child targets the first element within its parent, while :last-child targets the last element within a different parent --feedback--\nThink about how the two pseudo-classes help you style the first and last elements within the same parent container :first-child targets the first element within its parent, while :last-child targets the last element within the same parent :first-child targets the first element of a specific type within its parent, while :last-child targets the last element of a different type within its parent --feedback--\nThink about how the two pseudo-classes help you style the first and last elements within the same parent container :first-child targets the first and last elements within a parent, while :last-child targets all other elements --feedback--\nThink about how the two pseudo-classes help you style the first and last elements within the same parent container --video-solution--\n2\n--text--\nWhich pseudo-class allows you to target elements that have no children, including those that contain only whitespace",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9078,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbeb6eefd7ca9c003ea00.md",
      "source_type": "git_repo"
    },
    "token_count": 505,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "29e5a322577357c4d28b6b4298d21d18",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbeb6eefd7ca9c003ea00.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--feedback-- Think about how the two pseudo-classes help you style the first and last elements within the same parent container :first-child targets the first and last elements within a parent, while :last-child targets all other elements --feedback-- Think about how the two pseudo-classes help you style the first and last elements within the same parent container --video-solution-- 2 --text-- Which pseudo-class allows you to target elements that have no children, including those that contain only whitespace--answers--\n:empty\n:first-child\n--feedback--\nThink about how you can style elements that do not have content :last-child\n--feedback--\nThink about how you can style elements that do not have content :only-of-type\n--feedback--\nThink about how you can style elements that do not have content --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 9078,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-pseudo-classes-and-pseudo-elements-in-css\\672bbeb6eefd7ca9c003ea00.md",
      "source_type": "git_repo"
    },
    "token_count": 167,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "fcbfbdcb20ef2113091ce62eb9b2ad30",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733aad43b3ebff588a26fb5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733aad43b3ebff588a26fb5\ntitle: What Are Regular Expressions, and What Are Some Common Methods challengeType: 19\ndashedName: what-are-regular-expressions-and-what-are-some-common-methods\n--description--\nRegular expressions, or regex, are a feature supported by many different programming languages A regular expression is a special syntax to create a \"pattern\", which you can then use to check against a string, extract text, and more Let's take a look at a basic regular expression:\njs\nconst regex = /freeCodeCamp/;\nNotice how, in JavaScript, you define a regular expression by creating your pattern between two forward slashes (/) Try not to confuse this with a comment, where the text comes after both forward slashes This particular regular expression will match the text freeCodeCamp, with capital Cs, anywhere in a string But how can you actually do that That brings us to our first method – the test() method The test() method is present on RegExp objects, which are objects representing a regular expression (such as the one we just defined) The test() method accepts a string, which is the string to test for matches against the regular expression For example, let's try testing the string e:\njs\nconst regex = /freeCodeCamp/;\nconst test = regex test(\"e\");\nconsole log(test);\nYou can see we've called the test() method on our new regex, and passed the string e as the argument We've also logged the result:\njs\nconsole log(test); // false\nThe test() method returned false because the string e does not match the pattern freeCodeCamp Even though the pattern freeCodeCamp includes the letter e, that's the opposite direction of how regular expressions work Let's take a look at a few more examples Take a moment to consider these:\njs\nconst regex = /freeCodeCamp/;\nconsole log(regex test(\"freeCodeCamp\"));\nconsole log(regex test(\"freeCodeCamp is great\"));\nconsole log(regex test(\"I love freeCodeCamp\"));\nconsole log(regex test(\"freecodecamp\"));\nconsole log(regex test(\"FREECODECAMP\"));\nconsole log(regex test(\"free\"));\nconsole log(regex test(\"code\"));\nconsole log(regex test(\"camp\"));\nWhat do you think each line will print Well, here's the result:\njs\nconst regex = /freeCodeCamp/;\nconsole log(regex test(\"freeCodeCamp\")); // true\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733aad43b3ebff588a26fb5.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "e05e218edb06c3738880ea0c8b039889",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733aad43b3ebff588a26fb5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of how regular expressions work Let's take a look at a few more examples Take a moment to consider these: js const regex = /freeCodeCamp/; console log(regex test(\"freeCodeCamp\")); console log(regex test(\"freeCodeCamp is great\")); console log(regex test(\"I love freeCodeCamp\")); console log(regex test(\"freecodecamp\")); console log(regex test(\"FREECODECAMP\")); console log(regex test(\"free\")); console log(regex test(\"code\")); console log(regex test(\"camp\")); What do you think each line will print Well, here's the result: js const regex = /freeCodeCamp/; console log(regex test(\"freeCodeCamp\")); // true consolelog(regex test(\"freeCodeCamp is great\")); // true\nconsole log(regex test(\"I love freeCodeCamp\")); // true\nconsole log(regex test(\"freecodecamp\")); // false\nconsole log(regex test(\"FREECODECAMP\")); // false\nconsole log(regex test(\"free\")); // false\nconsole log(regex test(\"code\")); // false\nconsole log(regex test(\"camp\")); // false\nDid that surprise you Notice how the first three strings returned true These strings all contain the text, freeCodeCamp, exactly, somewhere in the string Lines 5 and 6 return false While they contain the text freecodecamp, the case does not match Regular expressions are case-sensitive by default Finally, while the last three contain a portion of the pattern, the strings do not contain the entire pattern The test() method returns a boolean, indicating whether the string matches the regular expression at all But what if you wanted more information than that Well, strings have a match() method This method accepts a regular expression, although you can also pass a string which will be constructed into a regular expression match() returns the match array for the string What's a match array Well, let's take a look:\njs\nconst regex = /freeCodeCamp/;\nconst match = \"freeCodeCamp\" match(regex);\nconsole log(match);\nIf we run this, we get an array back But it's a strange looking array It's got some extra properties:\njs\nconsole log(match);\n// [\n//   'freeCodeCamp',\n//   index: 0,\n//   input: 'freeCodeCamp',\n//   groups: undefined\n// ]\nThe groups property would show any captured groups You will learn what that means in a future lecture",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733aad43b3ebff588a26fb5.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "1409ad144e2477a2483f7ec930a048a7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733aad43b3ebff588a26fb5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a match array Well, let's take a look: js const regex = /freeCodeCamp/; const match = \"freeCodeCamp\" match(regex); console log(match); If we run this, we get an array back But it's a strange looking array It's got some extra properties: js console log(match); // [ // 'freeCodeCamp', // index: 0, // input: 'freeCodeCamp', // groups: undefined // ] The groups property would show any captured groups You will learn what that means in a future lectureThe index property tells you at what character in the string the match was found In our case, it was found at the beginning of the string The input property tells you the string the match() method was called on Let's try a few more again, and see how the result changes:\njs\nconst regex = /freeCodeCamp/;\nconsole log(\"freeCodeCamp\" match(regex)); // ['freeCodeCamp', index: 0, input: 'freeCodeCamp', groups: undefined]\nconsole log(\"freeCodeCamp is great\" match(regex)); // ['freeCodeCamp', index: 0, input: 'freeCodeCamp is great', groups: undefined]\nconsole log(\"I love freeCodeCamp\" match(regex)); // ['freeCodeCamp', index: 7, input: 'I love freeCodeCamp', groups: undefined]\nconsole log(\"freecodecamp\" match(regex)); // null\nconsole log(\"FREECODECAMP\" match(regex)); // null\nconsole log(\"free\" match(regex)); // null\nWe know already that the first three strings should produce a match, so let's take a look at those:\njs\n// ['freeCodeCamp', index: 0, input: 'freeCodeCamp', groups: undefined]\n// ['freeCodeCamp', index: 0, input: 'freeCodeCamp is great', groups: undefined]\n// ['freeCodeCamp', index: 7, input: 'I love freeCodeCamp', groups: undefined]\nIs that what you expected You can see how the input and index have changed depending on the string provided, and the location of the match in the string The other three lines, which do not match, return null instead of an array Now that we can test and match strings with our regular expression, what if we want to replace the content of a string",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733aad43b3ebff588a26fb5.md",
      "source_type": "git_repo"
    },
    "token_count": 485,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "3743da3bcf0ca2b8ce953cf97616aea1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733aad43b3ebff588a26fb5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "// ['freeCodeCamp', index: 7, input: 'I love freeCodeCamp', groups: undefined] Is that what you expected You can see how the input and index have changed depending on the string provided, and the location of the match in the string The other three lines, which do not match, return null instead of an array Now that we can test and match strings with our regular expression, what if we want to replace the content of a stringMaybe someone has written freecodecamp in all lowercase, and we want to automatically fix the casing for them First, we need to update our regular expression to match the lowercase form of freecodecamp, and create our test string:\njs\nconst regex = /freecodecamp/;\nconst str = \"freecodecamp is rly kewl\";\nNow, strings have a replace() method which accepts two arguments: the regular expression to match (or a string, if you don't need all of the features of regex), and the string to replace the match with (or a function to run against each match) So if we wanted to replace our freecodecamp with the proper casing:\njs\nconst regex = /freecodecamp/;\nconst str = \"freecodecamp is rly kewl\";\nconst replaced = str replace(regex, \"freeCodeCamp\");\nconsole log(replaced);\nAnd we'll peek at the result:\njs\nconsole log(replaced); // freeCodeCamp is rly kewl\nYou can see that replace() returns the updated string with the matching pattern replaced Regular expressions, and all of the methods associated with them, can seem complex and overwhelming But you'll get the chance to explore them further in this next set of lectures --questions--\n--text--\nIn JavaScript, how is a basic regular expression defined --answers--\nUsing single quotes: 'pattern'\n--feedback--\nThe lecture shows a specific syntax for defining a regular expression Using double quotes: \"pattern\"\n--feedback--\nThe lecture shows a specific syntax for defining a regular expression Using forward slashes: /pattern/\nUsing parentheses: (pattern)\n--feedback--\nThe lecture shows a specific syntax for defining a regular expression --video-solution--\n3\n--text--\nWhat does the test() method return when used with a regular expression --answers--\nAn array of matches --feedback--\nThink about what type of result the test() method provides A boolean value The matched string",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733aad43b3ebff588a26fb5.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "edef28f46fd1d2bb59ed2b65bb600005",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733aad43b3ebff588a26fb5.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "defining a regular expression Using double quotes: \"pattern\" --feedback-- The lecture shows a specific syntax for defining a regular expression Using forward slashes: /pattern/ Using parentheses: (pattern) --feedback-- The lecture shows a specific syntax for defining a regular expression --video-solution-- 3 --text-- What does the test() method return when used with a regular expression --answers-- An array of matches --feedback-- Think about what type of result the test() method provides A boolean value The matched string--feedback--\nThink about what type of result the test() method provides The index of the match --feedback--\nThink about what type of result the test() method provides --video-solution--\n2\n--text--\nWhat happens when you use the match() method with a regular expression on a string that doesn't contain a match --answers--\nIt returns an empty array --feedback--\nThe lecture describes the result of match() for non-matching strings It returns false --feedback--\nThe lecture describes the result of match() for non-matching strings It returns null It throws an error --feedback--\nThe lecture describes the result of match() for non-matching strings --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8278,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733aad43b3ebff588a26fb5.md",
      "source_type": "git_repo"
    },
    "token_count": 240,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "90718e939506bf6a87f0d1021f115ce5",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5c549775c4be710237c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733c5c549775c4be710237c\ntitle: How Can You Match and Replace All Occurrences in a String challengeType: 19\ndashedName: how-can-you-match-and-replace-all-occurrences-in-a-string\n--description--\nLet's learn how to match or replace all occurrences of a pattern in a string You have previously learned about the replace() and match() methods, as well as the global g modifier Now you can combine that knowledge to handle all patterns in a string Let's recall our original match code:\njs\nconst regex = /freeCodeCamp/;\nconst match = \"freeCodeCamp\" match(regex);\nconsole log(match);\nAnd our resulting match object:\njs\n// [\n//   'freeCodeCamp',\n//   index: 0,\n//   input: 'freeCodeCamp',\n//   groups: undefined\n// ]\nBut what if we have a string with multiple occurrences of freecodecamp to match Let's take a look at how match() behaves with that We'll throw in our old replace() example too, just to compare:\njs\nconst regex = /freecodecamp/;\nconst str = \"freecodecamp is the best we love freecodecamp\";\nconst matched = str match(regex);\nconst replaced = str replace(regex, \"freeCodeCamp\");\nconsole log(matched);\nconsole log(replaced);\nAnd the result is this:\njs\n// [\n//   'freecodecamp',\n//   index: 0,\n//   input: 'freecodecamp is the best we love freecodecamp',\n//   groups: undefined\n// ]\n// freeCodeCamp is the best we love freecodecamp\nOh no match() only returned the first match, and replace() only replaced the first match This is because, by default, match() and replace() only operate against the first pattern occurrence Thankfully, you can avoid this by using the global modifier on your regular expression Let's add that to ours:\njs\nconst regex = /freecodecamp/g;\nconst str = \"freecodecamp is the best we love freecodecamp\";\nconst matched = str match(regex);\nconst replaced = str replace(regex, \"freeCodeCamp\");\nconsole log(matched);\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8375,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5c549775c4be710237c.md",
      "source_type": "git_repo"
    },
    "token_count": 464,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "4592131c768f8426830e52f0f5c2ebf3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5c549775c4be710237c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "match() only returned the first match, and replace() only replaced the first match This is because, by default, match() and replace() only operate against the first pattern occurrence Thankfully, you can avoid this by using the global modifier on your regular expression Let's add that to ours: js const regex = /freecodecamp/g; const str = \"freecodecamp is the best we love freecodecamp\"; const matched = str match(regex); const replaced = str replace(regex, \"freeCodeCamp\"); console log(matched); consolelog(replaced);\nAnd confirm the result:\njs\n// [ 'freecodecamp', 'freecodecamp' ]\n// freeCodeCamp is the best we love freeCodeCamp\nThat worked Our replace call replaced all of the lowercase freecodecamp strings, and our match() method matched both of them What's interesting here is that when you use the global modifier with match(), you lose the extra information about capture groups and string indices that would come in the match array Thankfully, 2019's ECMAScript update brought us two new methods: matchAll() and replaceAll() Like their singular counterparts, these methods accept a string or regular expression, and replaceAll() also accepts a second argument as the string to replace with But unlike the previous methods, replaceAll() and matchAll() will throw an error if you give them a regular expression without the global modifier Let's update our code to use these new methods:\njs\nconst pattern = \"freecodecamp\";\nconst str = \"freecodecamp is the best we love freecodecamp\";\nconst matched = str matchAll(pattern);\nconst replaced = str replaceAll(pattern, \"freeCodeCamp\");\nconsole log(matched);\nconsole log(replaced);\nAnd our result:\njs\n// {}\n// freeCodeCamp is the best we love freeCodeCamp\nGood news Our replaceAll() worked exactly as we wanted – it replaced all occurrences of the lowercased freecodecamp with the properly camelCased version But what is that empty object Well, matchAll() returns a special type of object called an Iterator, which the freeCodeCamp console isn't prepared to handle If we peek in our browser console, the Iterator has a next() method, which we can call to get the next value:\njs\n// RegExpStringIterator {  }\n//  <prototype>: RegExp String Iterator {\n//    next: ƒ next(),\n//    Symbol(Symbol",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8375,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5c549775c4be710237c.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "ed2c37b303f93366d3ab4a71b35abe38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5c549775c4be710237c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "replaced all occurrences of the lowercased freecodecamp with the properly camelCased version But what is that empty object Well, matchAll() returns a special type of object called an Iterator, which the freeCodeCamp console isn't prepared to handle If we peek in our browser console, the Iterator has a next() method, which we can call to get the next value: js // RegExpStringIterator { } // <prototype>: RegExp String Iterator { // next: ƒ next(), // Symbol(SymboltoStringTag): \"RegExp String Iterator\"\n//    <prototype>: Object { }\n//  }\nLet's go ahead and call matched next(), and log the result:\njs\n// {\n//   \"done\": false,\n//   \"value\": [\n//     0: \"freecodecamp\"\n//     groups: undefined\n//     index: 0\n//     input: \"freecodecamp is the best we love freecodecamp\"\n//   ]\n// }\nThere's our match array next() gives us an object with two values: done, which is false when there are more elements available in the iterator, and value which is the value we just iterated over So, if we call it one more time:\njs\nconst regex = /freecodecamp/g;\nconst str = \"freecodecamp is the best we love freecodecamp\";\nconst matched = str matchAll(regex);\nconst replaced = str replaceAll(regex, \"freeCodeCamp\");\nconsole log(matched);\nconsole log(replaced);\nconsole log(matched next());\nconsole log(matched next());\njs\n// {\n//   \"done\": false,\n//   \"value\": Array [ \"freecodecamp\"]\n// }\n//\n// {\n//   \"done\": false,\n//   \"value\": Array [ \"freecodecamp\"]\n// }\nWait, why does it say done is still false There should only be two matches in the array, right Let's call it a third time and see what we get:\njs\n// {\n//   \"done\": false,\n//   \"value\": Array [ \"freecodecamp\"]\n// }\n//\n// {\n//   \"done\": false,\n//   \"value\": Array [ \"freecodecamp\"]\n// }\n//\n// {\n//   \"done\": true,\n//   \"value\": undefined\n// }\ndone is finally true, but why is that value undefined",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8375,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5c549775c4be710237c.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "e76e80e253c776131c002f6bf34a3df8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5c549775c4be710237c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "why does it say done is still false There should only be two matches in the array, right Let's call it a third time and see what we get: js // { // \"done\": false, // \"value\": Array [ \"freecodecamp\"] // } // // { // \"done\": false, // \"value\": Array [ \"freecodecamp\"] // } // // { // \"done\": true, // \"value\": undefined // } done is finally true, but why is that value undefinedWell, as it turns out, the matchAll() iterator is lazy It doesn't find all of your matches at once It only finds a match when you tell it to by calling next() As long as it finds a match, it isn't done Once it fails to find a match and brings back undefined, it is done This may seem inconvenient, but it can be quite helpful when your regular expression is computationally expensive If your example is less so, like ours, you can skip that feature and extract all of the matches at once by converting it to an array This is achieved by calling Array from() and passing your iterator as the argument Let's update our code to use that – we'll go ahead and clean up our replaceAll calls since we know that works:\njs\nconst regex = /freecodecamp/g;\nconst str = \"freecodecamp is the best we love freecodecamp\";\nconst matched = str matchAll(regex);\nconsole log(Array from(matched));\nAnd we finally get our array of matches:\njs\n// [\n//   'freecodecamp',\n//   index: 0,\n//   input: 'freecodecamp is the best we love freecodecamp',\n//   groups: undefined\n// ]\n//\n// [\n//   'freecodecamp',\n//   index: 33,\n//   input: 'freecodecamp is the best we love freecodecamp',\n//   groups: undefined\n// ]\nThese powerful methods can help you manipulate and extract data from strings without having to sacrifice performance or readability --questions--\n--text--\nWhat modifier should be added to a regular expression to match all occurrences of a pattern in a string --answers--\n/i\n--feedback--\nThe lecture mentions a specific modifier for global matching /m\n--feedback--\nThe lecture mentions a specific modifier for global matching /g\n/a\n--feedback--\nThe lecture mentions a specific modifier for global matching",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8375,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5c549775c4be710237c.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "fe5f9a034098729b5b0b267e9efe304b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5c549775c4be710237c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "] These powerful methods can help you manipulate and extract data from strings without having to sacrifice performance or readability --questions-- --text-- What modifier should be added to a regular expression to match all occurrences of a pattern in a string --answers-- /i --feedback-- The lecture mentions a specific modifier for global matching /m --feedback-- The lecture mentions a specific modifier for global matching /g /a --feedback-- The lecture mentions a specific modifier for global matching--video-solution--\n3\n--text--\nWhat is the main difference between match() and matchAll() methods when used with a global regular expression --answers--\nmatch() returns an array, while matchAll() returns an Iterator matchAll() is faster than match() --feedback--\nThe lecture describes a special type of object returned by matchAll() match() can only find the first occurrence, while matchAll() finds all occurrences --feedback--\nThe lecture describes a special type of object returned by matchAll() There is no difference, they are interchangeable\n--feedback--\nThe lecture describes a special type of object returned by matchAll() --video-solution--\n1\n--text--\nHow can you convert the result of matchAll() into an array containing all matches --answers--\nBy using a for of loop\n--feedback--\nThe lecture demonstrates a specific method to convert the Iterator to an array By calling the toArray() method on the result --feedback--\nThe lecture demonstrates a specific method to convert the Iterator to an array By using Array from() with the result as an argument By spreading the result into an array literal --feedback--\nThe lecture demonstrates a specific method to convert the Iterator to an array --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 8375,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5c549775c4be710237c.md",
      "source_type": "git_repo"
    },
    "token_count": 337,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "713dd53af9d9452209a09af7dc6da3d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5d0048bb74c18431296.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733c5d0048bb74c18431296\ntitle: What Are Character Classes, and What Are Some Common Examples challengeType: 19\ndashedName: what-are-character-classes-and-what-are-some-common-examples\n--description--\nLet's learn about character classes in regular expressions, including some common examples Character classes are a special syntax you can use to match sets or subsets of characters The first character class you should learn is the wildcard class The wildcard is represented by a period or dot ( ), and matches any single character except line breaks To allow the wildcard class to match line breaks, remember that you would need to use the s flag A regular expression that matched the letter a followed by one single character might look like:\njs\nconst regex = /a /;\nThis can be helpful when you are looking for specific patterns in a string, but don't know what might be between those two patterns But you can also use character classes to narrow down your matches For example, what if you wanted to match a numerical character You might have to write out every possible digit, separating them with the or operator (|):\njs\nconst regex = /0|1|2|3|4|5|6|7|8|9/;\nA character class exists for this exact pattern, and gives you a shorthand syntax for writing the same thing In this case, the character class is written as a backslash (\\) followed by a d character:\njs\nconst regex = /\\d/;\nThis regular expression will match the exact same pattern as our previous expression: a single numerical character anywhere in the string Now consider a regular expression which also needs to match any letter character a through z You could write out each individual character separated by the or operator Or you could use another character class The \\w class, which is a backslash followed by a w, represents any word character:\njs\nconst regex = /\\w/;\nA word character is defined as any letter, from a to z, or a number from 0 to 9, or the underscore (_) character The inclusion of the underscore might seem strange, but consider the naming conventions for variables – variable names can often include underscores, so \\w is designed to match that as well There is one more special character class to consider: the whitespace class \\s, represented by a backslash followed by an s",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6696,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5d0048bb74c18431296.md",
      "source_type": "git_repo"
    },
    "token_count": 483,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "cd817b06d385c811feda204874a59565",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5d0048bb74c18431296.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "A word character is defined as any letter, from a to z, or a number from 0 to 9, or the underscore (_) character The inclusion of the underscore might seem strange, but consider the naming conventions for variables – variable names can often include underscores, so \\w is designed to match that as well There is one more special character class to consider: the whitespace class \\s, represented by a backslash followed by an sThis character class will match any whitespace, including new lines, spaces, tabs, and special unicode space characters These special character classes can be negated To negate one of these character classes, instead of using a lowercase letter after the backslash, use the uppercase equivalent:\njs\nconst regex = /\\D/;\nThis regular expression, for example, does not match a numerical character Instead, it matches any single character that is not a numerical character Negating the \\w class would match any character that is not a to z, 0 to 9, or an underscore, and negating the \\s character class would match any character that is not a whitespace But what if you wanted to match more specific subsets of characters Maybe you're a professor grading papers, and you need to make sure your grades are valid A valid grade can be A, B, C, D, or F You can use square brackets to construct your own character class:\njs\nconst regex = /[abcdf]/;\nThis regular expression will match a single character that is in the list a, b, c, d, or f What about checking only grades that pass A passing grade would be an A, B, C, or D You can modify your character class to stop matching f by removing that character from the list:\njs\nconst regex = /[abcd]/;\nYou may have noticed now that our character class consists only of consecutive characters a, b, c, and d are all directly next to each other in the alphabet For numbers, consecutive characters might be 4, 5, and 6 When you have consecutive characters, you can create a range using the hyphen character Using a range, we can turn our regular expression into a shorter syntax while matching the exact same pattern js\nconst regex = /[a-d]/;\nRemember that regular expressions are case-sensitive by default This means our character class will only match the lowercase variants of a, b, c, and d",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6696,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5d0048bb74c18431296.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "328f48ea7be9e351e0f9e31a4d7b2a76",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5d0048bb74c18431296.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "in the alphabet For numbers, consecutive characters might be 4, 5, and 6 When you have consecutive characters, you can create a range using the hyphen character Using a range, we can turn our regular expression into a shorter syntax while matching the exact same pattern js const regex = /[a-d]/; Remember that regular expressions are case-sensitive by default This means our character class will only match the lowercase variants of a, b, c, and dYou could use the i flag to achieve this, but you can also bake it directly into your character class by including the uppercase variants:\njs\nconst regex = /[a-zA-Z]/;\nYou can also mix digits and numbers in your character class For example, if you wanted the behavior of the \\w class without the underscore, you could construct your own:\njs\nconst regex = /[a-zA-Z0-9]/;\nNote that if you want your character class to match a literal hyphen, you need to place a hyphen at the beginning or end of the class:\njs\nconst regex = /[-a-zA-Z0-9]/;\nAnd finally, you can include special character classes in your custom class Maybe you want to include a hyphen in the set matched by \\w:\njs\nconst regex = /[-\\w]/;\nCharacter classes are a powerful tool that gives you incredible control over your pattern matching --questions--\n--text--\nWhich character class matches any single character EXCEPT line breaks --answers--\n\\d\n--feedback--\nThe lecture mentions a \"wild card\" class represented by a specific symbol \\w\n--feedback--\nThe lecture mentions a \"wild card\" class represented by a specific symbol \\s\n--feedback--\nThe lecture mentions a \"wild card\" class represented by a specific symbol --video-solution--\n4\n--text--\nWhat does the character class \\w match --answers--\nOnly lowercase letters --feedback--\nThe lecture defines what constitutes a \"word character\" in regular expressions Only uppercase letters --feedback--\nThe lecture defines what constitutes a \"word character\" in regular expressions Any letter, number, or underscore Only white space characters --feedback--\nThe lecture defines what constitutes a \"word character\" in regular expressions --video-solution--\n3\n--text--\nHow would you create a custom character class that matches any uppercase or lowercase letter, but NOT numbers or underscores --answers--\n[a-zA-Z]\n[\\w]\n--feedback--\nThink about how the lecture describes creating ranges within square brackets",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6696,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5d0048bb74c18431296.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "27461d5cdff40f1939143aca4445417c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5d0048bb74c18431296.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "regular expressions Only uppercase letters --feedback-- The lecture defines what constitutes a \"word character\" in regular expressions Any letter, number, or underscore Only white space characters --feedback-- The lecture defines what constitutes a \"word character\" in regular expressions --video-solution-- 3 --text-- How would you create a custom character class that matches any uppercase or lowercase letter, but NOT numbers or underscores --answers-- [a-zA-Z] [\\w] --feedback-- Think about how the lecture describes creating ranges within square brackets[A-z]\n--feedback--\nThink about how the lecture describes creating ranges within square brackets [a-Z]\n--feedback--\nThink about how the lecture describes creating ranges within square brackets --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6696,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5d0048bb74c18431296.md",
      "source_type": "git_repo"
    },
    "token_count": 145,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "821553e7024d9870710aa7e9e54afe27",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5dc74176e4c496d09e6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733c5dc74176e4c496d09e6\ntitle: What Are Lookahead and Lookbehind Assertions, and How Do They Work challengeType: 19\ndashedName: what-are-lookaheads-and-lookbehind-assertions-and-how-do-they-work\n--description--\nLet's learn about lookahead and lookbehind assertions in regular expressions Lookahead and lookbehind assertions allow you to match specific patterns based on the presence or lack of surrounding patterns There are four variations of these assertions First is the positive lookahead assertion This assertion will match a pattern when the pattern is followed by another pattern To construct a positive lookahead, you need to start with the pattern you want to match Then, use parentheses to wrap the pattern you want to use as your condition After the opening parenthesis, use = to define that pattern as a positive lookahead This pattern will only match the word free if it is followed by code:\njs\nconst regex = /free( =code)/i;\nLet's test the behavior of our pattern:\njs\nconst regex = /free( =code)/i;\nconsole log(regex test(\"freeCodeCamp\")); // true\nconsole log(regex test(\"free code camp\")); // false\nconsole log(\nregex test(\"I need someone for free to write code for me\")\n); // false\nNotice how only the string where free is immediately followed by code passes the test But what if you want to match the presence of free when it is NOT followed by code You can turn your positive lookahead into a negative lookahead to invert the behavior To do this, change your = to :\njs\nconst regex = /free( code)/i;\nLet's test this against our same strings:\njs\nconst regex = /free( code)/i;\nconsole log(regex test(\"freeCodeCamp\")); // false\nconsole log(regex test(\"free code camp\")); // true\nconsole log(\nregex test(\"I need someone for free to write code for me\")\n); // true\nAs expected, the results are reversed The only string that fails is the first string, where free is immediately followed by code Lookbehind assertions function similarly to lookahead assertions, except that, instead of matching conditionally based on a following pattern, they match conditionally based on a preceding pattern Let's take a look at a positive lookbehind A positive lookbehind is denoted with <= instead of =",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5925,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5dc74176e4c496d09e6.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "3eb55c7b27d271aec44f38fd20047f79",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5dc74176e4c496d09e6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "for free to write code for me\") ); // true As expected, the results are reversed The only string that fails is the first string, where free is immediately followed by code Lookbehind assertions function similarly to lookahead assertions, except that, instead of matching conditionally based on a following pattern, they match conditionally based on a preceding pattern Let's take a look at a positive lookbehind A positive lookbehind is denoted with <= instead of =Let's make our regular expression match code when it is preceded by free:\njs\nconst regex = /( <=free)code/i;\nJust like with our positive lookahead, our positive lookbehind matches the first string because code is immediately preceded by free:\njs\nconst regex = /( <=free)code/i;\nconsole log(regex test(\"freeCodeCamp\")); // true\nconsole log(regex test(\"free code camp\")); // false\nconsole log(\nregex test(\"I need someone for free to write code for me\")\n); // false\nTo match code when it is NOT preceded by free, we can use a negative lookbehind A negative lookbehind is defined by replacing <= with < :\njs\nconst regex = /( < free)code/i;\nThis would match any occurrence of code that is NOT immediately preceded by free js\nconst regex = /( < free)code/i;\nconsole log(regex test(\"freeCodeCamp\")); // false\nconsole log(regex test(\"free code camp\")); // true\nconsole log(\nregex test(\"I need someone for free to write code for me\")\n); // true\nRemember that Regex prototype test only confirms whether a string matches the regular expression Let's use our negative lookbehind with String prototype match to see how assertions affect that:\njs\nconst regex = /( < free)code/i;\nconsole log(\"freeCodeCamp\" match(regex)); // null\nconsole log(\"free code camp\" match(regex)); // ['code', index: 5, input: 'free code camp', groups: undefined]\nconsole log(\n\"I need someone for free to write code for me\" match(regex)\n); // ['code', index: 33, input: 'I need someone for free to write code for me', groups: undefined]\nNotice how even though our regular expression uses a lookbehind to check for the presence of free, it does not match free The only text included in the match is code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5925,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5dc74176e4c496d09e6.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "c4841604bee513ccfc5f07476a44febe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5dc74176e4c496d09e6.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "log(\"free code camp\" match(regex)); // ['code', index: 5, input: 'free code camp', groups: undefined] console log( \"I need someone for free to write code for me\" match(regex) ); // ['code', index: 33, input: 'I need someone for free to write code for me', groups: undefined] Notice how even though our regular expression uses a lookbehind to check for the presence of free, it does not match free The only text included in the match is codeLookaheads and lookbehinds are incredibly useful for conditionally matching text without impacting the returned value of your match --questions--\n--text--\nWhat is the syntax for a positive lookahead assertion in a regular expression --answers--\n( =pattern)\n( <=pattern)\n--feedback--\nThe lecture describes how to construct a positive lookahead using a specific syntax ( pattern)\n--feedback--\nThe lecture describes how to construct a positive lookahead using a specific syntax ( < pattern)\n--feedback--\nThe lecture describes how to construct a positive lookahead using a specific syntax --video-solution--\n1\n--text--\nWhich assertion would you use to match a word only if it is NOT followed by a specific pattern --answers--\nPositive lookahead --feedback--\nThink about which assertion \"inverts\" the behavior of a positive lookahead Negative lookahead Positive lookbehind --feedback--\nThink about which assertion \"inverts\" the behavior of a positive lookahead Negative lookbehind --feedback--\nThink about which assertion \"inverts\" the behavior of a positive lookahead --video-solution--\n2\n--text--\nWhen using a lookbehind assertion with String prototype match, what part of the string is actually included in the match result --answers--\nThe entire string --feedback--\nThe lecture demonstrates this with an example using a negative lookbehind The pattern in the lookbehind assertion --feedback--\nThe lecture demonstrates this with an example using a negative lookbehind The pattern after the lookbehind assertion Both the lookbehind pattern and the pattern after it --feedback--\nThe lecture demonstrates this with an example using a negative lookbehind --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5925,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5dc74176e4c496d09e6.md",
      "source_type": "git_repo"
    },
    "token_count": 433,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "c2015323e026f34c3a39e4c564f6b801",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5ba834ded4bb067e67c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733c5ba834ded4bb067e67c\ntitle: What Are Some Common Regular Expression Modifiers Used for Searching challengeType: 19\ndashedName: what-are-some-common-regular-expression-modifiers-used-for-searching\n--description--\nModifiers, often referred to as \"flags\", modify the behavior of a regular expression Let's recall our example from an earlier lecture:\njs\nconst regex = /freeCodeCamp/;\nconsole log(regex test(\"freeCodeCamp\")); // true\nconsole log(regex test(\"freeCodeCamp is great\")); // true\nconsole log(regex test(\"I love freeCodeCamp\")); // true\nconsole log(regex test(\"freecodecamp\")); // false\nconsole log(regex test(\"FREECODECAMP\")); // false\nconsole log(regex test(\"free\")); // false\nconsole log(regex test(\"code\")); // false\nconsole log(regex test(\"camp\")); // false\nIf you remember, the all-lowercase and all-uppercase freeCodeCamp strings failed to match the pattern This is because, by default, regular expressions are case-sensitive But what if we could tell the regular expression to be case-insensitive Well, there's a modifier for that The i flag makes a regex ignore case How can we use it Flags go after the closing forward slash in a regular expression:\njs\nconst regex = /freeCodeCamp/i;\nNotice the change to the regular expression on the first line Now we can check how this changes things:\njs\nconsole log(regex test(\"freeCodeCamp\")); // true\nconsole log(regex test(\"freeCodeCamp is great\")); // true\nconsole log(regex test(\"I love freeCodeCamp\")); // true\nconsole log(regex test(\"freecodecamp\")); // true\nconsole log(regex test(\"FREECODECAMP\")); // true\nconsole log(regex test(\"free\")); // false\nconsole log(regex test(\"code\")); // false\nconsole log(regex test(\"camp\")); // false\nBecause our regular expression is now case-insensitive, the all-lowercase and all-uppercase strings have \"passed\" the test This can also work for a string with a random mix of uppercase and lowercase letters:\njs\nconsole log(regex test(\"dO yOu LoVe fReEcOdEcAmP \")); // true\nThere are quite a few other flags that you can use The g flag, or global modifier, allows your regular expression to match a pattern more than once",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5ba834ded4bb067e67c.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "4fa0112bd6721e44880e926a00477bf8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5ba834ded4bb067e67c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "false console log(regex test(\"camp\")); // false Because our regular expression is now case-insensitive, the all-lowercase and all-uppercase strings have \"passed\" the test This can also work for a string with a random mix of uppercase and lowercase letters: js console log(regex test(\"dO yOu LoVe fReEcOdEcAmP \")); // true There are quite a few other flags that you can use The g flag, or global modifier, allows your regular expression to match a pattern more than onceLet's see how that affects our code You'll notice we kept the i flag – a regular expression can use multiple flags (as many as needed) to achieve your desired behavior:\njs\nconst regex = /freeCodeCamp/gi;\nWait a second what's this It would seem that the global modifier is making some of our strings that should be passing fail instead:\njs\nconsole log(regex test(\"freeCodeCamp\")); // true\nconsole log(regex test(\"freeCodeCamp is great\")); // false\nconsole log(regex test(\"I love freeCodeCamp\")); // true\nconsole log(regex test(\"freecodecamp\")); // false\nconsole log(regex test(\"FREECODECAMP\")); // true\nconsole log(regex test(\"free\")); // false\nconsole log(regex test(\"code\")); // false\nconsole log(regex test(\"camp\")); // false\nWhy Well, the global modifier makes your regular expression stateful This means it keeps track of where it has previously matched a pattern So when it matches the first freeCodeCamp string, it remembers that it found a match starting at index 0 We then test it against freeCodeCamp is great, but it doesn't start at index 0 The regular expression \"knows\" it found a match at index 0 already, so even though this is a different string, it starts from the end index of the match freeCodeCamp is 12 characters long, so a match at 0 ends at index 11 The matching will resume at index 12 And since is great does not match freeCodeCamp, it returns false Then, because it fails to find a match, it \"loses\" its state and starts the following match back at 0 If we switch our logs around so that a string with the match at 0 is followed immediately by a string that has a match later than index 11:\njs\nconsole log(regex test(\"freeCodeCamp\")); // true\nconsole log(regex",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5ba834ded4bb067e67c.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "1629ba34ca532b837f95c75a96a7e2bf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5ba834ded4bb067e67c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "11 The matching will resume at index 12 And since is great does not match freeCodeCamp, it returns false Then, because it fails to find a match, it \"loses\" its state and starts the following match back at 0 If we switch our logs around so that a string with the match at 0 is followed immediately by a string that has a match later than index 11: js console log(regex test(\"freeCodeCamp\")); // true console log(regextest(\"I loooooooove freeCodeCamp\")); // true\nWhen a regular expression is global, it gets a new property called lastIndex Grabbing our previous code, let's see how this property works:\njs\nconsole log(regex lastIndex); // 0\nconsole log(regex test(\"freeCodeCamp\")); // true\nconsole log(regex lastIndex); // 12\nconsole log(regex test(\"freeCodeCamp is great\")); // false\nconsole log(regex lastIndex); // 0\nconsole log(regex test(\"I love freeCodeCamp\")); // true\nconsole log(regex lastIndex); // 19\nconsole log(regex test(\"freecodecamp\")); // false\nconsole log(regex lastIndex); // 0\nconsole log(regex test(\"FREECODECAMP\")); // true\nconsole log(regex lastIndex); // 12\nconsole log(regex test(\"free\")); // false\nconsole log(regex lastIndex); // 0\nconsole log(regex test(\"code\")); // false\nconsole log(regex lastIndex); // 0\nconsole log(regex test(\"camp\")); // false\nLooking at this example, you can see how the state of the regular expression changes with each test call using the lastIndex to track its previous matches The global flag is great when you need to get multiple matches from a single string But if you're testing multiple strings with the same regular expression it's best to leave the g flag off Before learning about the next flag, you need to learn about anchors The carrot (^) anchor, at the beginning of the regular expression, says \"match the start of the string\":\njs\nconst start = /^freecodecamp/i;\nThe dollar sign ($) anchor, at the end of the regular expression, says \"match the end of the string\":\njs\nconst end = /freecodecamp$/i;\nTake a moment to compare the outputs on the right:\njs\nconst start = /^freecodecamp/i;\nconst end = /freecodecamp$/i;\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5ba834ded4bb067e67c.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "8b18e4ab7809c2814cd2e38dc06d01c6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5ba834ded4bb067e67c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the next flag, you need to learn about anchors The carrot (^) anchor, at the beginning of the regular expression, says \"match the start of the string\": js const start = /^freecodecamp/i; The dollar sign ($) anchor, at the end of the regular expression, says \"match the end of the string\": js const end = /freecodecamp$/i; Take a moment to compare the outputs on the right: js const start = /^freecodecamp/i; const end = /freecodecamp$/i; consolelog(start test(\"freecodecamp\")); // true\nconsole log(end test(\"freecodecamp\")); // true\nconsole log(start test(\"freecodecamp is great\")); // true\nconsole log(end test(\"freecodecamp is great\")); // false\nconsole log(start test(\"i love freecodecamp\")); // false\nconsole log(end test(\"i love freecodecamp\")); // true\nconsole log(start test(\"have met freecodecamp's founder\")); // false\nconsole log(end test(\"have met freecodecamp's founder\")); // false\nSee how the start anchor only matches at the beginning of the string, and the end anchor only matches at the end of the string But what about matching across multiple lines Let's take a look at that:\njs\nconst start = /^freecodecamp/i;\nconst end = /freecodecamp$/i;\nconst string = `I really love\nfreecodecamp\nit's my favorite`;\nconsole log(start test(string)); // false\nconsole log(end test(string)); // false\nEven though freecodecamp is in there on its own line, it fails both tests This is because, by default, anchors look for the beginning and end of the entire string But you can make a regex handle multiple lines with the m flag, or the multi-line modifier Let's add that to our regular expressions to see what we get:\njs\nconst start = /^freecodecamp/im;\nconst end = /freecodecamp$/im;\nconst string = `I really love\nfreecodecamp\nit's my favorite`;\nconsole log(start test(string)); // true\nconsole log(end test(string)); // true\nNow they both match Because the freecodecamp is entirely on its own line, the start anchor matches the beginning of that line, and the end anchor matches the end of that line",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5ba834ded4bb067e67c.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "7d7f58900d8a32efce568ceb599b4673",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5ba834ded4bb067e67c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the multi-line modifier Let's add that to our regular expressions to see what we get: js const start = /^freecodecamp/im; const end = /freecodecamp$/im; const string = `I really love freecodecamp it's my favorite`; console log(start test(string)); // true console log(end test(string)); // true Now they both match Because the freecodecamp is entirely on its own line, the start anchor matches the beginning of that line, and the end anchor matches the end of that lineFinally, you have the d flag, or indices modifier Remember that the i flag is for case-insensitivity, so the indices modifier needed a different flag The d flag expands the information you get in a match object Let's add it to our regular expression:\njs\nconst regex = /freecodecamp/di;\nconst string = \"we love freecodecamp isn't freecodecamp great \";\nconsole log(string match(regex));\nAnd the result is:\njs\n// [\n//   'freecodecamp',\n//   index: 8,\n//   input: \"we love freecodecamp isn't freecodecamp great \",\n//   groups: undefined,\n//   indices: [\n//     0: [8, 20],\n//     groups: undefined\n//   ]\n// ]\nOur match object gets a new indices property This property is an array of two numbers, the first being the index in the original string where the match starts, and the second being the index after the match ended This array also has an extra groups property, which is also for named capture groups There are a few other flags that you should know are available to you, but are less common in typical code The first is the unicode modifier, or u flag This expands the functionality of a regular expression to allow it to match special unicode characters You'll learn more about character classes in a later lecture, but the u flag gives you access to special classes like Extended_Pictographic to match most emoji:\n```js\nconst regex = /🍎/u;\nconst str = \"I have an apple 🍎\";\nconsole log(regex test(str)); // true\n```\nThere is also a v flag, which further expands the functionality of the unicode matching The second is the sticky modifier, or the y flag The sticky modifier behaves very similarly to the global modifier, but with a few exceptions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5ba834ded4bb067e67c.md",
      "source_type": "git_repo"
    },
    "token_count": 489,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "73ec433270ec21469e41fb8cffcf1829",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5ba834ded4bb067e67c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "lecture, but the u flag gives you access to special classes like Extended_Pictographic to match most emoji: ```js const regex = /🍎/u; const str = \"I have an apple 🍎\"; console log(regex test(str)); // true ``` There is also a v flag, which further expands the functionality of the unicode matching The second is the sticky modifier, or the y flag The sticky modifier behaves very similarly to the global modifier, but with a few exceptionsThe biggest one is that a global regular expression will start from lastIndex and search the entire remainder of the string for another match, but a sticky regular expression will return null and reset the lastIndex to 0 if there is not immediately a match at the previous lastIndex And the last is the single-line modifier, or the s flag Remember that the multiline modifier allows start and end anchors to match the start and end of a line, instead of the entire string The single-line modifier allows a wildcard character, represented by a period ( ) in regex, to match linebreaks – effectively treating the string as a single line of text There are quite a few of these modifiers, but the i and g flags are the ones you'll use most frequently, and are the most important to remember --questions--\n--text--\nWhat would the following code output js\nconst regex = /freecodecamp/i;\nconsole log(regex test(\"I love FREECODECAMP \"));\nconsole log(regex test(\"freeCodoCamp\"));\nconsole log(regex test(\"We went freeCodeCamping \"));\n--answers--\njs\ntrue\ntrue\ntrue\n--feedback--\nThe i flag makes the regex case-insensitive, so freeCodeCamp matches regardless of case, as long as the letters are the same js\ntrue\nfalse\ntrue\njs\ntrue\ntrue\nfalse\n--feedback--\nThe i flag makes the regex case-insensitive, so freeCodeCamp matches regardless of case, as long as the letters are the same js\nfalse\nfalse\nfalse\n--feedback--\nThe i flag makes the regex case-insensitive, so freeCodeCamp matches regardless of case, as long as the letters are the same --video-solution--\n2\n--text--\nWhen would you NOT want to use the global (g) flag in a regular expression --answers--\nWhen you want to match a pattern multiple times within a single string",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5ba834ded4bb067e67c.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "95602251e69f43994bd440148d0ec233",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5ba834ded4bb067e67c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "makes the regex case-insensitive, so freeCodeCamp matches regardless of case, as long as the letters are the same js false false false --feedback-- The i flag makes the regex case-insensitive, so freeCodeCamp matches regardless of case, as long as the letters are the same --video-solution-- 2 --text-- When would you NOT want to use the global (g) flag in a regular expression --answers-- When you want to match a pattern multiple times within a single string--feedback--\nThe g flag is stateful, meaning it tracks the last match, which can cause issues when testing multiple strings When you want the match to start fresh with each new test --feedback--\nThe g flag is stateful, meaning it tracks the last match, which can cause issues when testing multiple strings When you want to make the regex case-insensitive --feedback--\nThe g flag is stateful, meaning it tracks the last match, which can cause issues when testing multiple strings When you are testing multiple strings and don't need to track match state --video-solution--\n4\n--text--\nWhat does the multi-line (m) modifier do in a regular expression --answers--\nIt allows anchors (^ and $) to match the start and end of each line, not just the entire string It makes the regular expression case-insensitive --feedback--\nThe m modifier enables matching at the start and end of lines in multi-line strings It allows the regular expression to match linebreaks --feedback--\nThe m modifier enables matching at the start and end of lines in multi-line strings It makes the regular expression match globally --feedback--\nThe m modifier enables matching at the start and end of lines in multi-line strings --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 12203,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5ba834ded4bb067e67c.md",
      "source_type": "git_repo"
    },
    "token_count": 349,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "af7a04b0cf9783867a06d5c77588d28a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5e54e3a154c8078ed48.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733c5e54e3a154c8078ed48\ntitle: What Are Regex Quantifiers, and How Do They Work challengeType: 19\ndashedName: what-are-regex-quantifiers-and-how-do-they-work\n--description--\nLet's learn about quantifiers in regular expressions Consider a scenario where you want to match a four-digit identification code You know you can use the \\d character class, so you might write that four times And to avoid any extraneous characters, you'd include both the start and end anchors:\njs\nconst regex = /^\\d\\d\\d\\d$/;\nAnd this does work – it will match four numerical characters But rather than having to write out the same class multiple times, you can give it a quantifier Quantifiers are defined by curly braces containing one or two numbers Let's use a quantifier in our pattern:\njs\nconst regex = /^\\d{4}$/;\nNotice how our quantifier contains only the number 4 This syntax means \"match the previous character exactly four times\" Let's see how that behaves:\njs\nconst regex = /^\\d{4}$/;\nconsole log(regex test(\"123\")); // false\nconsole log(regex test(\"1234\")); // true\nconsole log(regex test(\"12345\")); // false\nconsole log(regex test(\"123456\")); // false\nconsole log(regex test(\"1234567\")); // false\nThe pattern only matches the string with exactly four digits, because we have used the anchors and our quantifier only allows exactly four digits But maybe the identification code only needs to be a minimum of four digits To allow for four or more digits, add a comma after the number in your quantifier:\njs\nconst regex = /^\\d{4,}$/;\nNow, our syntax allows the pattern to match four or more digits Let's test it:\njs\nconst regex = /^\\d{4,}$/;\nconsole log(regex test(\"123\")); // false\nconsole log(regex test(\"1234\")); // true\nconsole log(regex test(\"12345\")); // true\nconsole log(regex test(\"123456\")); // true\nconsole log(regex test(\"1234567\")); // true\nA seven-digit identifier is rather long These identifiers should have a maximum of 6 digits, and a minimum of 4 digits",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7088,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5e54e3a154c8078ed48.md",
      "source_type": "git_repo"
    },
    "token_count": 471,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "707ae4499985dab9a22eff8062535c8a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5e54e3a154c8078ed48.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the number in your quantifier: js const regex = /^\\d{4,}$/; Now, our syntax allows the pattern to match four or more digits Let's test it: js const regex = /^\\d{4,}$/; console log(regex test(\"123\")); // false console log(regex test(\"1234\")); // true console log(regex test(\"12345\")); // true console log(regex test(\"123456\")); // true console log(regex test(\"1234567\")); // true A seven-digit identifier is rather long These identifiers should have a maximum of 6 digits, and a minimum of 4 digitsTo achieve this, you can add a second number to your quantifier after the comma:\njs\nconst regex = /^\\d{4,6}$/;\nAnd now our pattern no longer matches the seven-digit identifier, because it is greater than our six-digit maximum js\nconst regex = /^\\d{4,6}$/;\nconsole log(regex test(\"123\")); // false\nconsole log(regex test(\"1234\")); // true\nconsole log(regex test(\"12345\")); // true\nconsole log(regex test(\"123456\")); // true\nconsole log(regex test(\"1234567\")); // false\nNote that you cannot use this syntax to set a maximum alone – you must always set a minimum But if you set the minimum to 1, you can effectively achieve the same result We've received updated requirements from our users Identifiers can now optionally start with a letter We already know the character class for this, so let's add that to our regular expression:\njs\nconst regex = /^[a-zA-z]\\d{4,6}$/;\nBut now we mandate the presence of a letter How can we make it optional You could use the quantifier syntax with 0 as the minimum and 1 as the maximum:\njs\nconst regex = /^[a-zA-Z]{0,1}\\d{4,6}$/;\nBut there's actually a special shorthand quantifier for a single optional character – the question mark ( ) Let's replace our quantifier with the question mark:\njs\nconst regex = /^[a-zA-Z] \\d{4,6}$/;\nWe should validate the result:\njs\nconst regex = /^[a-zA-Z] \\d{4,6}$/;\nconsole log(regex test(\"123\")); // false\nconsole log(regex test(\"a1234\")); // true\nconsole log(regex test(\"12345\")); // true\nconsole log(regex",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7088,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5e54e3a154c8078ed48.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "894f4001becb07449fcf8537d37dbe38",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5e54e3a154c8078ed48.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "syntax with 0 as the minimum and 1 as the maximum: js const regex = /^[a-zA-Z]{0,1}\\d{4,6}$/; But there's actually a special shorthand quantifier for a single optional character – the question mark ( ) Let's replace our quantifier with the question mark: js const regex = /^[a-zA-Z] \\d{4,6}$/; We should validate the result: js const regex = /^[a-zA-Z] \\d{4,6}$/; console log(regex test(\"123\")); // false console log(regex test(\"a1234\")); // true console log(regex test(\"12345\")); // true console log(regextest(\"az12345\")); // false\nconsole log(regex test(\"X123456\")); // true\nconsole log(regex test(\"1234567\")); // false\nOur pattern now allows for a single optional letter, followed by four to six digits Unfortunately, we've just realized we read the requirements wrong We need to allow for any number of letters before the numbers We can use our quantifier with a 0 minimum and no defined maximum:\njs\nconst regex = /^[a-zA-Z]{0,}\\d{4,6}$/;\nBut our pattern is getting long again Thankfully, there's another short-hand for \"match the previous character zero or more times\" –  the asterisk (*) symbol Let's replace our quantifier with that in the pattern, and test it:\njs\nconst regex = /^[a-zA-Z]*\\d{4,6}$/;\nconsole log(regex test(\"123\")); // false\nconsole log(regex test(\"a1234\")); // true\nconsole log(regex test(\"12345\")); // true\nconsole log(regex test(\"az12345\")); // true\nconsole log(regex test(\"X123456\")); // true\nconsole log(regex test(\"1234567\")); // false\nNow we successfully match any identifier with zero or more letters followed by four to six numbers But it turns out this is crashing our system – we actually have to require at least one letter Again, we could use a quantifier with a minimum of one and no defined maximum, or we could use yet another special syntax – the plus (+) symbol:\njs\nconst regex = /^[a-zA-Z]+\\d{4,6}$/;\nconsole log(regex test(\"123\")); // false\nconsole log(regex test(\"a1234\")); // true\nconsole log(regex",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7088,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5e54e3a154c8078ed48.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "ac55c7985f26045b76dde8519f503ce1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5e54e3a154c8078ed48.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "identifier with zero or more letters followed by four to six numbers But it turns out this is crashing our system – we actually have to require at least one letter Again, we could use a quantifier with a minimum of one and no defined maximum, or we could use yet another special syntax – the plus (+) symbol: js const regex = /^[a-zA-Z]+\\d{4,6}$/; console log(regex test(\"123\")); // false console log(regex test(\"a1234\")); // true console log(regextest(\"12345\")); // false\nconsole log(regex test(\"az12345\")); // true\nconsole log(regex test(\"X123456\")); // true\nconsole log(regex test(\"1234567\")); // false\nNow the identifiers that do not start with at least one letter fail, regardless of how many numbers there are You can use quantifiers to greatly enhance the brevity and readability of your regular expressions --questions--\n--text--\nWhat does the quantifier {4,6} mean in a regular expression --answers--\nMatch exactly four or six times --feedback--\nThink about the minimum and maximum values specified in the quantifier Match at least four times, but no more than six times Match four to six characters in total --feedback--\nThink about the minimum and maximum values specified in the quantifier Match either four or six digits --feedback--\nThink about the minimum and maximum values specified in the quantifier --video-solution--\n2\n--text--\nWhich quantifier symbol is equivalent to {0,1} in regular expressions --answers--\n*\n--feedback--\nThe lecture mentions a \"special shorthand quantifier for a single optional character\" +\n--feedback--\nThe lecture mentions a \"special shorthand quantifier for a single optional character\" ^\n--feedback--\nThe lecture mentions a \"special shorthand quantifier for a single optional character\" --video-solution--\n3\n--text--\nWhat does the + quantifier mean in a regular expression --answers--\nMatch zero or more times --feedback--\nThe lecture describes this quantifier as requiring \"at least one\" of the preceding element Match exactly one time --feedback--\nThe lecture describes this quantifier as requiring \"at least one\" of the preceding element Match one or more times Match zero or one time --feedback--\nThe lecture describes this quantifier as requiring \"at least one\" of the preceding element --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7088,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5e54e3a154c8078ed48.md",
      "source_type": "git_repo"
    },
    "token_count": 481,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "69cacb4d069ef5b1e3a20fbc59e23a20",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea6c021dd5913cf8fd8dd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 687ea6c021dd5913cf8fd8dd\ntitle: What Are Relational Databases, and How Do They Differ from Non-Relational Databases challengeType: 19\ndashedName: what-are-relational-databases-and-how-do-they-differ-from-non-relational-databases\n--description--\nA relational database is a collection of data organized into tables These tables are made of rows and columns Rows represent individual records For example, if you're storing user data, each row could represent a specific user Columns represent the attributes or fields that describe each record The table might include columns for common user attributes, such as name and national ID number One of the key characteristics of relational databases is that they allow us to connect different pieces of information by linking tables through common attributes, making it easier to see how they relate to each other Relational databases require a schema The schema defines the overall structure of the database, including its tables, columns, data types, relationships, and constraints All tables in a relational database have a primary key, which is a unique identifier for each row They enable relationships between tables via foreign keys You'll learn more about primary keys, foreign keys, and how they work in the coming lectures For now, just know they are fundamental to linking records across tables For example, let's say that you're creating a database for an organization that runs a wildlife conservation center for critically endangered animals One of the tables could store general information about the animals, you might call it animals Each row could represent an animal, while each column could represent an attribute of that animal, like species, size, weight, age, and other unique characteristics To uniquely identify each animal, you would typically add an id column to the table This would be the primary key of the table because it's unique for each animal The ID of each animal could be used to link its record in this table to related records in other tables You could also have a species table to store information about each species, such as their habitat and conservation status Each animal in the animals table could reference a species from this table using a species ID You could also create a table to store the veterinary records of the animals This way, the center can track their health, treatments, and medications Once you have this general schema, you could link these tables to the animals table, which acts as the central point for animal-related data",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6339,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea6c021dd5913cf8fd8dd.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "6485adee200c0a0facd7640ad657ebcf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea6c021dd5913cf8fd8dd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "about each species, such as their habitat and conservation status Each animal in the animals table could reference a species from this table using a species ID You could also create a table to store the veterinary records of the animals This way, the center can track their health, treatments, and medications Once you have this general schema, you could link these tables to the animals table, which acts as the central point for animal-related dataThis way, you don't have to keep all the information about an animal in the same table Instead, you can store related data in separate tables and link them through relationships By creating these relationships, you can get the specific data you need with a single query A query is a request for specific data from the database Examples of queries that you could make in the context of our example would be finding all animals that need a veterinary checkup, finding the most critically endangered species in the center, finding the number of animals who were born in captivity, and more You can customize the queries to fit your needs Our example was related to wildlife conservation, but relational databases have a wide range of applications across industries such as healthcare, construction, business, gaming, education, government, e-commerce, social media, and more They offer several advantages, including scalability They can handle large datasets, so they're perfect for complex, real-world applications They also enforce data integrity through primary keys, foreign keys, and data types, which ensures that the data will be consistent and accurate In addition to relational databases, you can work with non-relational databases The main difference between relational and non-relational databases is how the data is stored Non-relational databases, also known as NoSQL databases, are more flexible They store data in individual files that are not connected Their data model is more flexible too While some non-relational databases may have a basic schema or data model, it is often less rigid than the schema defined in relational databases You can add, modify, or remove data fields if necessary The decision to use a relational or non-relational database depends on various factors, including the nature of the data and the specific requirements of the application You should evaluate the tradeoffs between these two approaches to choose the best one for your application --questions--\n--text--\nWhich of the following is a key characteristic of relational databases --answers--\nFlexible schema\n--feedback--\nThink about how data is organized in relational databases Document-based structure\n--feedback--\nThink about how data is organized in relational databases",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6339,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea6c021dd5913cf8fd8dd.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "a44a6a1635b89f56b291d1aab2b0f473",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea6c021dd5913cf8fd8dd.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "relational or non-relational database depends on various factors, including the nature of the data and the specific requirements of the application You should evaluate the tradeoffs between these two approaches to choose the best one for your application --questions-- --text-- Which of the following is a key characteristic of relational databases --answers-- Flexible schema --feedback-- Think about how data is organized in relational databases Document-based structure --feedback-- Think about how data is organized in relational databasesKey-value pairs\n--feedback--\nThink about how data is organized in relational databases Structured data in tables\n--video-solution--\n4\n--text--\nWhich of the following statements is true about relational databases --answers--\nThey are always more scalable than non-relational databases --feedback--\nThink about the structure and characteristics of relational databases They are always more performant than non-relational databases --feedback--\nThink about the structure and characteristics of relational databases They require a predefined schema They are not suitable for large-scale applications --feedback--\nThink about the structure and characteristics of relational databases --video-solution--\n3\n--text--\nWhich of the following statements is true about non-relational databases --answers--\nThey always have a fixed schema --feedback--\nThink about the key differences between relational and non-relational databases They are not suitable for large-scale applications --feedback--\nThink about the key differences between relational and non-relational databases They allow for more flexible data modeling They are always slower than relational databases --feedback--\nThink about the key differences between relational and non-relational databases --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6339,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea6c021dd5913cf8fd8dd.md",
      "source_type": "git_repo"
    },
    "token_count": 311,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b6ba90c34902bcbadb37b060f7d18d83",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8757080091969f07122.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 687ea8757080091969f07122\ntitle: What Is SQL, and How Can You Create a Database with Tables challengeType: 19\ndashedName: what-is-sql-and-how-can-you-create-a-database-with-tables\n--description--\nSQL stands for Structured Query Language It was developed in the 1970s, when it was initially known as the structured English query language (SEQUEL) This term was later shortened to SQL SQL is a programming language used for storing and managing data in relational databases Like you learned in a previous lecture, relational databases organize data into tables Each table has a set of rows and columns, where the data attributes and their relationships are represented Each row represents a record while each column represents a specific attribute or field of that record With SQL, you can add, change, delete, find, and retrieve data from a relational database It provides a comprehensive set of commands for querying, filtering, sorting, and aggregating data SQL can help optimize database performance, by querying only the necessary data, and it can be easily integrated with a wide range of programming languages, so you can use it to interact with databases directly from your applications It has been also adopted as an industry standard It enforces data integrity and includes many security features, like support for user authentication and data encryption It's also scalable, portable, and compatible with a wide range of database management systems SQL is based on commands, commonly known as SQL statements or SQL queries As a developer, you will write these statements using specific SQL language elements or keywords They allow you to perform the necessary operations on your database Before you can enter SQL commands, you need to open the psql shell so you can directly interact with the PostgreSQL database In the command prompt or terminal, enter:\nbash\npsql -U <username> -d <database_name>\nReplace username with your username and database_name with the database you want to connect to If you haven't created own your database yet, use postgres, it comes with the installation Once connected, you will see the prompt change to:\nbash\npostgres=#\nIt shows the database name you are connected to and waits for SQL commands Let's go over some of the most fundamental SQL commands that you should be familiar with You'll notice that, by convention, SQL commands end with a semicolon (;)",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5898,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8757080091969f07122.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "e3cbcacd149920df8fe37482c44b78a3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8757080091969f07122.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "with the database you want to connect to If you haven't created own your database yet, use postgres, it comes with the installation Once connected, you will see the prompt change to: bash postgres=# It shows the database name you are connected to and waits for SQL commands Let's go over some of the most fundamental SQL commands that you should be familiar with You'll notice that, by convention, SQL commands end with a semicolon (;)First, you can use this command to create a database named my_database:\nsql\nCREATE DATABASE my_database;\nYou can type CREATE followed by DATABASE, and the name of the database that you want to create Notice that the SQL keywords of the command are written in capital letters Then, once you have your database, you can connect to it How you connect to the database really depends on the environment and tool you're using In the command prompt or terminal, you can use the method shown earlier In the interactive psql shell, you can switch databases with the \\c shortcut command followed by the database name like this:\nbash\n\\c my_database\nNote that the \\c command and other shortcut commands (ones with a backslash in front of them) are part of the psql shell and not part of the SQL language itself, so they do not require a semi-colon to complete the command Now that you've connected to your new database, you will see the prompt has changed:\nbash\nmy_database=#\nOnce you have created and connected to a database, you can create a table with the CREATE TABLE keywords:\nsql\nCREATE TABLE products (\nid SERIAL,\nname VARCHAR(255)\n);\nIn the command, you write CREATE TABLE, followed by the name of the table that you want to create In this case, it will create a table named products Then, within parentheses, you write the names of the columns that the table should have and specify the data type of the values that will be stored in each column In the example, the table will have two columns, a column for the product ID and another one for the name of the product The standard naming convention for table and column names is snake case, writing words in lowercase and separating them with an underscore (_) For example: delivery_orders\nThese are few essential SQL commands you should know to get started With SQL, you can easily query, manipulate, and analyze data to make informed decisions and solve real-world problems --questions--\n--text--\nWhat does the acronym SQL stand for",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5898,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8757080091969f07122.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "1f0e519a21a0c6797ba0d4eb40e8fe55",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8757080091969f07122.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "product ID and another one for the name of the product The standard naming convention for table and column names is snake case, writing words in lowercase and separating them with an underscore (_) For example: delivery_orders These are few essential SQL commands you should know to get started With SQL, you can easily query, manipulate, and analyze data to make informed decisions and solve real-world problems --questions-- --text-- What does the acronym SQL stand for--answers--\nStructured Query Language\nSimple Query Language\n--feedback--\nThink about the purpose of SQL and the words in the acronym that describe its functionality Sequential Query Language\n--feedback--\nThink about the purpose of SQL and the words in the acronym that describe its functionality Standard Query Language\n--feedback--\nThink about the purpose of SQL and the words in the acronym that describe its functionality --video-solution--\n1\n--text--\nWhat is SQL primarily used for --answers--\nCreating web pages --feedback--\nThink about how SQL interacts with data Developing mobile applications --feedback--\nThink about how SQL interacts with data Managing relational databases Writing server-side scripts --feedback--\nThink about how SQL interacts with data --video-solution--\n3\n--text--\nWhat is a relational database --answers--\nA collection of unstructured data --feedback--\nThink about how data is organized in a relational database A database that stores data in tables A programming language --feedback--\nThink about how data is organized in a relational database A type of network --feedback--\nThink about how data is organized in a relational database --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5898,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8757080091969f07122.md",
      "source_type": "git_repo"
    },
    "token_count": 308,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "87f59826fdc69a386843e875e906d0be",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea86615674e19296a78ce.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 687ea86615674e19296a78ce\ntitle: What Are Some Common Relational Databases, and How Do You Install and Use Postgres challengeType: 19\ndashedName: what-are-some-common-relational-databases-and-how-do-you-install-and-use-postres\n--description--\nRelational databases have a wide range of applications, including web development, inventory management systems, healthcare systems, e-commerce applications, and more Some of the most common relational databases are MySQL, PostgreSQL, SQLite, and Microsoft SQL Server Let's learn a little bit about each one of them MySQL is an open-source relational database management system It's very popular for web development because it's easy to use, reliable, and efficient for building real-world applications It also has an active community of developers that support and maintain it PostgreSQL is officially described as \"The World's Most Advanced Open Source Relational Database \" It's a free, open source object-relational database system known for its reliability, data integrity, and extensibility For example, you can define your own data types, custom functions, and write code in different programming languages without re-compiling your database SQLite is a free, open source, and lightweight file-based SQL database engine It's one of the most widely used database engines in the world SQLite is self-contained and serverless It's a zero-configuration database, which means that it doesn't require an initial setup process, which is great for getting started quickly These three databases are free and open source There are other popular proprietary options too, including Microsoft SQL Server and Oracle database Microsoft SQL server is a popular relational database management system developed by Microsoft and used in various applications Oracle database is a scalable relational database management system often used for enterprise applications that require high performance Great Now that you know more about the different options available, let's see how you can install PostgreSQL First, you need to go to the official website: https://www postgresql org/ Once you're there, click on the \"Download\" button This will take you to a page where you can select your operating system If you click on one, you will be taken to the instructions for that OS We will go through the installation process for the Windows operating system, but the process is similar across operating systems From this page, you can download the installer by clicking on the \"Download the installer\" link This will take you to a page where you can choose the version of PostgreSQL you want to install",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea86615674e19296a78ce.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "7c5c0e92cd436e2f61001f4b2667be0d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea86615674e19296a78ce.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "you can select your operating system If you click on one, you will be taken to the instructions for that OS We will go through the installation process for the Windows operating system, but the process is similar across operating systems From this page, you can download the installer by clicking on the \"Download the installer\" link This will take you to a page where you can choose the version of PostgreSQL you want to installIf you click on the corresponding icon, the download should start Then, in your Downloads folder or the folder where you store your downloads by default, you should see the installer If you double-click on it, you will start the setup process Click Next Choose the directory where PostgreSQL will be installed You'll see one by default but you can customize it Then, select the component that you want to install There are four possible components:\nPostgreSQL Server, the database engine itself pgAdmin 4, a user-friendly tool for database management Stack Builder, a tool for downloading and installing additional PostgreSQL-related software and extensions\nAnd Command Line Tools, to interact with the PostgreSQL server directly from your terminal This includes psql, an interactive terminal for executing SQL queries When you're ready, click Next Then, select a directory to store your data You will see a default path but you can customize this When you're ready, click Next Now you'll need to enter a password for the database superuser, the user with unrestricted access to all databases and objects Type in your password, retype it, and then click Next Then, select the port number the server should listen on By default, it's 5432 Then, click Next You'll need to choose a locale for the new database cluster This is important for the database to interpret locale-sensitive data types Then, click Next Finally, you'll see a pre-installation summary Take a moment to review this and click Next You will need to confirm that you want to start the installation process If you click Next, the process will start It should only take a few minutes When the process is completed, based on the components that you installed, you may have to choose if you want to launch Stack Builder to download and install additional tools, drivers, and applications If you decide to launch Stack Builder, you'll see a screen where you can start the installation Alternatively, you can click Cancel to do this later on Congratulations Now you have PostgreSQL installed on your computer The process should be similar for other operating systems After this, you can start using the database",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea86615674e19296a78ce.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "f84f3470965447328d77032a103d81e7",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea86615674e19296a78ce.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "you installed, you may have to choose if you want to launch Stack Builder to download and install additional tools, drivers, and applications If you decide to launch Stack Builder, you'll see a screen where you can start the installation Alternatively, you can click Cancel to do this later on Congratulations Now you have PostgreSQL installed on your computer The process should be similar for other operating systems After this, you can start using the databaseGo to your apps and search for pgAdmin, an open source administration and development platform for PostgreSQL that should have been installed if you selected it in the components Click on pgAdmin 4 to open it You'll see an initial loading screen when the application starts Then, you should see a dashboard where you can start a new server, check your databases, configure pgAdmin, and more You'll also find helpful links to the documentation If you click on \"Servers\" at the top left, you will need to enter the password that you chose during the installation After entering your password, you should see a screen where you will have access to your databases, including their tables You'll also find another very helpful tool, psql, an interactive terminal for SQL queries To open it, search for psql on your system Click on it It will open the SQL Shell, where you can start running commands And that's how you can install PostgreSQL on Windows The process is very similar for macOS and Linux Alternatively, if you are installing it on macOS, you can use Homebrew, a package manager Once you have Homebrew installed, run this command to install PostgreSQL:\nbash\nbrew install postgresql@<version>\nYou can specify the version that you want to install by writing the number after the at (@) symbol --questions--\n--text--\nWhich of the following is NOT a common relational database --answers--\nMySQL\n--feedback--\nThink about the popular relational databases you learned about during the lecture Node\nPostgreSQL\n--feedback--\nThink about the popular relational databases you learned about during the lecture SQLite\n--feedback--\nThink about the popular relational databases you learned about during the lecture --video-solution--\n2\n--text--\nPostgreSQL is known for its:\n--answers--\nWeak SQL support and limited features --feedback--\nThink about PostgreSQL's reputation regarding standards and customization Strong SQL support and powerful features Exclusive use in small systems --feedback--\nThink about PostgreSQL's reputation regarding standards and customization Small developer community --feedback--\nThink about PostgreSQL's reputation regarding standards and customization",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea86615674e19296a78ce.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "2cbd6fdfe56299fb2a119635afd70a75",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea86615674e19296a78ce.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "you learned about during the lecture SQLite --feedback-- Think about the popular relational databases you learned about during the lecture --video-solution-- 2 --text-- PostgreSQL is known for its: --answers-- Weak SQL support and limited features --feedback-- Think about PostgreSQL's reputation regarding standards and customization Strong SQL support and powerful features Exclusive use in small systems --feedback-- Think about PostgreSQL's reputation regarding standards and customization Small developer community --feedback-- Think about PostgreSQL's reputation regarding standards and customization--video-solution--\n2\n--text--\nWhich of the following is an open source, lightweight, file-based relational database --answers--\nMicrosoft SQL Server\n--feedback--\nThink about which option is known for its simplicity PostgreSQL\n--feedback--\nThink about which option is known for its simplicity SQLite\nMySQL\n--feedback--\nThink about which option is known for its simplicity --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7738,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea86615674e19296a78ce.md",
      "source_type": "git_repo"
    },
    "token_count": 177,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "a8bc2258c8e5bb324a2af12cd8b08bb0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea899461e37199cf03cf9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 687ea899461e37199cf03cf9\ntitle: What Are the Basic Data Types in SQL challengeType: 19\ndashedName: what-are-the-basic-data-types-in-sql\n--description--\nTo define a table in SQL, you need to specify the data type of each column Remember that this is the basic syntax for creating a table in SQL Each column has its own data type sql\nCREATE TABLE table_name(\ncolumn1 data_type column_constraint,\ncolumn2 data_type column_constraint,\ncolumn3 data_type column_constraint, etc\n);\nAs a developer, your goal is to choose these data types as accurately as possible There are six popular categories of data types in SQL:\nNumeric, such as INTEGER, FLOAT, SERIAL, and DECIMAL Date and time, such as TIMESTAMP, DATE, and TIME Character and string These include CHAR, VARCHAR, and TEXT Unicode, including NTEXT, and NVARCHAR These are used to make sure that text will be stored and retrieved correctly, regardless of the characters' origin Binary, used to store non-textual data, like images, audio, and video files And other miscellaneous data types, such as XML and TABLE In this lecture, we'll cover some of the most widely used ones with PostgreSQL Data types will vary across database management systems, but they are generally pretty similar So you'll need to check the full list in the documentation We'll start with numeric values First, we have the INTEGER data type:\nsql\nunits_sold INTEGER\nIn this example, we assign this data type to a units_sold column INTEGER types consume 4 bytes in the database and can range in value from -2,147,483,648 to 2,147,483,647 The official PostgreSQL documentation describes it as the \"typical choice for integer \"\nWe also have SMALLINT and BIGINT, which are basically the same as INTEGER except have a smaller and bigger range of numbers, respectively, due to how much size they are allotted in the database A useful feature available in PostgreSQL is to create a column using the SERIAL keyword Here, an id column is created using SERIAL:\nsql\nid SERIAL\nWhile it's not a true data type, it's very helpful for creating unique identifier columns because the column will have an INTEGER type, will not allow NULL values, and automatically increment when rows are added",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5894,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea899461e37199cf03cf9.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d680276b9b192570ee0a354719086865",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea899461e37199cf03cf9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "range of numbers, respectively, due to how much size they are allotted in the database A useful feature available in PostgreSQL is to create a column using the SERIAL keyword Here, an id column is created using SERIAL: sql id SERIAL While it's not a true data type, it's very helpful for creating unique identifier columns because the column will have an INTEGER type, will not allow NULL values, and automatically increment when rows are addedFor example, the first row will automatically have an id of 1, the second row will have an id of 2, and so on, creating a unique ID for each record In MySQL, the equivalent of SERIAL would be the AUTO_INCREMENT attribute, used to generate sequential integers automatically:\nsql\nid INT AUTO_INCREMENT\nYou can see that different database management systems may have different ways of achieving exactly the same functionality in your database These are the most commonly used numeric data types, but sometimes, you may need to represent text or sequences of characters For this, you have the VARCHAR data type This data type is used for a variable string length You can set the maximum character length within parentheses:\nsql\nname VARCHAR(50)\nIn this example, we define a name column, where the values can be up to 50 characters long This data type sets a maximum length for the strings, but if you need to store strings of any length, you can use TEXT instead:\nsql\nname TEXT\nIn addition to numbers and strings, it's also common to store dates and times For example, if you create a table to store events, you may need to store the date of each event in a specific format For this, you have the DATE data type:\nsql\nevent_date DATE\nTo store time, you can also use the TIME data type For example, you may store the time when an event starts:\nsql\nstart_time TIME\nThe TIMESTAMP data type combines both of them It includes both the date and time It may also include the time zone if you write TIMESTAMP WITH TIME ZONE:\nsql\nevent_timestamp TIMESTAMP\nsql\nevent_timestamp TIMESTAMP WITH TIME ZONE\nAnd finally, if you need to store a boolean value, TRUE or FALSE, you can use the BOOLEAN data type:\nsql\nis_active BOOLEAN\nNow you know some of the most common data types in SQL, but there are many more You can check the documentation of your database management system to find more information about the data types that you can use",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5894,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea899461e37199cf03cf9.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "739e4a59ca99d8e2aaf603842ee35a42",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea899461e37199cf03cf9.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "write TIMESTAMP WITH TIME ZONE: sql event_timestamp TIMESTAMP sql event_timestamp TIMESTAMP WITH TIME ZONE And finally, if you need to store a boolean value, TRUE or FALSE, you can use the BOOLEAN data type: sql is_active BOOLEAN Now you know some of the most common data types in SQL, but there are many more You can check the documentation of your database management system to find more information about the data types that you can use--questions--\n--text--\nWhich data type is used to store whole numbers in PostgreSQL --answers--\nVARCHAR\n--feedback--\nThink about which option represents a numerical value without decimal points TEXT\n--feedback--\nThink about which option represents a numerical value without decimal points INTEGER\nBOOLEAN\n--feedback--\nThink about which option represents a numerical value without decimal points --video-solution--\n3\n--text--\nIf you need to store a long text document or a very long string, which data type should you use in PostgreSQL --answers--\nVARCHAR(255)\n--feedback--\nThink about which option is designed to store character strings of unlimited or very large lengths INTEGER\n--feedback--\nThink about which option is designed to store character strings of unlimited or very large lengths CHAR(100)\n--feedback--\nThink about which option is designed to store character strings of unlimited or very large lengths TEXT\n--video-solution--\n4\n--text--\nWhich data type would you use to store a TRUE or FALSE value in a PostgreSQL database --answers--\nINTEGER\n--feedback--\nThink about the data type that represents a logical state VARCHAR\n--feedback--\nThink about the data type that represents a logical state BOOLEAN\nTEXT\n--feedback--\nThink about the data type that represents a logical state --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5894,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea899461e37199cf03cf9.md",
      "source_type": "git_repo"
    },
    "token_count": 345,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "82881a6249a07b50923093db6eb8bf19",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5f20cc9584cada942a4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6733c5f20cc9584cada942a4\ntitle: What Are Capturing Groups and Backreferences, and How Do They Work challengeType: 19\ndashedName: what-are-capturing-groups-and-backreferences-and-how-do-they-work\n--description--\nLet's learn about capturing groups and backreferences in regular expressions A capturing group allows you to \"capture\" a portion of the matched string to use however you might need Capturing groups are defined by parentheses containing the pattern to capture, with no leading characters like a lookahead Let's capture the code from our freeCodeCamp regular expression To do that, we'll enclose code in parentheses and define it as a capture group:\njs\nconst regex = /free(code)camp/i;\nTo confirm the behavior, we can test it against a freecodecamp string:\njs\nconst regex = /free(code)camp/i;\nconsole log(regex test(\"freecodecamp\")); // true\nBut this doesn't actually make use of our captured group Instead, let's take a look at the result of using match:\njs\nconst regex = /free(code)camp/i;\nconsole log(\"freecodecamp\" match(regex));\n// [\n//   'freecodecamp',\n//   'code', <--\n//   index: 0,\n//   input: 'freecodecamp',\n//   groups: undefined\n// ]\nHere we can see that our match array has a second element, which is the portion of the string which was captured by our capture group Notice how the capture group matches the exact pattern code, where a character class would match a single character from the list c, o, d, and e But how can we actually use this Well, capture groups are often used when replacing contents of a string Let's set up some code to do that We're going to turn freecodecamp into paidcodeworld:\njs\nconst regex = /free(code)camp/i;\nconsole log(\"freecodecamp\" replace(regex, \"paidcodeworld\"));\nThis works on its own, but what if we didn't know how many o's were in code If we need a quantifier for one or more os:\njs\nconst regex = /free(co+de)camp/i;\nconsole log(\"freecoooooooodecamp\" replace(regex, \"paidcodeworld\"));\nWe're getting paidcodeworld as our result",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7892,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5f20cc9584cada942a4.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 5
  },
  {
    "id": "086ff6565840620a9c37dd2eb1067f06",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5f20cc9584cada942a4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "groups are often used when replacing contents of a string Let's set up some code to do that We're going to turn freecodecamp into paidcodeworld: js const regex = /free(code)camp/i; console log(\"freecodecamp\" replace(regex, \"paidcodeworld\")); This works on its own, but what if we didn't know how many o's were in code If we need a quantifier for one or more os: js const regex = /free(co+de)camp/i; console log(\"freecoooooooodecamp\" replace(regex, \"paidcodeworld\")); We're getting paidcodeworld as our resultWe want to preserve the number of o's, so we need to reuse what was captured by the regular expression This is where a backreference comes in Instead of hardcoding the code portion of our replacement string, we can reference the captured group directly In a replace call, you achieve a backreference by using a dollar sign ($) followed by the number of the capture group to use In our case, that would be $1, since code is captured in the first capture group:\njs\nconst regex = /free(co+de)camp/i;\nconsole log(\"freecoooooooodecamp\" replace(regex, \"paid$1world\")); // paidcooooooooworld\nWe have now successfully preserved an unknown number of o characters when converting freecodecamp into paidcodeworld But backreferences aren't just limited to the replace call You can actually use them directly in a regular expression This would allow you to match a previously captured pattern later on in the regular expression Let's say we want to match freecodecamp twice, with the same number of o's, but anywhere in the string First, we need to separate them with our wildcard character, and allow any number of characters to match that wildcard:\njs\nconst regex = /free(co+de)camp *free(co+de)camp/i;\nThis current expression won't ensure that the number of o characters is the same, however To achieve that, we need to replace the second capture group with a reference to the first Inside a regular expression, a backreference is denoted with a backslash followed by the number of the capture group:\njs\nconst regex = /free(co+de)camp *free\\1camp/i;\nconsole log(regex test(\"freecooooodecamp is great i love freecooooodecamp\")); // true\nconsole log(regex",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7892,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5f20cc9584cada942a4.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 5
  },
  {
    "id": "432127270837e7c5f2a57570ef0cc412",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5f20cc9584cada942a4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "wildcard: js const regex = /free(co+de)camp *free(co+de)camp/i; This current expression won't ensure that the number of o characters is the same, however To achieve that, we need to replace the second capture group with a reference to the first Inside a regular expression, a backreference is denoted with a backslash followed by the number of the capture group: js const regex = /free(co+de)camp *free\\1camp/i; console log(regex test(\"freecooooodecamp is great i love freecooooodecamp\")); // true console log(regextest(\"freecooooodecamp is great i love freecodecamp\")); // false\nAnd with that, we can see that a string with the correct number of os matches, while a string with two different numbers of os does not This syntax is great, but can quickly get confusing when you are referencing multiple capture groups Thankfully, instead of using numbers, you can give your groups names To define a named capture group, you add a question mark ( ) followed by the name enclosed in less than and greater than signs to the beginning of the group Let's name our capture group code:\njs\nconst regex = /free( <code>co+de)camp *free\\1camp/i;\nNow we can update our backreference in the regular expression to refer to this group A named backreference starts with a backslash followed by the letter k in JavaScript Then you add the name, again enclosed in less than (<) and greater than (>) signs Let's take a look at that:\njs\nconst regex = /free( <code>co+de)camp *free\\k<code>camp/i;\nNow if we check our test() call, we can see that we still pass:\njs\nconst regex = /free( <code>co+de)camp *free\\k<code>camp/i;\nconsole log(regex test(\"freecooooodecamp is freecooooodecamp\")); // true\nTo use our named capture group in a replace() call, we'd insert a dollar sign into the string, followed by the name enclosed in less than and greater than signs:\njs\nconst regex = /free( <code>co+de)camp/i;\nconsole log(\"freecooooodecamp\"",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7892,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5f20cc9584cada942a4.md",
      "source_type": "git_repo"
    },
    "token_count": 477,
    "chunk_index": 2,
    "total_chunks": 5
  },
  {
    "id": "a582bd9633b0a968794e0d3e629bcff8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5f20cc9584cada942a4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "look at that: js const regex = /free( <code>co+de)camp *free\\k<code>camp/i; Now if we check our test() call, we can see that we still pass: js const regex = /free( <code>co+de)camp *free\\k<code>camp/i; console log(regex test(\"freecooooodecamp is freecooooodecamp\")); // true To use our named capture group in a replace() call, we'd insert a dollar sign into the string, followed by the name enclosed in less than and greater than signs: js const regex = /free( <code>co+de)camp/i; console log(\"freecooooodecamp\"replace(regex, \"paid$<code>camp\")); // paidcooooodecamp\nFinally, sometimes you want to create a group of characters, but don't need the captured result Let's say we want to match either freecodecamp or freecandycamp You could create two patterns separated by an OR assertion:\njs\nconst regex = /freecodecamp|freecandycamp/i;\nBut this can become quite lengthy for larger-scale regular expressions Instead, you can create a non-capturing group around the characters that you need to OR:\njs\nconst regex = /free( :code|candy)camp/i;\nA non-capturing group does not store the code|candy match separately in memory But it can be helpful for creating alternate patterns without sacrificing readability or performance --questions--\n--text--\nHow do you create a named capturing group in a regular expression --answers--\n(name:pattern)\n--feedback--\nThe lecture describes a specific syntax for naming a capture group, involving angle brackets ( <name>pattern)\n( name:pattern)\n--feedback--\nThe lecture describes a specific syntax for naming a capture group, involving angle brackets (name=>pattern)\n--feedback--\nThe lecture describes a specific syntax for naming a capture group, involving angle brackets --video-solution--\n2\n--text--\nIn a replace() method, how would you reference the first capturing group in the replacement string --answers--\n\\1\n--feedback--\nThe lecture mentions using a specific symbol followed by a number to reference capture groups in a replace call $1\n{1}\n--feedback--\nThe lecture mentions using a specific symbol followed by a number to reference capture groups in a replace call",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7892,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5f20cc9584cada942a4.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 3,
    "total_chunks": 5
  },
  {
    "id": "5d92e1d692e47ba8cd4a04cb5d91e768",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5f20cc9584cada942a4.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "lecture describes a specific syntax for naming a capture group, involving angle brackets --video-solution-- 2 --text-- In a replace() method, how would you reference the first capturing group in the replacement string --answers-- \\1 --feedback-- The lecture mentions using a specific symbol followed by a number to reference capture groups in a replace call $1 {1} --feedback-- The lecture mentions using a specific symbol followed by a number to reference capture groups in a replace call[1]\n--feedback--\nThe lecture mentions using a specific symbol followed by a number to reference capture groups in a replace call --video-solution--\n2\n--text--\nWhat is the purpose of a non-capturing group in a regular expression --answers--\nTo capture a group without storing it in memory\n--feedback--\nThe lecture describes a specific use case for non-capturing groups related to creating alternate patterns To create alternate patterns without sacrificing readability or performance\nTo name a capturing group\n--feedback--\nThe lecture describes a specific use case for non-capturing groups related to creating alternate patterns To reference a previously captured group\n--feedback--\nThe lecture describes a specific use case for non-capturing groups related to creating alternate patterns --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7892,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-regular-expressions\\6733c5f20cc9584cada942a4.md",
      "source_type": "git_repo"
    },
    "token_count": 251,
    "chunk_index": 4,
    "total_chunks": 5
  },
  {
    "id": "449103d6fcf07673de7db16dfe135e1b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8e0cab41019dc8a728a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 687ea8e0cab41019dc8a728a\ntitle: What Are the Different Types of Relationships in a Relational Database challengeType: 19\ndashedName: what-are-the-different-types-of-relationships-in-a-relational-database\n--description--\nLike you learned in previous lectures, relational databases store data in tables, which are made of rows and columns The \"relational\" aspect of \"relational databases\" comes from the fact that records in different tables can have different types of relationships There are five main types of relations:\none-to-one\none-to-many\nmany-to-one\nmany-to-many\nAnd self-referencing relationships (also known as recursive relationships) Two tables have a one-to-one relationship when each record in the first table can be associated with at most one record in the second table, and vice versa For example, let's say a company only assigns one vehicle per employee In that case, the database could have an employees table and a vehicles table, where each employee record corresponds to one, and only one, vehicle record in the database In contrast, one-to-many relationships occur when one record in a table can be related to one or more records in another table For example, if we have a customers table and an orders table, each customer could be related to one or more orders but each order can only be related to one customer This is the same as the many-to-one relation, but from the opposite perspective One or more orders can be related to one customer Many-to-many relationships occur when a record in a table can be related to multiple records in another table and vice versa For example, let's analyze a database for a library For simplicity purposes, let's assume that this database only has two tables: books and authors An author can write multiple books, and a single book can be written by multiple authors Implementing this type of relationship is a little bit more complex because the relational model at its core doesn't support many-to-many relationships directly To handle this, you would usually create an intermediate table, also known as a junction table This table solves these initial limitations by transforming the many-to-many relationship into two one-to-many relationships It creates a one-to-many relationship between the first table and the junction table and a one-to-many relationship between the second table and the junction table The name of the junction table is usually a combination of the entities",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5640,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8e0cab41019dc8a728a.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "98cef412c23ff44eb2fb8e2834fd9623",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8e0cab41019dc8a728a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "its core doesn't support many-to-many relationships directly To handle this, you would usually create an intermediate table, also known as a junction table This table solves these initial limitations by transforming the many-to-many relationship into two one-to-many relationships It creates a one-to-many relationship between the first table and the junction table and a one-to-many relationship between the second table and the junction table The name of the junction table is usually a combination of the entitiesIn the context of our example of books and authors, you may call it books_authors In the junction table itself, you would associate the authors and their books by creating two columns: a column for the author's id (author_id) and another column for the book's id (book_id) These would be foreign keys referencing their corresponding primary keys in the authors and books tables, respectively With this junction table, you'll be able to query all the authors of a given book or all books written by a given author Using a junction table makes it easier to query the data, prevents redundancy, and simplifies the database schema They are very helpful for implementing many-to-many relationships And finally, we find self-referencing relationships, which occur when the records of a table can be related to other records on the same table This is also known as a recursive relationship Understanding these relationships is essential for designing and modeling complex and efficient relational databases --questions--\n--text--\nIn which type of relationship can one record in Table A be associated with zero, one, or many records in Table B, while each record in Table B can be associated with only one record in Table A --answers--\nOne-to-one\n--feedback--\nThink about which relationship type explicitly describes a single entity on one side relating to multiple entities on the other One-to-many\nMany-to-many\n--feedback--\nThink about which relationship type explicitly describes a single entity on one side relating to multiple entities on the other Self-referencing\n--feedback--\nThink about which relationship type explicitly describes a single entity on one side relating to multiple entities on the other --video-solution--\n2\n--text--\nWhat is a many-to-many relationship in a relational database --answers--\nA relationship where one row in a table is related to many rows in another table --feedback--\nThink about how the entities can be related to each other A relationship where one row in a table is related to only one row in another table --feedback--\nThink about how the entities can be related to each other",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5640,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8e0cab41019dc8a728a.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "05cfc41a0a8ba7d8f1e7b0e376a92462",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8e0cab41019dc8a728a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "to multiple entities on the other --video-solution-- 2 --text-- What is a many-to-many relationship in a relational database --answers-- A relationship where one row in a table is related to many rows in another table --feedback-- Think about how the entities can be related to each other A relationship where one row in a table is related to only one row in another table --feedback-- Think about how the entities can be related to each otherA relationship where multiple rows in one table are related to multiple rows in another table A relationship where there is no connection between the tables --feedback--\nThink about how the entities can be related to each other --video-solution--\n3\n--text--\nWhich type of relationship involves records within the same table being linked to other records in that same table --answers--\nOne-to-many\n--feedback--\nThink about a scenario where an entity has a relationship with other entities of the same type Many-to-one\n--feedback--\nThink about a scenario where an entity has a relationship with other entities of the same type Many-to-many\n--feedback--\nThink about a scenario where an entity has a relationship with other entities of the same type Self-referencing\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5640,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8e0cab41019dc8a728a.md",
      "source_type": "git_repo"
    },
    "token_count": 246,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "491aebb5a1c8edbfb112686869cd49aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8a88c9e9419af7cd8c3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 687ea8a88c9e9419af7cd8c3\ntitle: How Do You Insert and View Data in a Table challengeType: 19\ndashedName: how-do-you-insert-and-view-data-in-a-table\n--description--\nLet's see some of the fundamental commands that you can use to insert and view data in SQL First of all, to view data, you need to insert it So we'll start with insertions The examples that we will cover in this lecture will be based on this table of dog records:\nsql\nCREATE TABLE dogs(\nid SERIAL,\nname VARCHAR(100),\nage INTEGER\n);\nThe table will store the names and ages of various dogs If we assume that we are working with PostgreSQL, we can use the SERIAL data type for the id Since id was created using SERIAL, its value will be an INTEGER, starting from 1, and incremented automatically when a new record is inserted So you will not need to pass a value for it when you insert a record Let's start by inserting records to our dogs table with the INSERT INTO statement There are many ways to do this The first one would be inserting a single row and specifying the columns of the values that will be inserted You write INSERT INTO, followed by the name of the table (in this case, dogs), then the columns within parentheses, then VALUES, and their corresponding values within parentheses This is an example, we're inserting a dog record with the name of 'Gino', whose age is 3, remember that the id will be assigned automatically:\nsql\nINSERT INTO dogs (name, age)\nVALUES ('Gino', 3);\nThis is usually the safest option because you specify the columns explicitly, so the values will be assigned to those columns in order Notice that 'Gino' needs to be in single quotes because it is a VARCHAR type Another alternative is to insert the record without specifying the columns, like this:\nsql\nINSERT INTO dogs\nVALUES ('Gino', 3);\nThis is valid too, but it's more prone to errors because the values are assigned to the columns based on their order You can also insert multiple records in the same SQL command by separating them with a comma Here, we are inserting two dog records, one for 'Gino' and another one for 'Nora'",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6533,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8a88c9e9419af7cd8c3.md",
      "source_type": "git_repo"
    },
    "token_count": 470,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "439a470626a8086b0a8accee435b3baf",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8a88c9e9419af7cd8c3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "VARCHAR type Another alternative is to insert the record without specifying the columns, like this: sql INSERT INTO dogs VALUES ('Gino', 3); This is valid too, but it's more prone to errors because the values are assigned to the columns based on their order You can also insert multiple records in the same SQL command by separating them with a comma Here, we are inserting two dog records, one for 'Gino' and another one for 'Nora'sql\nINSERT INTO dogs (name, age)\nVALUES\n('Gino', 3),\n('Nora', 2);\nAnd just like you can insert records, you can query information from the database In the context of databases, a query is a request for data In SQL, the SELECT statement is used for querying data from one or more tables You can customize the query to get the exact information that you need If you need to query all the information from the dogs table, you just need to write SELECT, followed by an asterisk (*), then FROM, and the name of the table, dogs:\nsql\nSELECT *\nFROM dogs;\nIn this command, the asterisk is a wildcard character that represents \"all columns \"\nYou will get all the data of all the records in the table:\nsql\nid | name | age\n----+------+-----\n1 | Gino |   3\n2 | Nora |   2\nTo query specific columns, you can write the names of those columns in the command, right after SELECT, separated by a comma In this example, we query the name and age columns of the dogs table:\nsql\nSELECT name, age\nFROM dogs;\nThe result will only include the name and age columns:\nsql\nname | age\n------+-----\nGino |   3\nNora |   2\nSometimes, you might need to query data based on a specific condition",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6533,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8a88c9e9419af7cd8c3.md",
      "source_type": "git_repo"
    },
    "token_count": 379,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "f9c81d29862387a5ab1f0bdd2b87792c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8a88c9e9419af7cd8c3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "2 To query specific columns, you can write the names of those columns in the command, right after SELECT, separated by a comma In this example, we query the name and age columns of the dogs table: sql SELECT name, age FROM dogs; The result will only include the name and age columns: sql name | age ------+----- Gino | 3 Nora | 2 Sometimes, you might need to query data based on a specific conditionFor example, to get all dogs who are less than 3 years old you can use the WHERE keyword and the less than (<) comparison operator:\nsql\nSELECT *\nFROM dogs\nWHERE age < 3;\nThe result will only include dogs whose age is less than 3:\nsql\nid | name | age\n----+------+-----\n2 | Nora |   2\nIf you are just trying to find the age of 'Gino', you can you can use the equals (=) comparison operator:\nsql\nSELECT age\nFROM dogs\nWHERE name = 'Gino';\nAnd here's the result:\n```sql\nage\n3\n```\nThese are common and simple ways to insert and view data in SQL, but there are many different options that you can choose from and some of them are more advanced You'll learn about them in coming lectures --questions--\n--text--\nWhat does the asterisk (*) represent in the SQL statement SELECT * FROM products; --answers--\nIt selects the last column from the products table --feedback--\nThink about what you would need to write explicitly if you didn't use the asterisk It indicates that there is an error in the SQL query --feedback--\nThink about what you would need to write explicitly if you didn't use the asterisk It selects all columns from the products table It selects all rows where a column contains the asterisk character --feedback--\nThink about what you would need to write explicitly if you didn't use the asterisk --video-solution--\n3\n--text--\nWhich SQL command is used to add a new record to a table named products --answers--\nSELECT name, price FROM products;\n--feedback--\nThink about the basic actions you perform on data Which SQL keyword corresponds to adding something new INSERT INTO products (name, price) VALUES ('New Product', 4 5);\nUPDATE products SET name = 'New Product' WHERE price = 4 5;\n--feedback--\nThink about the basic actions you perform on data Which SQL keyword corresponds to adding something new",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6533,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8a88c9e9419af7cd8c3.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "6d2b12706bb109cee1b2ad09bfd00b37",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8a88c9e9419af7cd8c3.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "is used to add a new record to a table named products --answers-- SELECT name, price FROM products; --feedback-- Think about the basic actions you perform on data Which SQL keyword corresponds to adding something new INSERT INTO products (name, price) VALUES ('New Product', 4 5); UPDATE products SET name = 'New Product' WHERE price = 4 5; --feedback-- Think about the basic actions you perform on data Which SQL keyword corresponds to adding something newCREATE TABLE products (name VARCHAR(100), price DECIMAL);\n--feedback--\nThink about the basic actions you perform on data Which SQL keyword corresponds to adding something new --video-solution--\n2\n--text--\nGiven the following query:\nbash\nSELECT price FROM products WHERE category = 'Laptops';\nWhat is the main purpose of the WHERE category = 'Laptops' clause --answers--\nTo specify that only the price column should be displayed --feedback--\nThink about the effect that this part of the query will have on which rows are included in the final result To sort the resulting list of products based on their category --feedback--\nThink about the effect that this part of the query will have on which rows are included in the final result To filter the rows, returning only the products whose category is 'Laptops' To update the category of all products to 'Laptops' --feedback--\nThink about the effect that this part of the query will have on which rows are included in the final result --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6533,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8a88c9e9419af7cd8c3.md",
      "source_type": "git_repo"
    },
    "token_count": 303,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "7ef066565c46a8dda605b05ed3be767c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8bb2b781b19c790d00e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 687ea8bb2b781b19c790d00e\ntitle: What Are Primary and Foreign Keys in SQL, and How Do They Work challengeType: 19\ndashedName: what-are-primary-and-foreign-keys-in-sql-and-how-do-they-work\n--description--\nIn SQL, primary keys and foreign keys are used to establish relationships between tables Let's start with primary keys A primary key is a column or set of columns that uniquely identifies each record (row) in a table This constraint ensures that no records in the table will have the same value for the primary key This is why a table can only have one primary key Values in the primary key column can't be NULL either, so they will always have a valid value In PostgreSQL, to make a column the primary key of your table, you just need to add PRIMARY KEY after the data type:\nsql\ncolumn_name data_type PRIMARY KEY\nThis is an example of a students table:\nsql\nCREATE TABLE students (\nstudent_id SERIAL PRIMARY KEY,\nname VARCHAR(100)\n);\nEach student will have its own student_id, and this ID will be the primary key of the table The SERIAL type is useful here because it ensures the student_id will always have a unique value A composite primary key is for when a table doesn't have a single unique column to identify the row In this case, you can use a combination of two or more columns as the primary key that, together, are unique To do this, denote which columns are the composite primary key when you create the table like this:\nsql\nCREATE TABLE table_name (\ncolumn1 data_type column_constraint,\ncolumn2 data_type column_constraint,\ncolumn3 data_type column_constraint, PRIMARY KEY (column1, column2)\n);\nImagine you have a table with student_id and course_id columns that tells you what students are enrolled in various classes Each student will be enrolled in several classes, and each class will have several students enrolled in it So neither column is unique - but you will never have the same student enrolled in the same class more than once So you can use the combination of the two columns as the primary key:\nsql\nCREATE TABLE course_enrollments (\nstudent_id INT,\ncourse_id INT, PRIMARY KEY (student_id, course_id),\n);\nPrimary keys are essential for ensuring data uniqueness and integrity, for optimizing data retrieval, and for establishing relationships with other tables in a relational database",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6006,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8bb2b781b19c790d00e.md",
      "source_type": "git_repo"
    },
    "token_count": 490,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "964725bd41f7bdd125c30ff32b88acd0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8bb2b781b19c790d00e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "it So neither column is unique - but you will never have the same student enrolled in the same class more than once So you can use the combination of the two columns as the primary key: sql CREATE TABLE course_enrollments ( student_id INT, course_id INT, PRIMARY KEY (student_id, course_id), ); Primary keys are essential for ensuring data uniqueness and integrity, for optimizing data retrieval, and for establishing relationships with other tables in a relational databaseThat takes us to the next type of key that we will cover in this lecture: foreign keys A foreign key is a column (or set of columns) in a table that references the primary key of another table A table can have multiple foreign keys In this example, we have two tables, customers, and orders:\n```sql\nCREATE TABLE customers (\ncustomer_id SERIAL PRIMARY KEY,\nfirst_name VARCHAR(100) NOT NULL, );\nCREATE TABLE orders (\norder_id SERIAL PRIMARY KEY,\ncustomer_id INTEGER, FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n```\nThe primary key of the customers table is customer_id and the primary key of the orders table is order_id But notice that there is also a customer_id column in the orders table Why are we storing customer information in the orders table We do this to create a relationship between the customers and orders tables Each order will store the ID of the customer who submitted it To create the relationship between the tables, we will make the customer_id column in the orders table a foreign key that references the customer_id column in the customers table:\nsql\nFOREIGN KEY (customer_id) REFERENCES customers(customer_id)\nValues in a foreign key column must either match the primary key values in the referenced table or be NULL (if the foreign key allows NULLs) Why is this helpful By making sure that these columns in both tables match exactly, foreign and primary keys prevent the creation of \"orphaned\" records, records that refer to a non-existent record in another table Primary and foreign keys are fundamental for relational databases They power the \"relational\" aspect of these databases, allowing you to model real-world data in an accurate way --questions--\n--text--\nWhat is the primary purpose of a primary key in a relational database table --answers--\nTo link the table to other tables --feedback--\nThink about what makes each row in a table distinct To uniquely identify each record in the table To define the data type of a column --feedback--\nThink about what makes each row in a table distinct",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6006,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8bb2b781b19c790d00e.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "49c6f6e2cae307eb900f76e18d23cfee",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8bb2b781b19c790d00e.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "aspect of these databases, allowing you to model real-world data in an accurate way --questions-- --text-- What is the primary purpose of a primary key in a relational database table --answers-- To link the table to other tables --feedback-- Think about what makes each row in a table distinct To uniquely identify each record in the table To define the data type of a column --feedback-- Think about what makes each row in a table distinctTo enforce relationships with foreign keys in the same table --feedback--\nThink about what makes each row in a table distinct --video-solution--\n2\n--text--\nA foreign key in one table typically references which key in another table --answers--\nAnother foreign key\n--feedback--\nThink about which key in the referenced table ensures the integrity and validity of the relationship created by the foreign key A unique index\n--feedback--\nThink about which key in the referenced table ensures the integrity and validity of the relationship created by the foreign key A primary key\nAny column with the same data type\n--feedback--\nThink about which key in the referenced table ensures the integrity and validity of the relationship created by the foreign key --video-solution--\n3\n--text--\nWhich of the following is a characteristic of a primary key --answers--\nIt can contain NULL values --feedback--\nRemember the fundamental requirement for identifying each row distinctly It can be repeated in the same table --feedback--\nRemember the fundamental requirement for identifying each row distinctly A table can have multiple primary keys --feedback--\nRemember the fundamental requirement for identifying each row distinctly It must contain unique values --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6006,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8bb2b781b19c790d00e.md",
      "source_type": "git_repo"
    },
    "token_count": 320,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "a637c3af7d85a4f63b18996184365d2d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb7d659f0089377a91eab.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bb7d659f0089377a91eab\ntitle: What Are Percentages in CSS, and When Should You Use Them challengeType: 19\ndashedName: what-are-percentages-in-css\n--description--\nPercentages in CSS are relative units that allow you to define sizes, dimensions, and other properties as a proportion of their parent element When you use a percentage value, you're essentially saying, \"Make this X% of its container \"\nFor example, if you set width: 50% on an element, it will occupy half the width of its parent container This makes percentages incredibly useful for creating responsive designs that adapt to different screen sizes Percentages are ideal for creating fluid layouts that adjust to various screen sizes For instance, setting a container to width: 80% ensures it takes up 80% of its parent's width, regardless of the device Using percentages for flexible images is another common practice By applying max-width: 100% to images, you allow them to scale down on smaller screens while maintaining their aspect ratio While less common, percentages can also be used for font sizes to create scalable typography For example, font-size: 120% would make the text 20% larger than its parent's font size Percentages can be particularly handy for vertical centering Here's an example of how you might use percentages with the transform property to center an element vertically:\n```css center-me {\nposition: absolute;\ntop: 50%;\ntransform: translateY(-50%);\nwidth: 300px;\nheight: 300px;\nbackground-color: red;\n}\n```\nThis code positions the element 50% from the top of its container, then uses transform to move it back up by half its own height, effectively centering it vertically You will learn more about how absolute positioning and the transform properties work in more detail in future lectures Remember, percentages are always relative to something For horizontal properties like width, they're relative to the parent's width For vertical properties like height, they're usually relative to the parent's height (if specified) However, be cautious when nesting elements with percentage-based dimensions, as this can lead to unexpected results Also, keep in mind that percentage-based heights can be tricky if the parent doesn't have a defined height In summary, percentages in CSS are powerful tools for creating flexible, responsive designs Use them when you want elements to scale proportionally to their containers or when you need layouts that adapt seamlessly to different screen sizes",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4451,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb7d659f0089377a91eab.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "b41068fadf274dff7a10d9b3a77f9371",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb7d659f0089377a91eab.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the parent's height (if specified) However, be cautious when nesting elements with percentage-based dimensions, as this can lead to unexpected results Also, keep in mind that percentage-based heights can be tricky if the parent doesn't have a defined height In summary, percentages in CSS are powerful tools for creating flexible, responsive designs Use them when you want elements to scale proportionally to their containers or when you need layouts that adapt seamlessly to different screen sizes--questions--\n--text--\nWhat happens if you set width: 50% on an element whose parent has a width of 300px --answers--\nThe element will be 150px wide The element will be 50px wide --feedback--\nRemember that percentages are relative to the parent element's dimensions The element will be 600px wide --feedback--\nRemember that percentages are relative to the parent element's dimensions The element will have no width --feedback--\nRemember that percentages are relative to the parent element's dimensions --video-solution--\n1\n--text--\nIn the following CSS rule, what does the percentage value affect css box {\nmargin-top: 10%;\n}\n--answers--\nThe width of the element --feedback--\nConsider which property is being set and what it typically relates to The height of the element --feedback--\nConsider which property is being set and what it typically relates to The top margin of the element The font size of the element --feedback--\nConsider which property is being set and what it typically relates to --video-solution--\n3\n--text--\nWhich of the following is NOT a good use case for percentage values in CSS --answers--\nSetting the width of a responsive container --feedback--\nThink about which property typically requires more precise control and is less dependent on its parent's dimensions Defining the border-radius of a circular element --feedback--\nThink about which property typically requires more precise control and is less dependent on its parent's dimensions Scaling an image within its container --feedback--\nThink about which property typically requires more precise control and is less dependent on its parent's dimensions Specifying the line-height of text --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4451,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb7d659f0089377a91eab.md",
      "source_type": "git_repo"
    },
    "token_count": 419,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "b293719700c39cf41d28e1ba82087c89",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672aa7194614b55c16b879a1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672aa7194614b55c16b879a1\ntitle: What Are Absolute Units in CSS, and When Should You Use Them challengeType: 19\ndashedName: what-are-absolute-units-in-css\n--description--\nAs you design your pages, you will work with different properties like widths, heights, padding, margins, and more When you define these properties, you will need to specify the length units of measurement you want to use There are two types of units you can use to define these properties: relative units and absolute units In this lecture, we will just focus on absolute units Absolute length units are of fixed length and are not relative to anything else Relative means that the length is relative to something else, like the size of the screen or the size of the parent element We will talk more about relative units in the next few lectures The most common absolute unit is the pixel (px) Pixels are a fixed-size unit of measurement in CSS, providing precise control over dimensions This means that 1px is always equal to 1/96th of an inch It is important to note that while 1px is standardized as 1/96th of an inch for the purposes of CSS layout, the actual physical size of a pixel may differ depending on the display Let's take a look at an example of using pixels to set the width and height for a box:\ncss box {\nwidth: 100px;\nheight: 100px;\nbackground-color: red;\n}\nIn this example, we have a red box with a width and height set to 100px The dimensions for this box will stay the same regardless of changes pertaining to the screen size So, if you are on a device with a small screen, the box will still be 100px wide If you are on a large desktop screen, the box will still be 100px wide So, when should you use absolute units like pixels Well, it depends on the situation But generally you will use pixels where you need precise control over element dimensions, spacing, and layout Sometimes you might use pixels for margins, padding, and borders Here is an example of using pixels to set the margin for a box:\ncss box {\nwidth: 100px;\nheight: 100px;\nbackground-color: red;\nmargin: 10px;\n}\nRemember that margin is the space outside of the box",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4291,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672aa7194614b55c16b879a1.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "4ed9e08144dda7429b3430380fd4a441",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672aa7194614b55c16b879a1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "should you use absolute units like pixels Well, it depends on the situation But generally you will use pixels where you need precise control over element dimensions, spacing, and layout Sometimes you might use pixels for margins, padding, and borders Here is an example of using pixels to set the margin for a box: css box { width: 100px; height: 100px; background-color: red; margin: 10px; } Remember that margin is the space outside of the boxSo, in this example, the box will have a margin of 10px on all sides Other types of absolute units include the following:\nThe in (inches) unit, which is equal to 96px\nThe cm (centimeters) unit, which is equal to 25 2/64 of an inch\nThe mm (millimeters) unit, which is equal to 1/10th of a centimeter\nThe q (quarter-millimeters) unit, which is equal to 1/40th of a centimeter\nThe pc (picas) unit, which is equal to 1/6th of an inch\nThe pt (points) unit, which is equal to 1/72th of an inch\nMost of these units will be used for print and not for screens While the most common unit you will use is pixels, it is important to know that the other absolute units exist --questions--\n--text--\nWhat is a pixel --answers--\nAn absolute fixed-size unit of measurement in CSS, providing precise control over dimensions A relative unit of measurement in CSS --feedback--\nThink about fixed size here A unit of measurement that is relative to the size of the screen --feedback--\nThink about fixed size here A unit of measurement that is relative to the size of the parent element --feedback--\nThink about fixed size here --video-solution--\n1\n--text--\nWhat are the two types of units you can use to define properties in CSS --answers--\nmargins and padding --feedback--\nReview the beginning of this lecture for the answer cm and mm --feedback--\nReview the beginning of this lecture for the answer absolute and relative units picas and points --feedback--\nReview the beginning of this lecture for the answer --video-solution--\n3\n--text--\nWhich of the following is NOT an absolute unit of measurement in CSS --answers--\npt\n--feedback--\nReview the list of absolute units in the end of the lecture",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4291,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672aa7194614b55c16b879a1.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "8266e5930289fcd58cb4533c61b6bacb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672aa7194614b55c16b879a1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "CSS --answers-- margins and padding --feedback-- Review the beginning of this lecture for the answer cm and mm --feedback-- Review the beginning of this lecture for the answer absolute and relative units picas and points --feedback-- Review the beginning of this lecture for the answer --video-solution-- 3 --text-- Which of the following is NOT an absolute unit of measurement in CSS --answers-- pt --feedback-- Review the list of absolute units in the end of the lecturerem\nin\n--feedback--\nReview the list of absolute units in the end of the lecture px\n--feedback--\nReview the list of absolute units in the end of the lecture --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4291,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672aa7194614b55c16b879a1.md",
      "source_type": "git_repo"
    },
    "token_count": 138,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "1540ab0a319a230d12f813c4b530dd97",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb7f08b58df93ed2a8768.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bb7f08b58df93ed2a8768\ntitle: What Are ems and rems in CSS, and When Should You Use Them challengeType: 19\ndashedName: what-are-ems-and-rems-in-css\n--description--\nIn the previous lecture, we learned about absolute length units like pixels While absolute units can be helpful in certain situations, there will be times when you want to use relative units In this lecture, we will learn about two relative units: ems and rems em units are relative to the font size of the element If you are using ems for the font-size property, the size of the text will be relative to the font size of the parent element To better understand how this works, let's take a look at an example:\n```html\nI am a paragraph element\n```\nFor the HTML, we have a paragraph and div element The paragraph element has a class of para, and the div element has a class of blue-box Here is the accompanying CSS:\n```css para {\nfont-size: 20px;\nmargin-bottom: 1 5em;\nborder: 2px solid red;\n} blue-box {\nbackground-color: blue;\ncolor: white;\npadding: 10px;\n}\n```\nFor the para class, we set the font-size to 20px and the margin-bottom to 1 5em This means that the margin will be 1 5 times the font size of the paragraph element 1 5em results in 30 pixels of margin at the bottom of the paragraph We have also set a border of 2px solid red so you can see the margins better For the blue-box class, we set the background color to blue, the text color to white, and the padding to 10px on all four sides From the example, there'll be a clear space between the bottom of the paragraph element and the blue box So what happens if we remove the font-size property from the para class Well, the bottom margin will be relative to the font size of the parent element In this case, the parent element is the body element, which has a default font size of 16px Good use cases for ems would be when you are working with modular components like buttons or cards By using em units, you can ensure that all aspects of the component (such as padding, margin, and borders) scale proportionally with the font size, keeping consistent proportions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb7f08b58df93ed2a8768.md",
      "source_type": "git_repo"
    },
    "token_count": 501,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "f4ae44fe709ba222560ba0a2ce6f421e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb7f08b58df93ed2a8768.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "margin will be relative to the font size of the parent element In this case, the parent element is the body element, which has a default font size of 16px Good use cases for ems would be when you are working with modular components like buttons or cards By using em units, you can ensure that all aspects of the component (such as padding, margin, and borders) scale proportionally with the font size, keeping consistent proportionsSo, up until this point, we have been setting the font size for an element using pixels But that does present some challenges for users Inside your browser settings, you can control the default font size For those with visual impairments, they may increase the font size to make it easier to read But if you are setting pixels for the font sizes in your web designs, the text will not scale proportionally with the rest of the content One way to address this issue is to use rem units for typography A rem unit is relative to the font size of the root element, which is the html element By default, the font size of the html element is 16px If the user increases the font size in their browser settings, the font size of the html element will increase, and all rem units will scale proportionally Here is an example of using the rem unit for the font size instead of pixels:\ncss para {\nfont-size: 1 2rem;\nmargin-bottom: 1 5em;\nborder: 2px solid red;\n}\nBy setting the font size to 1 2rem, the font size of the paragraph element will be 1 2 times the font size of the root element If the user hasn't changed the default font size, the font size of the paragraph element will be 19 2px because it is 1 2 times 16px So when should you use rem units rem units are preferred over pixels for typography because they scale proportionally with the user's browser settings This makes your content more accessible to users with visual impairments rem units can also help maintain consistent spacing and layout across different elements --questions--\n--text--\nWhat is an em unit relative to --answers--\nThe font size of the figure element --feedback--\nReview the beginning of this lecture for the answer The font-size of the element or the parent element The font-size of the root element --feedback--\nReview the beginning of this lecture for the answer The font-size of the img element --feedback--\nReview the beginning of this lecture for the answer",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb7f08b58df93ed2a8768.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3678c5dc6beb970a4adde58c4ff91680",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb7f08b58df93ed2a8768.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "maintain consistent spacing and layout across different elements --questions-- --text-- What is an em unit relative to --answers-- The font size of the figure element --feedback-- Review the beginning of this lecture for the answer The font-size of the element or the parent element The font-size of the root element --feedback-- Review the beginning of this lecture for the answer The font-size of the img element --feedback-- Review the beginning of this lecture for the answer--video-solution--\n2\n--text--\nWhy are rem units preferred over pixels for typography --answers--\nPixels should always be used for typography --feedback--\nThink about user settings and accessibility They make your designs more colorful --feedback--\nThink about user settings and accessibility They scale proportionally with the user's browser settings They increase website performance --feedback--\nThink about user settings and accessibility --video-solution--\n3\n--text--\nWhat are rem units relative to --answers--\nThe fontsize of the figure element --feedback--\nReview the ending of this lecture for the answer The font-size of the element or the parent element --feedback--\nReview the ending of this lecture for the answer The fontsize of the img element --feedback--\nReview the ending of this lecture for the answer The font-size of the root element\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5350,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb7f08b58df93ed2a8768.md",
      "source_type": "git_repo"
    },
    "token_count": 259,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d8947ba763144ac85a86a0c2a9bb02b9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb83c3a9906945536cff2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bb83c3a9906945536cff2\ntitle: What Are vh and vw Units, and When Should You Use Them challengeType: 19\ndashedName: what-are-vh-and-vw-units\n--description--\nIn CSS, vh and vw are viewport-relative units that allow you to size elements based on the dimensions of the browser window These units are particularly useful for creating responsive designs that adapt to different screen sizes vh stands for \"viewport height,\" and 1vh is equal to 1% of the viewport's height Similarly, vw stands for \"viewport width,\" and 1vw is equal to 1% of the viewport's width This means that if you set an element's height to 100vh, it will occupy the full height of the viewport, regardless of the actual pixel dimensions of the device These units are especially handy when you want to create full-screen layouts or elements that maintain a specific proportion of the screen For example, you might want to use them to create a hero section that always fills the entire screen:\ncss hero {\nheight: 100vh;\nwidth: 100vw;\n}\nThis CSS ensures that the hero section will always be exactly the size of the viewport, regardless of the device's screen size vh and vw units can also be used for typography to create responsive text sizes For instance:\ncss\nh1 {\nfont-size: 5vw;\n}\nThis will set the font size of h1 elements to 5% of the viewport width, allowing the text to scale smoothly with the browser window size One of the advantages of vh and vw units is that they respond to changes in the viewport size in real-time This means that if a user resizes their browser window, elements sized with these units will adjust accordingly without needing to reload the page However, it's important to use these units judiciously Setting font sizes solely with vw units, for example, can lead to text becoming too small on narrow screens or too large on wide screens Another consideration is that on mobile devices, the viewport height can change when the browser's address bar appears or disappears, which can cause unexpected layout shifts if you're using vh units extensively In summary, vh and vw units are powerful tools for creating responsive layouts and elements that adapt to the viewport size They're particularly useful for full-screen sections, maintaining aspect ratios, and creating smoothly scaling designs",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb83c3a9906945536cff2.md",
      "source_type": "git_repo"
    },
    "token_count": 482,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fab58dfc17937d17397f6b06b6e28555",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb83c3a9906945536cff2.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "on narrow screens or too large on wide screens Another consideration is that on mobile devices, the viewport height can change when the browser's address bar appears or disappears, which can cause unexpected layout shifts if you're using vh units extensively In summary, vh and vw units are powerful tools for creating responsive layouts and elements that adapt to the viewport size They're particularly useful for full-screen sections, maintaining aspect ratios, and creating smoothly scaling designsHowever, they should be used thoughtfully and often in combination with other CSS techniques to ensure the best user experience across all devices --questions--\n--text--\nWhat does 50vh represent in CSS --answers--\n50 pixels --feedback--\nThink about what vh stands for and how it relates to the viewport Half the height of the viewport 50% of the element's parent height --feedback--\nThink about what vh stands for and how it relates to the viewport Half the width of the viewport --feedback--\nThink about what vh stands for and how it relates to the viewport --video-solution--\n2\n--text--\nWhich of the following is a valid use case for vw units --answers--\nSetting a fixed width for a sidebar --feedback--\nConsider which scenario would benefit most from an element's size being directly tied to the viewport width Defining the maximum width of an image --feedback--\nConsider which scenario would benefit most from an element's size being directly tied to the viewport width Creating a square element that's always 20% of the viewport width Setting the line-height of paragraph text --feedback--\nConsider which scenario would benefit most from an element's size being directly tied to the viewport width --video-solution--\n3\n--text--\nWhat potential issue might arise from using vh units for critical layout elements on mobile devices --answers--\nThey're not supported on older mobile browsers --feedback--\nThink about how the visible area of a mobile browser can change during user interaction They can cause layout shifts when the mobile browser's address bar appears or disappears They make the website load slower on mobile devices --feedback--\nThink about how the visible area of a mobile browser can change during user interaction They don't work with touch screens --feedback--\nThink about how the visible area of a mobile browser can change during user interaction --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4477,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb83c3a9906945536cff2.md",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "98588a797ca9a68ed3faf0b676981813",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-specialized-semantic-elements\\6729960ed6e2ca3825940e97.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6729960ed6e2ca3825940e97\ntitle: How Do You Represent Computer Code in HTML challengeType: 19\ndashedName: how-do-you-represent-computer-code-in-html\n--description--\nThe inline code element is used to represent short snippets of code inside text Common use cases for the code element would be for technical articles and documentation pages Here is an example of using the code element to show a CSS code snippet:\n```html\nTo set the text color to blue in CSS, use the following code:\ncolor: blue;\n```\nIn this example, the CSS color property is used to set the text color to blue By wrapping this code snippet inside <code> tags, it communicates to the browser that the text is a piece of inline code The browser will apply default styles for content inside of the code element The default styling is a monospaced font The code element is meant to represent a single line of code If you want to represent multiple lines of code, you will need to place a code element inside a preformatted text element The preformatted text element is used to represent preformatted text Here is an example of using the preformatted text element to show a CSS declaration:\n```html\nbody {\ncolor: red;\n}\n```\nWhen using the pre element, you will need to be mindful of spacing because it will display exactly as written inside the HTML document In the browser, you will see that the code is indented several spaces to the right If you were to change the indentation in the code example, then you will see a difference in indentation on the screen When it comes to including code examples inside your HTML document, you should use the code element for short inline examples If you need to display longer code snippets, then you will need to use the pre and code elements --questions--\n--text--\nWhat is the code element used for --answers--\nIt's used to create hyperlinks to other web pages --feedback--\nThe name of this element implies what its use case is for It's used to format text with bold or italic styles --feedback--\nThe name of this element implies what its use case is for It's used to represent short snippets of code inside text It's used to embed images and multimedia files --feedback--\nThe name of this element implies what its use case is for --video-solution--\n3\n--text--\nWhat is the preformatted text (pre) element used for",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-specialized-semantic-elements\\6729960ed6e2ca3825940e97.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c00f13899bb68ec28970cc98cf911be9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-specialized-semantic-elements\\6729960ed6e2ca3825940e97.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of this element implies what its use case is for It's used to format text with bold or italic styles --feedback-- The name of this element implies what its use case is for It's used to represent short snippets of code inside text It's used to embed images and multimedia files --feedback-- The name of this element implies what its use case is for --video-solution-- 3 --text-- What is the preformatted text (pre) element used for--answers--\nIt's used to apply CSS styles to text --feedback--\nThe name of this element implies what it is used for It's used to create tables and structured layouts --feedback--\nThe name of this element implies what it is used for It's used to represent preformatted text It's used to insert hyperlinks and email addresses --feedback--\nThe name of this element implies what it is used for --video-solution--\n3\n--text--\nWhat is the default styling for the code element --answers--\nMonospaced font Italic text with a colored background --feedback--\nReview the beginning of the lecture to see the examples rendered to the page Bold text with a larger font size --feedback--\nReview the beginning of the lecture to see the examples rendered to the page Underlined text with a fixed-width font --feedback--\nReview the beginning of the lecture to see the examples rendered to the page --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3540,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-specialized-semantic-elements\\6729960ed6e2ca3825940e97.md",
      "source_type": "git_repo"
    },
    "token_count": 279,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "0805b0f29b0398c1ae63c6a388b0a66e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-specialized-semantic-elements\\672995ffdfd2f337f5f215f8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672995ffdfd2f337f5f215f8\ntitle: How Do You Display Mathematical Equations and Chemical Formulas in HTML challengeType: 19\ndashedName: how-do-you-display-mathematical-equations-and-chemical-formulas-in-html\n--description--\nThe superscript element is used to display a piece of text as a superscript A superscript is a symbol or letter printed above the normal line of text Here is an example using the superscript element to illustrate exponents:\n```html\n22 (2 squared) is 4 ```\nIn this example, the number 2 is wrapped in sup tags to represent the superscript inside the paragraph In the browser, you would see that the second number 2 is smaller and slightly higher than the first number 2 Common use cases for the superscript element would include exponents, superior lettering, and ordinal numbers Here is an example using the superscript element for superior lettering:\n```html\nMonseigneur is often written as Mgr ```\nSuperior lettering refers to letters written in superscript, usually to indicate abbreviations The letters g and r are wrapped inside superscript tags to illustrate the abbreviation in this example It is important to note that the superscript element should only be used for typographical reasons If you want style a piece of text with a raised baseline, then you should use CSS instead of the superscript element To represent chemical equations inside HTML, you would use the subscript element This element uses a subscript which displays a lowered baseline using smaller text Here is an example of using the subscript element to show the chemical representation for carbon dioxide ```html\nCO2\n```\nThe number two is wrapped inside sub tags to illustrate that the character should be a subscript Common use cases for the subscript element include chemical formulas, footnotes, and variable subscripts --questions--\n--text--\nWhat is the primary use of the superscript element in HTML --answers--\nTo display text in a different color --feedback--\nReview the beginning of the lecture where the superscript element is discussed To show text in a smaller font size --feedback--\nReview the beginning of the lecture where the superscript element is discussed To display text as a superscript above the normal line of text To underline text --feedback--\nReview the beginning of the lecture where the superscript element is discussed",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3730,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-specialized-semantic-elements\\672995ffdfd2f337f5f215f8.md",
      "source_type": "git_repo"
    },
    "token_count": 476,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "6c1f405f03f6e37e3945ff73772a2562",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-specialized-semantic-elements\\672995ffdfd2f337f5f215f8.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of the superscript element in HTML --answers-- To display text in a different color --feedback-- Review the beginning of the lecture where the superscript element is discussed To show text in a smaller font size --feedback-- Review the beginning of the lecture where the superscript element is discussed To display text as a superscript above the normal line of text To underline text --feedback-- Review the beginning of the lecture where the superscript element is discussed--video-solution--\n3\n--text--\nWhich of the following is an example of using the superscript element correctly --answers--\n<p>2<sub>2</sub> (2 squared) is 4 </p>\n--feedback--\nThe example should represent an exponent with a number displayed above the normal text line <p>2<sup>2</sup> (2 squared) is 4 </p>\n<p>2<sul>2</sul> (2 squared) is 4 </p>\n--feedback--\nThe example should represent an exponent with a number displayed above the normal text line <p>2<sutp>2</sutp> (2 subscript) is 4 </p>\n--feedback--\nThe example should represent an exponent with a number displayed above the normal text line --video-solution--\n2\n--text--\nWhat should be used instead of the superscript element if you want to style text with a raised baseline for typographical reasons --answers--\nThe sub element --feedback--\nThis is a styling method rather than a specific HTML element CSS\nThe strong element --feedback--\nThis is a styling method rather than a specific HTML element The em element --feedback--\nThis is a styling method rather than a specific HTML element --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3730,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-specialized-semantic-elements\\672995ffdfd2f337f5f215f8.md",
      "source_type": "git_repo"
    },
    "token_count": 351,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "8ccf309f168c3d8278b9df8d7f7214a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb851b068e3954a05b9b1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672bb851b068e3954a05b9b1\ntitle: What Is the calc() Function, and How Does It Work challengeType: 19\ndashedName: what-is-the-calc-function\n--description--\nWith the calc() function, you can perform calculations directly within your stylesheets to determine property values dynamically This means that you can create flexible and responsive user interfaces by calculating dimensions based on the viewport size or other elements calc() is a CSS function You'll learn more about functions when you start learning about JavaScript, but in this lecture, you're going to learn the basics that you need to know to understand how calc() works A function is a block of code that performs a specific task Some functions are already defined in CSS, so you can use them directly and pass any necessary values to them to customize how their tasks will be performed In the world of programming, when we run the task performed by a function, we say that we \"call\" the function The values that we pass into the function are known as arguments Like you can see in the code below, to call a function, you write its name followed by the arguments within parentheses, separated by commas There shouldn't be a space between the name of the function and the opening parenthesis:\ncss\nfunction(argument1, argument2, argument3)\nA function may only need one value to know what to do In that case, it will only take one argument That's what happens with the calc() function It takes one argument because it needs to know what to calculate For this, you pass something called an expression as an argument An expression is a combination of values and operators that produces a result This is how you can call the calc() function You write the name calc, followed by parentheses, and within the parentheses, you write the expression:\ncss\ncalc(expression)\nThe expression is evaluated to calculate the final result \"Evaluated\" just means that the values and operators are converted into a single value behind the scenes The result is assigned to the CSS property where the calculation is being made You can perform calculations on values that represent length, angle, time, percentages, numbers, and colors You can also combine different units like pixels, percentages, and ems With numbers, all the values in the expression, also called the operands, must have their corresponding units, like px, em, and percentage (%) Depending on the operator, different operands may have different units",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7863,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb851b068e3954a05b9b1.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "45be30ec3fdeb797cd15a927294c8453",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb851b068e3954a05b9b1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "behind the scenes The result is assigned to the CSS property where the calculation is being made You can perform calculations on values that represent length, angle, time, percentages, numbers, and colors You can also combine different units like pixels, percentages, and ems With numbers, all the values in the expression, also called the operands, must have their corresponding units, like px, em, and percentage (%) Depending on the operator, different operands may have different unitsYou can use the addition (+), subtraction (-), multiplication (*), and division (/) operators in the expression If there are multiple operands and operators, calc() will follow the standard operator precedence rule You can also add parentheses to establish the order of the operations if needed In the example below, you can see a div with the text Hello, World :\n```html\nHello, World ```\nUsing the CSS type selector for selecting the div, you can style it with white text and a dark blue background:\ncss\ndiv {\ncolor: white;\nbackground-color: #1b1b32;\nwidth: calc(50% - 20px);\n}\nWhat's new here is that the width is calculated dynamically Notice how we are calling the calc() function and passing an expression as an argument The expression has two operands with different units and one operator, the subtraction operator Percentage is a relative unit The value (50%) will be determined by the width of the parent container Then, 20px is subtracted from the value The result of this expression will determine the width of the div The width of the div is approximately half the total width of its container, and if you resize the parent container, the width will be recalculated automatically That's the key advantage of using calc() You can determine the value of a CSS property dynamically based on different aspects of the application or viewport The expression can also contain CSS functions and variables if you need to use them in your calculations You'll learn more about CSS variables in the next lectures Great Now that you know about the basics of the calc() function, let's cover some of its best practices First, you must surround the addition (+) and subtraction (-) operators with whitespace For example, the expression below would not be a valid expression because the subtraction operator is immediately before the second operand css\ncalc(100% -30px)\nThe subtraction (-) operator must be surrounded by whitespace, like this Adding the whitespace will create a valid expression",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7863,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb851b068e3954a05b9b1.md",
      "source_type": "git_repo"
    },
    "token_count": 484,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "5652e5b3ea755d4e69e51d7e84ecbf86",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb851b068e3954a05b9b1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "lectures Great Now that you know about the basics of the calc() function, let's cover some of its best practices First, you must surround the addition (+) and subtraction (-) operators with whitespace For example, the expression below would not be a valid expression because the subtraction operator is immediately before the second operand css calc(100% -30px) The subtraction (-) operator must be surrounded by whitespace, like this Adding the whitespace will create a valid expressioncss\ncalc(100% - 30px)\nThis is not necessary for the multiplication and division operators but it's highly recommended You can also nest calc() function calls if you need to perform calculations and use those results in other calculations Also, if you use the value zero to represent length in the expression that you pass into the calc() function, you must include the units For example, this expression would not be valid:\ncss\ncalc(100% - 0)\nYou would need to add the units, like px css\ncalc(100% - 0px)\nYou should also know that currently, if you use the multiplication or division operators, one of the operands has to be unitless For the division operator, specifically the right operand has to be unitless This would not be a valid expression because both operands have units (pixels) One of the operands, either 5 or 50, must be unitless:\ncss\ncalc(5px * 50px)\nYou would need to omit the units in one of them Both of these alternatives would be valid:\ncss\ncalc(5 * 50px)\ncalc(5px * 50)\nAnd this is an example with the division operator This would not be a valid expression since they both have units:\ncss\ncalc(50% / 5%)\nYou should remove the unit from the right operand when you have the division operator:\ncss\ncalc(50% / 5)\nThe calc() function can be very helpful for you as a web developer With this function, you can set property values dynamically to create flexible and responsive designs --questions--\n--text--\nWhich of the following operations can be performed using the calc() function in CSS --answers--\nAddition and subtraction only --feedback--\nConsider what the calc() function can be used for and its limitations Multiplication and division only --feedback--\nConsider what the calc() function can be used for and its limitations Addition, subtraction, multiplication, and division Addition only",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7863,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb851b068e3954a05b9b1.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "2af0e255e44c136b56d4183f44a53394",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb851b068e3954a05b9b1.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "a web developer With this function, you can set property values dynamically to create flexible and responsive designs --questions-- --text-- Which of the following operations can be performed using the calc() function in CSS --answers-- Addition and subtraction only --feedback-- Consider what the calc() function can be used for and its limitations Multiplication and division only --feedback-- Consider what the calc() function can be used for and its limitations Addition, subtraction, multiplication, and division Addition only--feedback--\nConsider what the calc() function can be used for and its limitations --video-solution--\n3\n--text--\nWhat types of values can be used as operands within the expression passed to the calc() function --answers--\nOnly pixels --feedback--\nThink about the versatility of the calc() function Only percentages --feedback--\nThink about the versatility of the calc() function Pixels, percentages, em's, and other supported units Only integers --feedback--\nThink about the versatility of the calc() function --video-solution--\n3\n--text--\nHow can you use the calc() function to create a responsive design --answers--\nBy setting fixed widths for the elements --feedback--\nThink about the purpose of the calc() function in relation to responsive design By using media queries exclusively --feedback--\nThink about the purpose of the calc() function in relation to responsive design By calculating element dimensions based on the viewport size or other elements By using HTML to dynamically adjust element sizes --feedback--\nThink about the purpose of the calc() function in relation to responsive design --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 7863,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relative-and-absolute-units\\672bb851b068e3954a05b9b1.md",
      "source_type": "git_repo"
    },
    "token_count": 309,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "5be34a6a700db69f37dedf5e5eb312e2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-specialized-semantic-elements\\6729963b1ab11638753cf082.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6729963b1ab11638753cf082\ntitle: What Are the U, S, and Ruby Elements Used For, and How Do They Work challengeType: 19\ndashedName: what-are-the-u-s-and-ruby-elements-used-for\n--description--\nThe unarticulated annotation element, or u element for short, is used to represent inline text that has non-textual annotation applied Here is an example of using the u element to highlight various spelling errors:\n```html\nYou can use the unarticulated annotation element to highlight\ninccccort spling issses ```\nIn the example, the words incorrect, spelling, and issues are misspelled The default styling for the u element is a black underline underneath the text In HTML4, the u element was used for styling purposes But in HTML5, the u element should only be used to indicate that text has non-textual annotation applied If you want to style a piece of text with an underline, you should use CSS instead of HTML The strikethrough element, or s element for short, should be used to represent when text is no longer accurate or relevant Here is an example of using the s element to show the cancellation of an activity:\n```html\nTomorrow's hike will be meeting at noon Due to unforeseen weather conditions, the hike has been canceled ```\nIn this example, the first sentence is crossed out because the hike was canceled due to weather reasons The s element should never be used to just to show changes to a document More appropriate elements in that case would be the deleted text element and the inserted text element The ruby element represents small text shown above or below the main text It is typically used to show the pronunciation of East Asian characters Here is the ruby element example from the MDN web docs page:\nhtml\n<ruby> 明日 <rp>(</rp><rt>Ashita</rt><rp>)</rp> </ruby>\nThe rp element, or ruby fallback parenthesis element, is used as a fallback for browsers lacking support for displaying ruby annotations The rt element, or ruby text element, is used to indicate text for the ruby annotation This text is usually used for pronunciation, or translation details in East Asian typography While the ruby element can be used for other types of annotations, the most common use case is for East Asian typography --questions--\n--text--\nWhat is the u element used for",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4129,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-specialized-semantic-elements\\6729963b1ab11638753cf082.md",
      "source_type": "git_repo"
    },
    "token_count": 488,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "c11ba8a4582d68359412edc4422ec335",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-specialized-semantic-elements\\6729963b1ab11638753cf082.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "parenthesis element, is used as a fallback for browsers lacking support for displaying ruby annotations The rt element, or ruby text element, is used to indicate text for the ruby annotation This text is usually used for pronunciation, or translation details in East Asian typography While the ruby element can be used for other types of annotations, the most common use case is for East Asian typography --questions-- --text-- What is the u element used for--answers--\nIt's used to display subscripts in chemical formulas --feedback--\nReview the beginning of the lecture to see the examples using the u element It's used to represent user input in HTML forms --feedback--\nReview the beginning of the lecture to see the examples using the u element It's used to represent inline text that has non-textual annotation applied It's used to italicize text in HTML --feedback--\nReview the beginning of the lecture to see the examples using the u element --video-solution--\n3\n--text--\nWhat is the s element used for --answers--\nIt's used to represent when text is no longer accurate or relevant It's used to create navigational aides on websites --feedback--\nThink about text that is no longer accurate It's used to represent copyright information on pages --feedback--\nThink about text that is no longer accurate It's used to represent captions for images --feedback--\nThink about text that is no longer accurate --video-solution--\n1\n--text--\nWhat is the ruby element typically used for --answers--\nIt's used to write ruby applications --feedback--\nThink about how this element can be used to represent certain cultural characters It's used to create list items on a page --feedback--\nThink about how this element can be used to represent certain cultural characters It's used to apply an underline for text --feedback--\nThink about how this element can be used to represent certain cultural characters It's used to show the pronunciation of East Asian characters --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4129,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-specialized-semantic-elements\\6729963b1ab11638753cf082.md",
      "source_type": "git_repo"
    },
    "token_count": 388,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "2c683c4c432b1b607f70fcf0f815b1ea",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8eba2a8b119f2ad9f8c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 687ea8eba2a8b119f2ad9f8c\ntitle: What Are the Different Ways to Join Tables challengeType: 19\ndashedName: what-are-the-different-ways-to-join-tables\n--description--\nEven though relational databases organize data into separate tables, SQL's JOIN operations allow you to combine related information from tables to query data There are five main types of JOIN operations:\nINNER JOIN\nFULL OUTER JOIN\nLEFT OUTER JOIN\nRIGHT OUTER JOIN\nSELF JOIN\nAnd CROSS JOIN\nLet's start with INNER JOIN An INNER JOIN filters the result to include only rows where the values in the joining columns that you specify are equal in both tables Basically, it gives you the intersection of the data To illustrate this, let's say that we have two tables The first is this products table with multiple products It includes their ID's, names, category, price, and origin sql\n| product_id | product_name     | category    | price (USD) | origin        |\n| ---------- | ---------------- | ----------- | ----------- | ------------- |\n| 1          | Ice Cream        | Food        | 2 50        | India         |\n| 2          | Pizza Margherita | Food        | 12 00       | Italy         |\n| 3          | Sushi            | Food        | 18 75       | Japan         |\n| 4          | T-Shirt          | Clothing    | 25 00       | USA           |\n| 5          | Jeans            | Clothing    | 60 00       | Argentina     |\n| 6          | Coffee           | Beverages   | 35 00       | France        |\n| 7          | Juice            | Beverages   | 5 00        | Colombia      |\nAnd second, we have a sales table, with the sale ID, product ID, quantity, and sale date",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8eba2a8b119f2ad9f8c.md",
      "source_type": "git_repo"
    },
    "token_count": 390,
    "chunk_index": 0,
    "total_chunks": 7
  },
  {
    "id": "d418007417dacba86e45b1120beeceeb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8eba2a8b119f2ad9f8c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "3 | Sushi | Food | 18 75 | Japan | | 4 | T-Shirt | Clothing | 25 00 | USA | | 5 | Jeans | Clothing | 60 00 | Argentina | | 6 | Coffee | Beverages | 35 00 | France | | 7 | Juice | Beverages | 5 00 | Colombia | And second, we have a sales table, with the sale ID, product ID, quantity, and sale datesql\n| sale_id | product_id | quantity | sale_date  |\n| ------- | ---------- | -------- | ---------- |\n| 101     | 1          | 2        | 2025-07-18 |\n| 102     | 2          | 3        | 2025-02-13 |\n| 103     | 6          | 10       | 2025-06-08 |\n| 104     | 5          | 8        | 2025-01-10 |\n| 105     | 2          | 1        | 2025-05-15 |\nWe can perform an INNER JOIN based on the product_id like this:\nsql\nSELECT *\nFROM products\nINNER JOIN sales\nON products product_id = sales product_id;\nThis will only get the rows that have the same product_id in both tables So if a product is not in the sales table or in products table, it will not be included This is the result:\nsql\nproduct_id | product_name     | category  | price | origin    | sale_id | product_id | quantity | sale_date\n---------- | ---------------- | --------- |-------|-----------|---------|------------|----------|------------\n1     | Ice Cream        | Food      |  2 50 | India     |     101 |          1 |        2 | 2025-07-18\n2     | Pizza Margherita | Food      | 12 00 | Italy     |     102 |          2 |        3 | 2025-02-13\n2     | Pizza Margherita | Food      | 12 00 | Italy     |     105 |          2 |        1 | 2025-05-15\n5     | Jeans            | Clothing  | 60",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8eba2a8b119f2ad9f8c.md",
      "source_type": "git_repo"
    },
    "token_count": 475,
    "chunk_index": 1,
    "total_chunks": 7
  },
  {
    "id": "62b113588d84e9de504ffac9553c33f9",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8eba2a8b119f2ad9f8c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "| product_id | quantity | sale_date ---------- | ---------------- | --------- |-------|-----------|---------|------------|----------|------------ 1 | Ice Cream | Food | 2 50 | India | 101 | 1 | 2 | 2025-07-18 2 | Pizza Margherita | Food | 12 00 | Italy | 102 | 2 | 3 | 2025-02-13 2 | Pizza Margherita | Food | 12 00 | Italy | 105 | 2 | 1 | 2025-05-15 5 | Jeans | Clothing | 6000 | Argentina |     104 |          5 |        8 | 2025-01-10\n6     | Coffee           | Beverages | 35 00 | France    |     103 |          6 |       10 | 2025-06-08\nWe only see the rows of the products that have been sold For example, 'Pizza Margherita' is in the sales table, with a product_id of 2, so we get that product in the result However, 'T-Shirts' with a product_id of 4 were not sold, so this product is not in the sales table They are not in both tables, so they are not included in the result Joining tables does exactly what it sounds like It joins two or more tables into one, which is why we see all the columns from both tables, including product_id twice A FULL OUTER JOIN returns all rows from both tables If a match is found in the specified columns, the data is combined and you get all columns for each matching record If there's no match in the specified columns, in either one of the tables, the missing columns are filled with NULL values Let's perform a FULL OUTER JOIN in our example, based on the product_id column This column will determine if there is a match or not sql\nSELECT *\nFROM products\nFULL OUTER JOIN sales\nON products product_id = sales product_id;\nThis is the result:\nsql\nproduct_id | product_name     | category  | price | origin    | sale_id | product_id | quantity | sale_date\n---------- | ---------------- | --------- |-------|-----------|---------|------------|----------|------------\n1 | Ice Cream        | Food      |  2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8eba2a8b119f2ad9f8c.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 2,
    "total_chunks": 7
  },
  {
    "id": "eb366bdb19cfefed7f2c66ffc448deb2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8eba2a8b119f2ad9f8c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Let's perform a FULL OUTER JOIN in our example, based on the product_id column This column will determine if there is a match or not sql SELECT * FROM products FULL OUTER JOIN sales ON products product_id = sales product_id; This is the result: sql product_id | product_name | category | price | origin | sale_id | product_id | quantity | sale_date ---------- | ---------------- | --------- |-------|-----------|---------|------------|----------|------------ 1 | Ice Cream | Food | 250 | India     |     101 |          1 |        2 | 2025-07-18\n2 | Pizza Margherita | Food      | 12 00 | Italy     |     102 |          2 |        3 | 2025-02-13\n3 | Sushi            | Food      | 18 75 | Japan     |         |            |          |\n4 | T-Shirt          | Clothing  | 25 00 | USA       |         |            |          |\n5 | Jeans            | Clothing  | 60 00 | Argentina |     104 |          5 |        8 | 2025-01-10\n6 | Coffee           | Beverages | 35 00 | France    |     103 |          6 |       10 | 2025-06-08\n7 | Juice            | Beverages |  5 00 | Colombia  |         |            |          |\n2 | Pizza Margherita | Food      | 12 00 | Italy     |     105 |          2 |        1 | 2025-05-15\nNotice how 'Pizza Margherita' has all the data, including columns from the sales table because there was a match But 'T-Shirt' has empty (NULL) columns because no match was found in the sales table (this product was not sold) A LEFT OUTER JOIN is used to get all the records from the left table and the matching information from the right table for each row of the left table If no match is found, the columns from the right table are filled in with NULL values Let's perform a LEFT OUTER JOIN in our example sql\nSELECT *\nFROM products\nLEFT JOIN sales\nON products product_id = sales",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8eba2a8b119f2ad9f8c.md",
      "source_type": "git_repo"
    },
    "token_count": 467,
    "chunk_index": 3,
    "total_chunks": 7
  },
  {
    "id": "22a79f5f8c4ff387e08550425da6ad12",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8eba2a8b119f2ad9f8c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "sales table (this product was not sold) A LEFT OUTER JOIN is used to get all the records from the left table and the matching information from the right table for each row of the left table If no match is found, the columns from the right table are filled in with NULL values Let's perform a LEFT OUTER JOIN in our example sql SELECT * FROM products LEFT JOIN sales ON products product_id = salesproduct_id;\nThis is the result:\nsql\nproduct_id | product_name     | category  | price | origin    | sale_id | product_id | quantity | sale_date\n---------- | ---------------- | --------- |-------|-----------|---------|------------|----------|------------\n1 | Ice Cream        | Food      |  2 50 | India     |     101 |          1 |        2 | 2025-07-18\n2 | Pizza Margherita | Food      | 12 00 | Italy     |     102 |          2 |        3 | 2025-02-13\n3 | Sushi            | Food      | 18 75 | Japan     |         |            |          |\n4 | T-Shirt          | Clothing  | 25 00 | USA       |         |            |          |\n5 | Jeans            | Clothing  | 60 00 | Argentina |     104 |          5 |        8 | 2025-01-10\n6 | Coffee           | Beverages | 35 00 | France    |     103 |          6 |       10 | 2025-06-08\n7 | Juice            | Beverages |  5 00 | Colombia  |         |            |          |\n2 | Pizza Margherita | Food      | 12 00 | Italy     |     105 |          2 |        1 | 2025-05-15\nIn this case, it's the same as the FULL OUTER JOIN because it includes all rows from the first table, products A RIGHT OUTER JOIN is very similar, but now we get all the records from the right table and the matching information from the left table for each row of the right table If there's no match, the columns from the left table are filled in with NULL values Let's perform a RIGHT OUTER JOIN in our example sql\nSELECT *\nFROM products\nRIGHT JOIN sales\nON products product_id = sales",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8eba2a8b119f2ad9f8c.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 4,
    "total_chunks": 7
  },
  {
    "id": "4725605f17556fb84198bda235640ee8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8eba2a8b119f2ad9f8c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "from the first table, products A RIGHT OUTER JOIN is very similar, but now we get all the records from the right table and the matching information from the left table for each row of the right table If there's no match, the columns from the left table are filled in with NULL values Let's perform a RIGHT OUTER JOIN in our example sql SELECT * FROM products RIGHT JOIN sales ON products product_id = salesproduct_id;\nHere is the result:\nsql\nproduct_id | product_name     | category  | price | origin    | sale_id | product_id | quantity | sale_date\n---------- | ---------------- | --------- |-------|-----------|---------|------------|----------|------------\n1 | Ice Cream        | Food      |  2 50 | India     |     101 |          1 |        2 | 2025-07-18\n2 | Pizza Margherita | Food      | 12 00 | Italy     |     102 |          2 |        3 | 2025-02-13\n6 | Coffee           | Beverages | 35 00 | France    |     103 |          6 |       10 | 2025-06-08\n5 | Jeans            | Clothing  | 60 00 | Argentina |     104 |          5 |        8 | 2025-01-10\n2 | Pizza Margherita | Food      | 12 00 | Italy     |     105 |          2 |        1 | 2025-05-15\nYou'll notice that it has fewer rows This is because it takes all the records from the right table (sales in this case), and this table has fewer rows than the products table If it finds a match in the products table, it fills those columns with the data But if there's no match, the columns are filled with NULL In this case, every product that has been sold has a record in the products table, so the data is complete These are the most commonly-used JOIN operations, but there are two additional ones that you should know about A SELF JOIN allows you to join the table with itself You can think of it as joining two copies of the same table This is helpful for comparing different rows within the same table A CROSS JOIN, also known as a Cartesian Join, joins every row from the first table with every row of the second table Therefore, it generates all possible row combinations",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8eba2a8b119f2ad9f8c.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 5,
    "total_chunks": 7
  },
  {
    "id": "af99344d6a834592b64e31ca3a398de0",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8eba2a8b119f2ad9f8c.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "but there are two additional ones that you should know about A SELF JOIN allows you to join the table with itself You can think of it as joining two copies of the same table This is helpful for comparing different rows within the same table A CROSS JOIN, also known as a Cartesian Join, joins every row from the first table with every row of the second table Therefore, it generates all possible row combinationsThis operation doesn't need any conditions to join the tables These JOIN operations are fundamental for working with SQL By choosing the right one, you can query the data you need as efficiently as possible --questions--\n--text--\nWhich SQL JOIN operation returns only the rows where there is a match in both tables based on the join condition --answers--\nLEFT JOIN\n--feedback--\nThink about which join type is most restrictive in terms of only including records that match both tables INNER JOIN\nRIGHT JOIN\n--feedback--\nThink about which join type is most restrictive in terms of only including records that match both tables FULL JOIN\n--feedback--\nThink about which join type is most restrictive in terms of only including records that match both tables --video-solution--\n2\n--text--\nWhich SQL JOIN operation would you use if you need to retrieve all customers (left) and, for each customer, any orders (right) they might have placed Customers with no orders should still be included in the result --answers--\nLEFT JOIN\nINNER JOIN\n--feedback--\nThink about which join ensures that all records from the customers table are included in the output RIGHT JOIN\n--feedback--\nThink about which join ensures that all records from the customers table are included in the output FULL JOIN\n--feedback--\nThink about which join ensures that all records from the customers table are included in the output --video-solution--\n1\n--text--\nWhich SQL JOIN operation returns all rows from both tables, including unmatched rows (with NULLs for the columns of the table without a match) --answers--\nLEFT JOIN\n--feedback--\nThis join aims to be the most inclusive, taking all records from both tables INNER JOIN\n--feedback--\nThis join aims to be the most inclusive, taking all records from both tables RIGHT JOIN\n--feedback--\nThis join aims to be the most inclusive, taking all records from both tables FULL JOIN\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11437,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-relational-databases\\687ea8eba2a8b119f2ad9f8c.md",
      "source_type": "git_repo"
    },
    "token_count": 462,
    "chunk_index": 6,
    "total_chunks": 7
  },
  {
    "id": "a41fdc75cc1dd99313bc86fc4c2a9433",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68817041f57ce139bef36541.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 68817041f57ce139bef36541\ntitle: What Is SQL Injection, and What Are Some Ways to Prevent It challengeType: 19\ndashedName: what-is-sql-injection-and-what-are-some-ways-to-prevent-it\n--description--\nSQL injection is a web security vulnerability in which attackers change or take advantage of the queries that the web application makes to the database For example, attackers can insert malicious SQL code into the query to run the malicious code on the backend This can happen when you give users the option to enter data through login forms, search bars, or URL parameters and then use that user input in string interpolation or concatenation to generate the final SQL command Depending on the attacker's goal, the malicious SQL code can cause significant disruptions on your database and web application, like bypassing authentication, stealing data from the database, or modifying or removing database records Therefore, you should take this threat very seriously For example, let's say your web application uses an SQL query like this one to authenticate users, directly embedding the username and password entered by the user:\nsql\n'SELECT * FROM users WHERE username = ' + username_input + ' AND password = ' + password_input + ';'\nIf an attacker enters something like this to the username field:\nsql\n'\" \" OR \"1\"=\"1\" --'\nAnd anything else in the password field, since \"1\"=\"1\" is always true and -- comments out the rest of the query, the WHERE clause becomes:\nsql\nWHERE username = \" \" OR TRUE\nWhich is always true Depending on the database implementation, this may return the data of the first user or any user in the database and allow the attacker to log in without valid credentials So how can you prevent this There two main ways to prevent SQL injection:\nDon't write dynamic queries with string concatenation And prevent malicious SQL input from being included in queries that will be executed in the backend In practice, you can use parameterized statements, also known as parameterized queries They separate the SQL structure from the data entered by the user, which prevents the database from interpreting the input data as executable code Another important technique is input validation This is recommended as a secondary security measure in all cases, but it's specially important for parts of SQL queries related to table names, column names, and sorting order If possible, it's recommended to assign table names and column names directly within your code, not from user input",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5618,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68817041f57ce139bef36541.md",
      "source_type": "git_repo"
    },
    "token_count": 499,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "ed4c0d3a489f66856f1c5a8eca9d057a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68817041f57ce139bef36541.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the SQL structure from the data entered by the user, which prevents the database from interpreting the input data as executable code Another important technique is input validation This is recommended as a secondary security measure in all cases, but it's specially important for parts of SQL queries related to table names, column names, and sorting order If possible, it's recommended to assign table names and column names directly within your code, not from user inputIf, despite all the preventive measures, you do get an SQL injection attack, you can minimize its impact on the database by limiting the permissions of each database account Grant each database user only the permissions needed for their tasks, but nothing more If an account only needs to read data from the database, grant it read access only And as a preventive measure, never assign admin permissions to your application accounts It is very dangerous to do so because an attacker could get complete access and full control over the database SQL injection is a very common attack that you, as a developer, should be aware of and prevent in the implementation of your web application With these techniques, you can protect your database and keep your user's data safe --questions--\n--text--\nWhat is the primary goal of an SQL injection attack --answers--\nTo improve the performance of the database --feedback--\nThink about what an \"injection\" might imply in a technical context and what part of the system the name \"SQL injection\" refers to To interfere with the database queries executed by an application To encrypt sensitive user data --feedback--\nThink about what an \"injection\" might imply in a technical context and what part of the system the name \"SQL injection\" refers to To enhance the visual appearance of a website --feedback--\nThink about what an \"injection\" might imply in a technical context and what part of the system the name \"SQL injection\" refers to --video-solution--\n2\n--text--\nWhich of the following is one of the most effective methods to prevent SQL injection vulnerabilities --answers--\nRegularly changing database passwords --feedback--\nThink about how you can separate the structure of your SQL queries from the input provided by users Limiting the size of user input fields --feedback--\nThink about how you can separate the structure of your SQL queries from the input provided by users Using parameterized statements or queries Displaying detailed database error messages to developers --feedback--\nThink about how you can separate the structure of your SQL queries from the input provided by users",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5618,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68817041f57ce139bef36541.md",
      "source_type": "git_repo"
    },
    "token_count": 486,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "dc02914f15bfe1f4c024ae495ad187b8",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68817041f57ce139bef36541.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "--feedback-- Think about how you can separate the structure of your SQL queries from the input provided by users Limiting the size of user input fields --feedback-- Think about how you can separate the structure of your SQL queries from the input provided by users Using parameterized statements or queries Displaying detailed database error messages to developers --feedback-- Think about how you can separate the structure of your SQL queries from the input provided by users--video-solution--\n3\n--text--\nIf a website's login form is vulnerable to SQL injection, what could an attacker potentially achieve --answers--\nAutomatically back up the entire database --feedback--\nThink about the purpose of a login form and how manipulating the database query could affect its intended function Bypass the login process without valid credentials Improve the website's search engine ranking --feedback--\nThink about the purpose of a login form and how manipulating the database query could affect its intended function Change the website's design and layout --feedback--\nThink about the purpose of a login form and how manipulating the database query could affect its intended function --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5618,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68817041f57ce139bef36541.md",
      "source_type": "git_repo"
    },
    "token_count": 217,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "98c95f8f759caa68ba4d254198379f01",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\6881705cd9860639e98d639d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 6881705cd9860639e98d639d\ntitle: What Is the N+1 Problem challengeType: 19\ndashedName: what-is-the-n-plus-1-problem\n--description--\nThe N+1 problem is a common performance bottleneck in database-driven applications If you've ever experienced a really long load time while using an application, it's very likely related to the N+1 problem This problem occurs when many small queries are being performed in a sequence to get the data you requested But why would you perform many queries in a sequence You might do this to query a list of records and additional information about those records You would perform an initial query to get the list of records and then perform an additional query for each one of those records, to get additional information about them Even if you intuitively think that performing many small and simple queries will be more efficient than performing just one large and complex query, this is usually not the case The more queries you perform, the longer the entire process will take because you need to send each query to the server, find the data on the database, and then receive the data sent by the server for that query This can have a very significant performance impact on your application To show you a practical example, let's say you're developing an application for a food delivery service and you run a query to get the first 50 orders in the database First, you will get a list with these orders from an orders table, like this one:\nsql\norder_id | product   | quantity | customer_id\n1        | pizza     | 2        | 3422\n2        | salad     | 1        | 1255\n3        | ice cream | 4        | 2344\n4        | donuts    | 10       | 3455 | | | | | | | | | But what if you also need to get the data of the customers who submitted these orders This information would be stored in a different customers table One way to approach this would be to get the list of orders first and then run one query per order to get the customers' information To get the list of orders, you could run a query like this one, to get the first 50 records from the orders table:\nsql\nSELECT * FROM orders LIMIT 50;\nThis is where the 1 in N+1 comes from It's the initial query that gives you the list of records",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6755,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\6881705cd9860639e98d639d.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d6b971bfdde0e453606c10c2ace7d79f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\6881705cd9860639e98d639d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "way to approach this would be to get the list of orders first and then run one query per order to get the customers' information To get the list of orders, you could run a query like this one, to get the first 50 records from the orders table: sql SELECT * FROM orders LIMIT 50; This is where the 1 in N+1 comes from It's the initial query that gives you the list of recordsThen, you will need to perform another query for each one of these records to get the information of the customer who submitted the order For this, you might write a loop in an asynchronous function to process both orders and customers The getCustomerData() function will perform a SQL query to get the data of the customer who placed a specific order It will do this in a sequence for each order that was placed:\njs\nfor (const order of orders) {\nconst customerId = order customer_id;\nconst customerData = await getCustomerData(customerId);\n// Process the customer's data }\nThat's where the N in N+1 comes from N represents the number of queries that will be performed to get additional data for each one of the records This approach might seem simple and intuitive, but you might be surprised to know that this is exactly what you shouldn't do You should avoid making queries in a loop because making multiple small queries will take much longer than performing a single, larger query to get all the data You should try to use the tools that SQL gives you to reduce the number of queries as much as possible In this case, we could use a JOIN operation to join the orders and customers table sql\nSELECT\norders order_id,\norders product,\norders quantity,\ncustomers customer_id,\ncustomers name AS customer_name,\ncustomers email AS customer_email,\ncustomers address AS customer_address\nFROM orders\nJOIN customers ON orders customer_id = customers customer_id\nWHERE orders order_id IN (SELECT order_id FROM orders LIMIT 50)\nWith the JOIN operation, we can retrieve the data of the first 50 orders in the database, including the data of the customers, their names, email, and addresses, with only one query It might look more complex, but it's actually more efficient this way Now you know what the N+1 problem involves, so you can identify it and prevent it, to interact with your database in an efficient way --questions--\n--text--\nWhat is the primary characteristic of the N+1 problem in the context of SQL",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6755,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\6881705cd9860639e98d639d.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "d85c478c34365f28245e5834e1ef48eb",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\6881705cd9860639e98d639d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "of the first 50 orders in the database, including the data of the customers, their names, email, and addresses, with only one query It might look more complex, but it's actually more efficient this way Now you know what the N+1 problem involves, so you can identify it and prevent it, to interact with your database in an efficient way --questions-- --text-- What is the primary characteristic of the N+1 problem in the context of SQL--answers--\nExcessive data being returned in a single query --feedback--\nThink about the number of queries typically involved and what triggers the additional queries after the first one Executing one initial query followed by N additional queries for related data Inefficient use of database indexes --feedback--\nThink about the number of queries typically involved and what triggers the additional queries after the first one Conflicts arising from concurrent database transactions --feedback--\nThink about the number of queries typically involved and what triggers the additional queries after the first one --video-solution--\n2\n--text--\nWhat is the main performance implication of the N+1 problem --answers--\nIncreased CPU usage on the database server due to complex joins --feedback--\nThink about the overhead associated with the communication between the application and the database Reduced data integrity due to inconsistencies in related data --feedback--\nThink about the overhead associated with the communication between the application and the database Higher memory consumption on the application server due to large result sets --feedback--\nThink about the overhead associated with the communication between the application and the database Increased number of database round trips, leading to increased load time --video-solution--\n4\n--text--\nA strategy to reduce the number of database queries when retrieving related data and avoid the N+1 problem involves:\n--answers--\nIncreasing the database connection pool size --feedback--\nThink about how you can combine the retrieval of the main data and its related information into a single database interaction Optimizing individual SQL queries for speed --feedback--\nThink about how you can combine the retrieval of the main data and its related information into a single database interaction Fetching related data within the initial query using JOIN clauses Implementing client-side data filtering and sorting --feedback--\nThink about how you can combine the retrieval of the main data and its related information into a single database interaction --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6755,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\6881705cd9860639e98d639d.md",
      "source_type": "git_repo"
    },
    "token_count": 460,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "fbd9564431ea6177d64ddb5a25833fab",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68816f386bc30d36f59e9563.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 68816f386bc30d36f59e9563\ntitle: What Is Normalization in SQL challengeType: 19\ndashedName: what-is-normalization-in-sql\n--description--\nNormalization is the process of organizing a relational database using established normal forms to reduce data redundancy and improve data integrity To normalize a database, you analyze the attributes and relationships in your table structures to identify opportunities for simplification based on normalization rules Then, you divide the data into smaller, more focused tables and establish relationships between them using primary and foreign keys These smaller tables will store all the data that you originally had, but they will be easier to manage, organize, and work with, compared to larger tables By minimizing data redundancy, normalization reduces storage space and prevents inconsistencies For example, if a customer's address changes, you only need to update it in one customer table rather than in every order record It also helps preserve data integrity by making sure that dependencies are enforced by primary and foreign key constraints This reduces the likelihood of insertion, update, and deletion anomalies A normalized database is easier to understand and maintain, which contributes to a well-designed database system The set of rules that you should follow to organize your tables are called normal forms Each normal form builds on the previous ones, with rules becoming stricter as you move to higher normal forms The First Normal Form (1NF) is the foundational form, with the most basic rules A table is in First Normal Form (1NF) if:\nEach cell should contain only one value For example, if you have a students table, you may have a student with multiple phone numbers Instead of storing them as a comma-separated list in one cell, you should create a separate phone_numbers table with a foreign key pointing to the students table and only store one value in each cell This keeps each value atomic and the design normalized Every record (row) must be unique While primary keys enforce this requirement, 1NF explicitly mandates that no duplicate rows exist in the table The order of the rows and columns should not be relevant Data should not depend on its physical location Essentially, the First Normal Form (1NF) focuses on making values simple and atomic The Second Normal Form (2NF) builds on 1NF, requiring that all 1NF requirements are met plus additional constraints Understanding 2NF requires familiarity with two key concepts: superkeys and candidate keys",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11063,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68816f386bc30d36f59e9563.md",
      "source_type": "git_repo"
    },
    "token_count": 478,
    "chunk_index": 0,
    "total_chunks": 6
  },
  {
    "id": "9c5b897b58a32c064ab296b94c8ce7aa",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68816f386bc30d36f59e9563.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "enforce this requirement, 1NF explicitly mandates that no duplicate rows exist in the table The order of the rows and columns should not be relevant Data should not depend on its physical location Essentially, the First Normal Form (1NF) focuses on making values simple and atomic The Second Normal Form (2NF) builds on 1NF, requiring that all 1NF requirements are met plus additional constraints Understanding 2NF requires familiarity with two key concepts: superkeys and candidate keysA superkey is any set of attributes that uniquely identifies each row in a table, meaning no two rows can have identical values across all columns in the superkey For example, if we have a customers table with three columns:\nsql\ncustomer_id | name | email\nLet's say that customer_id and email must be unique for each record Some examples of superkeys for this table would be:\ncustomer_id\n{ customer_id, name }, this combination uniquely identifies rows because customer_id alone is unique, regardless of name's uniqueness { customer_id, name, email }\nemail, since we are adding the unique constraint to this column too, each record can be uniquely identified by the email Any set of attributes that, together, identify each row can be a superkey A candidate key is similar and yet, a bit different It's a set of one or more columns on the table that can uniquely identify each record A table can have multiple candidate keys but you'll need to choose one to act as the primary key They sound quite similar, right Their difference is that the superkey can also contain additional attributes that are not necessary to identify each row uniquely, while the candidate key only contains attributes that do identify the row uniquely In our customers example, we mentioned that customer_id, { customer_id, name }, { customer_id, name, email }, and email can be superkeys In this case, only customer_id and email can be candidate keys because candidate keys can't include attributes that don't identify the row uniquely, like name This illustrates the minimality principle that distinguishes candidate keys from superkeys Now that you're familiar with these concepts, let's go back to the Second Normal Form (2NF) The Second Normal Form (2NF) is based on addressing partial dependencies A partial dependency occurs in a table when an attribute that is not part of the primary key only depends on part of a composite primary key (a composite key is a primary key made of multiple columns) This can lead to data redundancy and update anomalies",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11063,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68816f386bc30d36f59e9563.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 6
  },
  {
    "id": "5a1a051b77dd7c596105b0dd6c02b620",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68816f386bc30d36f59e9563.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "from superkeys Now that you're familiar with these concepts, let's go back to the Second Normal Form (2NF) The Second Normal Form (2NF) is based on addressing partial dependencies A partial dependency occurs in a table when an attribute that is not part of the primary key only depends on part of a composite primary key (a composite key is a primary key made of multiple columns) This can lead to data redundancy and update anomaliesFor example, let's say we have an orders table with these columns:\nsql\norder_id | item_id | order_date | product | quantity | order_shipping_city\nIn this table, the primary key is the combination of order_id and item_id because the same item ID can be in different orders, but their combination will be unique You can see that there is a partial dependency between order_id and order_shipping_city order_id is part of the primary key order_shipping_city depends on order_id because every order with the same ID will have the same shipping city However, the shipping city does not depend on the item_id, but this is also part of the primary key Therefore, order_shipping_city does not depend on the entire primary key To fix this, you can split the table into two smaller tables, like order_header and order_items In the order_header table, you could store the top-level information about the orders:\nsql\norder_id | order_date | order_shipping_city\nIn the order_items table, you could store information about the items in the different orders that were submitted:\nsql\norder_id | item_id | product | quantity\nWith these changes, both tables will be in Second Normal Form (2NF) And that leads us to the Third Normal Form (3NF) This normal form builds on the second normal form For a table to be in Third Normal Form, it must:\nBe in Second Normal Form Have all non-key attributes depend directly on the primary key, meaning no non-key attribute should depend on another non-key attribute To understand the Third Normal Form (3NF), you need to understand transitive dependencies A transitive dependency occurs when an attribute that is not part of the primary key depends on another attribute that is not part of the primary key, which in turn depends on the primary key",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11063,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68816f386bc30d36f59e9563.md",
      "source_type": "git_repo"
    },
    "token_count": 450,
    "chunk_index": 2,
    "total_chunks": 6
  },
  {
    "id": "8fd3b709f835943f1db51d0fa71641d3",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68816f386bc30d36f59e9563.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "Form, it must: Be in Second Normal Form Have all non-key attributes depend directly on the primary key, meaning no non-key attribute should depend on another non-key attribute To understand the Third Normal Form (3NF), you need to understand transitive dependencies A transitive dependency occurs when an attribute that is not part of the primary key depends on another attribute that is not part of the primary key, which in turn depends on the primary keyFor example, let's modify our orders table to have these columns:\nsql\norder_id | customer_id | customer_city | city_postal_code | order_date | product | quantity\nThe primary key in this new table is order_id because it uniquely identifies each row There is a transitive dependency in this table:\nsql\norder_id > customer_id > customer_city > city_postal_code\nThe city's postal code is determined by the customer's city, which is determined by the customer's ID, which is determined by the order's ID city_postal_code, an attribute that is not part of the primary key, is determined by customer_city, which is also not part of the primary key, but customer_city is determined by order_id through customer_id This means that the city's postal code will be repeated for every order placed by customers who live in the same city This will lead to data redundancy Additionally, any change to a city's postal code would require updates across multiple records To solve the transitive dependency, you would need to split the table into multiple tables First, an orders table:\nsql\norder_id | customer_id | order_date | product | quantity\nThen, a customers table:\nsql\ncustomer_id | city_name\nAnd a cities table:\nsql\ncity_name | city_postal_code\nThis removes the transitive dependency from the table And finally, we have the Boyce-Codd Normal Form (BCNF) This is also known as Normal Form 3 5 because it addresses some anomalies that the Third Normal Form may not address For a table to be in the Boyce-Codd Normal Form (BCNF), it has to:\nBe in Third Normal Form Have every left-hand side of a functional dependency has to be a superkey The goal of this normal form is to ensure that every attribute or set of attributes that determines another attribute is a superkey, which is a candidate key or a superset of them Understanding and applying the normal forms is essential for designing robust and efficient relational databases",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11063,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68816f386bc30d36f59e9563.md",
      "source_type": "git_repo"
    },
    "token_count": 493,
    "chunk_index": 3,
    "total_chunks": 6
  },
  {
    "id": "546d7d0a18908434c389ae71e0ce547c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68816f386bc30d36f59e9563.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "be in the Boyce-Codd Normal Form (BCNF), it has to: Be in Third Normal Form Have every left-hand side of a functional dependency has to be a superkey The goal of this normal form is to ensure that every attribute or set of attributes that determines another attribute is a superkey, which is a candidate key or a superset of them Understanding and applying the normal forms is essential for designing robust and efficient relational databasesBy eliminating data redundancy and ensuring logical data dependencies, normalization leads to improved data integrity, reduced storage requirements, and simplified database maintenance You should usually aim to reach the Third Normal Form (3NF) --questions--\n--text--\nWhich normal form is primarily concerned with replacing groups of data within a single row with single values --answers--\nFirst Normal Form (1NF)\nSecond Normal Form (2NF)\n--feedback--\nThink about the most basic level of organization within a table and what constitutes a single, indivisible piece of data Third Normal Form (3NF)\n--feedback--\nThink about the most basic level of organization within a table and what constitutes a single, indivisible piece of data Boyce-Codd Normal Form (BCNF)\n--feedback--\nThink about the most basic level of organization within a table and what constitutes a single, indivisible piece of data --video-solution--\n1\n--text--\nA table is in Second Normal Form (2NF) if it is in First Normal Form (1NF) and if which of the following is true --answers--\nAll non-key attributes are transitively dependent on the primary key --feedback--\nThink about the issue that the Second Normal Form (2NF) addresses when a table has a composite primary key All non-key attributes are fully functionally dependent on the entire primary key Every determinant is a candidate key --feedback--\nThink about the issue that the Second Normal Form (2NF) addresses when a table has a composite primary key There are no repeating groups of data --feedback--\nThink about the issue that the Second Normal Form (2NF) addresses when a table has a composite primary key --video-solution--\n2\n--text--\nWhich normal form addresses transitive dependencies, where a non-key attribute depends on another non-key attribute --answers--\nFirst Normal Form (1NF)\n--feedback--\nThink about the indirect relationships between non-key attributes and the primary key that this normal form aims to eliminate",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11063,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68816f386bc30d36f59e9563.md",
      "source_type": "git_repo"
    },
    "token_count": 479,
    "chunk_index": 4,
    "total_chunks": 6
  },
  {
    "id": "1e11b594306a6ee514db590c60866bb1",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68816f386bc30d36f59e9563.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "table has a composite primary key There are no repeating groups of data --feedback-- Think about the issue that the Second Normal Form (2NF) addresses when a table has a composite primary key --video-solution-- 2 --text-- Which normal form addresses transitive dependencies, where a non-key attribute depends on another non-key attribute --answers-- First Normal Form (1NF) --feedback-- Think about the indirect relationships between non-key attributes and the primary key that this normal form aims to eliminateSecond Normal Form (2NF)\n--feedback--\nThink about the indirect relationships between non-key attributes and the primary key that this normal form aims to eliminate Third Normal Form (3NF)\nBoyce-Codd Normal Form (BCNF)\n--feedback--\nThink about the indirect relationships between non-key attributes and the primary key that this normal form aims to eliminate --video-solution--\n3",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 11063,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-sql\\68816f386bc30d36f59e9563.md",
      "source_type": "git_repo"
    },
    "token_count": 176,
    "chunk_index": 5,
    "total_chunks": 6
  },
  {
    "id": "6dcd97ada2b942fa0adc6dd829726569",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1a3fea729e274dc33d04d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d1a3fea729e274dc33d04d\ntitle: How Do Events Work in React challengeType: 19\ndashedName: how-do-events-work-in-react\n--description--\nEvent handling is an essential part of every interactive website React provides a powerful and consistent way to handle events through its Synthetic Event System, which is a wrapper around native events like click, keydown, and submit you learned about in earlier lectures This cross-browser wrapper ensures that events work the same across all browsers so there are no inconsistencies Let's see how events work in React so you can start using them in your projects In React, event handlers work in a similar way to native browser events, but with a few tweaks Instead of using lowercase event attribute names like onclick and onsubmit, React uses camelCase, like onClick and onSubmit In addition, instead of using strings to specify the kind of event, React expects a function for the event handler The event handler function is passed to the element as a prop, and the event type like onClick or onSubmit is used as an attribute in JSX Here is a reminder of how to work with a click event in regular HTML:\nhtml\n<button onclick=\"alert('Button clicked ')\">Click Me</button>\nAnd here is how you do the same in React:\n```jsx\nfunction handleClick() {\nconsole log(\"Button clicked \");\n}\nClick Me;\n```\nIn this example, handleClick logs a message to the console when the user clicks the button Note that you don't need parentheses after handleClick in the onClick attribute, as you're passing a reference to the function, not calling it In React, event handler functions usually start with the prefix handle to indicate they are responsible for handling events, like handleClick or handleSubmit When a user action triggers an event, React passes a Synthetic Event object to your handler This object behaves much like the native event object in vanilla JavaScript, providing properties like type, target, and currentTarget You can pass event as a parameter to the handler function and log it to the console to take a look at its structure:\njs\nfunction handleClick(event) {\nconsole log(event);\n}\nTo prevent default behaviors like browser refresh during an onSubmit event, for example, you can call the preventDefault() method:\n```jsx\nfunction handleSubmit(event) {\nevent preventDefault();\nconsole log(\"Form submitted \");\n}\nSubmit\n;\n```\nYou can also stop an event from bubbling up to parent elements by calling event stopPropagation()",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5125,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1a3fea729e274dc33d04d.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "1dd275dbd4c1ec26ed1848e1aa94af1c",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1a3fea729e274dc33d04d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "as a parameter to the handler function and log it to the console to take a look at its structure: js function handleClick(event) { console log(event); } To prevent default behaviors like browser refresh during an onSubmit event, for example, you can call the preventDefault() method: ```jsx function handleSubmit(event) { event preventDefault(); console log(\"Form submitted \"); } Submit ; ``` You can also stop an event from bubbling up to parent elements by calling event stopPropagation()Sometimes, while handling special cases like delete and edit features, you might want to pass extra data to an event handler You can do this by wrapping the handler in an inline arrow function:\n```jsx\nfunction handleDelete(id) {\nconsole log(\"Deleting item:\", id);\n}\nhandleDelete(1)}>Delete Item;\n```\nIt's fine to use inline event handlers in React because React efficiently manages re-renders and avoids performance issues In vanilla JavaScript, inline event handlers can lead to performance issues by creating new functions on every render, as there is no virtual DOM to optimize the process --questions--\n--text--\nHow does React handle events consistently across different browsers --answers--\nBy only using native browser events --feedback--\nReview the beginning of the lecture where the answer was discussed By creating custom events for each browser --feedback--\nReview the beginning of the lecture where the answer was discussed Through its Synthetic Event System By directly modifying the DOM for each event --feedback--\nReview the beginning of the lecture where the answer was discussed --video-solution--\n3\n--text--\nHow can you prevent default behaviors, like a browser refresh in React --answers--\nBy using the stopPropagation() method --feedback--\nThink about the method that stops the default browser actions By calling the preventDefault() method By setting the event to false --feedback--\nThink about the method that stops the default browser actions By using a return statement --feedback--\nThink about the method that stops the default browser actions --video-solution--\n2\n--text--\nHow does React differ from standard HTML in naming event attributes --answers--\nReact uses lowercase event names like onclick and onsubmit --feedback--\nThink about how JavaScript naming conventions are applied to events in React React uses camelCase event names like onClick and onSubmit React capitalizes all event names --feedback--\nThink about how JavaScript naming conventions are applied to events in React React uses hyphens in event names like on-click and on-submit --feedback--\nThink about how JavaScript naming conventions are applied to events in React",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5125,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1a3fea729e274dc33d04d.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "f63b644210d2c5d749d080560ed87f34",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1a3fea729e274dc33d04d.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "naming event attributes --answers-- React uses lowercase event names like onclick and onsubmit --feedback-- Think about how JavaScript naming conventions are applied to events in React React uses camelCase event names like onClick and onSubmit React capitalizes all event names --feedback-- Think about how JavaScript naming conventions are applied to events in React React uses hyphens in event names like on-click and on-submit --feedback-- Think about how JavaScript naming conventions are applied to events in React--video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5125,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1a3fea729e274dc33d04d.md",
      "source_type": "git_repo"
    },
    "token_count": 98,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "d6d7058caa2cfa0020b0a68705927ebe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1eb6929e68117faa6717f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d1eb6929e68117faa6717f\ntitle: What Is Rendering in React, and How Are Components Displayed on the Screen challengeType: 19\ndashedName: what-is-rendering-in-react-and-how-are-components-displayed-on-the-screen\n--description--\nIn React, rendering is the process by which components appear in the user interface (UI), usually the browser React takes all your JavaScript, JSX, and CSS code, figures out how it should look, and then displays it in the user interface The rendering process consists of three stages: trigger, render, and commit Let's take a look at these in more detail The trigger stage occurs when React detects that something has changed and that the user interface might need to be updated This change is often due to an update in the state or props For instance, noticing that it's time for dinner can trigger you to go into the kitchen to start cooking In the Counter example below, clicking the increment or decrement button triggers React to show the new count value:\n```jsx\nimport { useState } from \"react\";\nfunction Counter() {\nconst [count, setCount] = useState(0);\nreturn (\n{count}\nsetCount(count - 1)}>Decrement\nsetCount(count + 1)}>Increment\n);\n}\nexport default Counter;\n```\nOnce the trigger happens, React enters the render stage Here, React re-evaluates your components and figures out what to display To do this, React uses a lightweight copy of the \"real\" DOM This is called the virtual DOM With the virtual DOM, React can quickly check what needs to change in the component Think of this stage as the point where you're in the kitchen, you've gathered your ingredients, and you cook your dinner For the Counter component, the render stage is the point where React runs the functions again with the new count value React recalculates what the <h1>{count}</h1> part of the component should look like based on the updated count value, but you won't see any changes on the screen until the next stage – commit The commit stage is where React takes the prepared changes from the virtual DOM and applies them to the real DOM In other words, this is the stage where you see the final result on the screen To make this happen, React compares the virtual DOM to the actual DOM, identifies only the parts that need updates, and applies those changes to the real DOM to update the user interface",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4620,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1eb6929e68117faa6717f.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "798aae1662dc8c0e646b5c548144eb7d",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1eb6929e68117faa6717f.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "until the next stage – commit The commit stage is where React takes the prepared changes from the virtual DOM and applies them to the real DOM In other words, this is the stage where you see the final result on the screen To make this happen, React compares the virtual DOM to the actual DOM, identifies only the parts that need updates, and applies those changes to the real DOM to update the user interfaceYou can think of this stage as the point where you serve the food you cooked, making it visible just like React does when it commits updates to the actual DOM As for the Counter component, the commit stage is the point in which the new count value is applied to the h1 element, and you can see the change on the page These three processes are extremely fast because React minimizes direct DOM manipulation by calculating changes in the virtual DOM first, then it updates only the parts that need to change in the real DOM --questions--\n--text--\nWhat are the three stages of the rendering process in React --answers--\nStart, load, and finish --feedback--\nReview the beginning of the lecture for the answer Initialize, update, and complete --feedback--\nReview the beginning of the lecture for the answer Trigger, render, and commit Begin, process, and end --feedback--\nReview the beginning of the lecture for the answer --video-solution--\n3\n--text--\nWhich technology does React use to perfect the render stage by efficiently calculating changes --answers--\nShadow DOM\n--feedback--\nThink about the lightweight version of the DOM that helps React optimize updates Service Workers\n--feedback--\nThink about the lightweight version of the DOM that helps React optimize updates Virtual DOM\nWeb Components\n--feedback--\nThink about the lightweight version of the DOM that helps React optimize updates --video-solution--\n3\n--text--\nWhat happens during the commit stage in React's rendering process --answers--\nReact prepares changes in the virtual DOM --feedback--\nThink about the final step where changes appear on the screen React applies changes from the virtual DOM to the real DOM React decides which components need re-rendering --feedback--\nThink about the final step where changes appear on the screen React only checks for component errors --feedback--\nThink about the final step where changes appear on the screen --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4620,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1eb6929e68117faa6717f.md",
      "source_type": "git_repo"
    },
    "token_count": 454,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "3843bed986927789ec46d4a3ab9f839b",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1eaf77f510e15dfed7c14.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d1eaf77f510e15dfed7c14\ntitle: What is State, and How Does the useState Hook Work challengeType: 19\ndashedName: what-is-state-and-how-does-the-usestate-hook-work\n--description--\nState is one of the most important fundamentals of React and other frontend frameworks It's like the brain of a component, meaning it holds information that can change over time and controls how the components behave and look Let's look into what state is and how the useState hook lets you work with it State represents the dynamic data in your React component, like the value from a user input, data fetched from an API, or an item in a to-do list Whenever the state changes, React re-renders the component without reloading the page to reflect those changes in the user interface This reactivity makes your app interactive The useState hook is a function that lets you declare state variables in functional components Before hooks, you could only use state in class components But with the introduction of hooks since React 16 8, you can use state in functional components by using the useState hook To use the useState hook, you need to import it from React:\njs\nimport { useState } from \"react\";\nYou can also import React itself and get access to the useState hook as a property:\njs\nimport React from \"react\";\nHere's how you can declare a state variable when you import useState:\njs\nconst [stateVariable, setStateFunction] = useState(initialValue);\nAnd here's how you can declare a state variable when you import React:\njs\nconst [stateVariable, setStateFunction] = React useState(initialValue);\nIn the state variable you have the following:\nstateVariable holds the current state value\nsetStateFunction (the setter function) updates the state variable\ninitialValue sets the initial state\nNote that the state in a React component is private, and is isolated to each component instance This means that, if you render the same component twice, the state component of one does not affect the other This also means that, if you'd like to share state between components, then you'd need to lift the state up to a common parent and pass it down as props Another thing is that hooks must be called at the top level of a component, just before the return keyword, to keep the state and effects consistent across renders This means you can't use state inside loops, conditions, or nested functions",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1eaf77f510e15dfed7c14.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "682c1250dc918f73b60414515b428374",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1eaf77f510e15dfed7c14.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "does not affect the other This also means that, if you'd like to share state between components, then you'd need to lift the state up to a common parent and pass it down as props Another thing is that hooks must be called at the top level of a component, just before the return keyword, to keep the state and effects consistent across renders This means you can't use state inside loops, conditions, or nested functionsHere's an example of managing state with the useState hook in a Counter component:\n```jsx\n// Importing the useState hook\nimport { useState } from \"react\";\nfunction Counter() {\nconst initialValue = 0;\n// The state variable and setter function\nconst [count, setCount] = useState(initialValue);\nreturn (\n{/ Display current state value /}\n{count}\n<button onClick={() => setCount(count - 1)}>Decrement</button>\n<button onClick={() => setCount(count + 1)}>Increment</button>\n</div>\n);\n}\nexport default Counter;\n```\nIn the code above, we have the useState hook imported from React In the Counter component, the count represents the current state while setCount is the set function responsible for updating state The current state value is 0 The return statement contains the count and two buttons to decrement and increment the count by 1 You can manage multiple pieces of state by calling the useState hook multiple times This is especially important when you have unrelated state variables:\n```jsx\nfunction UserProfile() {\nconst [isOnline, setIsOnline] = useState(false);\nconst [notifications, setNotifications] = useState(0);\n// The rest of the component logic\n}\n```\nYou can also call the useState hook multiple times when managing multiple states that update separately, like form fields:\n```jsx\nfunction SignUpForm() {\nconst [name, setName] = useState(\"\");\nconst [username, setUsername] = useState(\"\");\nconst [email, setEmail] = useState(\"\");\n// The rest of the component logic\n}\n```\nBut in this case, it's best to combine the states since they're all part of the same form:\n```jsx\nfunction SignUpForm() {\nconst [formData, setFormData] = useState({\nname: \"\",\nusername: \"\",\nemail: \"\",\n});\n// The rest of the component logic\n}\n```\nThat's what state is and how you can use the useState hook --questions--\n--text--\nIn which version of React were hooks introduced, allowing state to be used in functional components --answers--\nReact 15",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1eaf77f510e15dfed7c14.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "ed68e40a1bc753717ae1fa90ade6b77f",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1eaf77f510e15dfed7c14.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "But in this case, it's best to combine the states since they're all part of the same form: ```jsx function SignUpForm() { const [formData, setFormData] = useState({ name: \"\", username: \"\", email: \"\", }); // The rest of the component logic } ``` That's what state is and how you can use the useState hook --questions-- --text-- In which version of React were hooks introduced, allowing state to be used in functional components --answers-- React 156\n--feedback--\nReview the beginning of the lecture where the answer was discussed React 16 8\nReact 17 0\n--feedback--\nReview the beginning of the lecture where the answer was discussed React 18 2\n--feedback--\nReview the beginning of the lecture where the answer was discussed --video-solution--\n2\n--text--\nWhat does state represent in a React component --answers--\nDynamic data that triggers re-renders when changed Only static data that doesn’t change --feedback--\nThink about data that makes the UI interactive and updates without page reloads The component's styling information --feedback--\nThink about data that makes the UI interactive and updates without page reloads Fixed values set at the beginning of the app --feedback--\nThink about data that makes the UI interactive and updates without page reloads --video-solution--\n1\n--text--\nWhich of the following is the correct way to work with the useState hook --answers--\n```js\nconst [formData, setFormData] = useState(<\nname: \"\",\nusername: \"\",\nemail: \"\",\n);\n```\n--feedback--\nReview the end of the lecture where the answer was discussed js\nconst ref = useState({\nname: \"\",\nusername: \"\",\nemail: \"\",\n});\n--feedback--\nReview the end of the lecture where the answer was discussed js\nconst <formData, setFormData> = useState({\nname: \"\",\nusername: \"\",\nemail: \"\",\n});\n--feedback--\nReview the end of the lecture where the answer was discussed jsx\nconst [formData, setFormData] = useState({\nname: \"\",\nusername: \"\",\nemail: \"\",\n});\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6262,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1eaf77f510e15dfed7c14.md",
      "source_type": "git_repo"
    },
    "token_count": 426,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "9ced34272b5e080e2ef6e5bd9b8cb09e",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-formatting-methods\\67326c1fdaf9c0c5ad1a2589.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67326c1fdaf9c0c5ad1a2589\ntitle: How Can You Change the Casing for a String challengeType: 19\ndashedName: how-can-you-change-the-casing-for-a-string\n--description--\nWhen working with strings in JavaScript, there are many situations where you might need to adjust the case of the text, such as transforming all letters to uppercase for a heading or converting text to lowercase for uniformity Luckily, JavaScript makes this easy with two built-in methods: toUpperCase() and toLowerCase() The toUpperCase() method converts all the characters to uppercase letters and returns a new string with all uppercase characters This is useful when you want to emphasize text or create consistency in the format of strings Let's see an example:\njs\nlet greeting = \"Hello, World \";\nlet uppercaseGreeting = greeting toUpperCase();\nconsole log(uppercaseGreeting);  // Output: \"HELLO, WORLD \"\nIn this code, the toUpperCase() method transforms the entire string into uppercase letters The original string remains unchanged because toUpperCase() returns a new string, rather than modifying the original one On the flip side, the toLowerCase() method converts all characters in a string to lowercase This is helpful when you need to standardize input, such as when comparing user-provided text or making case-insensitive checks Let's look at an example:\njs\nlet shout = \"I AM LEARNING JAVASCRIPT \";\nlet lowercaseShout = shout toLowerCase();\nconsole log(lowercaseShout);  // Output: \"i am learning javascript \"\nThe toLowerCase() method converts all characters to lowercase, making the string less aggressive, while leaving the original string unchanged In summary, the toUpperCase() and toLowerCase() methods in JavaScript are powerful tools for transforming strings into all uppercase or lowercase letters These methods are particularly useful for standardizing text input, making case-insensitive comparisons, and ensuring design consistency With these simple yet effective methods, you can handle text manipulation in a more controlled and predictable way --questions--\n--text--\nWhat does the toUpperCase() method do when called on a string in JavaScript --answers--\nConverts only the first letter of the string to uppercase --feedback--\nThink about how toUpperCase() affects the entire string Converts all characters in the string to uppercase Converts all characters in the string to lowercase --feedback--\nThink about how toUpperCase() affects the entire string Reverses the string",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4004,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-formatting-methods\\67326c1fdaf9c0c5ad1a2589.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "d0c12a36662375a42494c0fdc45eb748",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-formatting-methods\\67326c1fdaf9c0c5ad1a2589.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "methods, you can handle text manipulation in a more controlled and predictable way --questions-- --text-- What does the toUpperCase() method do when called on a string in JavaScript --answers-- Converts only the first letter of the string to uppercase --feedback-- Think about how toUpperCase() affects the entire string Converts all characters in the string to uppercase Converts all characters in the string to lowercase --feedback-- Think about how toUpperCase() affects the entire string Reverses the string--feedback--\nThink about how toUpperCase() affects the entire string --video-solution--\n2\n--text--\nWhat will the following code output js\nlet phrase = \"JavaScript is Fun \";\nconsole log(phrase toLowerCase());\n--answers--\nJAVASCRIPT IS FUN --feedback--\nConsider what happens when toLowerCase() is applied to a string JavaScript is fun --feedback--\nConsider what happens when toLowerCase() is applied to a string javascript is fun Javascript Is Fun --feedback--\nConsider what happens when toLowerCase() is applied to a string --video-solution--\n3\n--text--\nIn which scenario would you most likely use the toLowerCase() method --answers--\nWhen you want to make sure user input is standardized for case-insensitive comparisons When you need to capitalize the first letter of each word in a sentence --feedback--\nThink about how converting all characters to lowercase might help when dealing with user inputs When you want to replace spaces in a string with underscores --feedback--\nThink about how converting all characters to lowercase might help when dealing with user inputs When you want to reverse the characters in a string --feedback--\nThink about how converting all characters to lowercase might help when dealing with user inputs --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4004,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-formatting-methods\\67326c1fdaf9c0c5ad1a2589.md",
      "source_type": "git_repo"
    },
    "token_count": 340,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "fa63f62ddcf90ec9c7acc5e64868ec77",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-character-methods\\672d266034b5242126271995.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 672d266034b5242126271995\ntitle: What Is ASCII, and How Does It Work with charCodeAt() and fromCharCode() challengeType: 19\ndashedName: what-is-ascii-and-how-does-it-work-with-charcodeat-and-fromcharcode\n--description--\nIn programming, understanding how characters are represented as numbers is fundamental This is where ASCII comes in ASCII, short for American Standard Code for Information Interchange, is a character encoding standard used in computers to represent text It assigns a numeric value to each character, which is universally recognized by machines In this lecture, we will explore what ASCII is, how it works, and how you can use JavaScript methods like charCodeAt() and fromCharCode() to interact with ASCII values ASCII is a system for encoding characters such as letters, digits, and symbols into numerical values Each character is mapped to a specific number For example, the capital letter A is represented by the number 65 in ASCII, while the lowercase a is represented by 97 This encoding allows computers to store and manipulate text The ASCII standard covers 128 characters including:\nUppercase and lowercase English letters (A-Z, a-z) Numbers (0-9) Common punctuation marks and symbols ( , @, #, and so on) Control characters (such as newline and tab) In JavaScript, you can easily access the ASCII code of a character using the charCodeAt() method This method is called on a string and returns the ASCII code of the character at a specified index Let’s take a look at an example:\njs\nlet letter = \"A\";\nconsole log(letter charCodeAt(0));  // Output: 65\nIn this example, A is the first character of the string, and calling charCodeAt(0) returns its ASCII value, 65 You can also use this method with other characters to find their ASCII values:\njs\nlet symbol = \" \";\nconsole log(symbol charCodeAt(0));  // Output: 33\nHere, the ASCII code for the exclamation mark is returned as 33 While charCodeAt() helps you retrieve the ASCII value of a character, the fromCharCode() method allows you to do the opposite: convert an ASCII code into its corresponding character Let's see this in action:\njs\nlet char = String fromCharCode(65);\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4665,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-character-methods\\672d266034b5242126271995.md",
      "source_type": "git_repo"
    },
    "token_count": 473,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "34d09f0439d9dd099c11034f23793625",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-character-methods\\672d266034b5242126271995.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "also use this method with other characters to find their ASCII values: js let symbol = \" \"; console log(symbol charCodeAt(0)); // Output: 33 Here, the ASCII code for the exclamation mark is returned as 33 While charCodeAt() helps you retrieve the ASCII value of a character, the fromCharCode() method allows you to do the opposite: convert an ASCII code into its corresponding character Let's see this in action: js let char = String fromCharCode(65); consolelog(char);  // Output: A\nIn this example, fromCharCode(65) converts the ASCII value 65 back to the character A Another example would be converting the number 97 to its corresponding lowercase letter:\njs\nlet char = String fromCharCode(97);\nconsole log(char);  // Output: a\nThese methods are particularly useful when you need to manipulate or compare characters based on their ASCII values For instance, you might use charCodeAt() to check if a character is uppercase, lowercase, or a digit by comparing its ASCII value On the other hand, fromCharCode() can be used to dynamically generate characters from their ASCII codes --questions--\n--text--\nWhat does the charCodeAt() method return when used on a string in JavaScript --answers--\nThe number of characters in the string --feedback--\nThink about how characters are represented as numbers in the ASCII system The index of a character in the string --feedback--\nThink about how characters are represented as numbers in the ASCII system The ASCII value of a character at a specified index The hexadecimal representation of a character --feedback--\nThink about how characters are represented as numbers in the ASCII system --video-solution--\n3\n--text--\nWhat will the following code output js\nconsole log(String fromCharCode(66));\n--answers--\nB\nb\n--feedback--\nRefer to the section of the lecture that discusses fromCharCode() 6\n--feedback--\nRefer to the section of the lecture that discusses fromCharCode() A\n--feedback--\nRefer to the section of the lecture that discusses fromCharCode() --video-solution--\n1\n--text--\nWhich of the following is an example of how ASCII encoding is useful in programming --answers--\nTo check if a string contains only uppercase letters --feedback--\nThink about what you can do when characters are represented by their ASCII numbers To calculate the length of a string --feedback--\nThink about what you can do when characters are represented by their ASCII numbers To convert a number into a floating-point value",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4665,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-character-methods\\672d266034b5242126271995.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "3601fb8cb5f72259f5f3005aebec6c91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-character-methods\\672d266034b5242126271995.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "that discusses fromCharCode() --video-solution-- 1 --text-- Which of the following is an example of how ASCII encoding is useful in programming --answers-- To check if a string contains only uppercase letters --feedback-- Think about what you can do when characters are represented by their ASCII numbers To calculate the length of a string --feedback-- Think about what you can do when characters are represented by their ASCII numbers To convert a number into a floating-point value--feedback--\nThink about what you can do when characters are represented by their ASCII numbers To manipulate characters based on their numerical values --video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4665,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-character-methods\\672d266034b5242126271995.md",
      "source_type": "git_repo"
    },
    "token_count": 123,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "b62803e8e62856e498ae7fc22238be46",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1ebb595f4f619c0e35d1a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d1ebb595f4f619c0e35d1a\ntitle: How Do You Update Objects in State challengeType: 19\ndashedName: how-do-you-update-objects-in-state\n--description--\nUpdating objects in state in React can be tricky if you're used to changing object property values directly React treats state as immutable, meaning you should not modify it directly Let's look at what happens if you try to change objects in React state directly, and then dive into the correct way to do it Let's say you have an object in your component state that represents a user's profile, and you want the user to update their age:\n```jsx\nimport { useState } from \"react\";\nfunction Profile() {\nconst [user, setUser] = useState({\nname: \"John Doe\",\nage: 31,\ncity: \"LA\",\n});\n// Change user age directly\nconst handleAgeChange = (e) => {\nuser age = e target value;\nconsole log(user);\n};\nreturn (\nUser Profile\nName: {user name}\nAge: {user age}\nCity: {user city}\n<h2>Update User Age </h2>\n<input type=\"number\" value={user age} onChange={handleAgeChange} />\n</div>\n);\n}\nexport default Profile;\n```\nThis code will not work because you're directly modifying the user age property Even though console log(user) will show the new age in the console, React won't re-render the component to show it in the user interface because you didn't use the setter function, setUser To update an object directly in the state, you need to use the setter function to create a new object with the updated value For example:\njs\nconst handleAgeChange = (e) => {\nsetUser({\nage: e target value,\n});\n};\nThat works But if you look at the page now, the user's age gets updated, but the values for the name and city are lost This is because the new object you passed to the setter function only contained a key/value pair for age To prevent this from happening, you can copy the existing object first, then update only the property you want to update, in this case, age To do this, you can pass a special function called an updater function to your setter function, setUser",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6247,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1ebb595f4f619c0e35d1a.md",
      "source_type": "git_repo"
    },
    "token_count": 469,
    "chunk_index": 0,
    "total_chunks": 4
  },
  {
    "id": "3448c2b5765d50a34d717fa1fce48afc",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1ebb595f4f619c0e35d1a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "user's age gets updated, but the values for the name and city are lost This is because the new object you passed to the setter function only contained a key/value pair for age To prevent this from happening, you can copy the existing object first, then update only the property you want to update, in this case, age To do this, you can pass a special function called an updater function to your setter function, setUserThe updater function takes the pending state as an argument, here, called prevUser, and should return the next state:\njs\nconst handleAgeChange = (e) => {\nsetUser((prevUser) => {\nconst updatedUser = { prevUser, age: e target value };\nconsole log('Previous State:', prevUser);\nconsole log('Updated State:', updatedUser);\nreturn updatedUser;\n});\n};\nAs you can see, we create a new user object called updatedUser by using the spread syntax to copy the pending user object, prevUser We then update the age based on the form input and return updatedUser at the bottom of the function as the next state Now your project works as expected, and updates to the age input don't affect the user's name or city name You can also see the previous and updated states in the console This is the ideal way to update an object in state, especially when you're not updating all the properties To update the remaining name and city properties, you can write them as separate setting functions and connect them to their respective inputs:\n```js\nconst handleNameChange = (e) => {\nsetUser((prevUser) => ({ prevUser,\nname: e target value,\n}));\n};\nconst handleCityChange = (e) => {\nsetUser((prevUser) => ({ prevUser,\ncity: e target value,\n}));\n};\n```\nOr you can combine them into a single setter function like this:\njs\nconst handleChange = (e) => {\nconst { name, value } = e target;\nsetUser((prevUser) => ({ prevUser,\n[name]: value,\n}));\n};\nTo make this work, each input field has to have a name attribute Here's the full code now:\n```jsx\nimport { useState } from \"react\";\nfunction Profile() {\nconst [user, setUser] = useState({ name: \"John Doe\", age: 31, city: \"LA\" });\nconst handleChange = (e) => {\nconst { name, value } = e",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6247,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1ebb595f4f619c0e35d1a.md",
      "source_type": "git_repo"
    },
    "token_count": 491,
    "chunk_index": 1,
    "total_chunks": 4
  },
  {
    "id": "3bc606908efd5b7198a8b0152d84bfd2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1ebb595f4f619c0e35d1a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "const handleChange = (e) => { const { name, value } = e target; setUser((prevUser) => ({ prevUser, [name]: value, })); }; To make this work, each input field has to have a name attribute Here's the full code now: ```jsx import { useState } from \"react\"; function Profile() { const [user, setUser] = useState({ name: \"John Doe\", age: 31, city: \"LA\" }); const handleChange = (e) => { const { name, value } = etarget;\nsetUser((prevUser) => ({ prevUser, [name]: value}));\n};\nreturn (\nUser Profile\nName: {user name}\nAge: {user age}\nCity: {user city}\n<h2>Update User Age </h2>\n<input type=\"number\" name=\"age\" value={user age} onChange={handleChange} />\n<h2>Update User Name </h2>\n<input type=\"text\" name=\"name\" value={user name} onChange={handleChange} />\n<h2>Update User City </h2>\n<input type=\"text\" name=\"city\" value={user city} onChange={handleChange} />\n</div>\n);\n}\nexport default Profile;\n```\n--questions--\n--text--\nHow does React treat state in a component --answers--\nAs mutable, allowing direct modification --feedback--\nThink about React's approach to ensuring predictable state changes As immutable, meaning it should not be modified directly As a global variable accessible in all components --feedback--\nThink about React's approach to ensuring predictable state changes As a temporary variable that resets on each render --feedback--\nThink about React's approach to ensuring predictable state changes --video-solution--\n2\n--text--\nHow should you update an object stored in React state --answers--\nUse the setter function to create a new object Modify the object directly in the state --feedback--\nReact treats state as immutable, so avoid direct modification Use Object assign() without calling the setter --feedback--\nReact treats state as immutable, so avoid direct modification Use the push() method to add properties to the object --feedback--\nReact treats state as immutable, so avoid direct modification --video-solution--\n1\n--text--\nWhat is the setter function in this code js\nconst [user, setUser] = useState({\nname: 'John Doe',\nage: 31,\ncity: 'LA',\n});\n--answers--\nuser\n--feedback--\nThe setter function updates the state variable",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6247,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1ebb595f4f619c0e35d1a.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 2,
    "total_chunks": 4
  },
  {
    "id": "f1b1b801f0fb31ec27959d3c74c1d399",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1ebb595f4f619c0e35d1a.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "so avoid direct modification Use Object assign() without calling the setter --feedback-- React treats state as immutable, so avoid direct modification Use the push() method to add properties to the object --feedback-- React treats state as immutable, so avoid direct modification --video-solution-- 1 --text-- What is the setter function in this code js const [user, setUser] = useState({ name: 'John Doe', age: 31, city: 'LA', }); --answers-- user --feedback-- The setter function updates the state variableuseState\n--feedback--\nThe setter function updates the state variable age\n--feedback--\nThe setter function updates the state variable setUser\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 6247,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1ebb595f4f619c0e35d1a.md",
      "source_type": "git_repo"
    },
    "token_count": 140,
    "chunk_index": 3,
    "total_chunks": 4
  },
  {
    "id": "99b21451117ecb4e3fa6a42950b6f1df",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1ebcab4e0521a6654bb64.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67d1ebcab4e0521a6654bb64\ntitle: How Do You Update Arrays in State challengeType: 19\ndashedName: how-do-you-update-arrays-in-state\n--description--\nIn React, updating arrays in state is quite straightforward, but it can be easy to make a mistake, especially if you're coming from vanilla JavaScript where you can modify arrays directly In React, state is treated as immutable so it can recognize changes and make the proper updates to the user interface Let's look at how you can update arrays held in state in React One of the most common mistakes when updating arrays in a React state is to directly modify the array using methods like push(), pop(), or splice() These methods mutate the original array, and React does not allow that React relies on a new array reference to detect changes, so directly modifying the array can prevent the component from re-rendering as expected Here's an example of using the push() method to add to an array in state, which won't work:\n```jsx\nimport { useState } from \"react\";\nfunction ItemsList() {\nconst [items, setItems] = useState([\n{ id: 0, name: \"Item 1\" },\n{ id: 1, name: \"Item 2\" },\n{ id: 2, name: \"Item 3\" },\n]);\nconst addItem = () => {\nconst newItem = { id: items length + 1, name: Item ${items length + 1} };\nitems push(newItem); // This modifies the original array\nsetItems(items); // React will not detect this change\n};\nreturn (\nAdd Item\n{items map((item) => (\n{item name}\n))}\n);\n}\nexport default ItemsList;\n```\nIf you click the Add Item button, nothing happens in the user interface It might also be tempting to remove items from the array with the pop() method:\njs\nconst removeItem = () => {\nitems pop(); // Modifies the original array\nsetItems(items); // React will not detect this change, either\n};\nTo update an array in state, the key is to create a new array, do your operations, and pass that to React, rather than mutate the existing array Because it's a new array, React will know that the state has been changed, and trigger a re-render",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5714,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1ebcab4e0521a6654bb64.md",
      "source_type": "git_repo"
    },
    "token_count": 480,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "d61654c5437decc8c5af9330a733e124",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1ebcab4e0521a6654bb64.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "the array with the pop() method: js const removeItem = () => { items pop(); // Modifies the original array setItems(items); // React will not detect this change, either }; To update an array in state, the key is to create a new array, do your operations, and pass that to React, rather than mutate the existing array Because it's a new array, React will know that the state has been changed, and trigger a re-renderHere's how you can add to the items array using the spread operator:\n``js\nconst addItem = () => {\nconst newItem = {\nid: items length + 1,\nname:Item ${items length + 1}`,\n};\n// Creates a new array\nsetItems((prevItems) => [ prevItems, newItem]);\n};\n```\n[ prevItems, newItem] creates a new array by copying all items in the existing items array held in state, then adds newItem at the end, which increments the id and the item number If you want to remove something from the array, you can use the filter() method, which returns a new array after filtering out whatever you want to remove:\njs\nconst removeItem = (id) => {\nsetItems((prevItems) => prevItems filter((item) => item id == id));\n};\nHere's the full code:\n```jsx\nimport { useState } from \"react\";\nfunction ItemsList() {\nconst [items, setItems] = useState([\n{ id: 0, name: \"Item 1\" },\n{ id: 1, name: \"Item 2\" },\n{ id: 2, name: \"Item 3\" },\n]);\nconst addItem = () => {\nconst newItem = { id: items length + 1, name: Item ${items length + 1} };\nsetItems((prevItems) => [ prevItems, newItem]); // Creates a new array\n};\nconst removeItem = (id) => {\nsetItems((prevItems) => prevItems filter((item) => item id == id)); // Creates a new array\n};\nreturn (\nAdd Item\n{items map((item) => (\n{item name}{\" \"}\nremoveItem(item id)}>Remove\n))}\n);\n}\nexport default ItemsList;\n```\nThose are some common ways you can update an array in state --questions--\n--text--\nWhich of the following is the correct way to update state and add new items to an array",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5714,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1ebcab4e0521a6654bb64.md",
      "source_type": "git_repo"
    },
    "token_count": 494,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "38bd6a102d5fea43780b1183649240de",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1ebcab4e0521a6654bb64.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "new array }; const removeItem = (id) => { setItems((prevItems) => prevItems filter((item) => item id == id)); // Creates a new array }; return ( Add Item {items map((item) => ( {item name}{\" \"} removeItem(item id)}>Remove ))} ); } export default ItemsList; ``` Those are some common ways you can update an array in state --questions-- --text-- Which of the following is the correct way to update state and add new items to an array--answers--\njs\nsetItems(copy [prevItems, newItem]);\n--feedback--\nTo update arrays in state you need to use the setter function and proper syntax for adding new items to an array js\nsetItems(new Array = [ prevItems, newItem]);\n--feedback--\nTo update arrays in state you need to use the setter function and proper syntax for adding new items to an array js\nitems = (prevItems) => [ prevItems, newItem];\n--feedback--\nTo update arrays in state you need to use the setter function and proper syntax for adding new items to an array js\nsetItems((prevItems) => [ prevItems, newItem]);\n--video-solution--\n4\n--text--\nWhy should you NOT directly modify an array in React state --answers--\nIt automatically clears the array --feedback--\nReact relies on immutability to detect changes in state It adds unwanted duplicates to the array --feedback--\nReact relies on immutability to detect changes in state It causes errors in the component --feedback--\nReact relies on immutability to detect changes in state It prevents React from detecting changes --video-solution--\n4\n--text--\nWhich method is best for removing an item from an array in React state --answers--\nsplice()\n--feedback--\nThink about a method that creates a new array without modifying the original push()\n--feedback--\nThink about a method that creates a new array without modifying the original pop()\n--feedback--\nThink about a method that creates a new array without modifying the original filter()\n--video-solution--\n4",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 5714,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-state-and-responding-to-events-in-react\\67d1ebcab4e0521a6654bb64.md",
      "source_type": "git_repo"
    },
    "token_count": 418,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "8f829f6153e0aff88730f33eb56ffb91",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-formatting-methods\\67326c3c3ab931c644cea05b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67326c3c3ab931c644cea05b\ntitle: How Can You Trim Whitespace from a String challengeType: 19\ndashedName: how-can-you-trim-whitespace-from-a-string\n--description--\nWhen working with strings in JavaScript, it's common to encounter unwanted whitespace at the beginning or end of a string Whitespace can interfere with operations like comparison, storage, or display, which is why it's important to know how to remove it efficiently In this lecture, we'll explore how you can trim whitespace using JavaScript's trim(), trimStart(), and trimEnd() methods Whitespace refers to spaces, tabs, or line breaks that occur in a string but are not visible characters For example:\njs\nlet greeting = \"   Hello, world \";\nIn this case, there are spaces before and after the visible text, Hello, world The trim() method is the most commonly used way to remove whitespace from both the beginning and the end of a string Here's an example:\njs\nlet message = \"   Hello \";\nlet trimmedMessage = message trim();\nconsole log(trimmedMessage);  // Output: \"Hello \"\nIn this case, the trim() method removes all the leading and trailing spaces, leaving just Hello Note that any whitespace within the string (between words, for example) is left untouched by trim() Sometimes, you may only want to remove whitespace from either the beginning or the end of a string, but not both This is where trimStart() and trimEnd() come in trimStart() removes whitespace from the beginning (or start) of the string ```js\nlet greeting = \"   Hello \";\nlet trimmedStart = greeting trimStart();\nconsole log(trimmedStart);  // Output: \"Hello \"\n```\ntrimEnd() removes whitespace from the end of the string ```js\nlet greeting = \"   Hello \";\nlet trimmedEnd = greeting trimEnd();\nconsole log(trimmedEnd);  // Output: \"   Hello \"\n```\nThese methods give you more precise control over which part of the string you want to clean up In summary, trimming whitespace is an essential part of working with strings in JavaScript Whether you want to clean up input data or ensure consistent string comparisons, you can use trim() to remove whitespace from both sides of a string, or use trimStart() and trimEnd() to target specific sides --questions--\n--text--\nWhat does the trim() method do to a string in JavaScript",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3794,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-formatting-methods\\67326c3c3ab931c644cea05b.md",
      "source_type": "git_repo"
    },
    "token_count": 495,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "43ce6eb7a0ee483d376084fb164bf994",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-formatting-methods\\67326c3c3ab931c644cea05b.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "more precise control over which part of the string you want to clean up In summary, trimming whitespace is an essential part of working with strings in JavaScript Whether you want to clean up input data or ensure consistent string comparisons, you can use trim() to remove whitespace from both sides of a string, or use trimStart() and trimEnd() to target specific sides --questions-- --text-- What does the trim() method do to a string in JavaScript--answers--\nRemoves all spaces within a string\n--feedback--\nConsider which parts of the string trim() affects Removes all whitespace from the beginning and end of a string Removes only spaces between words --feedback--\nConsider which parts of the string trim() affects Replaces all characters in a string with whitespace --feedback--\nConsider which parts of the string trim() affects --video-solution--\n2\n--text--\nWhich method would you use if you only want to remove whitespace from the start of a string --answers--\ntrim()\n--feedback--\nThink about which method targets the beginning of the string trimEnd()\n--feedback--\nThink about which method targets the beginning of the string trimStart()\nreplace()\n--feedback--\nThink about which method targets the beginning of the string --video-solution--\n3\n--text--\nWhat will be the output of the following code js\nlet str = \"   Code   \";\nconsole log(str trimEnd());\n--answers--\njs\n\"Code\"\n--feedback--\nConsider which part of the string is affected by trimEnd() js\n\"   Code\"\njs\n\"Code   \"\n--feedback--\nConsider which part of the string is affected by trimEnd() js\n\" Code \"\n--feedback--\nConsider which part of the string is affected by trimEnd() --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3794,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-formatting-methods\\67326c3c3ab931c644cea05b.md",
      "source_type": "git_repo"
    },
    "token_count": 352,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "098c686e1c1f10764d2d36699e86defe",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-modification-methods\\67326c3392068ec6184a0c95.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67326c3392068ec6184a0c95\ntitle: How Can You Repeat a String x Number of Times challengeType: 19\ndashedName: how-can-you-repeat-a-string-x-number-of-times\n--description--\nWhen working with JavaScript, you may encounter situations where you need to repeat a string a specific number of times Whether you're generating repeated patterns or simply duplicating text, the repeat() method provides a simple and effective way to achieve this The repeat() method is a built-in function in JavaScript that allows you to repeat a string a specified number of times Here is the basic syntax:\njs\nstring repeat(count);\nstring is the string that you want to repeat, and count is the number of times you want the string to be repeated Here's an example:\njs\nlet word = \"Hello \";\nlet repeatedWord = word repeat(3);\nconsole log(repeatedWord);  // Output: \"Hello Hello Hello \"\nIn this case, the string Hello is repeated three times, resulting in Hello Hello Hello While the repeat() method is useful, there are a few exceptions and limitations to keep in mind The count parameter must be a non-negative number If you pass a negative number, JavaScript will throw a RangeError js\nlet word = \"Test\";\nconsole log(word repeat(-1));  // Throws RangeError: Invalid count value\nThe count must be a finite number If you try to repeat a string an infinite number of times or use Infinity as the count, you will also get a RangeError In JavaScript, Infinity is a special value that represents an infinite quantity It's used to denote numbers that are larger than any finite number js\nlet word = \"Test\";\nconsole log(word repeat(Infinity));  // Throws RangeError: Invalid count value\nIf the count is not an integer (such as a decimal like 2 5), the repeat() method will round it down to the nearest integer js\nlet word = \"Test\";\nconsole log(word repeat(2 5));  // Output: \"TestTest\"\nIf you pass 0 as the count, the repeat() method will return an empty string js\nlet word = \"Test\";\nconsole log(word repeat(0));  // Output: \"\"\nThe repeat() method can simplify tasks that involve string duplication, making your code more concise and readable Whether you're generating repeated text patterns or filling a space with characters, repeat() can save you from writing loops or more complex code",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3808,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-modification-methods\\67326c3392068ec6184a0c95.md",
      "source_type": "git_repo"
    },
    "token_count": 500,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "db7356ca6803cbcd8543f602e703b24a",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-modification-methods\\67326c3392068ec6184a0c95.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "word = \"Test\"; console log(word repeat(2 5)); // Output: \"TestTest\" If you pass 0 as the count, the repeat() method will return an empty string js let word = \"Test\"; console log(word repeat(0)); // Output: \"\" The repeat() method can simplify tasks that involve string duplication, making your code more concise and readable Whether you're generating repeated text patterns or filling a space with characters, repeat() can save you from writing loops or more complex code--questions--\n--text--\nWhat is the result of calling \"Hello\" repeat(3); in JavaScript --answers--\n\"HelloHelloHello\"\n\"Hello Hello Hello\"\n--feedback--\nConsider how the repeat() method concatenates the repeated string \"Hello \"\n--feedback--\nConsider how the repeat() method concatenates the repeated string \"HelloHello\"\n--feedback--\nConsider how the repeat() method concatenates the repeated string --video-solution--\n1\n--text--\nWhat happens if you try to call repeat() with a negative number --answers--\nThe string is repeated once --feedback--\nThink about how repeat() handles invalid count values The string is repeated the absolute value of the negative number --feedback--\nThink about how repeat() handles invalid count values A RangeError is thrown An empty string is returned --feedback--\nThink about how repeat() handles invalid count values --video-solution--\n3\n--text--\nIf you call \"*\" repeat(0), what is the output --answers--\n\"*\"\n--feedback--\nConsider what happens when you ask to repeat something zero times \"\"\nnull\n--feedback--\nConsider what happens when you ask to repeat something zero times \"*****\"\n--feedback--\nConsider what happens when you ask to repeat something zero times --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3808,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-modification-methods\\67326c3392068ec6184a0c95.md",
      "source_type": "git_repo"
    },
    "token_count": 354,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "c45d5eada74f65050397229ca8bdadf2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-search-and-slice-methods\\67326c0d7bef01c539120766.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67326c0d7bef01c539120766\ntitle: How Can You Test if a String Contains a Substring challengeType: 19\ndashedName: how-can-you-test-if-a-string-contains-a-substring\n--description--\nWhen working with strings in JavaScript, there are many cases where you might need to check whether a string contains a specific substring, which is a smaller part of that string For example, you might want to check if a user's input includes a specific word or character before performing some action One way to achieve this is by using the includes() method The includes() method is used to check if a string contains a specific substring If the substring is found within the string, the method returns true otherwise, it returns false Here's the basic syntax:\njs\nstring includes(searchValue);\nFor the syntax, the searchValue is the substring you want to look for within the string And here's an example:\n```js\nlet phrase = \"JavaScript is awesome \";\nlet result = phrase includes(\"awesome\");\nconsole log(result);  // true\n```\nIn this example, the word awesome is found within the string JavaScript is awesome , so the includes() method returns true It's important to note that the includes() method is case-sensitive This means that the exact match of the characters is required, including their case For example:\n```js\nlet phrase = \"JavaScript is awesome \";\nlet result = phrase includes(\"Awesome\");\nconsole log(result);  // Output: false\n```\nSince Awesome (with an uppercase A) does not match awesome (with a lowercase a), the result is false You can also use the includes() method to check for a substring starting at a specific index in the string by providing a second parameter:\n```js\nlet text = \"Hello, JavaScript world \";\nlet result = text includes(\"JavaScript\", 7);\nconsole log(result);  // true\n```\nHere, the search for the substring JavaScript starts from the 7th position in the string, ensuring it skips any characters before this position The includes() method only returns a true or false result It does not provide information on where the substring is located in the string or how many times it occurs If you need that level of detail, other methods, such as the indexOf() method might be more suitable --questions--\n--text--\nWhat does the includes() method return when a substring is found in a string --answers--\nThe index of the substring",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3855,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-search-and-slice-methods\\67326c0d7bef01c539120766.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "fe59856efe091a8bc700fd02723a2bb2",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-search-and-slice-methods\\67326c0d7bef01c539120766.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "skips any characters before this position The includes() method only returns a true or false result It does not provide information on where the substring is located in the string or how many times it occurs If you need that level of detail, other methods, such as the indexOf() method might be more suitable --questions-- --text-- What does the includes() method return when a substring is found in a string --answers-- The index of the substring--feedback--\nConsider what the method does when it detects the substring The length of the substring --feedback--\nConsider what the method does when it detects the substring true\nfalse\n--feedback--\nConsider what the method does when it detects the substring --video-solution--\n3\n--text--\nWhich of the following statements about the includes() method is correct --answers--\nIt is case-insensitive --feedback--\nThink about whether it distinguishes between uppercase and lowercase characters It is case-sensitive It replaces the found substring with another value --feedback--\nThink about whether it distinguishes between uppercase and lowercase characters It returns the number of occurrences of the substring --feedback--\nThink about whether it distinguishes between uppercase and lowercase characters --video-solution--\n2\n--text--\nWhat will the following code output js\nlet message = \"JavaScript is great \";\nlet result = message includes(\"script\");\nconsole log(result);\n--answers--\ntrue\n--feedback--\nFocus on whether includes() is case-sensitive false\nundefined\n--feedback--\nFocus on whether includes() is case-sensitive Throws an error --feedback--\nFocus on whether includes() is case-sensitive --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 3855,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-search-and-slice-methods\\67326c0d7bef01c539120766.md",
      "source_type": "git_repo"
    },
    "token_count": 318,
    "chunk_index": 1,
    "total_chunks": 2
  },
  {
    "id": "02b3bffefa76574a669f58cb67300439",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-modification-methods\\67326c29dcd98fc5ecc49779.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67326c29dcd98fc5ecc49779\ntitle: How Can You Replace Parts of a String with Another challengeType: 19\ndashedName: how-can-you-replace-parts-of-a-string-with-another\n--description--\nIn JavaScript, there are many scenarios where you may need to replace a portion of a string with another string For instance, you might need to update user information in a URL, change the formatting of dates, or correct errors in user-generated content The replace() method in JavaScript allows you to find a specified value (like a word or character) in a string and replace it with another value The method returns a new string with the replacement and leaves the original unchanged because JavaScript strings are immutable Here is the basic syntax:\njs\nstring replace(searchValue, newValue);\nsearchValue is the value you want to search for in the string It can be either a string or a regular expression (regex), which describes patterns in text This allows you to search for and manipulate strings in a flexible and powerful way You'll learn more about regular expressions in future lectures The newValue is the value that will replace the searchValue Here's a simple example:\n```js\nlet text = \"I love JavaScript \";\nlet newText = text replace(\"JavaScript\", \"coding\");\nconsole log(newText);  // Output: \"I love coding \"\n```\nIn this example, the word JavaScript is found within the string and is replaced with coding The replace() method is case-sensitive, meaning that it will only find exact matches of the searchValue For example:\n```js\nlet sentence = \"I enjoy working with JavaScript \";\nlet updatedSentence = sentence replace(\"javascript\", \"coding\");\nconsole log(updatedSentence);  // Output: \"I enjoy working with JavaScript \"\n```\nHere, since javascript (with lowercase j) does not match JavaScript (with uppercase J), the replacement is not made By default, the replace() method will only replace the first occurrence of the searchValue If the value appears multiple times in the string, only the first one will be replaced:\n```js\nlet phrase = \"Hello, world Welcome to the world of coding \";\nlet updatedPhrase = phrase replace(\"world\", \"universe\");\nconsole log(updatedPhrase);  // Output: \"Hello, universe Welcome to the world of coding \"\n```\nNotice that only the first occurrence of world is replaced with universe The replace() method in JavaScript is a powerful and flexible tool for string manipulation",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-modification-methods\\67326c29dcd98fc5ecc49779.md",
      "source_type": "git_repo"
    },
    "token_count": 496,
    "chunk_index": 0,
    "total_chunks": 3
  },
  {
    "id": "060bfbb5a965843616be3345086ce6a6",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-modification-methods\\67326c29dcd98fc5ecc49779.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "searchValue If the value appears multiple times in the string, only the first one will be replaced: ```js let phrase = \"Hello, world Welcome to the world of coding \"; let updatedPhrase = phrase replace(\"world\", \"universe\"); console log(updatedPhrase); // Output: \"Hello, universe Welcome to the world of coding \" ``` Notice that only the first occurrence of world is replaced with universe The replace() method in JavaScript is a powerful and flexible tool for string manipulationIt lets you replace specific parts of a string, whether you're dealing with individual characters, words, or complex patterns using regular expressions While it's ideal for straightforward replacements, understanding its case sensitivity and default behavior (like replacing only the first occurrence) can help you use it more effectively --questions--\n--text--\nWhat is the default behavior of the replace() method in JavaScript --answers--\nIt replaces all occurrences of the search value --feedback--\nThink about what happens when there are multiple instances of the word you are trying to replace It replaces only the first occurrence of the search value It does nothing if the search value is not found --feedback--\nThink about what happens when there are multiple instances of the word you are trying to replace It replaces every other occurrence of the search value --feedback--\nThink about what happens when there are multiple instances of the word you are trying to replace --video-solution--\n2\n--text--\nWhat will the following code output ```js\nlet phrase = \"freeCodeCamp is awesome \";\nlet updatedPhrase = phrase replace(\"freecodecamp\", \"fCC\");\nconsole log(updatedPhrase);\n```\n--answers--\n\"fcc is awesome \"\n--feedback--\nRemember that the replace() method is case-sensitive \"fCC is awesome \"\n--feedback--\nRemember that the replace() method is case-sensitive \"freeCodeCamp is awesome \"\nundefined\n--feedback--\nRemember that the replace() method is case-sensitive --video-solution--\n3\n--text--\nWhat will the following code output ```js\nlet phrase = \"Good morning, morning people \";\nlet updatedPhrase = phrase replace(\"morning\", \"evening\");\nconsole log(updatedPhrase);\n```\n--answers--\n\"Good morning, evening people \"\n--feedback--\nFocus on how the replace() method handles the first occurrence of the search value \"Good evening, morning people \"\n\"Good evening, evening people \"\n--feedback--\nFocus on how the replace() method handles the first occurrence of the search value \"Good morning, morning people",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-modification-methods\\67326c29dcd98fc5ecc49779.md",
      "source_type": "git_repo"
    },
    "token_count": 497,
    "chunk_index": 1,
    "total_chunks": 3
  },
  {
    "id": "06828a50aa9607ef25a1923e79d38cfd",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-modification-methods\\67326c29dcd98fc5ecc49779.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "3 --text-- What will the following code output ```js let phrase = \"Good morning, morning people \"; let updatedPhrase = phrase replace(\"morning\", \"evening\"); console log(updatedPhrase); ``` --answers-- \"Good morning, evening people \" --feedback-- Focus on how the replace() method handles the first occurrence of the search value \"Good evening, morning people \" \"Good evening, evening people \" --feedback-- Focus on how the replace() method handles the first occurrence of the search value \"Good morning, morning people\"\n--feedback--\nFocus on how the replace() method handles the first occurrence of the search value --video-solution--\n2",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4823,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-modification-methods\\67326c29dcd98fc5ecc49779.md",
      "source_type": "git_repo"
    },
    "token_count": 133,
    "chunk_index": 2,
    "total_chunks": 3
  },
  {
    "id": "57c90efd7e9045f78df8720f2cc2f044",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-search-and-slice-methods\\67326c15b3b2f0c5827927cc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "id: 67326c15b3b2f0c5827927cc\ntitle: How Can You Extract a Substring from a String challengeType: 19\ndashedName: how-can-you-extract-a-substring-from-a-string\n--description--\nWhen working with strings in JavaScript, you often need to extract a portion or substring from a larger string For example, you may want to extract part of a word, a specific character sequence, or just a fragment of a sentence JavaScript provides several methods for this task, one of the most commonly used being the slice() method The slice() method allows you to extract a portion of a string and returns a new string, without modifying the original string It takes two parameters: the starting index and the optional ending index Here's the basic syntax:\njs\nstring slice(startIndex, endIndex);\nstartIndex is the position where the extraction starts endIndex is where the extraction ends If not provided, slice() extracts until the end of the string Let's look at a simple example of extracting part of a string:\n```js\nlet message = \"Hello, world \";\nlet greeting = message slice(0, 5);\nconsole log(greeting);  // Output: Hello\n```\nIn this example, slice(0, 5) extracts characters starting from index 0 up to but not including index 5 As a result, the word Hello is extracted If you omit the second parameter, slice() will extract everything from the start index to the end of the string:\n```js\nlet message = \"Hello, world \";\nlet world = message slice(7);\nconsole log(world);  // Output: world ```\nHere, slice(7) extracts the string from index 7 to the end of the string, resulting in world You can also use negative numbers as indexes When you use a negative number, it counts backward from the end of the string:\n```js\nlet message = \"JavaScript is fun \";\nlet lastWord = message slice(-4);\nconsole log(lastWord);  // Output: fun ```\nIn this case, slice(-4) extracts the last four characters from the string, giving us fun Let's say you want to extract a section from the middle of a string You can provide both the starting and ending indexes to precisely control which part of the string you want:\n```js\nlet message = \"I love JavaScript \";\nlet language = message slice(7, 17);\nconsole",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4432,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-search-and-slice-methods\\67326c15b3b2f0c5827927cc.md",
      "source_type": "git_repo"
    },
    "token_count": 492,
    "chunk_index": 0,
    "total_chunks": 2
  },
  {
    "id": "598b388e5fcf4d2f1857312b15c7e300",
    "source_file": "corpus\\git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-search-and-slice-methods\\67326c15b3b2f0c5827927cc.md",
    "source_type": "git_repo",
    "title": "--description--",
    "content": "fun \"; let lastWord = message slice(-4); console log(lastWord); // Output: fun ``` In this case, slice(-4) extracts the last four characters from the string, giving us fun Let's say you want to extract a section from the middle of a string You can provide both the starting and ending indexes to precisely control which part of the string you want: ```js let message = \"I love JavaScript \"; let language = message slice(7, 17); consolelog(language);  // Output: JavaScript\n```\nHere, slice(7, 17) extracts the substring starting at index 7 and ending right before index 17, which is the word JavaScript The slice() method is a powerful tool for extracting parts of a string in JavaScript You specify the start and end indexes, and the method returns a new string that contains the extracted portion With options for positive, negative, and omitted indexes, you can adapt it to various situations without altering the original string --questions--\n--text--\nWhat will the following code output ```js\nlet text = \"JavaScript is awesome \";\nlet result = text slice(0, 9);\nconsole log(result);\n```\n--answers--\nJavaScript\n--feedback--\nThink about how slice() handles the starting and ending indexes JavaScrip\nJava\n--feedback--\nThink about how slice() handles the starting and ending indexes awesome\n--feedback--\nThink about how slice() handles the starting and ending indexes --video-solution--\n2\n--text--\nWhich of the following statements about the slice() method is correct --answers--\nIt modifies the original string --feedback--\nFocus on what happens to the original string and the returned value It returns a new string containing the extracted portion It includes the ending index in the extracted substring --feedback--\nFocus on what happens to the original string and the returned value It cannot work with negative indexes --feedback--\nFocus on what happens to the original string and the returned value --video-solution--\n2\n--text--\nWhat will the following code return ```js\nlet sentence = \"Learning JavaScript is fun \";\nlet extracted = sentence slice(9, -5);\nconsole log(extracted);\n```\n--answers--\nJavaScript is\nJavaScript\n--feedback--\nConsider how negative indexes are handled in the slice() method Learning\n--feedback--\nConsider how negative indexes are handled in the slice() method fun --feedback--\nConsider how negative indexes are handled in the slice() method --video-solution--\n1",
    "metadata": {
      "file_extension": ".md",
      "file_type": "markdown",
      "file_size": 4432,
      "relative_path": "git_repos\\freeCodeCamp\\curriculum\\challenges\\english\\25-front-end-development\\lecture-working-with-string-search-and-slice-methods\\67326c15b3b2f0c5827927cc.md",
      "source_type": "git_repo"
    },
    "token_count": 498,
    "chunk_index": 1,
    "total_chunks": 2
  }
]