#!/usr/bin/env python3
"""
Exemplo Pr√°tico de Integra√ß√£o com RAG
URL: https://web-builders-rag.onrender.com

Este exemplo demonstra como conectar uma aplica√ß√£o Python ao RAG
para buscar informa√ß√µes sobre desenvolvimento web.
"""

import requests
import json
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from datetime import datetime

@dataclass
class RAGResult:
    """Estrutura de um resultado do RAG"""
    chunk: str
    score: float
    fonte: Dict[str, Any]
    licenca: str
    rationale: Optional[str] = None

class RAGClient:
    """Cliente para integra√ß√£o com o RAG Web Builders"""
    
    def __init__(self, base_url: str = "https://web-builders-rag.onrender.com"):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': 'RAG-Client/1.0'
        })
    
    def health_check(self) -> Dict[str, Any]:
        """Verifica se o servi√ßo RAG est√° funcionando"""
        try:
            response = self.session.get(f"{self.base_url}/health", timeout=10)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro no health check: {e}")
            return {"status": "error", "message": str(e)}
    
    def search(
        self, 
        query: str, 
        top_k: int = 5,
        search_type: str = "hybrid",
        include_rationale: bool = True,
        filtros: Optional[Dict[str, Any]] = None
    ) -> Optional[Dict[str, Any]]:
        """Realiza busca no RAG"""
        
        payload = {
            "query": query,
            "top_k": top_k,
            "search_type": search_type,
            "include_rationale": include_rationale
        }
        
        if filtros:
            payload["filtros"] = filtros
        
        try:
            print(f"üîç Buscando: '{query}'...")
            response = self.session.post(
                f"{self.base_url}/search", 
                json=payload, 
                timeout=30
            )
            response.raise_for_status()
            
            data = response.json()
            print(f"‚úÖ Encontrados {data.get('total_results', 0)} resultados em {data.get('search_time_ms', 0)}ms")
            return data
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro na busca: {e}")
            return None
    
    def search_with_context(self, query: str, context: str) -> Optional[Dict[str, Any]]:
        """Busca com contexto espec√≠fico"""
        enhanced_query = f"Contexto: {context}\n\nPergunta: {query}"
        return self.search(enhanced_query, top_k=3)

def demonstrar_integracao():
    """Demonstra√ß√£o pr√°tica de como usar o RAG"""
    print("üöÄ Demonstra√ß√£o de Integra√ß√£o com RAG Web Builders")
    print("=" * 50)
    
    # Inicializar cliente
    rag = RAGClient()
    
    # 1. Verificar sa√∫de do servi√ßo
    print("\n1Ô∏è‚É£ Verificando status do servi√ßo...")
    health = rag.health_check()
    print(f"Status: {health.get('status', 'unknown')}")
    
    if health.get('status') != 'healthy':
        print("‚ö†Ô∏è Servi√ßo n√£o est√° saud√°vel. Continuando mesmo assim...")
    
    # 2. Busca simples
    print("\n2Ô∏è‚É£ Busca simples sobre React...")
    results = rag.search(
        query="Como criar componentes React com hooks",
        top_k=3
    )
    
    if results and results.get('results'):
        for i, result in enumerate(results['results'][:2], 1):
            print(f"\nüìÑ Resultado {i}:")
            print(f"   T√≠tulo: {result['fonte'].get('title', 'N/A')}")
            print(f"   Score: {result['score']:.2f}")
            print(f"   Conte√∫do: {result['chunk'][:150]}...")
            if result.get('rationale'):
                print(f"   Explica√ß√£o: {result['rationale']}")
    else:
        print("‚ùå Nenhum resultado encontrado (dados ainda sendo indexados)")
    
    # 3. Busca com filtros
    print("\n3Ô∏è‚É£ Busca com filtros espec√≠ficos...")
    results_filtered = rag.search(
        query="autentica√ß√£o e autoriza√ß√£o",
        top_k=2,
        filtros={
            "stack": "nodejs",
            "categoria": "backend"
        }
    )
    
    if results_filtered and results_filtered.get('results'):
        print(f"Encontrados {len(results_filtered['results'])} resultados filtrados")
        for result in results_filtered['results']:
            print(f"   - {result['fonte'].get('title', 'N/A')} (Score: {result['score']:.2f})")
    else:
        print("‚ùå Nenhum resultado com filtros encontrado")
    
    # 4. Busca com contexto
    print("\n4Ô∏è‚É£ Busca com contexto espec√≠fico...")
    context_results = rag.search_with_context(
        query="Como implementar autentica√ß√£o?",
        context="Estou desenvolvendo uma API REST com Node.js e Express"
    )
    
    if context_results and context_results.get('results'):
        print("‚úÖ Busca contextual realizada com sucesso")
        print(f"Query processada: {context_results.get('query_info', {}).get('processed_query', 'N/A')}")
    
    # 5. Estat√≠sticas da busca
    if results:
        stats = results.get('search_stats', {})
        print("\nüìä Estat√≠sticas da √∫ltima busca:")
        print(f"   Total de chunks pesquisados: {stats.get('total_chunks_searched', 0)}")
        print(f"   Resultados vetoriais: {stats.get('vector_results', 0)}")
        print(f"   Resultados textuais: {stats.get('text_results', 0)}")
        print(f"   Tempo de busca: {results.get('search_time_ms', 0)}ms")
        print(f"   Cache utilizado: {'Sim' if results.get('cached') else 'N√£o'}")

def exemplo_integracao_web_app():
    """Exemplo de como integrar em uma aplica√ß√£o web"""
    print("\nüåê Exemplo de Integra√ß√£o em Aplica√ß√£o Web")
    print("=" * 45)
    
    # Simula√ß√£o de uma fun√ß√£o de busca para chatbot
    def chatbot_search(user_question: str, user_context: str = "") -> str:
        rag = RAGClient()
        
        # Construir query contextual
        if user_context:
            query = f"Contexto do usu√°rio: {user_context}\n\nPergunta: {user_question}"
        else:
            query = user_question
        
        results = rag.search(query, top_k=3, include_rationale=True)
        
        if not results or not results.get('results'):
            return "Desculpe, n√£o encontrei informa√ß√µes relevantes sobre isso. O sistema ainda est√° indexando dados."
        
        # Construir resposta baseada nos resultados
        response_parts = []
        for result in results['results'][:2]:
            if result['score'] > 0.7:  # Apenas resultados relevantes
                response_parts.append(f"üìö {result['fonte'].get('title', 'Fonte')}: {result['chunk'][:200]}...")
                if result.get('rationale'):
                    response_parts.append(f"üí° {result['rationale']}")
        
        if response_parts:
            return "\n\n".join(response_parts)
        else:
            return "Encontrei algumas informa√ß√µes, mas n√£o s√£o muito relevantes para sua pergunta espec√≠fica."
    
    # Teste do chatbot
    print("\nü§ñ Testando chatbot com RAG:")
    
    perguntas = [
        "Como fazer deploy de uma aplica√ß√£o React?",
        "Qual a diferen√ßa entre useState e useEffect?",
        "Como configurar um banco de dados PostgreSQL?"
    ]
    
    for pergunta in perguntas:
        print(f"\nüë§ Usu√°rio: {pergunta}")
        resposta = chatbot_search(pergunta, "Desenvolvedor iniciante em React")
        print(f"ü§ñ Bot: {resposta[:300]}{'...' if len(resposta) > 300 else ''}")

def exemplo_cache_local():
    """Exemplo de implementa√ß√£o de cache local"""
    print("\nüíæ Exemplo com Cache Local")
    print("=" * 30)
    
    import hashlib
    import time
    
    class RAGClientWithCache(RAGClient):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            self.cache = {}
            self.cache_ttl = 300  # 5 minutos
        
        def _get_cache_key(self, query: str, **kwargs) -> str:
            cache_data = f"{query}_{json.dumps(kwargs, sort_keys=True)}"
            return hashlib.md5(cache_data.encode()).hexdigest()
        
        def search(self, query: str, **kwargs):
            cache_key = self._get_cache_key(query, **kwargs)
            now = time.time()
            
            # Verificar cache
            if cache_key in self.cache:
                cached_data, timestamp = self.cache[cache_key]
                if now - timestamp < self.cache_ttl:
                    print("üíæ Resultado do cache local")
                    return cached_data
            
            # Buscar no RAG
            result = super().search(query, **kwargs)
            
            # Salvar no cache
            if result:
                self.cache[cache_key] = (result, now)
            
            return result
    
    # Teste do cache
    rag_cached = RAGClientWithCache()
    
    print("Primeira busca (vai para o servidor):")
    start_time = time.time()
    result1 = rag_cached.search("React components best practices")
    time1 = time.time() - start_time
    print(f"Tempo: {time1:.2f}s")
    
    print("\nSegunda busca (do cache):")
    start_time = time.time()
    result2 = rag_cached.search("React components best practices")
    time2 = time.time() - start_time
    print(f"Tempo: {time2:.2f}s")
    
    print(f"\n‚ö° Acelera√ß√£o com cache: {time1/time2 if time2 > 0 else 'N/A'}x")

if __name__ == "__main__":
    try:
        demonstrar_integracao()
        exemplo_integracao_web_app()
        exemplo_cache_local()
        
        print("\n" + "=" * 50)
        print("‚úÖ Demonstra√ß√£o conclu√≠da com sucesso!")
        print("\nüìã Pr√≥ximos passos:")
        print("1. Aguarde a indexa√ß√£o completa dos dados")
        print("2. Teste com suas pr√≥prias queries")
        print("3. Implemente cache para melhor performance")
        print("4. Adicione tratamento de erros robusto")
        print("\nüîó URL do RAG: https://web-builders-rag.onrender.com")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Demonstra√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n\n‚ùå Erro durante a demonstra√ß√£o: {e}")